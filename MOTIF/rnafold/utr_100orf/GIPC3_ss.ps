%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGUGGGUGGCCGAACUUCUCCCGCCAUGGAGGGAGCAGCGGCCCGGGAGGCCCGGGGGACCGAGACCCCGCGCGCGUCUGCGCCCCCGCCCGCGCCCUCGGAGCCCCCGGCCGCGCCCCGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[86.88396454 269.59307861]
[89.54675293 250.39518738]
[89.91487122 235.39970398]
[90.28298950 220.40422058]
[90.65110779 205.40873718]
[91.01922607 190.41325378]
[91.20330048 175.41438293]
[91.20330048 160.41438293]
[88.02371979 153.65438843]
[91.39189148 145.04739380]
[91.76000977 130.05192566]
[92.12812805 115.05643463]
[86.44905853 110.15763855]
[85.87084961 125.14649200]
[73.79168701 134.03996277]
[59.30720901 130.14125061]
[53.32426071 116.38610077]
[60.34801102 103.13215637]
[75.09092712 100.36004639]
[69.41185760 95.46125031]
[54.63269424 98.02568054]
[39.85353088 100.59011078]
[25.07436562 103.15453339]
[10.29520130 105.71896362]
[3.57608795 119.70585632]
[-10.09702778 127.04244232]
[-25.46655464 124.90766144]
[-36.62259293 114.12237549]
[-39.27542114 98.83374786]
[-32.40497208 84.92057037]
[-18.65307426 77.73274231]
[-3.30761003 80.03412628]
[7.73077345 90.93979645]
[22.50993729 88.37537384]
[37.28910446 85.81094360]
[52.06826782 83.24651337]
[66.84743500 80.68208313]
[82.53865051 77.71781158]
[94.84886169 82.49454498]
[100.75473022 91.84857178]
[110.27062988 80.25341034]
[119.78652954 68.65825653]
[129.30242920 57.06309891]
[138.81832886 45.46794128]
[148.33422852 33.87278748]
[151.40567017 25.15549850]
[158.22872925 22.11358452]
[168.02632141 10.75545120]
[177.82391357 -0.60268140]
[181.10836792 -9.24196720]
[188.00401306 -12.11551857]
[198.07739258 -23.22978592]
[208.15078735 -34.34405136]
[218.08702087 -45.58110046]
[227.88461304 -56.93923187]
[237.68220520 -68.29736328]
[247.47979736 -79.65549469]
[257.27737427 -91.01362610]
[267.07498169 -102.37176514]
[276.87258911 -113.72989655]
[275.89498901 -129.27601624]
[285.99291992 -140.65521240]
[300.81982422 -141.49139404]
[310.61740112 -152.84953308]
[303.27432251 -166.08979797]
[300.90866089 -181.01545715]
[303.78686523 -195.82208252]
[311.54263306 -208.72628784]
[323.22332764 -218.18054199]
[337.40701294 -223.05880737]
[352.37554932 -222.79052734]
[366.32266235 -217.42741394]
[376.12026978 -228.78553772]
[385.91784668 -240.14367676]
[395.71545410 -251.50181580]
[394.30300903 -267.24285889]
[404.49884033 -279.31848145]
[420.25393677 -280.56442261]
[432.22106934 -270.24148560]
[433.30038452 -254.47409058]
[422.85150146 -242.61676025]
[407.07357788 -241.70422363]
[397.27597046 -230.34608459]
[387.47839355 -218.98794556]
[377.68078613 -207.62982178]
[385.03234863 -194.62059021]
[387.49404907 -179.85342407]
[384.74975586 -165.10745239]
[377.11175537 -152.16596985]
[365.48522949 -142.60072327]
[351.26116943 -137.58108521]
[336.14993286 -137.73109436]
[321.97552490 -143.05194092]
[312.17794800 -131.69380188]
[313.52636719 -116.90470886]
[303.75201416 -105.24637604]
[288.23071289 -103.93230438]
[278.43310547 -92.57417297]
[268.63552856 -81.21603394]
[258.83792114 -69.85790253]
[249.04032898 -58.49977112]
[239.24273682 -47.14163971]
[229.44514465 -35.78350449]
[227.43731689 -28.58796120]
[219.26504517 -24.27066803]
[209.19166565 -13.15640163]
[199.11828613 -2.04213476]
[189.18203735 9.19491100]
[179.38444519 20.55304337]
[169.58685303 31.91117668]
[159.92938232 43.38868713]
[150.41348267 54.98384094]
[140.89758301 66.57900238]
[131.38168335 78.17415619]
[121.86578369 89.76931000]
[112.34989166 101.36447144]
[107.12361145 115.42455292]
[106.75549316 130.42004395]
[106.38737488 145.41551208]
[106.20330048 160.41438293]
[106.20330048 175.41438293]
[109.35923004 184.10145569]
[106.01470947 190.78137207]
[105.64659119 205.77685547]
[105.27847290 220.77233887]
[104.91035461 235.76782227]
[104.54223633 250.76330566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 121]
[8 120]
[10 119]
[11 118]
[12 117]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[40 116]
[41 115]
[42 114]
[43 113]
[44 112]
[45 111]
[47 110]
[48 109]
[49 108]
[51 107]
[52 106]
[53 105]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[63 94]
[64 93]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
