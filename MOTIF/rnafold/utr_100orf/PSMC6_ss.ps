%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAUUCCCGGCAUCCCCUAUGAGAGACGGCUUCUCAUCAUGGCGGACCCUAGAGAUAAGGCGCUUCAGGACUACCGCAAGAAGUUGCUUGAACACA\
) } def
/len { sequence length } bind def

/coor [
[121.93296814 178.38264465]
[123.29598236 163.44470215]
[124.65898895 148.50675964]
[117.28922272 149.89837646]
[108.93143463 162.35418701]
[100.57365417 174.81001282]
[103.87230682 190.26622009]
[95.20562744 203.48228455]
[79.71540833 206.61734009]
[66.59171295 197.81141663]
[63.62060547 182.28890991]
[72.56478882 169.25904846]
[88.11783600 166.45222473]
[96.47561646 153.99639893]
[104.83340454 141.54058838]
[73.60322571 123.16326904]
[72.43977356 93.07602692]
[59.37232590 85.71111298]
[46.30488205 78.34620667]
[30.48371696 78.31085205]
[23.19515800 65.32138824]
[10.12771511 57.95647430]
[-2.93972874 50.59156418]
[-16.00717163 43.22665024]
[-29.07461548 35.86174011]
[-42.14205933 28.49682999]
[-55.32246017 21.33603096]
[-68.61263275 14.38107872]
[-81.90280151 7.42612553]
[-95.19297028 0.47117248]
[-110.87168121 3.87081575]
[-123.21359253 -6.37891102]
[-122.75103760 -22.41529465]
[-109.83885956 -31.93659401]
[-94.38216400 -27.63888359]
[-88.23802185 -12.81899834]
[-74.94784546 -5.86404514]
[-61.65767670 1.09090805]
[-48.36750793 8.04586124]
[-40.84923553 8.36380863]
[-34.77714920 15.42938614]
[-21.70970535 22.79429626]
[-8.64226151 30.15920830]
[4.42518234 37.52412033]
[17.49262619 44.88903046]
[30.56007004 52.25394058]
[45.44656372 51.76250839]
[53.66979599 65.27876282]
[66.73723602 72.64366913]
[79.80467987 80.00858307]
[110.17378235 66.38718414]
[141.04832458 91.99891663]
[151.23461914 80.98803711]
[161.42091370 69.97715759]
[165.11277771 54.59273148]
[179.43533325 50.50446320]
[189.62162781 39.49358368]
[199.80790710 28.48270607]
[196.65463257 13.28940487]
[203.06463623 -0.84181619]
[216.57316589 -8.47721386]
[231.98590088 -6.68082190]
[243.37634277 3.85660982]
[246.36462402 19.08322334]
[239.80169678 33.14407730]
[226.21113586 40.63248444]
[210.81878662 38.66899872]
[200.63249207 49.67987823]
[190.44621277 60.69075394]
[187.48292542 75.28761292]
[172.43177795 80.16345215]
[162.24549866 91.17433167]
[152.05920410 102.18520355]
[152.87408447 109.64080811]
[164.97273254 100.77386475]
[178.70101929 106.81822968]
[180.33047485 121.72946167]
[168.23162842 130.59614563]
[154.50387573 124.55200195]
[155.31875610 132.00759888]
[167.64309692 140.55809021]
[179.96743774 149.10856628]
[192.29176331 157.65905762]
[208.67047119 158.47778320]
[215.90896606 173.19294739]
[206.56092834 186.66685486]
[190.24279785 185.03869629]
[183.74128723 169.98338318]
[171.41694641 161.43290710]
[159.09262085 152.88241577]
[146.76828003 144.33193970]
[139.39851379 145.72354126]
[146.11482239 159.13589478]
[152.83111572 172.54826355]
[163.21398926 183.37396240]
[165.46459961 198.20416260]
[158.76103210 211.62289429]
[145.55140686 218.72964478]
[130.65988159 216.92906189]
[119.52478027 206.87870789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[17 50]
[18 49]
[19 48]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 41]
[27 39]
[28 38]
[29 37]
[30 36]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
