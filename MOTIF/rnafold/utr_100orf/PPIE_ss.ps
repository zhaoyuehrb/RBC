%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGAAGAGGACGGGUCGAGUGCUGGCUUCCGGCGGAAAAGCGCGCGAGCAAGAUGGCCACCACCAAGCGCGUCUUGUACGUGGGUGGACUGGCAGAGGAAGUGGACGACAAAGUUCUUCAUGCUGCGUUCAUUCCUUUUGGAGACAUCACAG\
) } def
/len { sequence length } bind def

/coor [
[87.36365509 221.49412537]
[95.74702454 207.39974976]
[95.44689178 192.40275574]
[95.14675903 177.40576172]
[94.84662628 162.40876770]
[80.97412109 156.70320129]
[70.20953369 167.14942932]
[59.44495773 177.59565735]
[48.68037415 188.04190063]
[37.91579437 198.48812866]
[27.36238480 209.14765930]
[17.02437210 220.01622009]
[13.11950111 235.34796143]
[-1.25836337 239.23721313]
[-11.59637547 250.10577393]
[-9.66461277 265.62356567]
[-18.20280647 278.72445679]
[-33.17948532 283.22259521]
[-47.52311325 276.99407959]
[-54.46107483 262.97985840]
[-50.71747208 247.79698181]
[-38.05992126 238.61436462]
[-22.46493149 239.76776123]
[-12.12691879 228.89920044]
[-8.96149158 214.34484863]
[6.15581656 209.67820740]
[16.49382973 198.80964661]
[17.26634789 194.04499817]
[21.07585144 189.73312378]
[27.46956062 187.72354126]
[38.23414230 177.27731323]
[48.99872208 166.83108521]
[59.76330185 156.38484192]
[70.52788544 145.93861389]
[63.76144028 124.31109619]
[67.84075165 105.89927673]
[52.85951996 105.14920807]
[41.30897903 115.93625641]
[25.51698685 115.31290436]
[14.85265541 103.64895630]
[15.64294052 87.86444092]
[27.41898155 77.32402039]
[43.19426346 78.28115082]
[53.60958862 90.16796875]
[68.59082031 90.91803741]
[72.47843933 82.34831238]
[78.64583588 75.24079132]
[71.71591187 61.93755722]
[64.78598785 48.63431931]
[57.85605621 35.33108521]
[44.61837006 26.66654778]
[45.60050964 11.80435848]
[38.67058182 -1.49887896]
[31.74065590 -14.80211639]
[24.81072807 -28.10535240]
[17.88080215 -41.40858841]
[10.95087528 -54.71182632]
[4.02094841 -68.01506805]
[-2.90897846 -81.31829834]
[-9.97165585 -94.55153656]
[-17.16637802 -107.71345520]
[-32.56187820 -108.70443726]
[-44.96405792 -117.87992096]
[-50.41542053 -132.31204224]
[-47.17646027 -147.39556885]
[-36.28071213 -158.31739807]
[-21.20497704 -161.59240723]
[-6.75986147 -156.17556763]
[2.44524789 -143.79536438]
[3.47303534 -128.40226746]
[-4.00446272 -114.90817261]
[3.19025826 -101.74626160]
[9.19167519 -97.36095428]
[10.39425850 -88.24822998]
[17.32418442 -74.94499207]
[24.25411224 -61.64175415]
[31.18403816 -48.33851624]
[38.11396408 -35.03527832]
[45.04389191 -21.73204231]
[51.97381973 -8.42880535]
[58.90374374 4.87443161]
[71.64575958 12.58743095]
[71.15929413 28.40115738]
[78.08921814 41.70439529]
[85.01914978 55.00762939]
[91.94907379 68.31086731]
[131.39854431 69.69499207]
[152.38989258 115.30556488]
[166.99449158 111.88419342]
[181.59909058 108.46282959]
[196.20368958 105.04146576]
[210.80828857 101.62009430]
[225.41288757 98.19873047]
[239.98251343 94.63141632]
[254.51573181 90.91851807]
[269.04895020 87.20561218]
[283.58215332 83.49271393]
[298.11538696 79.77980804]
[312.61071777 75.92169189]
[327.06674194 71.91873932]
[341.52276611 67.91578674]
[355.97875977 63.91283417]
[370.43478394 59.90988159]
[384.89080811 55.90693283]
[398.29614258 40.90102768]
[416.79510498 46.41613770]
[431.07937622 41.83801270]
[439.66891479 28.28812027]
[455.63305664 26.69878197]
[466.72546387 38.28919983]
[464.43701172 54.16819382]
[450.52319336 62.15476608]
[435.65750122 56.12229538]
[421.37322998 60.70042038]
[417.49954224 70.22975159]
[408.82141113 76.15295410]
[398.09521484 76.29412842]
[388.89373779 70.36294556]
[374.43774414 74.36589813]
[359.98171997 78.36885071]
[345.52569580 82.37180328]
[331.06970215 86.37475586]
[316.61367798 90.37770081]
[310.97509766 95.22067261]
[301.82827759 94.31302643]
[287.29507446 98.02592468]
[272.76184082 101.73883057]
[258.22863770 105.45172882]
[243.69541931 109.16463470]
[237.96107483 113.89381409]
[228.83424377 112.80332947]
[214.22966003 116.22469330]
[199.62506104 119.64605713]
[185.02046204 123.06742859]
[170.41586304 126.48879242]
[155.81126404 129.91015625]
[150.52458191 143.94764709]
[159.24395752 156.15307617]
[167.96331787 168.35852051]
[183.10671997 174.65213013]
[184.95939636 190.94628906]
[171.61549377 200.47895813]
[156.80204773 193.44375610]
[155.75788879 177.07788086]
[147.03851318 164.87245178]
[138.31915283 152.66700745]
[131.20027161 155.02742004]
[135.92085266 169.26525879]
[121.68294525 173.98562622]
[116.96250153 159.74822998]
[109.84362030 162.10862732]
[110.14375305 177.10563660]
[110.44388580 192.10263062]
[110.74401855 207.09962463]
[119.68458557 220.84729004]
[112.00888824 235.33920288]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[11 27]
[12 26]
[14 24]
[15 23]
[36 45]
[37 44]
[47 86]
[48 85]
[49 84]
[50 83]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 72]
[61 71]
[88 136]
[89 135]
[90 134]
[91 133]
[92 132]
[93 131]
[94 129]
[95 128]
[96 127]
[97 126]
[98 125]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 118]
[106 114]
[107 113]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
