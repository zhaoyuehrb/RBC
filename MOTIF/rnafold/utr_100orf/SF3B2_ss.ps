%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:50:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCUUCCGGGUUGGUCGCGCGCCUUCCUGCGGCUAAGAUGGCGACGGAGCAUCCCGAGCCUCCCAAAGCAGAAUUGCAGCUGCCGCCGCCGCCACCUCCAGGCCACUAUGGCGCCUGGGCUGCCCAGGAGCUUCAGG\
) } def
/len { sequence length } bind def

/coor [
[106.98527527 492.02722168]
[106.98527527 477.02722168]
[96.07381439 461.12121582]
[106.20656586 443.75622559]
[105.53836060 428.77111816]
[104.87015533 413.78601074]
[104.20195770 398.80090332]
[103.53375244 383.81579590]
[102.86554718 368.83068848]
[94.56896973 356.46072388]
[101.68383789 342.32955933]
[101.01563263 327.34445190]
[100.34742737 312.35934448]
[99.67922974 297.37423706]
[96.21088409 290.77893066]
[99.16683197 282.04858398]
[98.83264923 267.05230713]
[98.49846649 252.05604553]
[98.16428375 237.05976868]
[85.53630829 226.00775146]
[84.75437927 208.90760803]
[96.78494263 196.26116943]
[96.11673737 181.27606201]
[95.44853210 166.29095459]
[94.78033447 151.30584717]
[94.11212921 136.32073975]
[80.44937897 131.17108154]
[69.86521912 121.11297607]
[64.02631378 107.73025513]
[63.85211182 93.13027191]
[69.37004089 79.61205292]
[79.71120453 69.30427551]
[74.16448212 55.36749268]
[68.61776733 41.43070984]
[63.07104492 27.49392700]
[57.52432632 13.55714417]
[43.05548859 13.55639839]
[29.50080299 5.15589094]
[21.69720268 -10.42829132]
[23.30653763 -29.27376747]
[12.52418327 -39.70165253]
[4.10784531 -43.45953369]
[1.62103403 -50.48400879]
[-8.92632294 -61.14952850]
[-19.47367859 -71.81504059]
[-32.39557266 -72.68155670]
[-40.96399689 -81.84995270]
[-40.95484161 -93.99705505]
[-51.26196289 -104.89490509]
[-61.56908417 -115.79276276]
[-77.37223816 -115.98227692]
[-88.35280609 -127.34901428]
[-87.99622345 -143.14927673]
[-76.51403046 -154.00906372]
[-60.71842194 -153.48544312]
[-49.98064041 -141.88908386]
[-50.67123032 -126.09988403]
[-40.36410904 -115.20203400]
[-30.05698586 -104.30417633]
[-13.01806641 -100.25041199]
[-8.80816174 -82.36240387]
[1.73919523 -71.69688416]
[12.28655148 -61.03136444]
[22.95207024 -50.48400879]
[33.73442459 -40.05612183]
[41.04903030 -41.71339035]
[33.37620544 -54.60244751]
[43.26353455 -65.88255310]
[57.04682922 -59.96471405]
[55.67824173 -45.02792740]
[62.99284744 -46.68519592]
[68.22769165 -60.74209213]
[73.46253967 -74.79898834]
[78.69738770 -88.85588837]
[70.00424957 -101.70925903]
[70.56002808 -117.21637726]
[80.15100098 -129.41444397]
[95.08924866 -133.61305237]
[109.63071442 -128.19775391]
[118.18389893 -115.25083923]
[117.45993805 -99.75066376]
[107.73719788 -87.65735626]
[92.75428009 -83.62104797]
[87.51943970 -69.56414795]
[82.28459167 -55.50724792]
[77.04975128 -41.45034790]
[86.55052185 -12.54109859]
[71.46111298 8.01042557]
[77.00782776 21.94720840]
[82.55455017 35.88399124]
[88.10126495 49.82077408]
[93.64798737 63.75755692]
[116.59486389 67.15988159]
[132.94558716 83.61553192]
[147.45588684 79.81401062]
[161.96617126 76.01249695]
[168.48973083 61.80062866]
[182.64434814 55.15373993]
[197.74661255 59.21027756]
[206.66571045 72.05487061]
[205.19032288 87.62270355]
[194.01707458 98.56310272]
[178.42163086 99.71036530]
[165.76768494 90.52278137]
[151.25740051 94.32430267]
[136.74711609 98.12582397]
[136.40858459 105.31770325]
[134.67601013 112.30597687]
[131.61573792 118.82307434]
[127.34493256 124.61945343]
[122.02712250 129.47319031]
[115.86592865 133.19842529]
[109.09723663 135.65252686]
[109.76544189 150.63764954]
[110.43364716 165.62275696]
[111.10184479 180.60786438]
[111.77005005 195.59297180]
[122.72291565 203.51463318]
[127.02591705 216.12280273]
[123.31166840 228.71351624]
[113.16056061 236.72558594]
[113.49474335 251.72186279]
[113.82892609 266.71813965]
[114.16310883 281.71441650]
[114.66433716 296.70602417]
[115.33254242 311.69113159]
[116.00074005 326.67623901]
[116.66894531 341.66137695]
[125.01332092 355.10314941]
[117.85066223 368.16247559]
[118.51885986 383.14758301]
[119.18706512 398.13269043]
[119.85527039 413.11779785]
[120.52346802 428.10290527]
[121.19167328 443.08801270]
[129.70227051 450.02343750]
[132.88151550 460.30096436]
[129.89813232 470.40725708]
[121.98527527 477.02722168]
[121.98527527 492.02722168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 140]
[2 139]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[11 128]
[12 127]
[13 126]
[14 125]
[16 124]
[17 123]
[18 122]
[19 121]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[48 59]
[49 58]
[50 57]
[71 86]
[72 85]
[73 84]
[74 83]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
