%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAAUAUAACCAGGAAAGGAAGCAGAGACCUGGUGGUUGACAGUGCCAAGUCCCUGGAAGAUGGCCCAUCUGCAGCACUUCACUCGAAACUCUAUG\
) } def
/len { sequence length } bind def

/coor [
[101.89431000 197.99414062]
[101.42781067 183.00140381]
[100.96131134 168.00865173]
[100.49481201 153.01591492]
[100.02832031 138.02316284]
[99.56182098 123.03041840]
[97.41743469 137.87635803]
[85.87143707 147.45182800]
[70.88504791 146.81303406]
[60.19577026 136.28974915]
[59.32250595 121.31519318]
[68.71612549 109.62075043]
[83.52867889 107.24472046]
[68.53049469 107.01143646]
[53.53230667 106.77816010]
[38.53412247 106.54488373]
[23.53593636 106.31160736]
[8.53775024 106.07833099]
[2.53503442 120.04385376]
[-8.35861397 130.64559937]
[-22.48199081 136.26686096]
[-37.68138504 136.05044556]
[-51.63899994 130.02937317]
[-62.22640228 119.12178802]
[-67.82908630 104.99102783]
[-67.59268188 89.79193115]
[-61.55324554 75.84224701]
[-50.63174057 65.26920319]
[-36.49362183 59.68511581]
[-21.29485130 59.94150925]
[-7.35312510 65.99929047]
[3.20554113 76.93469238]
[8.77102757 91.08014679]
[23.76921463 91.31342316]
[38.76739883 91.54669952]
[53.76558685 91.77997589]
[68.76377106 92.01325226]
[83.76195526 92.24652863]
[97.81249237 86.99463654]
[108.98045349 76.98081207]
[114.08978271 62.00732422]
[128.73095703 59.27140427]
[139.89891052 49.25758362]
[151.06687927 39.24376297]
[155.46931458 31.03332710]
[162.74139404 29.09880638]
[174.21537781 19.43714905]
[185.68936157 9.77549362]
[197.16334534 0.11383723]
[208.63734436 -9.54781914]
[208.96369934 -20.64283562]
[215.29718018 -29.48692894]
[225.28057861 -33.21332550]
[235.42846680 -30.78504372]
[247.48091125 -39.71467590]
[247.46862793 -55.11941528]
[256.42480469 -67.43364716]
[270.74533081 -72.05821228]
[284.87390137 -67.41903687]
[296.92633057 -76.34866333]
[308.97879028 -85.27829742]
[308.69934082 -100.79286194]
[317.62005615 -113.48933411]
[332.31076050 -118.48566437]
[347.12252808 -113.86066437]
[356.35998535 -101.39274597]
[356.47113037 -85.87606812]
[347.41320801 -73.27711487]
[332.66915894 -68.44043732]
[317.90841675 -73.22584534]
[305.85598755 -64.29621124]
[293.80352783 -55.36658096]
[294.12716675 -40.49939346]
[285.53271484 -28.14629555]
[271.14404297 -23.16437912]
[256.41055298 -27.66222191]
[244.35809326 -18.73258972]
[238.18890381 -0.51847762]
[218.29899597 1.92616904]
[206.82501221 11.58782482]
[195.35101318 21.24948120]
[183.87702942 30.91113663]
[172.40304565 40.57279205]
[161.08070374 50.41172409]
[149.91273499 60.42554474]
[138.74478149 70.43936920]
[134.43426514 84.69660187]
[118.99427795 88.14877319]
[107.82631683 98.16259766]
[111.80010223 100.17826843]
[115.03744507 104.01332092]
[116.89957428 109.37569427]
[116.85867310 115.77537537]
[114.55456543 122.56392670]
[115.02106476 137.55667114]
[115.48755646 152.54940796]
[115.95405579 167.54216003]
[116.42055511 182.53489685]
[116.88705444 197.52764893]
[119.67574310 216.70765686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[39 89]
[40 88]
[42 86]
[43 85]
[44 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[54 77]
[55 76]
[59 72]
[60 71]
[61 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
