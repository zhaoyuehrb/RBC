%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGGCUGCCUGACUGGAAUGAGGGUAGCUGCGGCGACUGCGGCGGCUGGAGCGGGGCCGGCCAUGGCGGUGUGGACGCGGGCCACCAAAGCGGGGCUGGUGGAGCUGCUCCUGAGGG\
) } def
/len { sequence length } bind def

/coor [
[-126.39229584 278.65631104]
[-138.90476990 286.92904663]
[-151.41723633 295.20181274]
[-163.92970276 303.47454834]
[-171.17405701 317.53973389]
[-186.05793762 318.10485840]
[-198.57040405 326.37759399]
[-211.08287048 334.65032959]
[-223.59533691 342.92306519]
[-236.10780334 351.19580078]
[-248.62026978 359.46853638]
[-261.13275146 367.74127197]
[-273.64520264 376.01400757]
[-272.04067993 391.23519897]
[-277.70434570 405.45425415]
[-289.33474731 415.40371704]
[-304.25930786 418.79733276]
[-319.04843140 414.85525513]
[-330.30374146 404.48333740]
[-335.43878174 390.06494141]
[-333.27362061 374.91336060]
[-324.30578613 362.51028442]
[-310.59597778 355.70584106]
[-295.29467773 356.06369019]
[-281.91793823 363.50155640]
[-269.40548706 355.22882080]
[-256.89300537 346.95608521]
[-244.38053894 338.68334961]
[-231.86807251 330.41058350]
[-219.35562134 322.13784790]
[-206.84315491 313.86511230]
[-194.33068848 305.59237671]
[-187.98129272 292.11889648]
[-172.20243835 290.96206665]
[-159.68997192 282.68933105]
[-147.17750549 274.41659546]
[-134.66503906 266.14385986]
[-138.50535583 249.35888672]
[-135.67749023 232.33876038]
[-126.57917023 217.63833618]
[-112.55136108 207.47441101]
[-95.68068695 203.39144897]
[-78.48906708 206.02696228]
[-63.55670929 215.01210022]
[-51.72589874 205.79083252]
[-39.89508820 196.56954956]
[-28.06427956 187.34828186]
[-16.23346901 178.12699890]
[-4.40265894 168.90571594]
[7.42815065 159.68444824]
[7.22409725 146.73072815]
[14.66016865 135.88430786]
[27.18281937 131.26924133]
[40.25633621 134.79780579]
[52.32254791 125.88677216]
[57.96405792 112.10190582]
[73.66160583 110.12764740]
[85.72781372 101.21661377]
[91.49059296 88.47761536]
[105.36115265 86.71717834]
[117.42736816 77.80614471]
[123.93193054 63.38389587]
[138.76641846 62.04701233]
[150.83262634 53.13598251]
[153.31616211 37.75840378]
[165.67996216 28.89323807]
[180.32481384 31.35567093]
[192.39103699 22.44463730]
[204.45724487 13.53360462]
[210.96180725 -0.88864172]
[225.79629517 -2.22552323]
[237.86251831 -11.13655567]
[249.92872620 -20.04758835]
[256.43328857 -34.46983719]
[271.26779175 -35.80671692]
[283.33398438 -44.71775055]
[289.38766479 -59.95865250]
[305.65051270 -62.06842804]
[315.39276123 -48.87672424]
[308.59237671 -33.95402908]
[292.24502563 -32.65153503]
[280.17880249 -23.74050331]
[274.53729248 -9.95563412]
[258.83975220 -7.98137569]
[246.77354431 0.92965692]
[234.70733643 9.84068966]
[229.06582642 23.62555885]
[213.36827087 25.59981728]
[201.30206299 34.51084900]
[189.23585510 43.42188263]
[187.28134155 58.14314270]
[175.17141724 67.35208130]
[159.74366760 65.20219421]
[147.67744446 74.11322784]
[142.03593445 87.89809418]
[126.33839417 89.87235260]
[114.27218628 98.78338623]
[108.50940704 111.52238464]
[94.63884735 113.28282166]
[82.57263184 122.19385529]
[76.06806946 136.61610413]
[61.23358154 137.95298767]
[49.16736984 146.86401367]
[46.92380905 164.15438843]
[33.17584991 174.32174683]
[16.64942741 171.51525879]
[4.81861734 180.73652649]
[-7.01219273 189.95780945]
[-18.84300232 199.17909241]
[-30.67381287 208.40036011]
[-42.50462341 217.62164307]
[-54.33543396 226.84291077]
[-49.94900894 239.01339722]
[-49.20468140 251.91072083]
[-52.15363312 264.46987915]
[-58.54249954 275.65670776]
[-67.83509827 284.55310059]
[-79.25742340 290.43225098]
[-91.86211395 292.81808472]
[-104.60700989 291.52380371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[44 112]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[54 103]
[55 102]
[57 100]
[58 99]
[60 97]
[61 96]
[63 94]
[64 93]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
