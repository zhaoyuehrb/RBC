%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAGAGGAGGAAGUCCAGAGACAGAGCACCAUGACUUCUGAGAAAGGUCCUUCAACCGGUGACCCCACUCUGAGGAGAAGAAUCGAACCCUGGGAGUUUGACGUCUUCUAUGACCCCAGAGAACUUCGUA\
) } def
/len { sequence length } bind def

/coor [
[86.14267731 147.87141418]
[78.25118256 144.84068298]
[70.98545074 140.51979065]
[64.55451965 135.03306580]
[59.14343262 128.53836060]
[54.90786743 121.22256470]
[51.96969604 113.29614258]
[37.07577515 115.07692719]
[22.18185806 116.85771942]
[7.28794003 118.63850403]
[-7.60597849 120.41928864]
[-22.49989700 122.20007324]
[-33.53775406 137.50320435]
[-51.92899323 139.93856812]
[-66.07783508 128.43516541]
[-80.87014771 130.92262268]
[-95.63182068 133.58592224]
[-110.36074829 136.42468262]
[-125.08967590 139.26345825]
[-139.81860352 142.10221863]
[-154.54754639 144.94099426]
[-168.11900330 157.31980896]
[-184.46726990 151.05543518]
[-199.12446594 154.24392700]
[-205.24476624 168.50300598]
[-218.59466553 176.41249084]
[-234.04086304 174.93099976]
[-245.64396667 164.62820435]
[-248.94235229 149.46574402]
[-242.66773987 135.27388000]
[-229.23281860 127.50969696]
[-213.80360413 129.15866089]
[-202.31295776 139.58671570]
[-187.65574646 136.39823914]
[-180.80580139 126.35420990]
[-168.54719543 123.62106323]
[-157.38630676 130.21206665]
[-142.65737915 127.37329102]
[-127.92844391 124.53452301]
[-113.19951630 121.69575500]
[-98.47058868 118.85698700]
[-92.43936920 114.45931244]
[-83.35759735 116.13030243]
[-68.56528473 113.64285278]
[-64.06046295 103.03754425]
[-54.87340927 95.88524628]
[-43.24903488 94.08205414]
[-32.10083008 98.19843292]
[-24.28068161 107.30615234]
[-9.38676453 105.52536774]
[5.50715399 103.74458313]
[20.40107155 101.96379852]
[35.29499054 100.18301392]
[50.18890762 98.40222931]
[52.11849213 86.17759705]
[57.00083542 74.80536652]
[64.53485107 64.98684692]
[74.25593567 57.32751465]
[85.56461334 52.29971313]
[83.42988586 37.45239258]
[71.50012970 26.72576714]
[72.59226227 10.71993065]
[85.86849213 1.71319151]
[101.14443207 6.61474895]
[106.70168304 21.66454887]
[98.27720642 35.31766891]
[100.41193390 50.16499329]
[129.38916016 59.75108719]
[147.34324646 84.43354034]
[162.13555908 81.94609070]
[176.92787170 79.45864105]
[191.72019958 76.97119141]
[206.51251221 74.48374176]
[218.83853149 64.56508636]
[232.67266846 70.08469391]
[247.46498108 67.59724426]
[262.12219238 64.40876770]
[276.61105347 60.52648163]
[291.09994507 56.64419556]
[305.58883667 52.76190948]
[320.07772827 48.87962341]
[334.56661987 44.99733734]
[347.22039795 31.68188095]
[363.97390747 36.76401901]
[378.36630249 32.53803253]
[392.75869751 28.31204224]
[407.15109253 24.08605385]
[421.54348755 19.86006546]
[435.93588257 15.63407707]
[442.03930664 1.23677313]
[455.99261475 -5.82291508]
[471.20748901 -2.21161771]
[480.49993896 10.36552048]
[479.48236084 25.96995926]
[468.63519287 37.23376083]
[453.08016968 38.83850098]
[440.16186523 30.02647209]
[425.76947021 34.25246048]
[411.37707520 38.47844696]
[396.98468018 42.70443726]
[382.59228516 46.93042374]
[368.19989014 51.15641403]
[362.08395386 61.66352463]
[350.05154419 65.26422119]
[338.44891357 59.48622513]
[323.96002197 63.36851120]
[309.47113037 67.25079346]
[294.98223877 71.13307953]
[280.49334717 75.01536560]
[266.00445557 78.89765167]
[264.48626709 81.36416626]
[261.85186768 83.34652710]
[258.29257202 84.39800262]
[254.16429138 84.15411377]
[249.95242310 82.38955688]
[235.16011047 84.87700653]
[223.89213562 94.61774445]
[208.99995422 89.27605438]
[194.20764160 91.76350403]
[179.41532898 94.25095367]
[164.62301636 96.73840332]
[149.83070374 99.22585297]
[149.24467468 107.65898132]
[147.24177551 115.87173462]
[143.87963867 123.62783051]
[139.25500488 130.70411682]
[133.50091553 136.89697266]
[126.78294373 142.02822876]
[119.29437256 145.95024109]
[111.25065613 148.55018616]
[102.88323975 149.75323486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[15 44]
[16 43]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 34]
[24 33]
[59 67]
[60 66]
[69 122]
[70 121]
[71 120]
[72 119]
[73 118]
[75 116]
[76 115]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
