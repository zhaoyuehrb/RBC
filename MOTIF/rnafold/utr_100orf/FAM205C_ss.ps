%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:27:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGUUCUAAGACAGUGAAAGACUAGGGAGAGGGAUGGCUAGUGAGGUUUAGAUCAUGUUGAGCCCUACCUUUGUUUUGUGGGAUGUUGGAUAUCCCUUAUACACCUAUGGAUCCAUCUGCAUUAUUGCAUUAAUUAUUUGGCAAGUGAAAAAGA\
) } def
/len { sequence length } bind def

/coor [
[174.33967590 238.08836365]
[189.29377747 236.91589355]
[204.18374634 238.72944641]
[218.42080688 243.45785522]
[208.30232239 232.38462830]
[194.00515747 228.20846558]
[190.40783691 212.80165100]
[180.28936768 201.72842407]
[170.17088318 190.65519714]
[160.05241394 179.58197021]
[149.82365417 168.61051941]
[139.48564148 157.74195862]
[135.93341064 157.30615234]
[132.42453003 155.09350586]
[129.80778503 151.14781189]
[128.87782288 145.89738464]
[119.21047974 134.42817688]
[109.54314423 122.95897675]
[85.14524841 119.93796539]
[75.27043915 97.42414856]
[61.51486969 91.44215393]
[47.75930023 85.46015167]
[34.00373077 79.47814941]
[20.24816322 73.49614716]
[4.50724697 75.08803558]
[-4.07850838 62.91700363]
[-17.83407784 56.93500137]
[-31.58964539 50.95300293]
[-45.34521484 44.97100067]
[-57.64725494 48.96686172]
[-69.00066376 43.65838242]
[-73.52210236 32.40085220]
[-87.15522766 26.14481544]
[-100.78834534 19.88878059]
[-114.42147064 13.63274479]
[-124.59889984 23.63739777]
[-137.55670166 29.54636192]
[-151.72410583 30.66584396]
[-165.39146423 26.88127136]
[-176.91642761 18.66864395]
[-184.92135620 7.03477097]
[-188.45802307 -6.60612059]
[-187.11982727 -20.60429573]
[-200.62504578 -27.13186073]
[-214.13026428 -33.65942764]
[-227.63548279 -40.18699265]
[-241.24609375 -32.73507309]
[-256.63311768 -34.73984528]
[-267.87994385 -45.43043518]
[-270.66192627 -60.69608688]
[-263.90933228 -74.66685486]
[-250.21868896 -81.97068787]
[-234.85432434 -79.79911041]
[-223.72413635 -68.98714447]
[-221.10791016 -53.69221115]
[-207.60270691 -47.16464233]
[-194.09748840 -40.63707733]
[-180.59226990 -34.10951233]
[-168.94778442 -44.82014847]
[-154.05244446 -50.26612854]
[-138.16871643 -49.58887863]
[-123.72126770 -42.86228561]
[-112.92679596 -31.08592415]
[-107.45394897 -16.03661346]
[-108.16543579 -0.00037762]
[-94.53231049 6.25565815]
[-80.89919281 12.51169395]
[-67.26606750 18.76772881]
[-49.93458176 16.16968536]
[-39.36321259 31.21543312]
[-25.60764503 37.19743347]
[-11.85207653 43.17943573]
[1.90349221 49.16143417]
[16.66051865 47.14167404]
[26.23016357 59.74058151]
[39.98573303 65.72257996]
[53.74130249 71.70458221]
[67.49687195 77.68658447]
[81.25244141 83.66858673]
[87.68531799 78.40058136]
[95.49538422 75.54811859]
[103.80921173 75.43017578]
[110.47157288 61.99094391]
[117.13392639 48.55171204]
[123.79628754 35.11248016]
[130.45864868 21.67324638]
[137.12100220 8.23401260]
[143.78335571 -5.20522118]
[145.40121460 -22.08179855]
[162.06611633 -25.19907379]
[169.67486572 -10.04839230]
[157.22259521 1.45713615]
[150.56024170 14.89636993]
[143.89787292 28.33560371]
[137.23551941 41.77483749]
[130.57316589 55.21406937]
[123.91080475 68.65330505]
[117.24845123 82.09253693]
[120.85005188 86.45520020]
[123.37221527 91.51908875]
[124.68437195 97.02204895]
[124.71858215 102.67918396]
[123.47307587 108.19761658]
[121.01234436 113.29164124]
[130.67968750 124.76084137]
[140.34701538 136.23004150]
[150.35420227 147.40396118]
[160.69221497 158.27250671]
[168.92286682 162.36450195]
[171.12564087 169.46348572]
[181.24412537 180.53671265]
[191.36259460 191.60995483]
[201.48106384 202.68318176]
[216.50198364 207.65136719]
[219.37556458 222.26614380]
[229.49403381 233.33938599]
[233.76873779 233.94706726]
[237.42741394 235.68527222]
[240.20184326 238.25918579]
[241.93818665 241.32077026]
[256.22247314 245.89889526]
[270.50674438 250.47702026]
[284.79104614 255.05514526]
[300.69470215 251.05448914]
[311.91543579 263.01391602]
[306.91027832 278.63058472]
[290.82812500 281.83941650]
[280.21292114 269.33944702]
[265.92861938 264.76129150]
[251.64434814 260.18316650]
[237.36006165 255.60505676]
[247.59437561 266.57131958]
[255.45310974 279.34786987]
[260.62469482 293.42816162]
[262.90408325 308.25396729]
[262.20092773 323.23745728]
[258.54306030 337.78463745]
[252.07556152 351.31872559]
[243.05479431 363.30313110]
[231.83843994 373.26269531]
[218.87118530 380.80261230]
[204.66712952 385.62390137]
[189.78942871 387.53540039]
[174.82792664 386.46136475]
[160.37580872 382.44436646]
[147.00605774 375.64367676]
[135.24873352 366.32885742]
[125.56998444 354.86929321]
[118.35353851 341.71926880]
[113.88551331 327.40017700]
[112.34304047 312.47970581]
[113.78728485 297.54937744]
[118.16097260 283.20117188]
[125.29071808 270.00396729]
[134.89382935 258.48092651]
[146.58959961 249.08895874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 116]
[5 115]
[7 113]
[8 112]
[9 111]
[10 110]
[11 108]
[12 107]
[16 106]
[17 105]
[18 104]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[26 73]
[27 72]
[28 71]
[29 70]
[32 68]
[33 67]
[34 66]
[35 65]
[43 58]
[44 57]
[45 56]
[46 55]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
