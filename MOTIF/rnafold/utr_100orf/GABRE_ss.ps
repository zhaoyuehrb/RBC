%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAGCGUGAGCCGCGACCUCCGCGCAGGUGGUCGCGCCGGUCUCCGCGGAAAUGUUGUCCAAAGUUCUUCCAGUCCUCCUAGGCAUCUUAUUGAUCCUCCAGUCGAGGGUCGAGGGACCUCAGACUGAAUCAAAGAAUGAAGCCUCUUCCC\
) } def
/len { sequence length } bind def

/coor [
[90.86869812 143.11262512]
[82.32287598 140.69224548]
[74.38072205 136.58453369]
[67.37395477 130.93428040]
[61.60053253 123.95115662]
[57.31198502 115.90206146]
[54.70252609 107.10089111]
[40.97881317 113.15561676]
[27.25509834 119.21034241]
[20.61909103 125.57466125]
[13.19135094 125.24556732]
[-0.65225470 131.02091980]
[-14.49586010 136.79624939]
[-28.28022766 142.71159363]
[-42.00394058 148.76631165]
[-55.53726196 155.23541260]
[-68.86768341 162.11291504]
[-82.19810486 168.99040222]
[-95.52851868 175.86788940]
[-108.85894012 182.74537659]
[-122.18936157 189.62287903]
[-130.90596008 202.82633972]
[-145.76416016 201.78569031]
[-159.09458923 208.66319275]
[-165.32487488 223.44706726]
[-180.80630493 227.65475464]
[-193.66285706 218.05847168]
[-194.03208923 202.01966858]
[-181.63073730 191.84193420]
[-165.97207642 195.33276367]
[-152.64164734 188.45527649]
[-144.87854004 175.74372864]
[-129.06684875 176.29244995]
[-115.73643494 169.41496277]
[-102.40601349 162.53747559]
[-89.07559204 155.65997314]
[-75.74517059 148.78248596]
[-62.41475296 141.90499878]
[-61.00088882 138.61433411]
[-57.89055252 135.86402893]
[-53.36448669 134.45870972]
[-48.05866623 135.04260254]
[-34.33495331 128.98788452]
[-29.45600891 123.37757111]
[-20.27120399 122.95265198]
[-6.42759800 117.17730713]
[7.41600752 111.40196228]
[21.20037460 105.48662567]
[34.92408752 99.43190002]
[48.64780045 93.37717438]
[52.70111465 78.93520355]
[44.13209152 66.62374878]
[35.56306839 54.31229782]
[26.99404716 42.00084686]
[10.10804844 41.90037155]
[-3.27117109 31.87187386]
[-8.00989246 16.00993919]
[-2.43693495 0.59774166]
[-11.25371361 -11.53751278]
[-26.81054688 -15.45726776]
[-33.31403351 -30.12301826]
[-25.77525139 -44.28445816]
[-9.97731113 -47.07814026]
[1.96095932 -36.36099243]
[0.88154131 -20.35429192]
[9.69832039 -8.21903706]
[23.02437973 -9.45417500]
[35.31295395 -3.88510180]
[43.29639816 7.12517071]
[44.79373169 20.75164413]
[39.30550003 33.43182373]
[47.87452316 45.74327469]
[56.44354630 58.05472565]
[65.01256561 70.36618042]
[72.74741364 63.64575195]
[81.70520782 58.86567688]
[91.41419220 56.23062515]
[101.37332153 55.83353806]
[111.07811737 57.65296173]
[120.04621887 61.55621338]
[127.84135437 67.30810547]
[134.09454346 74.58477020]
[138.52146912 82.99163055]
[140.93530273 92.08475494]
[155.93452454 91.93274689]
[170.93376160 91.78073883]
[185.93298340 91.62872314]
[199.65403748 83.75196838]
[212.45907593 91.35989380]
[227.45829773 91.20788574]
[242.45521545 90.90388489]
[257.44827271 90.44791412]
[272.84259033 80.39331055]
[287.97637939 89.22830963]
[302.95712280 88.46857452]
[317.93786621 87.70883179]
[332.91860962 86.94909668]
[347.89935303 86.18936157]
[353.29354858 78.32848358]
[361.59466553 73.92774963]
[370.85183716 73.87654114]
[378.95550537 78.05857849]
[384.11819458 85.40737152]
[399.11743164 85.55938721]
[414.11666870 85.71139526]
[429.11587524 85.86340332]
[444.11511230 86.01541138]
[455.35806274 75.23424530]
[470.56726074 75.60207367]
[480.77618408 86.38695526]
[495.77539062 86.53896332]
[510.77462769 86.69097900]
[525.77386475 86.84298706]
[540.77307129 86.99499512]
[554.78399658 78.47283936]
[569.03796387 86.58184052]
[568.87176514 102.98014069]
[554.45635986 110.79858398]
[540.62109375 101.99422455]
[525.62182617 101.84221649]
[510.62261963 101.69020844]
[495.62338257 101.53819275]
[480.62417603 101.38618469]
[470.19876099 111.96195221]
[454.98526001 112.02146149]
[443.96310425 101.01464081]
[428.96386719 100.86263275]
[413.96466064 100.71062469]
[398.96542358 100.55861664]
[383.96618652 100.40660095]
[367.02410889 112.13790894]
[348.65908813 101.17010498]
[333.67834473 101.92984772]
[318.69760132 102.68958282]
[303.71685791 103.44931793]
[288.73611450 104.20906067]
[280.36395264 112.99115753]
[267.84985352 113.71382904]
[257.90426636 105.44098663]
[242.91119385 105.89694977]
[236.28205872 109.26358795]
[227.61030579 106.20711517]
[212.61108398 106.35912323]
[199.96287537 114.22500610]
[186.08499146 106.62795258]
[171.08576965 106.77996826]
[156.08653259 106.93197632]
[141.08731079 107.08398438]
[139.12097168 115.25608063]
[135.53480530 122.92382050]
[130.45214844 129.76731873]
[124.05921173 135.49589539]
[116.59840393 139.86039734]
[108.35910797 142.66397095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 50]
[8 49]
[9 48]
[11 47]
[12 46]
[13 45]
[14 43]
[15 42]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[23 31]
[24 30]
[51 74]
[52 73]
[53 72]
[54 71]
[58 66]
[59 65]
[84 148]
[85 147]
[86 146]
[87 145]
[89 143]
[90 142]
[91 140]
[92 139]
[94 136]
[95 135]
[96 134]
[97 133]
[98 132]
[103 130]
[104 129]
[105 128]
[106 127]
[107 126]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
