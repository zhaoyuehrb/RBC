%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGACGGACGGCGGGCGGCGGCGGCGGUGGCGGCGCUGGAGUCGGCGCGGGUGCUGGCGCCAUGGAGGCCGAGCGGGGUCCCGAGCGCCGGCCUGCGGAGCGUAGCAGCCCGGGCCAGACGCCGGAGGAGGGCGCGCAGGCCUUGGCCGAGUUCGCGGCGC\
) } def
/len { sequence length } bind def

/coor [
[93.24873352 316.33505249]
[92.67066956 301.34619141]
[92.09260559 286.35736084]
[91.51454163 271.36849976]
[88.09802246 264.77416992]
[91.07259369 256.08578491]
[90.78350830 241.08856201]
[90.49441528 226.09135437]
[90.20532990 211.09413147]
[89.91624451 196.09692383]
[81.40470123 187.45939636]
[81.06890869 174.93589783]
[89.63665771 165.25265503]
[89.63665771 150.25265503]
[89.63665771 135.25265503]
[76.41209412 128.17373657]
[63.93002319 136.49226379]
[56.73723221 150.58390808]
[41.85552216 151.20353699]
[29.37344933 159.52206421]
[22.18065834 173.61370850]
[7.29894781 174.23333740]
[-5.18312597 182.55186462]
[-11.96504116 197.48297119]
[-28.31075668 198.80567932]
[-37.40520477 185.15933228]
[-29.89279366 170.58209229]
[-13.50164986 170.06979370]
[-1.01957607 161.75126648]
[5.28041267 148.25462341]
[21.05492401 147.03999329]
[33.53699875 138.72146606]
[39.83698654 125.22482300]
[55.61149979 124.01019287]
[68.09357452 115.69166565]
[70.65013885 86.69672394]
[92.50000000 72.09854889]
[92.50000000 57.09854507]
[92.50000000 42.09854507]
[92.50000000 27.09854507]
[84.76270294 13.29837322]
[92.50000000 0.57110095]
[92.50000000 -14.42889881]
[92.50000000 -29.42889977]
[92.35545349 -44.42820358]
[92.06636810 -59.42541504]
[91.77728271 -74.42263031]
[83.77545166 -88.07112122]
[91.26602936 -100.94514465]
[90.97694397 -115.94235992]
[90.68785858 -130.93957520]
[90.39877319 -145.93678284]
[89.96517944 -160.93052673]
[89.38711548 -175.91937256]
[88.80905151 -190.90823364]
[88.23098755 -205.89709473]
[87.65292358 -220.88595581]
[84.18123627 -229.38793945]
[87.21096802 -236.16865540]
[86.92188263 -251.16587830]
[86.63279724 -266.16308594]
[75.52571106 -277.08416748]
[75.44617462 -292.29760742]
[85.92621613 -302.81921387]
[85.63713074 -317.81643677]
[77.63530731 -331.46493530]
[85.12588501 -344.33895874]
[84.83679962 -359.33615112]
[84.54771423 -374.33337402]
[84.25862885 -389.33059692]
[83.96954346 -404.32781982]
[83.68045807 -419.32501221]
[80.37326813 -427.89233398]
[83.53311920 -434.61340332]
[83.53311920 -449.61340332]
[83.53311920 -464.61340332]
[70.19199371 -472.22326660]
[62.45702362 -485.49224854]
[62.40888214 -500.85107422]
[70.06051636 -514.16827393]
[83.35367584 -521.86163330]
[98.71257019 -521.86163330]
[112.00572968 -514.16827393]
[119.65736389 -500.85107422]
[119.60922241 -485.49224854]
[111.87425232 -472.22326660]
[98.53311920 -464.61340332]
[98.53311920 -449.61340332]
[98.53311920 -434.61340332]
[98.67767334 -419.61410522]
[98.96675873 -404.61688232]
[99.25584412 -389.61968994]
[99.54492950 -374.62246704]
[99.83401489 -359.62524414]
[100.12310028 -344.62805176]
[108.10424805 -332.05224609]
[100.63434601 -318.10552979]
[100.92343140 -303.10830688]
[111.80117035 -292.99838257]
[112.30798340 -277.79318237]
[101.63001251 -266.45217896]
[101.91909790 -251.45495605]
[102.20818329 -236.45774841]
[102.64177704 -221.46401978]
[103.21984863 -206.47515869]
[103.79791260 -191.48629761]
[104.37597656 -176.49743652]
[104.95404053 -161.50859070]
[108.37055969 -154.91427612]
[105.39598846 -146.22587585]
[105.68507385 -131.22866821]
[105.97415924 -116.23144531]
[106.26324463 -101.23423004]
[114.24439240 -88.65843964]
[106.77449036 -74.71171570]
[107.06357574 -59.71450043]
[107.35266113 -44.71728897]
[110.64146423 -38.05836487]
[107.50000000 -29.42889977]
[107.50000000 -14.42889881]
[107.50000000 0.57110095]
[115.23729706 13.29837322]
[107.50000000 27.09854507]
[107.50000000 42.09854507]
[107.50000000 57.09854507]
[107.50000000 72.09854889]
[117.96315002 77.37110901]
[125.47216034 86.36511230]
[128.79216003 97.60144043]
[127.37712860 109.23222351]
[139.85920715 117.55075073]
[152.34127808 125.86927032]
[164.82334900 134.18778992]
[177.30541992 142.50631714]
[192.75117493 139.15901184]
[205.99446106 147.78404236]
[209.17826843 163.26431274]
[200.41371155 176.41566467]
[184.90063477 179.43563843]
[171.84268188 170.53251648]
[168.98690796 154.98838806]
[156.50482178 146.66987610]
[144.02275085 138.35134888]
[131.54067993 130.03282166]
[119.05860901 121.71429443]
[115.56288910 126.94136047]
[110.71680450 131.56517029]
[104.63665771 135.25265503]
[104.63665771 150.25265503]
[104.63665771 165.25265503]
[114.21732330 180.95222473]
[104.91345978 195.80783081]
[105.20254517 210.80505371]
[105.49163055 225.80226135]
[105.78071594 240.79948425]
[106.06980133 255.79669189]
[106.50340271 270.79043579]
[107.08146667 285.77926636]
[107.65953064 300.76812744]
[108.23759460 315.75698853]
[114.88983917 331.35134888]
[101.74644470 342.06057739]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[6 156]
[7 155]
[8 154]
[9 153]
[10 152]
[13 150]
[14 149]
[15 148]
[16 35]
[17 34]
[19 32]
[20 31]
[22 29]
[23 28]
[37 126]
[38 125]
[39 124]
[40 123]
[42 121]
[43 120]
[44 119]
[45 117]
[46 116]
[47 115]
[49 113]
[50 112]
[51 111]
[52 110]
[53 108]
[54 107]
[55 106]
[56 105]
[57 104]
[59 103]
[60 102]
[61 101]
[64 98]
[65 97]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
[74 89]
[75 88]
[76 87]
[130 145]
[131 144]
[132 143]
[133 142]
[134 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
