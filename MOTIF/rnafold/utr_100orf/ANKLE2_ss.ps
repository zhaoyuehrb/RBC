%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGGCGCGGGCAGCCCGGCGCGGGGUCCUGGGACGGGCGCGGCGCGGGGCGCGGGCUUCUCGGCGGCUGCGGCCCGGGCGGCGGCGAUGCUGUGGCCGCGGCUGGCGGCGGCCGAGUGGGCGGCGCUGGCCUGGGAGCUGCUGGGCGCCUCGGUGCUGCUGAUCGCUGUGCGGUGGCUGGUGCGGC\
) } def
/len { sequence length } bind def

/coor [
[315.04592896 709.61407471]
[322.64346313 692.27368164]
[316.64776611 678.52404785]
[310.65209961 664.77441406]
[304.65640259 651.02484131]
[298.66070557 637.27520752]
[286.48114014 628.70159912]
[288.05737305 612.95910645]
[282.06167603 599.20947266]
[268.14703369 594.02117920]
[261.87069702 580.16253662]
[267.40704346 565.60272217]
[261.41134644 551.85314941]
[255.41566467 538.10351562]
[249.41996765 524.35394287]
[243.85501099 519.47100830]
[243.44081116 510.32852173]
[237.67207336 496.48214722]
[231.90335083 482.63580322]
[226.13461304 468.78942871]
[220.36589050 454.94308472]
[214.59715271 441.09671021]
[208.82841492 427.25033569]
[205.70729065 425.57571411]
[203.24841309 422.29736328]
[202.20062256 417.74597168]
[203.13534546 412.57589722]
[198.05659485 398.46185303]
[186.46705627 389.10601807]
[189.07484436 373.50122070]
[183.99610901 359.38717651]
[178.91735840 345.27313232]
[173.83860779 331.15908813]
[168.75985718 317.04504395]
[163.68110657 302.93096924]
[158.60237122 288.81692505]
[146.28240967 285.00866699]
[138.29025269 274.64193726]
[137.72515869 261.36944580]
[145.01779175 250.03337097]
[140.17187500 235.83769226]
[135.32595825 221.64202881]
[130.48002625 207.44635010]
[125.63410950 193.25068665]
[114.20001221 183.70550537]
[117.06411743 168.14569092]
[112.21819305 153.95002747]
[100.78409576 144.40484619]
[103.64820099 128.84503174]
[98.80228424 114.64936829]
[87.97986603 104.26306152]
[73.59698486 100.00480652]
[59.21410370 95.74654388]
[44.83122253 91.48828888]
[29.02077866 95.84281158]
[17.53601265 84.13673401]
[22.19146538 68.41226959]
[38.19800949 64.84539795]
[49.08948135 77.10540771]
[63.47236252 81.36367035]
[77.85523987 85.62192535]
[92.23812103 89.88018799]
[103.64020538 80.13377380]
[101.67211914 65.26345062]
[99.70403290 50.39311981]
[97.73595428 35.52279282]
[95.76786804 20.65246391]
[93.79978180 5.78213692]
[84.31871033 -6.88355780]
[90.31922913 -20.51598167]
[88.35115051 -35.38631058]
[86.38306427 -50.25663757]
[84.41497803 -65.12696838]
[82.44689178 -79.99729156]
[80.35658264 -94.85092926]
[78.14418793 -109.68688202]
[75.93179321 -124.52282715]
[73.71939087 -139.35876465]
[61.30193329 -148.76325989]
[59.26959229 -163.84053040]
[68.31186676 -175.62072754]
[66.09946442 -190.45668030]
[63.88706970 -205.29261780]
[54.19896317 -217.80065918]
[59.97445679 -231.52993774]
[57.76205826 -246.36589050]
[55.54966354 -261.20184326]
[53.33726501 -276.03778076]
[51.12487030 -290.87371826]
[42.80849457 -305.64782715]
[54.70302582 -317.72906494]
[69.60486603 -309.64382935]
[65.96081543 -293.08612061]
[68.17321014 -278.25018311]
[70.38561249 -263.41421509]
[72.59800720 -248.57827759]
[74.81040192 -233.74234009]
[84.34026337 -222.29545593]
[78.72301483 -207.50502014]
[80.93540955 -192.66906738]
[83.14781189 -177.83312988]
[95.23365021 -169.20364380]
[97.68868256 -154.18940735]
[88.55534363 -141.57116699]
[90.76773834 -126.73522186]
[92.98013306 -111.89927673]
[95.19252777 -97.06333160]
[99.29563904 -90.90084076]
[97.31722260 -81.96537781]
[99.28530884 -67.09504700]
[101.25338745 -52.22472382]
[103.22147369 -37.35439301]
[105.18955994 -22.48406601]
[114.52986145 -10.88199711]
[108.67011261 3.81405234]
[110.63819122 18.68437958]
[112.60627747 33.55470657]
[114.57436371 48.42503357]
[116.54244995 63.29536438]
[118.51053619 78.16568756]
[112.99795532 109.80344391]
[117.84387207 123.99911499]
[129.62458801 134.55967712]
[126.41386414 149.10411072]
[131.25978088 163.29977417]
[143.04049683 173.86033630]
[139.82978821 188.40476990]
[144.67570496 202.60043335]
[149.52162170 216.79611206]
[154.36753845 230.99177551]
[159.21347046 245.18743896]
[175.04927063 252.60105896]
[180.52415466 268.85128784]
[172.71641541 283.73818970]
[177.79516602 297.85223389]
[182.87390137 311.96627808]
[187.95265198 326.08032227]
[193.03140259 340.19436646]
[198.11015320 354.30841064]
[203.18890381 368.42245483]
[215.14170837 378.78784180]
[212.17063904 393.38311768]
[217.24938965 407.49716187]
[222.67478943 421.48162842]
[228.44351196 435.32797241]
[234.21224976 449.17434692]
[239.98097229 463.02069092]
[245.74971008 476.86706543]
[251.51844788 490.71343994]
[257.28717041 504.55978394]
[263.16958618 518.35821533]
[269.16528320 532.10784912]
[275.16094971 545.85748291]
[281.15664673 559.60705566]
[295.59307861 565.45745850]
[301.47769165 579.48693848]
[295.81127930 593.21380615]
[301.80697632 606.96337891]
[314.41540527 616.52050781]
[312.41033936 631.27954102]
[318.40600586 645.02917480]
[324.40170288 658.77874756]
[330.39739990 672.52838135]
[336.39306641 686.27795410]
[348.11273193 688.39208984]
[357.25802612 695.83117676]
[361.62420654 706.65240479]
[360.23123169 718.11694336]
[353.54113770 727.38317871]
[359.08132935 741.32250977]
[364.62155151 755.26190186]
[370.16177368 769.20123291]
[375.70199585 783.14062500]
[381.24218750 797.08001709]
[386.78240967 811.01934814]
[401.84982300 814.72790527]
[411.83401489 826.60626221]
[412.89590454 842.08697510]
[404.62716675 855.21734619]
[390.20727539 860.94854736]
[375.18099976 857.07678223]
[365.32623291 845.09082031]
[364.43234253 829.59948730]
[372.84304810 816.55957031]
[367.30282593 802.62023926]
[361.76260376 788.68084717]
[356.22241211 774.74145508]
[350.68218994 760.80212402]
[345.14196777 746.86273193]
[339.60174561 732.92333984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[6 160]
[8 158]
[9 157]
[12 154]
[13 153]
[14 152]
[15 151]
[17 150]
[18 149]
[19 148]
[20 147]
[21 146]
[22 145]
[23 144]
[27 143]
[28 142]
[30 140]
[31 139]
[32 138]
[33 137]
[34 136]
[35 135]
[36 134]
[40 131]
[41 130]
[42 129]
[43 128]
[44 127]
[46 125]
[47 124]
[49 122]
[50 121]
[51 62]
[52 61]
[53 60]
[54 59]
[63 120]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[70 113]
[71 112]
[72 111]
[73 110]
[74 109]
[75 107]
[76 106]
[77 105]
[78 104]
[81 101]
[82 100]
[83 99]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
[169 190]
[170 189]
[171 188]
[172 187]
[173 186]
[174 185]
[175 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
