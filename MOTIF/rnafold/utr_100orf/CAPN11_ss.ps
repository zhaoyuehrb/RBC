%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACCUUCAACUGUCAAGCACCGAGCUAGCCACCAGCAUGCUGUACUCCCCAGGGCCGAGUCUUCCGGAGUCAGCAGAGAGCCUGGAUGGAUCACAGGAGGAUAAGCCUCGGGGCUCAUGUGCGGAGCCCACUUUUA\
) } def
/len { sequence length } bind def

/coor [
[-6.53738642 164.32231140]
[-12.40453911 150.51737976]
[-14.38985634 135.64933777]
[-12.35040665 120.78862762]
[-6.43301916 107.00514221]
[2.93628550 95.29121399]
[15.08296680 86.49018097]
[29.13253021 81.23567963]
[44.07347870 79.90599823]
[58.83014297 82.59687042]
[72.33863068 89.11357880]
[86.06322479 95.16631317]
[76.92060089 83.27462006]
[67.77797699 71.38292694]
[58.63534927 59.49123001]
[46.37358856 61.84547424]
[34.28668213 59.23833466]
[24.28312302 52.17817307]
[11.34961414 59.77582550]
[-1.58389544 67.37348175]
[-6.99467993 82.47655487]
[-22.22227859 87.52629089]
[-35.58538055 78.64895630]
[-36.83295822 62.65448380]
[-25.00797462 51.81246567]
[-9.18154812 54.43996811]
[3.75196099 46.84231567]
[16.68547058 39.24466324]
[15.70885277 26.95115280]
[19.67841911 15.27524853]
[27.94565964 6.12445927]
[22.32306862 -7.78188658]
[16.70047569 -21.68823242]
[10.92109585 -35.53015518]
[4.98566484 -49.30588150]
[-0.94976622 -63.08160782]
[-6.88519764 -76.85733795]
[-26.84928894 -83.19338226]
[-35.69073868 -101.86188507]
[-28.15748405 -120.78475952]
[-35.31238174 -133.96835327]
[-42.46728134 -147.15196228]
[-49.62218094 -160.33557129]
[-56.77707672 -173.51918030]
[-63.67969894 -179.63281250]
[-63.94086838 -187.08256531]
[-70.79599762 -200.42449951]
[-77.65112305 -213.76643372]
[-84.50625610 -227.10836792]
[-91.36138153 -240.45030212]
[-106.13961029 -245.37388611]
[-112.90162659 -259.00216675]
[-108.11666107 -273.06060791]
[-114.97178650 -286.40252686]
[-121.82691956 -299.74447632]
[-128.68205261 -313.08639526]
[-135.53717041 -326.42834473]
[-148.15379333 -337.75341797]
[-140.76391602 -353.01205444]
[-124.05587006 -350.13500977]
[-122.19524384 -333.28347778]
[-115.34011078 -319.94152832]
[-108.48498535 -306.59960938]
[-101.62985229 -293.25765991]
[-94.77472687 -279.91574097]
[-80.55922699 -275.61978149]
[-73.41709137 -262.18682861]
[-78.01944733 -247.30541992]
[-71.16432190 -233.96348572]
[-64.30918884 -220.62155151]
[-57.45406342 -207.27961731]
[-50.59893417 -193.93768311]
[-43.59347153 -180.67407227]
[-36.43857574 -167.49046326]
[-29.28367615 -154.30686951]
[-22.12877846 -141.12326050]
[-14.97387981 -127.93965149]
[-5.43464994 -128.16720581]
[3.57058525 -124.84003448]
[10.75705624 -118.38703156]
[15.08265018 -109.68616486]
[15.89891243 -99.94524384]
[13.04790974 -90.53427124]
[6.89052963 -82.79276276]
[12.82596111 -69.01703644]
[18.76139259 -55.24131012]
[24.69682312 -41.46558380]
[30.27942085 -36.52578354]
[30.60682297 -27.31082535]
[36.22941589 -13.40447807]
[41.85200500 0.50186813]
[59.61358261 3.18032265]
[72.91532898 15.44869804]
[77.07917023 33.19550323]
[70.52704620 50.34860611]
[79.66967010 62.24030304]
[88.81229401 74.13199615]
[97.95491791 86.02368927]
[111.29685211 92.87882233]
[126.28823090 93.38725281]
[141.27961731 93.89569092]
[156.27099609 94.40412140]
[168.92764282 84.54569244]
[184.49227905 88.43437958]
[191.02502441 103.08712006]
[183.51452637 117.26358032]
[167.72219849 120.08879852]
[155.76255798 109.39550018]
[140.77117920 108.88706970]
[125.77980042 108.37863922]
[110.78842163 107.87020111]
[107.74305725 114.72409058]
[98.60697174 135.28575134]
[109.03226471 146.07061768]
[119.45755768 156.85546875]
[129.88284302 167.64033508]
[140.30815125 178.42520142]
[150.73344421 189.21006775]
[166.31861877 187.93099976]
[179.04978943 197.01127625]
[182.91566467 212.16346741]
[176.09091187 226.23316956]
[161.79795837 232.57711792]
[146.78550720 228.19985962]
[138.14196777 215.16822815]
[139.94857788 199.63536072]
[129.52328491 188.85049438]
[119.09798431 178.06562805]
[108.67269135 167.28076172]
[98.24739838 156.49591064]
[87.82210541 145.71104431]
[91.80062103 160.17379761]
[83.49662781 172.66554260]
[72.17008209 182.49964905]
[58.63645554 188.96809387]
[43.87008667 191.60520935]
[28.93408012 190.22113037]
[14.90374660 184.91549683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 98]
[13 97]
[14 96]
[15 95]
[18 28]
[19 27]
[20 26]
[31 91]
[32 90]
[33 89]
[34 87]
[35 86]
[36 85]
[37 84]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[99 111]
[100 110]
[101 109]
[102 108]
[113 131]
[114 130]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
