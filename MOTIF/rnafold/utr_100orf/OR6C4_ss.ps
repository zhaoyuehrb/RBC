%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:49:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAACAGAACCAUGUUUGGUGAGUUUAUUCUACUGGGCCUUACAAAUCAACCUGAACUCCAAGUGAUGAUAUUCAUCUUUCUGUUCCUCACCUACA\
) } def
/len { sequence length } bind def

/coor [
[78.32411194 282.06314087]
[89.40805817 271.20376587]
[87.08457947 256.38482666]
[84.76110840 241.56585693]
[72.61096191 233.02716064]
[70.04352570 218.03172302]
[79.08208466 205.34542847]
[76.75861359 190.52647400]
[74.43514252 175.70751953]
[72.11167145 160.88856506]
[69.78820038 146.06959534]
[67.46472168 131.25064087]
[54.28432465 124.08985138]
[40.58747482 130.20510864]
[26.89062500 136.32035828]
[13.19377708 142.43560791]
[4.01167822 156.02314758]
[-12.32518482 154.59523010]
[-19.01084900 139.62078857]
[-9.16767502 126.50424194]
[7.07852268 128.73875427]
[20.77537155 122.62350464]
[34.47222137 116.50825500]
[48.16906738 110.39299774]
[53.63884354 96.42583466]
[47.73733902 82.63554382]
[41.83583450 68.84524536]
[35.93432999 55.05495071]
[30.03282738 41.26465607]
[24.13132286 27.47435951]
[18.22981834 13.68406487]
[11.52507496 27.10220146]
[-2.13033128 33.30944824]
[-16.64859581 29.53850746]
[-25.55723953 17.47052956]
[-24.88464355 2.48561692]
[-14.93066025 -8.73571205]
[-0.13294056 -11.19080639]
[12.91236496 -3.78408861]
[10.12914848 -18.52361679]
[-4.75729609 -21.59968758]
[-17.33060837 -30.14253616]
[-25.67344856 -42.84944153]
[-28.51359367 -57.78269577]
[-25.41794395 -72.66507721]
[-16.85856247 -85.22714233]
[-4.14069271 -93.55326080]
[10.79628181 -96.37375641]
[25.67458153 -93.25853729]
[38.22537613 -84.68263245]
[46.53475571 -71.95382690]
[49.33560181 -57.01315308]
[46.20080948 -42.13896179]
[37.60840988 -29.59946251]
[24.86867714 -21.30683327]
[27.65189362 -6.56730509]
[32.02011490 7.78256083]
[37.92161942 21.57285690]
[43.82312393 35.36315155]
[49.72462463 49.15344620]
[55.62612915 62.94374466]
[61.52763367 76.73403931]
[67.42913818 90.52433777]
[75.04387665 78.77581787]
[86.41487885 71.46868134]
[99.30805969 69.56772614]
[111.37288666 73.01921844]
[120.57029724 80.82803345]
[125.51681519 91.30041504]
[140.50048828 90.60081482]
[155.48416138 89.90120697]
[170.46783447 89.20159912]
[185.45152283 88.50199890]
[200.99140930 81.72349548]
[211.80686951 94.77960205]
[202.25502014 108.78668976]
[186.15112305 103.48567200]
[171.16744995 104.18527985]
[156.18377686 104.88488007]
[141.20008850 105.58448792]
[126.21641541 106.28409576]
[119.02291107 122.25834656]
[102.48852539 131.50236511]
[82.28368378 128.92716980]
[84.60715485 143.74612427]
[86.93062592 158.56509399]
[89.25409698 173.38404846]
[91.57756805 188.20300293]
[93.90104675 203.02195740]
[106.38860321 212.33316040]
[108.53383636 227.39479065]
[99.58007050 239.24238586]
[101.90354156 254.06134033]
[104.22701263 268.88031006]
[118.10266113 275.82623291]
[125.21566772 289.61700439]
[122.83094025 304.94973755]
[111.86545563 315.92868042]
[96.53565979 318.33227539]
[82.73618317 311.23620605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[7 89]
[8 88]
[9 87]
[10 86]
[11 85]
[12 84]
[13 24]
[14 23]
[15 22]
[16 21]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[39 56]
[40 55]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
