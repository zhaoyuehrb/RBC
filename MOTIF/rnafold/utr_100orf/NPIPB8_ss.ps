%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGAAGCUCUCUAUUGUCCUGACCCCACAGUUCCUGUCCCAUGACCAGGGCCAGCUCACCAAGGAGCUGCAGCAGCAUGUAAAGUCAGUGACAUGCC\
) } def
/len { sequence length } bind def

/coor [
[4.61870050 416.38354492]
[-3.34766626 429.09326172]
[-11.31403351 441.80297852]
[-19.28040123 454.51272583]
[-20.05362129 470.31500244]
[-33.36888885 476.98980713]
[-41.33525848 489.69952393]
[-44.62412643 506.33142090]
[-61.51648331 507.77523804]
[-67.58015442 491.94271851]
[-54.04497910 481.73315430]
[-46.07860947 469.02343750]
[-45.87519836 454.13021851]
[-31.99012184 446.54635620]
[-24.02375412 433.83663940]
[-16.05738640 421.12689209]
[-8.09101963 408.41717529]
[-1.13606691 395.12701416]
[4.76543665 381.33673096]
[10.66694069 367.54641724]
[16.56844521 353.75613403]
[22.25477028 339.87573242]
[27.72454262 325.90856934]
[33.19431686 311.94140625]
[38.66408920 297.97424316]
[44.13386154 284.00708008]
[35.96378708 271.58178711]
[36.68539047 256.55038452]
[46.23127365 244.68742371]
[61.10393906 240.67369080]
[66.57370758 226.70652771]
[72.04347992 212.73936462]
[77.29537964 198.68882751]
[82.32813263 184.55831909]
[87.36087799 170.42781067]
[84.34229279 155.84228516]
[96.26128387 145.43804932]
[101.29402924 131.30752563]
[106.32678223 117.17701721]
[85.98400879 108.66925049]
[89.95715332 89.32620239]
[86.71688080 74.68035889]
[83.47661591 60.03451920]
[69.52634430 52.96883011]
[63.42912674 38.56890106]
[68.06388092 23.63393974]
[81.24221802 15.21577549]
[96.74172974 17.28920937]
[107.24401855 28.87523079]
[107.79022980 44.50326920]
[98.12245941 56.79425049]
[101.36272430 71.44009399]
[104.60298920 86.08592987]
[113.02787018 89.90652466]
[118.26406097 98.77434540]
[129.11518860 88.41804504]
[139.96632385 78.06174469]
[150.81744385 67.70544434]
[161.66857910 57.34914017]
[172.51971436 46.99283981]
[172.63775635 31.18899345]
[183.95471191 20.15712929]
[199.75643921 20.44225883]
[210.66802979 31.87521935]
[210.21585083 47.67303848]
[198.66816711 58.46315002]
[182.87600708 57.84397125]
[172.02488708 68.20027161]
[161.17375183 78.55657196]
[150.32261658 88.91287231]
[139.47149658 99.26917267]
[128.62036133 109.62547302]
[120.45729828 122.20976257]
[115.42454529 136.34028625]
[110.39179230 150.47079468]
[113.05040741 166.06701660]
[101.49139404 175.46055603]
[96.45864105 189.59106445]
[91.42589569 203.72158813]
[91.47705841 213.03770447]
[86.01064301 218.20913696]
[80.54087067 232.17630005]
[75.07109833 246.14346313]
[83.26283264 259.18960571]
[82.21410370 274.38018799]
[72.53617859 285.90414429]
[58.10102463 289.47683716]
[52.63124847 303.44400024]
[47.16147614 317.41116333]
[41.69170380 331.37832642]
[36.22193146 345.34548950]
[35.98334122 354.65869141]
[30.35873985 359.65762329]
[24.45723724 373.44793701]
[18.55573273 387.23822021]
[12.65422821 401.02850342]
[13.45141983 405.15145874]
[13.03834057 408.97552490]
[11.63487339 412.17996216]
[9.53745747 414.53952026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[6 12]
[7 11]
[18 96]
[19 95]
[20 94]
[21 93]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[30 83]
[31 82]
[32 81]
[33 79]
[34 78]
[35 77]
[37 75]
[38 74]
[39 73]
[41 53]
[42 52]
[43 51]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
