%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGCGGGGAGACGCCAGCCUGCGUCUGCCAUGGGGCUCGGGUUGAGGGGCUGGGGACGUCCUCUGCUGACUGUGGCCACCGCCCUGAUGCUGCCCGUGAAGCCCCCCGCAGGCUCCUGGGGGGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[123.70663452 212.71910095]
[131.79975891 199.61155701]
[126.22482300 185.68603516]
[120.64988708 171.76051331]
[115.07495117 157.83500671]
[109.50001526 143.90948486]
[103.92507172 129.98396301]
[98.35013580 116.05844116]
[83.95774078 111.83245850]
[71.73910522 120.53330994]
[59.62486649 129.37895203]
[47.61674881 138.36810303]
[35.60863113 147.35726929]
[23.60051155 156.34643555]
[11.59239292 165.33560181]
[-0.41572568 174.32476807]
[-2.41654587 190.00189209]
[-14.96768856 199.60629272]
[-30.62278366 197.43983459]
[-40.09394073 184.78784180]
[-37.76209259 169.15652466]
[-25.01067924 159.81967163]
[-9.40489101 162.31665039]
[2.60322785 153.32748413]
[14.61134624 144.33831787]
[26.61946487 135.34915161]
[38.62758255 126.35999298]
[50.63570404 117.37082672]
[54.13917160 110.77986145]
[63.03824997 108.31467438]
[75.25688934 99.61381531]
[82.10360718 92.71912384]
[89.90098572 90.45577240]
[96.37039948 92.34703827]
[99.55888367 77.68983459]
[102.74736023 63.03263474]
[105.93583679 48.37543106]
[109.12432098 33.71822739]
[112.31279755 19.06102562]
[114.97609711 4.29935694]
[117.11081696 -10.54796505]
[119.24554443 -25.39528656]
[121.38026428 -40.24260712]
[123.51498413 -55.08993149]
[109.26234436 -67.70716858]
[105.40888977 -86.19670868]
[113.30970001 -103.18825531]
[129.67015076 -112.01654816]
[130.74023438 -126.97832489]
[131.81031799 -141.94010925]
[132.88041687 -156.90188599]
[133.95050049 -171.86367798]
[131.42379761 -180.74548340]
[135.22825623 -187.16741943]
[136.65409851 -202.09948730]
[137.90214539 -217.04748535]
[138.97222900 -232.00926208]
[139.68595886 -246.99227905]
[140.04292297 -261.98803711]
[140.22142029 -276.98696899]
[140.22142029 -291.98696899]
[140.22142029 -306.98696899]
[128.12684631 -316.89932251]
[125.28422546 -332.27636719]
[133.03576660 -345.85751343]
[147.72142029 -351.23016357]
[162.40708923 -345.85751343]
[170.15863037 -332.27636719]
[167.31600952 -316.89932251]
[155.22142029 -306.98696899]
[155.22142029 -291.98696899]
[155.22142029 -276.98696899]
[158.39820862 -270.23248291]
[155.03868103 -261.63107300]
[154.68171692 -246.63529968]
[157.33978271 -242.56082153]
[157.39880371 -236.75486755]
[153.93402100 -230.93917847]
[152.86392212 -215.97738647]
[155.55076599 -209.01347351]
[151.58616638 -200.67364502]
[150.16033936 -185.74157715]
[148.91227722 -170.79357910]
[147.84219360 -155.83180237]
[146.77210999 -140.87002563]
[145.70201111 -125.90824127]
[144.63192749 -110.94645691]
[154.50538635 -105.41183472]
[161.59625244 -96.52314758]
[164.82781982 -85.56762695]
[163.68595886 -74.15074158]
[158.30038452 -63.96091080]
[149.43130493 -56.51981354]
[138.36230469 -52.95520782]
[136.22758484 -38.10788727]
[134.09286499 -23.26056290]
[131.95814514 -8.41324234]
[129.82342529 6.43407965]
[131.71670532 9.51757050]
[132.15304565 13.69702911]
[130.62249756 18.25008011]
[126.97000122 22.24950409]
[123.78152466 36.90670776]
[120.59304047 51.56391144]
[117.40456390 66.22111511]
[114.21608734 80.87831879]
[111.02760315 95.53552246]
[112.27565765 110.48350525]
[117.85059357 124.40902710]
[123.42552948 138.33454895]
[129.00047302 152.26007080]
[134.57540894 166.18557739]
[140.15034485 180.11109924]
[145.72528076 194.03662109]
[160.62777710 197.93809509]
[170.26284790 209.72872925]
[171.09777832 224.75427246]
[163.02162170 237.24081421]
[168.59655762 251.16633606]
[174.17149353 265.09185791]
[179.74642944 279.01736450]
[185.32138062 292.94290161]
[196.82141113 305.40023804]
[188.03443909 319.89938354]
[171.66943359 315.46957397]
[171.39585876 298.51782227]
[165.82092285 284.59231567]
[160.24598694 270.66677856]
[154.67105103 256.74127197]
[149.09609985 242.81575012]
[134.63441467 239.35198975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 31]
[10 30]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 102]
[40 98]
[41 97]
[42 96]
[43 95]
[44 94]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[54 82]
[55 81]
[56 79]
[57 78]
[58 75]
[59 74]
[60 72]
[61 71]
[62 70]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
