%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGGCUGCUCCCUCGGUAGCGGGGGCAAGCGGAGGCAGGGGUGUGGGCGGCUAAAAUGAGUGAAAGGAGAAGAUCUGCAGUCGCCCUGAGCUCGCGAGCACAUGCCUUCUCCGUUGAAGCCUUGAUCGGCUCAAAUAAAAAACGGAAACUGCGAG\
) } def
/len { sequence length } bind def

/coor [
[100.11936951 135.47970581]
[91.73966980 147.92079163]
[90.44760895 163.68914795]
[76.92019653 169.92280579]
[68.54049683 182.36389160]
[67.24843597 198.13224792]
[53.72102356 204.36590576]
[45.34132385 216.80699158]
[36.96162033 229.24807739]
[28.58192062 241.68916321]
[20.20221901 254.13024902]
[11.82251644 266.57131958]
[13.47041416 282.52954102]
[1.92076993 293.66439819]
[-13.96651649 291.43420410]
[-22.00407791 277.54980469]
[-16.02618790 262.66207886]
[-0.61856842 258.19161987]
[7.76113319 245.75054932]
[16.14083481 233.30946350]
[24.52053642 220.86837769]
[32.90023804 208.42729187]
[41.27993774 195.98620605]
[41.97262573 181.10771179]
[56.09941101 173.98419189]
[64.47911072 161.54310608]
[65.17179871 146.66461182]
[79.29858398 139.54109192]
[87.67828369 127.10000610]
[74.30092621 101.58642578]
[88.64319611 81.47827911]
[85.69867706 66.77012634]
[82.75415802 52.06196976]
[79.80963898 37.35381317]
[76.86511993 22.64566040]
[73.92060089 7.93750620]
[70.97607422 -6.77064800]
[68.03155518 -21.47880173]
[63.25489426 -29.32862473]
[65.17717743 -36.50649261]
[62.52382660 -51.26995468]
[59.87047195 -66.03340912]
[49.81406784 -78.24730682]
[55.17802429 -92.14253235]
[52.52466965 -106.90599060]
[49.87131500 -121.66944885]
[47.21796036 -136.43290710]
[44.56460571 -151.19636536]
[30.85907173 -165.93109131]
[38.06283569 -183.84187317]
[34.82830048 -198.48898315]
[31.59376335 -213.13607788]
[28.21468353 -227.75051880]
[24.69139290 -242.33087158]
[21.16810226 -256.91122437]
[5.28212738 -261.40496826]
[-6.11597061 -273.21835327]
[-9.99405384 -289.07287598]
[-5.38901520 -304.63397217]
[6.35619497 -315.69616699]
[2.54552579 -330.20404053]
[-1.26514339 -344.71194458]
[-12.25446129 -356.09375000]
[-8.00429726 -370.36907959]
[-11.81496716 -384.87698364]
[-21.56624603 -389.84515381]
[-26.83876038 -399.18316650]
[-26.08731651 -409.65969849]
[-19.80491638 -417.80072021]
[-23.03945160 -432.44781494]
[-26.27398872 -447.09494019]
[-38.96947098 -456.90332031]
[-39.07239532 -472.94604492]
[-26.50380707 -482.91650391]
[-10.90525150 -479.16622925]
[-4.24260569 -464.57208252]
[-11.62688160 -450.32946777]
[-8.39234447 -435.68237305]
[-5.15780783 -421.03524780]
[8.91870594 -407.82382202]
[2.69292068 -388.68765259]
[6.50359011 -374.17974854]
[17.22034264 -363.83566284]
[13.24274445 -348.52261353]
[17.05341339 -334.01470947]
[20.86408234 -319.50683594]
[34.27363586 -316.77249146]
[45.24264908 -308.47842407]
[51.58812714 -296.20352173]
[52.01638031 -282.32583618]
[46.38634872 -269.56176758]
[35.74844742 -260.43450928]
[39.27173615 -245.85415649]
[42.79502869 -231.27381897]
[47.44776535 -225.47993469]
[46.24087143 -216.37062073]
[49.47540665 -201.72351074]
[52.70994568 -187.07640076]
[61.83648300 -182.33816528]
[66.92998505 -173.15237427]
[66.08027649 -162.46237183]
[59.32806396 -153.84971619]
[61.98141861 -139.08625793]
[64.63477325 -124.32280731]
[67.28813171 -109.55934906]
[69.94148254 -94.79589081]
[79.80809784 -83.63796997]
[74.63392639 -68.68676758]
[77.28728485 -53.92330551]
[79.94063568 -39.15984726]
[82.73970795 -24.42332268]
[85.68423462 -9.71516800]
[88.62875366 4.99298573]
[91.57327271 19.70113945]
[94.51779175 34.40929413]
[97.46231079 49.11744690]
[100.40682983 63.82560349]
[103.35135651 78.53376007]
[117.35261536 82.83582306]
[126.80837250 96.11396790]
[126.23825836 114.06374359]
[140.44815063 118.86779022]
[154.65805054 123.67183685]
[168.86795044 128.47589111]
[182.92082214 121.24456024]
[197.94532776 126.14762878]
[205.02766418 140.27616882]
[199.96603394 155.24800110]
[185.76339722 162.18057251]
[170.84593201 156.96092224]
[164.06390381 142.68577576]
[149.85400391 137.88172913]
[135.64410400 133.07768250]
[121.43421173 128.27363586]
[131.60137939 139.30216980]
[141.76855469 150.33070374]
[151.93572998 161.35923767]
[166.07067871 166.37953186]
[178.43611145 174.87046814]
[188.19796753 186.25933838]
[194.69776917 199.77793884]
[197.49713135 214.51440430]
[196.40719604 229.47476196]
[191.50151062 243.64988708]
[183.11096191 256.08364868]
[171.80148315 265.93737793]
[158.33595276 272.54641724]
[143.62263489 275.46499634]
[128.65394592 274.49621582]
[114.43956757 269.70544434]
[101.93828583 261.41580200]
[91.99331665 250.18649292]
[85.27548218 236.77490234]
[82.23789978 222.08569336]
[83.08546448 207.10964966]
[87.76100159 192.85696411]
[95.95145416 180.28627014]
[97.34075928 165.35075378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[4 26]
[5 25]
[7 23]
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[31 118]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
[38 111]
[40 110]
[41 109]
[42 108]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[50 98]
[51 97]
[52 96]
[53 94]
[54 93]
[55 92]
[60 86]
[61 85]
[62 84]
[64 82]
[65 81]
[69 79]
[70 78]
[71 77]
[121 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
