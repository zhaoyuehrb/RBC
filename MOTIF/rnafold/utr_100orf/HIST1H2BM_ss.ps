%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGAACCAGUCAAAUCUGCUCCAGUCCCUAAAAAAGGCUCCAAGAAGGCCAUUAACAAGGCUCAGAAGAAGGAUGGAAAGAAGCGCAAACGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[92.97312164 130.47683716]
[85.47402954 130.59347534]
[77.50765991 143.30319214]
[76.73443604 159.10549927]
[63.41917038 165.78028870]
[55.45280457 178.49000549]
[47.48643494 191.19973755]
[44.19756699 207.83161926]
[27.30520821 209.27543640]
[21.24154091 193.44293213]
[34.77671432 183.23336792]
[42.74308395 170.52363586]
[50.70944977 157.81391907]
[50.91286087 142.92070007]
[64.79794312 135.33682251]
[72.76430511 122.62710571]
[69.00172424 100.69203949]
[78.79881287 83.92981720]
[94.47966766 78.49646759]
[95.87735748 63.56172943]
[97.27504730 48.62699127]
[89.61140442 38.10912323]
[91.19332123 25.59824562]
[100.61220551 17.83276939]
[102.47368622 2.94872165]
[104.33516693 -11.93532658]
[106.19664764 -26.81937408]
[104.13424683 -35.90447998]
[108.35446930 -42.13466263]
[110.67794037 -56.95362091]
[113.00141907 -71.77257538]
[107.53164673 -85.73973846]
[95.76273346 -95.03987885]
[79.72547913 -94.60842133]
[69.49970245 -106.97017670]
[72.92973328 -122.64226532]
[87.38435364 -129.60240173]
[101.77521515 -122.51136780]
[105.06287384 -106.80879211]
[116.83178711 -97.50865173]
[124.17901611 -99.01470184]
[118.30954742 -112.81866455]
[106.87489319 -122.52684021]
[105.05382538 -137.41589355]
[113.81159973 -149.59379578]
[128.50611877 -152.60559082]
[141.34849548 -144.85487366]
[145.53153992 -130.44993591]
[138.83865356 -117.02677155]
[138.87347412 -102.02680969]
[146.22071838 -103.53286743]
[153.38151550 -116.71326447]
[160.54231262 -129.89366150]
[167.70310974 -143.07406616]
[160.90515137 -157.02281189]
[163.63751221 -172.29742432]
[174.84951782 -183.02450562]
[190.22994995 -185.07928467]
[203.86470032 -177.67164612]
[210.51094055 -163.64997864]
[207.61303711 -148.40589905]
[196.28532410 -137.80107117]
[180.88349915 -135.91326904]
[173.72270203 -122.73287201]
[166.56190491 -109.55246735]
[159.40110779 -96.37207031]
[173.49594116 -91.24020386]
[183.15936279 -79.76770782]
[185.82130432 -65.00579071]
[180.77380371 -50.88054276]
[169.35928345 -41.14870453]
[154.61354065 -38.39855194]
[140.45837402 -43.36151886]
[130.65846252 -54.71765137]
[127.82037354 -69.44910431]
[125.49690247 -54.63014984]
[123.17343140 -39.81119156]
[121.08069611 -24.95789337]
[119.21921539 -10.07384491]
[117.35773468 4.81020308]
[115.49625397 19.69425201]
[123.21956635 35.36753845]
[112.20978546 50.02468109]
[110.81209564 64.95941925]
[109.41440582 79.89415741]
[128.01048279 93.28257751]
[127.92621613 121.76913452]
[136.28399658 134.22496033]
[144.64178467 146.68077087]
[159.59416199 153.41564941]
[160.96833801 169.75711060]
[147.35069275 178.89448547]
[132.74987793 171.42800903]
[132.18597412 155.03855896]
[123.82818604 142.58273315]
[115.47039795 130.12692261]
[107.97130585 130.24356079]
[115.67233276 143.11578369]
[108.37506866 156.22113037]
[93.37687683 156.45408630]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[5 13]
[6 12]
[7 11]
[19 85]
[20 84]
[21 83]
[24 81]
[25 80]
[26 79]
[27 78]
[29 77]
[30 76]
[31 75]
[32 40]
[33 39]
[51 66]
[52 65]
[53 64]
[54 63]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
