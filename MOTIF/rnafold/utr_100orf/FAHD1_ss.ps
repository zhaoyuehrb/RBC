%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUGAUGGGAAUCAUGGCAGCAUCCAGGCCAUUGUCCCGCUUCUGGGAGUGGGGAAAGAACAUCGUCUGCGUGGGGAGGAACUACGCGGACCACGUCAGGGAGA\
) } def
/len { sequence length } bind def

/coor [
[87.69972992 273.08825684]
[89.63500977 257.57086182]
[101.12701416 246.96578979]
[100.24669647 231.99163818]
[99.36638641 217.01750183]
[98.48606873 202.04335022]
[97.60575867 187.06919861]
[96.72544098 172.09506226]
[95.84513092 157.12091064]
[85.65351105 155.44583130]
[75.92846680 151.96751404]
[66.98628998 146.79910278]
[59.11779404 140.10868835]
[52.57887650 132.11383057]
[47.58220291 123.07457733]
[44.29027557 113.28487396]
[29.36940575 114.82360077]
[14.44853687 116.36232758]
[-0.47233188 117.90104675]
[-15.39320087 119.43977356]
[-22.26662064 133.25134277]
[-35.52770233 141.13470459]
[-50.94488144 140.57427979]
[-63.59859848 131.74891663]
[-69.45108795 117.47475433]
[-66.63484955 102.30661774]
[-56.04853821 91.08460999]
[-41.07019424 87.38963318]
[-26.47936440 92.40074158]
[-16.93192482 104.51890564]
[-2.01105595 102.98017883]
[12.90981293 101.44145203]
[27.83068085 99.90273285]
[42.75154877 98.36400604]
[46.43692780 79.72541809]
[56.01705170 63.31809998]
[70.43760681 50.94771576]
[64.44403839 37.19718552]
[58.45046234 23.44665718]
[52.45688629 9.69612694]
[46.46331406 -4.05440235]
[40.46973801 -17.80493164]
[34.47616196 -31.55546188]
[28.48258972 -45.30599213]
[14.97699833 -54.60820007]
[16.54969788 -70.93176270]
[31.58282852 -77.48439789]
[44.61159515 -67.52531433]
[42.23311996 -51.29956436]
[48.22669220 -37.54903412]
[54.22026825 -23.79850578]
[60.21384048 -10.04797649]
[66.20741272 3.70255280]
[72.20098877 17.45308304]
[78.19456482 31.20361137]
[84.18814087 44.95414352]
[92.87311554 43.17334366]
[101.72886658 42.75428009]
[110.54319000 43.70699310]
[119.10487366 46.00865555]
[127.20874023 49.60411072]
[134.66061401 54.40719986]
[141.28190613 60.30282593]
[146.91397095 67.14971924]
[151.42182922 74.78379822]
[154.69747925 83.02213287]
[156.66239929 91.66730499]
[171.66078186 91.44711304]
[186.65916443 91.22691345]
[201.65754700 91.00671387]
[216.65592957 90.78652191]
[231.65431213 90.56632233]
[246.65270996 90.34612274]
[261.65109253 90.12593079]
[276.64947510 89.90573120]
[291.64785767 89.68553162]
[301.38162231 77.44674683]
[316.71527100 74.37870026]
[330.40875244 81.93003082]
[335.99639893 96.53524017]
[330.83990479 111.29819489]
[317.37402344 119.24826813]
[301.95690918 116.63168335]
[291.86804199 104.68391418]
[276.86965942 104.90411377]
[261.87127686 105.12431335]
[246.87289429 105.34451294]
[231.87451172 105.56470490]
[216.87612915 105.78490448]
[201.87774658 106.00510406]
[186.87936401 106.22529602]
[171.88098145 106.44549561]
[156.88259888 106.66569519]
[149.18087769 129.34794617]
[132.87564087 146.89619446]
[110.81927490 156.24060059]
[111.69959259 171.21473694]
[112.57990265 186.18888855]
[113.46022034 201.16304016]
[114.34053040 216.13717651]
[115.22084808 231.11132812]
[116.10115814 246.08547974]
[128.75662231 255.27095032]
[132.49679565 270.45468140]
[125.55565643 284.46734619]
[111.21061707 290.69259644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 102]
[4 101]
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[16 34]
[17 33]
[18 32]
[19 31]
[20 30]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
