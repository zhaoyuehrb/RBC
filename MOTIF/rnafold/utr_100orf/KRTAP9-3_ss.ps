%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUCUUAACAGAAGCCCACCCUCCAUCCCUGACACCAUGACCCACUGUUGCUCCCCUUGCUGUCAGCCUACCUGCUGCAGGACCACCUGCUGGCAGCCCACCACUGUGACCACCUGCAGCAGCACACCCUGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[157.43492126 316.89215088]
[145.72251892 311.75811768]
[135.46679688 304.10415649]
[127.20106506 294.32333374]
[121.35623932 282.91946411]
[118.23839569 270.48107910]
[118.01278687 257.65112305]
[120.69503784 245.09370422]
[126.15014648 233.45971680]
[134.09930420 223.35313416]
[144.13410950 215.29957581]
[137.93074036 201.64241028]
[131.72735596 187.98524475]
[125.52397919 174.32807922]
[114.98100281 177.14730835]
[104.14912415 178.47879028]
[93.23723602 178.29689026]
[82.45575714 176.60507202]
[72.01261139 173.43597412]
[62.10918427 168.85072327]
[52.93645096 162.93774414]
[44.67130661 155.81105042]
[37.47313690 147.60807800]
[31.48075485 138.48701477]
[26.80971718 128.62374878]
[23.55010033 118.20851135]
[21.76476669 107.44212341]
[21.48814583 96.53222656]
[22.72556877 85.68920135]
[25.45317459 75.12214661]
[29.61836243 65.03484344]
[35.14081192 55.62182617]
[23.62614059 46.00868988]
[12.11146832 36.39555740]
[0.59679747 26.78242302]
[-10.91787338 17.16928864]
[-22.43254471 7.55615377]
[-37.98482132 4.65145779]
[-42.79619598 -9.44463825]
[-54.31086731 -19.05777168]
[-66.85868835 -10.64772892]
[-81.26803589 -6.11479664]
[-96.37080383 -5.82644129]
[-110.94267273 -9.80603790]
[-123.80237579 -17.73097801]
[-133.90744019 -28.95882416]
[-140.43867493 -42.57938004]
[-142.86663818 -57.48849487]
[-140.99449158 -72.47755432]
[-134.97401428 -86.33145142]
[-125.29325867 -97.92712402]
[-112.73699188 -106.32455444]
[-98.32310486 -110.84300995]
[-83.22005463 -111.11619568]
[-68.65218353 -107.12196350]
[-55.80044937 -99.18410492]
[-45.70668030 -87.94611359]
[-39.18912888 -74.31900024]
[-36.77614594 -59.40745544]
[-38.66334534 -44.42028809]
[-44.69773483 -30.57244301]
[-33.18306351 -20.95930862]
[-18.45439339 -18.74220848]
[-12.81941032 -3.95851731]
[-1.30473936 5.65461683]
[10.20993137 15.26775074]
[21.72460365 24.88088608]
[33.23927307 34.49401855]
[44.75394440 44.10715485]
[59.70149231 32.53025055]
[76.98138428 24.85826683]
[95.59351349 21.53523254]
[114.46067810 22.75347519]
[132.49090576 28.44248390]
[148.64067078 38.27299881]
[159.00660706 27.43107796]
[169.37254333 16.58915520]
[179.73847961 5.74723196]
[190.10443115 -5.09469128]
[200.34806824 -16.05223465]
[210.46812439 -27.12401962]
[220.58818054 -38.19580460]
[230.70823669 -49.26758957]
[240.82830811 -60.33937454]
[243.82743835 -76.46194458]
[259.37759399 -81.67003632]
[271.48211670 -70.60601807]
[267.68890381 -54.65159607]
[251.90008545 -50.21931458]
[241.78002930 -39.14752960]
[231.65997314 -28.07574654]
[221.53991699 -17.00396156]
[211.41986084 -5.93217659]
[209.21066284 1.18587101]
[200.94635010 5.27124882]
[190.58041382 16.11317062]
[180.21446228 26.95509529]
[169.84852600 37.79701614]
[159.48258972 48.63893890]
[169.26258850 62.86740494]
[175.69956970 78.88810730]
[178.48283386 95.92780304]
[177.47802734 113.16404724]
[172.73367310 129.76490784]
[164.47874451 144.92913818]
[153.11169434 157.92481995]
[139.18113708 168.12469482]
[145.38452148 181.78186035]
[151.58789062 195.43902588]
[157.79127502 209.09619141]
[175.05694580 206.74159241]
[192.20285034 209.75326538]
[207.60232544 217.83491516]
[219.79763794 230.20977783]
[227.63792419 245.69520569]
[230.38786316 262.81576538]
[227.79653931 279.94372559]
[220.12034607 295.45394897]
[208.09771729 307.87792969]
[215.50033569 320.92404175]
[222.90295410 333.97015381]
[230.30558777 347.01626587]
[237.70820618 360.06240845]
[245.11082458 373.10852051]
[252.51345825 386.15463257]
[267.81295776 390.11703491]
[275.75738525 403.77941895]
[271.63348389 419.03619385]
[257.88781738 426.83575439]
[242.67552185 422.55075073]
[235.02174377 408.72341919]
[239.46733093 393.55725098]
[232.06471252 380.51113892]
[224.66209412 367.46502686]
[217.25946045 354.41891479]
[209.85684204 341.37277222]
[202.45422363 328.32666016]
[195.05158997 315.28054810]
[182.75514221 318.69616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 110]
[12 109]
[13 108]
[14 107]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[39 62]
[40 61]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
[125 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
