%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCGGGGCAACAGGCAGAUUUGCCUGCUGAGGGUGGAGACCCACGAGCCGAGGCCUCCUGCAGUGUUCUGCACAGCAAACCGCACGCUAUGGCUGACAGCCGGGAUCCCGCCAGCGACCAGAUGCAGCACUGGAAGGAGCAGCGGGCCGCGCAGAAAGCUGAUGUCCUGACCACUGGAGCUGGUAACC\
) } def
/len { sequence length } bind def

/coor [
[172.78665161 67.32645416]
[173.44314575 52.34091187]
[161.60604858 61.55410385]
[149.76893616 70.76729584]
[137.93182373 79.98048401]
[126.09471893 89.19367218]
[126.15274048 110.66514587]
[111.09609985 125.97282410]
[89.62660217 126.26982117]
[80.61038208 138.25764465]
[78.49891663 153.93731689]
[64.66523743 159.45805359]
[55.64902115 171.44587708]
[46.63280487 183.43370056]
[37.61658478 195.42152405]
[28.60036850 207.40933228]
[19.58415222 219.39715576]
[18.13874245 235.73248291]
[3.15714717 242.40209961]
[-9.94885445 232.54489136]
[-7.69693136 216.30108643]
[7.59633160 210.38093567]
[16.61254883 198.39312744]
[25.62876511 186.40530396]
[34.64498138 174.41748047]
[43.66120148 162.42965698]
[52.67741776 150.44184875]
[54.14398193 135.61961365]
[68.62256622 129.24142456]
[77.63877869 117.25360870]
[77.15030670 116.60128021]
[76.68084717 115.93512726]
[62.49359131 120.80561829]
[48.30633163 125.67610931]
[34.11907196 130.54660034]
[23.76280022 143.26193237]
[7.61814976 140.38403320]
[2.29335499 124.87343597]
[13.26610756 112.68611145]
[29.24858093 116.35934448]
[43.43584061 111.48885345]
[57.62309647 106.61835480]
[71.81035614 101.74786377]
[73.16320038 91.19676208]
[78.32286072 81.89440155]
[86.55744934 75.16033936]
[96.69886780 71.94979858]
[107.30856323 72.71821594]
[116.88153076 77.35656738]
[128.71864319 68.14337921]
[140.55574036 58.93018723]
[152.39285278 49.71699524]
[164.22996521 40.50380325]
[175.59568787 30.71501923]
[186.46206665 20.37471771]
[197.32844543 10.03441620]
[197.88336182 -5.53252983]
[209.05070496 -15.86427021]
[223.88800049 -15.23930645]
[234.75437927 -25.57960701]
[239.41783142 -40.69789886]
[253.97152710 -43.86639023]
[264.83789062 -54.20669174]
[275.70428467 -64.54699707]
[286.57064819 -74.88729095]
[297.43704224 -85.22759247]
[302.10049438 -100.34588623]
[316.65417480 -103.51438141]
[327.52056885 -113.85468292]
[332.32034302 -133.42126465]
[351.27661133 -137.18226624]
[361.79516602 -147.87619019]
[372.31372070 -158.57011414]
[382.74349976 -169.35063171]
[393.08380127 -180.21701050]
[403.42410278 -191.08338928]
[413.76440430 -201.94976807]
[408.40124512 -218.66900635]
[412.21447754 -235.71717834]
[424.06817627 -248.42823792]
[440.63854980 -253.36991882]
[457.34552002 -249.27021790]
[467.32089233 -260.47253418]
[477.29626465 -271.67486572]
[463.14508057 -266.70053101]
[448.90997314 -271.42938232]
[440.54812622 -283.88247681]
[441.55880737 -298.84838867]
[451.51910400 -310.06411743]
[466.26074219 -312.83609009]
[479.61462402 -306.00424194]
[485.99249268 -292.42636108]
[486.98385620 -307.39358521]
[487.97518921 -322.36077881]
[488.96655273 -337.32800293]
[483.98025513 -353.53210449]
[498.17074585 -362.80926514]
[511.01370239 -351.74151611]
[503.93377686 -336.33663940]
[502.94241333 -321.36941528]
[501.95104980 -306.40222168]
[500.95968628 -291.43502808]
[513.71734619 -283.54440308]
[526.47387695 -275.65444946]
[539.42272949 -283.22595215]
[543.03881836 -288.79553223]
[548.15972900 -291.31164551]
[552.92724609 -290.82556152]
[566.11938477 -297.96475220]
[579.31146240 -305.10397339]
[592.50360107 -312.24319458]
[605.69567871 -319.38238525]
[610.12353516 -331.50924683]
[621.27294922 -337.18038940]
[632.91021729 -333.83773804]
[646.21856689 -340.75784302]
[651.22180176 -360.19949341]
[668.62792969 -369.57504272]
[687.03869629 -363.25299072]
[699.98754883 -370.82446289]
[712.93640137 -378.39593506]
[725.88525391 -385.96743774]
[727.28808594 -401.42095947]
[737.53167725 -413.07638550]
[752.67718506 -416.45190430]
[766.90075684 -410.24960327]
[774.73327637 -396.85440063]
[773.16284180 -381.41699219]
[762.79345703 -369.87341309]
[747.61224365 -366.66235352]
[733.45672607 -373.01858521]
[720.50787354 -365.44711304]
[707.55908203 -357.87561035]
[694.61022949 -350.30413818]
[694.77722168 -340.00961304]
[690.61486816 -330.50424194]
[682.81579590 -323.53744507]
[672.74847412 -320.42175293]
[662.21710205 -321.78594971]
[653.13867188 -327.44949341]
[639.83038330 -320.52938843]
[631.21667480 -305.24859619]
[612.83489990 -306.19027710]
[599.64276123 -299.05108643]
[586.45068359 -291.91186523]
[573.25860596 -284.77264404]
[560.06646729 -277.63345337]
[546.99420166 -270.27709961]
[534.04534912 -262.70559692]
[488.49856567 -261.69949341]
[478.52319336 -250.49716187]
[468.54782104 -239.29484558]
[473.79174805 -227.77899170]
[474.28637695 -215.08827209]
[469.92272949 -203.11131287]
[461.31735229 -193.64395142]
[449.72564697 -188.11994934]
[436.85870361 -187.39396667]
[424.63079834 -191.60946655]
[414.29049683 -180.74308777]
[403.95019531 -169.87670898]
[393.60989380 -159.01033020]
[391.27224731 -151.98481750]
[383.00765991 -148.05155945]
[372.48910522 -137.35763550]
[361.97055054 -126.66371155]
[362.97286987 -116.47265625]
[358.08932495 -107.22263336]
[348.72344971 -102.09052277]
[337.86087036 -102.98830414]
[326.99447632 -92.64800262]
[323.10827637 -78.26931763]
[307.77734375 -74.36122131]
[296.91094971 -64.02091980]
[286.04458618 -53.68061447]
[275.17819214 -43.34031296]
[264.31182861 -33.00001144]
[260.42559814 -18.62133026]
[245.09468079 -14.71322918]
[234.22830200 -4.37292814]
[234.11680603 10.47709465]
[223.24404907 21.11842537]
[207.66874695 20.90079498]
[196.80236816 31.24109650]
[185.93598938 41.58139801]
[200.85331726 43.15401077]
[210.40800476 54.71723175]
[209.14025879 69.66356659]
[197.77450562 79.45232391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 51]
[5 50]
[6 49]
[9 30]
[10 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[32 43]
[33 42]
[34 41]
[35 40]
[54 185]
[55 184]
[56 183]
[59 180]
[60 179]
[62 177]
[63 176]
[64 175]
[65 174]
[66 173]
[68 171]
[69 170]
[71 166]
[72 165]
[73 164]
[74 162]
[75 161]
[76 160]
[77 159]
[82 152]
[83 151]
[84 150]
[92 102]
[93 101]
[94 100]
[95 99]
[104 149]
[105 148]
[108 147]
[109 146]
[110 145]
[111 144]
[112 143]
[115 141]
[116 140]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
