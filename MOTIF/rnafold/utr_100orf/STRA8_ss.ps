%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAAGAUUGAUGUGGACAAGAUCCUCUUUUUCAAUCAAGAAAUCAGGCUGUGGCAGCUUAUAAUGGCAACCCCUGAAGAAAACAGCAAUCCCCAUG\
) } def
/len { sequence length } bind def

/coor [
[96.72312164 235.84321594]
[96.25662231 220.85047913]
[95.79012299 205.85774231]
[95.32362366 190.86499023]
[94.85713196 175.87225342]
[94.39063263 160.87950134]
[93.92413330 145.88676453]
[68.56695557 133.97755432]
[54.72390747 109.62216949]
[39.74023056 110.32176971]
[24.75655365 111.02137756]
[9.77287769 111.72098541]
[-5.21079826 112.42059326]
[-20.19447517 113.12019348]
[-28.76757050 125.91895294]
[-43.06598663 131.15428162]
[-57.53431702 127.01528168]
[-66.68161774 115.29073334]
[-81.66529083 115.99034119]
[-96.64897156 116.68994904]
[-105.06140900 129.72875977]
[-119.54335785 135.30125427]
[-134.52621460 131.26470947]
[-144.24876404 119.17125702]
[-144.97248840 103.67106628]
[-136.41909790 90.72428894]
[-121.87754822 85.30921173]
[-106.93936157 89.50805664]
[-97.34857178 101.70626831]
[-82.36489868 101.00666809]
[-67.38122559 100.30706024]
[-59.36620331 87.78118896]
[-45.34648895 82.31204224]
[-30.62245750 86.19227600]
[-20.89408112 98.13652039]
[-5.91040421 97.43691254]
[9.07327175 96.73730469]
[24.05694771 96.03770447]
[39.04062271 95.33809662]
[54.02429962 94.63848877]
[57.66399384 81.28707886]
[65.08787537 69.60831451]
[75.63237000 60.64610291]
[88.35494995 55.20152283]
[102.11841583 53.76123810]
[115.69253540 56.45399094]
[127.86398315 63.03908539]
[138.71511841 52.68278503]
[149.56623840 42.32648468]
[160.41737366 31.97018242]
[171.26850891 21.61388206]
[169.34460449 6.32974720]
[176.70336914 -7.00074100]
[190.33929443 -13.36671734]
[204.93434143 -10.51673794]
[215.78547668 -20.87303925]
[220.42665100 -35.99818420]
[234.97566223 -39.18811798]
[245.82679749 -49.54441833]
[243.62416077 -64.90436554]
[250.90031433 -78.60974121]
[264.85739136 -85.39054871]
[280.12863159 -82.63942719]
[290.84194946 -71.41424561]
[292.87780762 -56.03130341]
[285.45343018 -42.40566254]
[271.42358398 -35.77666473]
[256.18310547 -38.69328690]
[245.33195496 -28.33698654]
[241.46693420 -13.95259190]
[226.14178467 -10.02190685]
[215.29064941 0.33439299]
[217.45680237 15.04648876]
[210.46177673 28.37065887]
[196.80258179 35.09967804]
[181.62480164 32.46501160]
[170.77366638 42.82131195]
[159.92254639 53.17761230]
[149.07141113 63.53391266]
[138.22027588 73.89021301]
[141.73344421 79.97923279]
[144.28398132 86.53005219]
[145.81309509 93.39155579]
[146.28549194 100.40549469]
[145.69027710 107.41007233]
[144.04119873 114.24373627]
[141.37626648 120.74886322]
[137.75697327 126.77539825]
[133.26678467 132.18434143]
[128.00927734 136.85093689]
[122.10571289 140.66752625]
[115.69227600 143.54611206]
[108.91687775 145.42025757]
[109.38337708 160.41300964]
[109.84987640 175.40574646]
[110.31636810 190.39849854]
[110.78286743 205.39123535]
[111.24936676 220.38398743]
[111.71586609 235.37672424]
[114.50455475 254.55674744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[6 94]
[7 93]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[18 31]
[19 30]
[20 29]
[47 80]
[48 79]
[49 78]
[50 77]
[51 76]
[55 72]
[56 71]
[58 69]
[59 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
