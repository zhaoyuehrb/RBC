%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUUUCUAACGCUGAACUUAAAAAGUGUUGAGAUGAAUAAUGAAGAGGACCUUCUGCAGGAGGACUCAACAAGAGAUGAAGGCAAUGAGACUGAAGCCAACAGCAUGAACACAUUAAGAAGGACAAGGAAGA\
) } def
/len { sequence length } bind def

/coor [
[114.39488220 158.63240051]
[107.66289520 145.22790527]
[100.93090820 131.82342529]
[86.33523560 128.36418152]
[74.30339050 137.32156372]
[62.27154160 146.27894592]
[50.23969269 155.23632812]
[38.20784378 164.19369507]
[33.13342285 171.90158081]
[25.79019547 173.21565247]
[13.55317688 181.89064026]
[1.31615734 190.56561279]
[-10.92086124 199.24060059]
[-23.15788078 207.91558838]
[-35.39490128 216.59057617]
[-33.88742065 231.87530518]
[-40.23888779 245.85939026]
[-52.74079132 254.78115845]
[-68.03017426 256.24072266]
[-81.99427032 249.84545898]
[-90.87681580 237.31564331]
[-92.28844452 222.02175903]
[-85.84943390 208.07777405]
[-73.29185486 199.23455811]
[-57.99361801 197.87086487]
[-44.06988525 204.35356140]
[-31.83286476 195.67857361]
[-19.59584618 187.00358582]
[-7.35882759 178.32859802]
[4.87819147 169.65361023]
[17.11520958 160.97863770]
[29.25046539 152.16184998]
[41.28231430 143.20446777]
[53.31415939 134.24710083]
[65.34600830 125.28971863]
[77.37785339 116.33233643]
[62.52452087 118.42479706]
[48.74055481 124.34107208]
[33.80541611 122.94762421]
[21.35380554 114.58357239]
[14.41600513 101.28443909]
[14.68043900 86.28677368]
[22.08275223 73.24047852]
[34.82147598 65.32057190]
[49.79645157 64.45449066]
[63.36355972 70.85322571]
[75.49592590 79.67398071]
[69.07766724 66.11647034]
[62.65941238 52.55896378]
[50.74842453 47.45627594]
[45.70401764 35.95824432]
[49.74874878 24.49715042]
[43.64769745 10.79396915]
[37.54664993 -2.90921307]
[31.44559860 -16.61239433]
[25.34454918 -30.31557655]
[11.76654148 -39.51175690]
[13.21138954 -55.84713364]
[28.19275665 -62.51726532]
[41.29909515 -52.66049957]
[39.04772949 -36.41662598]
[45.14878082 -22.71344376]
[51.24982834 -9.01026249]
[57.35087967 4.69291925]
[63.45193100 18.39610100]
[78.17506409 27.87367439]
[76.21691895 46.14070892]
[82.63517761 59.69821548]
[89.05342865 73.25572205]
[96.13049316 75.73870087]
[96.99776459 60.76379013]
[97.86502838 45.78888321]
[94.32127380 31.21349907]
[99.81337738 17.25510216]
[112.33910370 9.00244999]
[127.33199310 9.46417332]
[139.32615662 18.47194481]
[143.94894409 32.74184036]
[139.51502991 47.07154465]
[127.64261627 56.23629761]
[118.96361542 68.47047424]
[110.28462219 80.70465088]
[117.36168671 83.18762207]
[130.84359741 76.61206055]
[144.32551575 70.03649139]
[144.19787598 54.77390671]
[150.71284485 40.97108078]
[162.57684326 31.36857224]
[177.43428040 27.87296867]
[192.33520508 31.17832184]
[204.32101440 40.62835312]
[211.01193237 54.34675217]
[211.07945251 69.60971832]
[204.51017761 83.38678741]
[192.60845947 92.94249725]
[177.73736572 96.37957001]
[162.84957886 93.01555634]
[150.90107727 83.51840210]
[137.41915894 90.09397125]
[123.93725586 96.66953278]
[121.53678894 103.77500916]
[136.52078247 104.46797943]
[150.36497498 98.69407654]
[164.86222839 102.54501343]
[174.01620483 114.42797852]
[174.04063416 129.42796326]
[164.92543030 141.34068298]
[150.44079590 145.23884583]
[136.57786560 139.51007080]
[129.07019043 126.52201843]
[116.73586273 117.98596191]
[114.33539581 125.09143829]
[121.06738281 138.49592590]
[127.79937744 151.90042114]
[142.61540222 149.00424194]
[157.66329956 150.21394348]
[171.82641602 155.43974304]
[184.05374146 164.29383850]
[193.43792725 176.11921692]
[199.28260803 190.03834534]
[201.15408325 205.01834106]
[198.91345215 219.94758606]
[192.72700500 233.71821594]
[183.05381775 245.30838013]
[170.61169434 253.85800171]
[156.32391357 258.73263550]
[141.25074768 259.57055664]
[126.51070404 256.30960083]
[113.19760895 249.19174194]
[102.29937744 238.74516296]
[94.62472534 225.74507141]
[90.74316406 211.15617371]
[90.94273376 196.06105042]
[95.20862579 181.57986450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[10 31]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[47 69]
[48 68]
[49 67]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[83 100]
[84 99]
[85 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
