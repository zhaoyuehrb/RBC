%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGACAGGCAUUCAGGCAGAGCAAGCUCCAGGUUUCACCACAAUGCCCAUCCCUGCCUCCCCACUCCACCCACCUCUGCCUUCCUUACUGCUGUAUCUGCUGCUUGAACUGGCAGGAGUCACACAUGUGUUCCAUGUGCAAC\
) } def
/len { sequence length } bind def

/coor [
[63.23150253 129.14515686]
[57.81429291 120.53604889]
[43.45137405 124.86115265]
[29.08845329 129.18626404]
[14.72553349 133.51136780]
[9.39479065 149.52645874]
[-4.27979374 159.13575745]
[-20.82240105 158.73220825]
[-33.75057602 148.67109680]
[-48.01642227 153.30636597]
[-62.28227234 157.94161987]
[-76.54811859 162.57687378]
[-90.81396484 167.21212769]
[-105.07981110 171.84738159]
[-112.30144501 185.64903259]
[-126.83507538 190.14662170]
[-139.94834900 183.17684937]
[-154.21418762 187.81210327]
[-161.43582153 201.61376953]
[-175.96945190 206.11134338]
[-189.08271790 199.14157104]
[-203.34857178 203.77682495]
[-217.61441040 208.41207886]
[-231.88026428 213.04734802]
[-235.70263672 227.99368286]
[-247.01438904 238.48405457]
[-262.20596313 241.17103577]
[-276.42977905 235.19720459]
[-285.14706421 222.46881104]
[-285.57620239 207.04740906]
[-277.58020020 193.85394287]
[-263.71060181 187.09837341]
[-248.39312744 188.93638611]
[-236.51551819 198.78149414]
[-222.24966431 194.14624023]
[-207.98382568 189.51098633]
[-193.71797180 184.87573242]
[-187.20584106 171.52928162]
[-172.80427551 166.62524414]
[-158.84944153 173.54624939]
[-144.58360291 168.91099548]
[-138.07147217 155.56454468]
[-123.66989899 150.66052246]
[-109.71507263 157.58152771]
[-95.44921875 152.94627380]
[-81.18337250 148.31101990]
[-66.91752625 143.67576599]
[-52.65167999 139.04051208]
[-38.38582993 134.40525818]
[-35.43898010 121.34191895]
[-26.33520508 111.37329102]
[-13.38572121 107.18949127]
[0.04212807 109.99139404]
[10.40042877 119.14844513]
[24.76334763 114.82334137]
[39.12626648 110.49822998]
[53.48918915 106.17312622]
[53.77251816 91.97609711]
[58.29009628 78.51403046]
[66.62812805 67.01998138]
[78.02288818 58.54677582]
[91.43066406 53.87051392]
[105.62335968 53.41952133]
[119.30097198 57.23511124]
[131.21069336 64.96779633]
[142.85083008 55.50695419]
[154.49095154 46.04611588]
[166.13107300 36.58528137]
[177.77120972 27.12444115]
[179.53916931 11.64826393]
[191.47868347 2.21944737]
[206.22195435 4.00030041]
[217.86207581 -5.46053696]
[229.50221252 -14.92137432]
[231.27017212 -30.39755249]
[243.20968628 -39.82637024]
[257.95297241 -38.04551697]
[269.59307861 -47.50635529]
[275.71875000 -64.83538055]
[293.10021973 -67.01329041]
[304.53265381 -76.72409058]
[299.94537354 -91.18896484]
[301.24209595 -106.26747894]
[308.19421387 -119.66456604]
[319.71463013 -129.35307312]
[334.02783203 -133.88044739]
[348.94329834 -132.58648682]
[362.19082642 -125.69939423]
[373.62326050 -135.41018677]
[385.05569458 -145.12098694]
[390.05914307 -160.73820496]
[406.14093018 -163.94880676]
[416.75750732 -151.45001221]
[410.98745728 -136.09948730]
[394.76651001 -133.68855286]
[383.33407593 -123.97776031]
[371.90164185 -114.26696014]
[376.55477905 -100.07973480]
[375.41864014 -85.15142059]
[368.63528442 -71.75922394]
[357.21063232 -61.95797729]
[342.86529541 -57.26487350]
[327.77563477 -58.42465973]
[314.24343872 -65.29165649]
[302.81100464 -55.58086014]
[301.49914551 -43.50902939]
[291.98925781 -35.32783890]
[279.05392456 -35.86622620]
[267.41378784 -26.40538979]
[266.14385986 -11.60934830]
[254.47387695 -1.84889519]
[238.96304321 -3.28124809]
[227.32292175 6.17958975]
[215.68278503 15.64042759]
[214.41285706 30.43646812]
[202.74287415 40.19692230]
[187.23204041 38.76456833]
[175.59191895 48.22540665]
[163.95178223 57.68624496]
[152.31166077 67.14707947]
[140.67153931 76.60791779]
[146.81761169 96.92197418]
[143.38403320 117.86583710]
[131.07337952 135.15406799]
[139.08332825 147.83636475]
[147.09326172 160.51866150]
[155.10321045 173.20097351]
[163.11315918 185.88327026]
[171.12309265 198.56558228]
[186.39248657 203.48751831]
[191.92965698 218.54470825]
[183.48696899 232.18658447]
[167.54092407 233.94824219]
[156.32397461 222.47830200]
[158.44079590 206.57551575]
[150.43084717 193.89321899]
[142.42091370 181.21092224]
[134.41096497 168.52861023]
[126.40102386 155.84631348]
[118.39107513 143.16400146]
[108.65634155 146.11323547]
[98.51477051 146.89517212]
[88.44299316 145.47305298]
[78.91439819 141.91372681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 57]
[3 56]
[4 55]
[5 54]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[17 41]
[18 40]
[21 37]
[22 36]
[23 35]
[24 34]
[65 121]
[66 120]
[67 119]
[68 118]
[69 117]
[72 114]
[73 113]
[74 112]
[77 109]
[78 108]
[80 105]
[81 104]
[88 97]
[89 96]
[90 95]
[124 140]
[125 139]
[126 138]
[127 137]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
