%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCAUAUGGCUUCACCUAAAGGUUUUUUUAAUUACUUGACCUAUUUUCUUGCUGCUGGUGCUGUCACUUUGGGAAUUGGUUUCUUUGCUUUGGCAUCAGCUUUGU\
) } def
/len { sequence length } bind def

/coor [
[80.74989319 168.09559631]
[75.16256714 182.01614380]
[69.57524109 195.93669128]
[63.98791885 209.85725403]
[66.84169769 226.00617981]
[54.11091232 236.34344482]
[38.89189911 230.23495483]
[36.84067535 213.96459961]
[50.06736374 204.26992798]
[55.65468979 190.34936523]
[61.24201584 176.42881775]
[66.82933807 162.50827026]
[58.27221298 157.15214539]
[50.56431198 150.63288879]
[43.86251450 143.08316040]
[38.30320358 134.65661621]
[33.99952698 125.52476501]
[31.03906822 115.87343597]
[29.48207855 105.89905548]
[29.36024475 95.80462646]
[30.67604828 85.79557037]
[16.38322830 81.24416351]
[2.09040713 76.69276428]
[-12.20241356 72.14135742]
[-26.49523354 67.58995056]
[-36.58716965 78.99489594]
[-50.44811249 85.30316162]
[-65.67656708 85.42179871]
[-79.63410950 79.33026123]
[-89.90251923 68.08393860]
[-94.70272064 53.63133240]
[-93.20306396 38.47643280]
[-85.66336060 25.24492645]
[-73.38991547 16.22924995]
[-58.50917816 12.99141979]
[-43.59932327 16.09241486]
[-31.24357605 24.99496460]
[-23.58264542 38.15665054]
[-21.94382858 53.29713440]
[-7.65100908 57.84853745]
[6.64181137 62.39994049]
[20.93463135 66.95134735]
[35.22745132 71.50275421]
[42.48364258 58.77567673]
[52.20505524 47.81552505]
[63.97501755 39.09206390]
[77.28905487 32.97919083]
[91.57650757 29.73890877]
[106.22499847 29.51010323]
[120.60668182 32.30258179]
[134.10514832 37.99665070]
[146.14181519 46.34825897]
[156.20079041 56.99944305]
[163.85092163 69.49368286]
[168.76434326 83.29546356]
[183.63360596 81.31938171]
[198.50286865 79.34329224]
[213.37214661 77.36721039]
[228.24140930 75.39112854]
[243.11067200 73.41503906]
[257.97994995 71.43895721]
[272.84921265 69.46287537]
[287.71847534 67.48678589]
[302.58773804 65.51070404]
[305.85095215 52.53182983]
[313.35379028 41.48889160]
[324.16577148 33.71196747]
[336.95962524 30.12856102]
[350.17398071 31.15302086]
[362.20404053 36.63875198]
[371.59649658 45.89872742]
[377.22497559 57.79144287]
[392.18460083 56.69140625]
[407.14419556 55.59136963]
[422.10382080 54.49133301]
[437.06341553 53.39129639]
[448.59146118 42.23406601]
[464.48303223 44.43344879]
[472.54748535 58.30226517]
[466.59848022 73.20154572]
[451.19955444 77.70184326]
[438.16345215 68.35090637]
[423.20385742 69.45094299]
[408.24423218 70.55097961]
[393.28463745 71.65101624]
[378.32501221 72.75105286]
[372.67861938 88.53207397]
[360.71820068 100.35182190]
[344.76809692 105.84674072]
[327.95697021 103.88892365]
[313.60403442 94.81727600]
[304.56381226 80.37996674]
[289.69454956 82.35605621]
[274.82528687 84.33213806]
[259.95602417 86.30821991]
[245.08676147 88.28430939]
[230.21749878 90.26039124]
[215.34822083 92.23648071]
[200.47895813 94.21256256]
[185.60969543 96.18864441]
[170.74043274 98.16473389]
[168.71025085 116.92562103]
[161.79405212 134.48292542]
[150.48361206 149.58810425]
[135.58325195 161.16705322]
[118.15254211 168.39636230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[72 86]
[73 85]
[74 84]
[75 83]
[76 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
