%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACUUUGGAGUGCAGAACCAUUUCAGACAUGCUGAGGGGGACUCUACUGUGCGCGGUGCUCGGGCUUCUGCGCGCCCAGCCCUUCCCCUGUCCGCCAGCUUGCAAGUGUGUCUUCCGGGACGCCGCGC\
) } def
/len { sequence length } bind def

/coor [
[-70.28652191 191.06854248]
[-81.84959412 200.62341309]
[-96.57752228 197.77943420]
[-103.75181580 184.60636902]
[-98.15080261 170.69070435]
[-112.87973022 173.52946472]
[-121.74985504 186.33410645]
[-136.72752380 189.00318909]
[-148.88012695 180.46797180]
[-163.60905457 183.30674744]
[-178.33798218 186.14550781]
[-193.06690979 188.98428345]
[-207.79583740 191.82304382]
[-222.52478027 194.66181946]
[-211.15286255 204.44340515]
[-209.80934143 219.38311768]
[-219.25363159 231.03668213]
[-234.14758301 232.81723022]
[-246.07278442 223.71836853]
[-248.28884888 208.88296509]
[-239.54373169 196.69668579]
[-254.52674866 197.41041565]
[-267.94311523 205.79559326]
[-281.02413940 198.67263794]
[-296.00714111 199.38636780]
[-310.99017334 200.10009766]
[-325.97317505 200.81382751]
[-340.95617676 201.52755737]
[-355.93917847 202.24128723]
[-367.75125122 213.09738159]
[-383.58078003 210.48875427]
[-391.28475952 196.41648865]
[-384.95333862 181.67564392]
[-369.44342041 177.57412720]
[-356.65292358 187.25827026]
[-341.66992188 186.54454041]
[-326.68688965 185.83081055]
[-311.70388794 185.11708069]
[-296.72088623 184.40335083]
[-281.73785400 183.68963623]
[-269.39315796 175.35549927]
[-255.24047852 182.42739868]
[-240.25746155 181.71366882]
[-225.36354065 179.93289185]
[-210.63461304 177.09411621]
[-195.90568542 174.25535583]
[-181.17675781 171.41658020]
[-166.44781494 168.57781982]
[-151.71888733 165.73904419]
[-143.60902405 153.29855347]
[-128.71223450 150.20982361]
[-115.71849823 158.80053711]
[-100.98957062 155.96177673]
[-86.45550537 152.25216675]
[-72.16775513 147.68487549]
[-57.88000870 143.11758423]
[-43.59225845 138.55027771]
[-29.30450821 133.98298645]
[-15.01675892 129.41567993]
[-0.72900915 124.84838867]
[13.55874062 120.28108978]
[27.79113007 115.54409790]
[41.96614075 110.63807678]
[56.14115524 105.73205566]
[70.31616974 100.82603455]
[84.49118042 95.92002106]
[104.71625519 72.58993530]
[117.13849640 64.18231964]
[120.09918976 46.98865509]
[134.27273560 37.40372086]
[150.67427063 40.91788864]
[162.89291382 32.21703720]
[175.11155701 23.51618385]
[180.35176086 15.91283131]
[187.72610474 14.75774384]
[200.14834595 6.35012960]
[212.57058716 -2.05748463]
[215.68399048 -17.32000160]
[228.40167236 -25.66955948]
[242.93296814 -22.60734177]
[255.35520935 -31.01495552]
[267.77743530 -39.42256927]
[268.15975952 -54.93493271]
[277.61373901 -67.23949432]
[292.50408936 -71.60489655]
[307.10522461 -66.35255432]
[315.80264282 -53.50209808]
[315.25207520 -37.99479294]
[305.66519165 -25.79351425]
[290.72833252 -21.58990097]
[276.18505859 -27.00032997]
[263.76281738 -18.59271622]
[251.34059143 -10.18510151]
[248.78271484 4.44339418]
[236.30456543 13.14686966]
[220.97819519 10.36475468]
[208.55595398 18.77236938]
[196.13371277 27.17998314]
[183.81240845 35.73482132]
[171.59376526 44.43567657]
[159.37512207 53.13652802]
[159.02227783 66.07337952]
[151.14089966 76.58340454]
[138.44927979 80.66583252]
[125.54610443 76.60456085]
[113.12387085 85.01217651]
[112.94537354 100.01111603]
[125.16400909 108.71196747]
[137.38264465 117.41281891]
[153.37835693 116.18106842]
[164.20866394 128.01676941]
[161.56550598 143.84059143]
[147.47647095 151.51385498]
[132.74946594 145.15026855]
[128.68179321 129.63145447]
[116.46315765 120.93061066]
[104.24452209 112.22975159]
[89.39720154 110.09503174]
[75.22218323 115.00105286]
[61.04717255 119.90706635]
[46.87216187 124.81308746]
[32.69714737 129.71910095]
[25.52709579 135.53813171]
[18.12603760 134.56883240]
[3.83828831 139.13613892]
[-10.44946194 143.70343018]
[-24.73721123 148.27073669]
[-39.02495956 152.83802795]
[-53.31270981 157.40531921]
[-67.60046387 161.97262573]
[-81.88821411 166.53991699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 53]
[6 52]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[21 43]
[22 42]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[67 106]
[68 105]
[71 101]
[72 100]
[73 99]
[75 98]
[76 97]
[77 96]
[80 93]
[81 92]
[82 91]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
