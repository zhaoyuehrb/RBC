%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGCAGAUCAGUGUGUGAGGGAACUGCCAUCAUGAGGUCUGACAAGUCAGCUUUGGUAUUUCUGCUCCUGCAGCUCUUCUGUGUUGGCUGUGGAUUCUGUGGGAAAGUCCUGGUGUGGCCCUGUGACAUGA\
) } def
/len { sequence length } bind def

/coor [
[56.67924500 389.23858643]
[49.56310654 403.02770996]
[35.68588638 409.97052002]
[20.38365555 407.39730835]
[9.54043388 396.29757690]
[7.32566309 380.93936157]
[14.59096718 367.22824097]
[28.54268837 360.43640137]
[31.03013802 345.64410400]
[33.51758957 330.85177612]
[31.50487900 323.66400146]
[36.24427032 315.73880005]
[39.08303833 301.00985718]
[41.92180634 286.28094482]
[31.62851143 275.54846191]
[29.60474777 260.63644409]
[36.83430481 247.23542786]
[50.72914124 240.58413696]
[53.56790924 225.85520935]
[56.40668106 211.12628174]
[42.49164581 216.72734070]
[29.31832314 209.55351257]
[26.47381401 194.82569885]
[36.02825165 183.26228333]
[51.02824402 183.27871704]
[60.55745697 194.86369324]
[65.12475586 180.57594299]
[69.69205475 166.28819275]
[74.25935364 152.00044250]
[73.29005432 144.59938049]
[79.10908508 137.42933655]
[84.01509857 123.25431824]
[88.92111969 109.07930756]
[86.46385956 95.31509399]
[96.90386963 86.01467133]
[101.80989075 71.83966064]
[106.71590424 57.66464996]
[110.94189453 43.27225494]
[114.47827911 28.69507980]
[118.01466370 14.11790752]
[113.74897766 -1.11739767]
[124.26874542 -11.66176987]
[127.80513000 -26.23894310]
[131.34150696 -40.81611633]
[133.47624207 -55.66343689]
[134.18995667 -70.64644623]
[134.90368652 -85.62945557]
[135.61741638 -100.61247253]
[136.33114624 -115.59548187]
[137.04487610 -130.57849121]
[137.75860596 -145.56149292]
[129.64633179 -155.67079163]
[130.60707092 -168.19358826]
[139.57402039 -176.40322876]
[140.64411926 -191.36500549]
[141.71420288 -206.32678223]
[128.54501343 -213.96444702]
[120.03256226 -226.51136780]
[117.82091522 -241.44886780]
[122.29576111 -255.80633545]
[132.51838684 -266.75198364]
[146.42207336 -272.15136719]
[147.49215698 -287.11312866]
[148.56224060 -302.07492065]
[149.63232422 -317.03671265]
[141.98400879 -331.54309082]
[150.95053101 -345.27383423]
[167.30789185 -344.10394287]
[174.22904968 -329.23687744]
[164.59411621 -315.96661377]
[163.52403259 -301.00482178]
[162.45393372 -286.04306030]
[161.38385010 -271.08126831]
[174.37759399 -263.75814819]
[182.93844604 -251.46908569]
[185.32446289 -236.62091064]
[181.00950623 -222.15020752]
[170.79808044 -210.94244385]
[156.67597961 -205.25669861]
[155.60589600 -190.29492188]
[154.53581238 -175.33312988]
[163.06301880 -160.04278564]
[152.74162292 -144.84776306]
[152.02789307 -129.86476135]
[151.31416321 -114.88175201]
[150.60043335 -99.89874268]
[149.88670349 -84.91573334]
[149.17297363 -69.93271637]
[148.45924377 -54.94971085]
[159.42655945 -65.18289185]
[174.29069519 -67.19717407]
[187.58592224 -60.25188065]
[194.42338562 -46.90088272]
[192.28886414 -32.05353165]
[181.96723938 -21.16940308]
[167.25393677 -18.25074005]
[153.55921936 -24.37077332]
[145.91868591 -37.27973175]
[142.38230896 -22.70256042]
[138.84591675 -8.12538624]
[143.36454773 6.06726170]
[132.59184265 17.65429115]
[129.05545044 32.23146439]
[125.51906586 46.80863953]
[126.95628357 49.32319641]
[127.43362427 52.58539200]
[126.65069580 56.21324539]
[124.45816040 59.71966553]
[120.89091492 62.57066727]
[115.98490143 76.74568176]
[111.07888031 90.92069244]
[113.53614044 104.68490601]
[103.09613037 113.98532867]
[98.19010925 128.16033936]
[93.28409576 142.33535767]
[88.54709625 156.56773376]
[83.97980499 170.85548401]
[79.41250610 185.14323425]
[74.84520721 199.43098450]
[71.13561249 213.96504211]
[68.29684448 228.69398499]
[65.45807648 243.42291260]
[75.88555908 254.76194763]
[77.61660004 269.88995361]
[70.19556427 282.98165894]
[56.65073776 289.11968994]
[53.81196976 303.84863281]
[50.97320175 318.57754517]
[48.30990219 333.33923340]
[45.82245255 348.13153076]
[43.33500290 362.92385864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 131]
[9 130]
[10 129]
[12 128]
[13 127]
[14 126]
[18 122]
[19 121]
[20 120]
[26 119]
[27 118]
[28 117]
[29 116]
[31 115]
[32 114]
[33 113]
[35 111]
[36 110]
[37 109]
[38 104]
[39 103]
[40 102]
[42 100]
[43 99]
[44 98]
[45 89]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[54 81]
[55 80]
[56 79]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
