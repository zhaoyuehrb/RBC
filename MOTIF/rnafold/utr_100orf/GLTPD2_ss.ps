%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACACGGACUGGCUAGGCGCUGGUGAGGGGGCGGCGGUCCCAGCAGCAGGCAUGGGAGUGGCGGCGCGGCCCCCAGCCCUGCGGCACUGGUUCAGCCACUCAAUUCCUCUCGCUAUCUUCGCGCUGCUGCUGCUUUAUCUCAGUGUUCGGA\
) } def
/len { sequence length } bind def

/coor [
[165.44770813 589.63665771]
[175.21859741 576.91235352]
[174.60676575 561.92480469]
[173.99494934 546.93731689]
[173.38311768 531.94976807]
[172.77128601 516.96228027]
[172.15945435 501.97473145]
[171.24203491 487.00280762]
[170.01939392 472.05273438]
[168.79675293 457.10263062]
[155.53216553 446.80816650]
[153.75315857 429.77322388]
[165.03988647 416.44573975]
[163.51252747 401.52371216]
[161.98518372 386.60165405]
[145.09545898 375.18096924]
[141.95439148 354.74182129]
[154.99668884 338.32171631]
[152.25814819 323.57382202]
[149.51959229 308.82592773]
[146.78105164 294.07803345]
[144.04251099 279.33013916]
[140.55570984 264.74102783]
[136.32971191 250.34863281]
[132.10372925 235.95623779]
[127.87773895 221.56384277]
[123.65174866 207.17144775]
[119.42575836 192.77905273]
[115.19977570 178.38665771]
[110.97378540 163.99426270]
[106.74779510 149.60186768]
[102.52180481 135.20947266]
[98.29582214 120.81708527]
[80.35675812 107.09917450]
[85.38103485 85.08219147]
[79.42943573 71.31343842]
[73.47782898 57.54468918]
[58.29676819 55.67853546]
[46.16815186 46.52465820]
[40.28894806 32.62137222]
[42.14586639 17.74159431]
[51.14083481 5.86910105]
[45.18923187 -7.89964771]
[39.23763275 -21.66839600]
[33.28602982 -35.43714523]
[15.45205021 -41.68857574]
[7.92165279 -58.67432785]
[15.01755524 -75.50180817]
[8.50929928 -89.01634216]
[2.00104356 -102.53087616]
[-4.50721264 -116.04541016]
[-11.01546860 -129.55993652]
[-25.66160393 -134.86357117]
[-32.06938171 -148.66194153]
[-26.92292213 -162.59210205]
[-33.43117905 -176.10664368]
[-39.93943405 -189.62117004]
[-46.44768906 -203.13571167]
[-59.40642548 -212.21214294]
[-57.95751572 -227.03610229]
[-64.46577454 -240.55064392]
[-77.42450714 -249.62707520]
[-75.97560120 -264.45104980]
[-82.48385620 -277.96557617]
[-94.80376434 -289.61273193]
[-87.02227020 -304.67541504]
[-70.39410400 -301.36779785]
[-68.96932220 -284.47384644]
[-62.46106720 -270.95928955]
[-49.96784210 -262.84951782]
[-50.95124054 -247.05889893]
[-44.44298553 -233.54435730]
[-31.94976044 -225.43457031]
[-32.93315887 -209.64396667]
[-26.42490196 -196.12942505]
[-19.91664505 -182.61489868]
[-13.40838909 -169.10035706]
[0.69141883 -164.43870544]
[7.48423576 -150.82575989]
[2.49906421 -136.06819153]
[9.00732040 -122.55366516]
[15.51557636 -109.03913116]
[22.02383232 -95.52459717]
[28.53208923 -82.01006317]
[39.93016815 -80.64773560]
[49.33623886 -73.86000824]
[54.32351685 -63.25440979]
[53.53596878 -51.44066620]
[47.05477905 -41.38874817]
[53.00638199 -27.61999702]
[58.95798111 -13.85124874]
[64.90958405 -0.08250011]
[79.72045135 1.49981630]
[91.83128357 10.34197712]
[97.93048096 24.15016747]
[96.28843689 39.25647354]
[87.24658203 51.59309006]
[93.19818115 65.36183929]
[99.14978027 79.13058472]
[105.68099976 79.90071106]
[111.64900208 82.66345215]
[116.46214294 87.14492035]
[119.64324188 92.90082550]
[120.87693024 99.36053467]
[120.04090881 105.88364410]
[117.21804810 111.82344818]
[112.68821716 116.59109497]
[116.91419983 130.98348999]
[121.14019012 145.37588501]
[125.36618042 159.76828003]
[129.59216309 174.16067505]
[133.81816101 188.55307007]
[138.04414368 202.94546509]
[142.27012634 217.33786011]
[146.49612427 231.73025513]
[150.72210693 246.12265015]
[154.94810486 260.51504517]
[164.58673096 249.02171326]
[179.58587646 249.18228149]
[188.97625732 260.87933350]
[185.89044189 275.55847168]
[172.58515930 282.48449707]
[158.79039001 276.59158325]
[161.52894592 291.33947754]
[164.26748657 306.08737183]
[167.00604248 320.83526611]
[169.74458313 335.58316040]
[179.11798096 338.56906128]
[186.69294739 344.75411987]
[191.43626404 353.23950195]
[192.72134399 362.81665039]
[190.41064453 372.13934326]
[184.86912537 379.91299438]
[176.90722656 385.07431030]
[178.43457031 399.99636841]
[179.96191406 414.91839600]
[191.34240723 422.18960571]
[196.36581421 434.51531982]
[193.39811707 447.29028320]
[183.74684143 455.88000488]
[184.96948242 470.83010864]
[186.19212341 485.78018188]
[189.68432617 491.50863647]
[189.70921326 497.26763916]
[187.14697266 501.36291504]
[187.75880432 516.35040283]
[188.37063599 531.33795166]
[188.98245239 546.32543945]
[189.59428406 561.31298828]
[190.20611572 576.30047607]
[200.98164368 588.18609619]
[198.26542664 603.99755859]
[184.14111328 611.60565186]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 147]
[6 146]
[7 145]
[8 142]
[9 141]
[10 140]
[13 136]
[14 135]
[15 134]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 117]
[24 116]
[25 115]
[26 114]
[27 113]
[28 112]
[29 111]
[30 110]
[31 109]
[32 108]
[33 107]
[35 99]
[36 98]
[37 97]
[42 92]
[43 91]
[44 90]
[45 89]
[48 84]
[49 83]
[50 82]
[51 81]
[52 80]
[55 77]
[56 76]
[57 75]
[58 74]
[60 72]
[61 71]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
