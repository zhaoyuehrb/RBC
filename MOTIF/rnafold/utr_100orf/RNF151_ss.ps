%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGAAAUGCAGGCUCCUGAGCUCUGGGGGCCUGUGGAGCUGCUGUCUAGACGCAGAUCAUGGGUGGCGGGUAUGAUCUCAACCUCUUCGCCAGCCCUCCUGACAGCAACUUCGUGUGCUCCGUCUGCCAUGGGGUUCUCAAGAGGCCAGCAAGGUUGC\
) } def
/len { sequence length } bind def

/coor [
[118.35057831 188.76074219]
[104.90179443 195.40380859]
[89.93721008 194.37364197]
[77.52560425 185.95034790]
[71.04160309 172.42414856]
[72.24817657 157.47276306]
[80.81685638 145.16169739]
[86.15621185 131.14416504]
[91.49556732 117.12662506]
[80.08947754 126.86834717]
[68.68338776 136.61006165]
[57.27729797 146.35179138]
[45.87120819 156.09350586]
[34.46511841 165.83523560]
[23.05902863 175.57695007]
[11.65293980 185.31866455]
[0.24685061 195.06039429]
[-11.15923882 204.80210876]
[-22.56532860 214.54383850]
[-25.25242424 230.36024475]
[-39.36270905 237.99435425]
[-54.07197571 231.58990479]
[-58.09653854 216.05984497]
[-48.34909439 203.31752014]
[-32.30704880 203.13774109]
[-20.90095901 193.39602661]
[-9.49487019 183.65429688]
[1.91121936 173.91258240]
[13.31730843 164.17085266]
[24.72339821 154.42913818]
[36.12948608 144.68742371]
[47.53557587 134.94569397]
[58.94166565 125.20397949]
[70.34775543 115.46225739]
[81.75384521 105.72053528]
[87.76507568 91.97771454]
[87.17617798 76.98928070]
[86.58728027 62.00084686]
[85.99839020 47.01240921]
[85.40949249 32.02397537]
[83.50027466 17.14597321]
[80.28563690 2.49448514]
[77.07099915 -12.15700340]
[73.85636139 -26.80849075]
[70.64172363 -41.45998001]
[67.42708588 -56.11146927]
[64.21244812 -70.76295471]
[51.18509293 -79.30261230]
[48.13370895 -94.20709991]
[56.35524750 -106.57406616]
[53.14060974 -121.22555542]
[46.62799835 -107.71311951]
[34.30534363 -99.16020966]
[19.36851501 -97.78502655]
[5.69136572 -103.94422150]
[-3.17894483 -116.04039764]
[-4.94190979 -130.93643188]
[0.85969490 -144.76905823]
[12.72122765 -153.95077515]
[27.56640816 -156.10034180]
[41.54515457 -150.66023254]
[51.03192902 -139.04171753]
[50.73742294 -154.03881836]
[50.44291687 -169.03593445]
[50.00119400 -184.02941895]
[49.41229630 -199.01785278]
[48.82339859 -214.00628662]
[48.23450470 -228.99473572]
[47.64560699 -243.98316956]
[46.46871948 -258.93692017]
[44.70565796 -273.83294678]
[42.94259644 -288.72897339]
[38.80717468 -296.93319702]
[41.29411697 -303.93438721]
[39.82386017 -318.86218262]
[29.83710289 -331.86975098]
[36.35776520 -346.91674805]
[52.67794418 -348.52416992]
[62.00884247 -335.03839111]
[54.75162888 -320.33242798]
[56.22188568 -305.40466309]
[57.83862305 -290.49203491]
[59.60168457 -275.59600830]
[61.36474609 -260.69998169]
[63.53694153 -258.85095215]
[65.08770752 -256.00790405]
[65.62625885 -252.41050720]
[64.85858154 -248.43833923]
[62.63404083 -244.57206726]
[63.22293854 -229.58363342]
[63.81183624 -214.59518433]
[64.40073395 -199.60675049]
[64.98963165 -184.61831665]
[68.41236877 -178.02388000]
[65.44002533 -169.33042908]
[65.73453522 -154.33332825]
[66.02903748 -139.33621216]
[67.79209900 -124.44019318]
[71.00673676 -109.78870392]
[83.65061951 -101.99974823]
[87.11943817 -87.18685150]
[78.86393738 -73.97759247]
[82.07857513 -59.32610321]
[85.29321289 -44.67461777]
[88.50785065 -30.02312851]
[91.72248840 -15.37164021]
[94.93712616 -0.72015208]
[98.15176392 13.93133640]
[105.15235138 0.66514736]
[118.14442444 -6.83192635]
[133.13331604 -6.25476646]
[145.51040649 2.21916795]
[151.47012329 15.98440456]
[149.18003845 30.80855751]
[139.34428406 42.13365936]
[124.98705292 46.47759247]
[110.52274323 42.50472641]
[100.39792633 31.43507576]
[100.98682404 46.42351151]
[101.57572174 61.41194916]
[102.16461945 76.40038300]
[102.75351715 91.38881683]
[107.38133240 89.84217834]
[113.04826355 90.61592865]
[118.68653870 94.12586212]
[123.10147858 100.33136749]
[125.15508270 108.70787048]
[135.11886597 119.92050171]
[145.08265686 131.13311768]
[160.03314209 136.30934143]
[162.70356750 150.96261597]
[172.66735840 162.17523193]
[182.84936523 173.19007874]
[193.24568176 184.00286865]
[208.38786316 188.58815002]
[211.63151550 203.12527466]
[222.02783203 213.93807983]
[232.42413330 224.75088501]
[248.31980896 228.78320312]
[252.51455688 244.63679504]
[240.69316101 256.00283813]
[225.01647949 251.18891907]
[221.61132812 235.14720154]
[211.21502686 224.33439636]
[200.81871033 213.52159119]
[186.42013550 209.70971680]
[182.43287659 194.39918518]
[172.03657532 183.58638000]
[167.31503296 182.60171509]
[163.18011475 178.60832214]
[161.45474243 172.13902283]
[151.49095154 160.92639160]
[137.25312805 156.55216980]
[133.87002563 141.09690857]
[123.90624237 129.88429260]
[113.94245911 118.67166138]
[117.31088257 133.28855896]
[120.67930603 147.90545654]
[127.48052216 161.27496338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[50 99]
[51 98]
[62 97]
[63 96]
[64 95]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 84]
[71 83]
[72 82]
[74 81]
[75 80]
[127 156]
[128 155]
[129 154]
[131 152]
[132 151]
[133 148]
[134 147]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
