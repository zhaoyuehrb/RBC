%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGGCAGCGGCUGCAGGCCUGGGCGGCGGCGGCGCCGGCCCGGGACCCGAGGCCGGGGACUUCCUGGCCCGCUACCGGCUGGUAUCGAACAAGCUGA\
) } def
/len { sequence length } bind def

/coor [
[102.73574066 158.60069275]
[90.20278168 150.35903931]
[94.16772461 135.89321899]
[86.67588806 136.24302673]
[77.55989838 148.15515137]
[68.44390869 160.06727600]
[59.32791901 171.97940063]
[50.21192551 183.89152527]
[48.63018417 200.21421814]
[33.59342575 206.75851440]
[20.57017899 196.79222107]
[22.95764351 180.56779480]
[38.29980087 174.77552795]
[47.41579056 162.86340332]
[56.53178406 150.95127869]
[65.64777374 139.03915405]
[74.76376343 127.12703705]
[65.93811798 99.31767273]
[79.75430298 76.40962219]
[67.17001343 68.24655914]
[54.46029282 60.28019333]
[41.62821960 52.51245117]
[28.79614258 44.74470520]
[15.96406841 36.97695923]
[3.13199329 29.20921707]
[-9.70008183 21.44147301]
[-22.53215599 13.67372799]
[-35.48348236 6.10648489]
[-48.55092621 -1.25842643]
[-61.61837006 -8.62333775]
[-74.68581390 -15.98824883]
[-91.06954193 -15.27725697]
[-99.64769745 -29.25392532]
[-91.59581757 -43.54025269]
[-75.19697571 -43.43969345]
[-67.32089996 -29.05569267]
[-54.25345993 -21.69078064]
[-41.18601608 -14.32586956]
[-28.11857033 -6.96095896]
[-20.61382484 -6.40934753]
[-14.76441193 0.84165287]
[-1.93233716 8.60939693]
[10.89973736 16.37714195]
[23.73181343 24.14488602]
[36.56388855 31.91263008]
[49.39596176 39.68037415]
[62.22803879 47.44812012]
[69.71199799 48.23286057]
[75.33307648 55.66226959]
[87.91736603 63.82533264]
[102.80141449 61.96385193]
[112.98770905 50.95297241]
[116.60594940 42.36804581]
[123.66613007 39.76433182]
[134.18992615 29.07557297]
[144.71372986 18.38681221]
[155.23753357 7.69805336]
[165.76133728 -2.99070597]
[176.28514099 -13.67946529]
[186.80894470 -24.36822510]
[188.12251282 -40.35741043]
[201.52214050 -49.17951965]
[216.72877502 -44.06698608]
[222.07717896 -28.94170380]
[213.46452332 -15.40650082]
[197.49769592 -13.84442234]
[186.97390747 -3.15566278]
[176.45010376 7.53309679]
[165.92630005 18.22185707]
[155.40249634 28.91061592]
[144.87869263 39.59937668]
[134.35488892 50.28813553]
[123.99858856 61.13926697]
[113.81229401 72.15014648]
[123.77914429 78.17053223]
[131.14672852 87.74115753]
[134.66416931 99.74869537]
[133.55335999 112.64734650]
[127.65412140 124.65751648]
[137.84040833 135.66839600]
[148.02670288 146.67927551]
[158.21299744 157.69015503]
[168.39929199 168.70103455]
[183.45042419 173.57687378]
[186.41371155 188.17372131]
[196.60000610 199.18460083]
[212.51052856 201.24249268]
[220.69807434 215.03900146]
[214.88185120 229.99063110]
[199.52359009 234.62777710]
[186.40480042 225.39320374]
[185.58912659 209.37089539]
[175.40283203 198.36001587]
[161.08029175 194.27175903]
[157.38841248 178.88732910]
[147.20211792 167.87644958]
[137.01582336 156.86557007]
[126.82953644 145.85469055]
[116.64324188 134.84381104]
[109.15140533 135.19361877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[19 50]
[20 49]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 37]
[31 36]
[51 74]
[52 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
