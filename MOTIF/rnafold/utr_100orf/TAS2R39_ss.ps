%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUAGGGAGAUGUUUUCCUCCAGACACCAAAGAGAAGCAACAGCUCAGAAUGACUAAACUCUGCGAUCCUGCAGAAAGUGAAUUGUCGCCAUUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[20.13777351 210.59838867]
[11.89275646 223.84336853]
[0.28025982 234.24095154]
[-13.76567459 240.96565247]
[-29.11830711 243.48698425]
[-44.54857635 241.61129761]
[-58.82350922 235.49662781]
[-70.80471802 225.63937378]
[-83.12905121 234.18986511]
[-95.45338440 242.74034119]
[-107.77771759 251.29083252]
[-107.98090363 266.80657959]
[-117.29216766 279.21948242]
[-132.13113403 283.75650024]
[-146.79191589 278.67309570]
[-155.63714600 265.92391968]
[-155.26565552 250.41130066]
[-145.82029724 238.10014343]
[-130.93298340 233.72434998]
[-116.32820129 238.96649170]
[-104.00386810 230.41600037]
[-91.67953491 221.86552429]
[-79.35520172 213.31503296]
[-84.17409515 199.72428894]
[-85.28629303 185.33522034]
[-82.60861206 171.14140320]
[-76.31978607 158.12457275]
[-66.84855652 147.18676758]
[-54.84442520 139.08775330]
[-41.13313675 134.39234924]
[-26.65985870 133.43090820]
[-12.42404556 136.27621460]
[0.58958799 142.73793030]
[11.47918224 152.37533569]
[24.06347466 144.21228027]
[36.64776611 136.04920959]
[49.23205948 127.88615417]
[61.81634903 119.72309113]
[74.00621796 110.98197174]
[85.77513123 101.68183136]
[91.11901855 88.76151276]
[104.92472076 86.54925537]
[116.69364166 77.24911499]
[128.46255493 67.94896698]
[140.23146057 58.64882660]
[146.26179504 44.02194595]
[161.04475403 42.20155716]
[172.81365967 32.90141678]
[184.58258057 23.60127258]
[181.62490845 15.39376926]
[180.63578796 6.73937178]
[181.66215515 -1.89717460]
[184.64280701 -10.05350780]
[189.41213989 -17.29440689]
[195.70927429 -23.23501205]
[203.19232178 -27.56127739]
[211.45693970 -30.04657555]
[220.05821228 -30.56355667]
[228.53457642 -29.09066010]
[236.43258667 -25.71294594]
[243.33117676 -20.61720276]
[248.86410522 -14.08162594]
[262.74450684 -19.76795197]
[276.62490845 -25.45427704]
[290.50531006 -31.14060402]
[304.38571167 -36.82693100]
[318.26614380 -42.51325607]
[327.86636353 -55.80865479]
[344.15090942 -53.87336349]
[350.36764526 -38.69824219]
[340.12130737 -25.89415359]
[323.95245361 -28.63284874]
[310.07205200 -22.94652367]
[296.19165039 -17.26019669]
[282.31124878 -11.57387066]
[268.43081665 -5.88754463]
[254.55043030 -0.20121865]
[251.98701477 22.05208969]
[236.98997498 38.84449005]
[214.94490051 43.94857025]
[193.88272095 35.37018585]
[182.11380005 44.67033005]
[170.34489441 53.97047424]
[165.15634155 67.93214417]
[149.53161621 70.41773987]
[137.76269531 79.71788788]
[125.99378204 89.01802826]
[114.22486877 98.31816864]
[108.88098145 111.23848724]
[95.07527924 113.45074463]
[83.30635834 122.75088501]
[81.26485443 127.94507599]
[77.71898651 131.38195801]
[73.64442444 132.77932739]
[69.97941589 132.30737305]
[57.39512253 140.47044373]
[44.81082916 148.63349915]
[32.22653580 156.79656982]
[19.64224434 164.95962524]
[24.18216515 179.93135071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[11 20]
[34 99]
[35 98]
[36 97]
[37 96]
[38 95]
[39 91]
[40 90]
[42 88]
[43 87]
[44 86]
[45 85]
[47 83]
[48 82]
[49 81]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
