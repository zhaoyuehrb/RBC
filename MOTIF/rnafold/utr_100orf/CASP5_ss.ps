%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUGUACAAAGAGACAGAGGCUGUUAGCUAUGGCUGCUGUGCCCAGAGUUGAAGGAGUCUUUAUAUUUCUGAUAGAAGACAGUGGCAAAAAAAAAAGGCGUAAGAAUUUUGAAGCUAUGUUCAAAGGUA\
) } def
/len { sequence length } bind def

/coor [
[81.70187378 158.61303711]
[73.34914398 146.15382385]
[79.37371826 132.41619873]
[80.72973633 117.47762299]
[73.23182678 117.65476227]
[64.87986755 130.11448669]
[56.52791214 142.57421875]
[48.17595673 155.03395081]
[53.65139389 169.55287170]
[49.51464462 184.50837708]
[37.35637665 194.14974976]
[21.85168839 194.76969910]
[8.96245384 186.12983704]
[3.64484286 171.55236816]
[7.94358635 156.64262390]
[20.20573044 147.13369751]
[35.71622849 146.68199158]
[44.06818771 134.22225952]
[52.42014313 121.76253510]
[60.77209854 109.30280304]
[69.73475647 102.28900909]
[79.68080902 98.33273315]
[89.87356567 97.53016663]
[81.81822205 84.87665558]
[73.76287842 72.22313690]
[65.70753479 59.56962585]
[57.65219116 46.91611099]
[49.59684753 34.26259613]
[34.42781067 30.72167587]
[26.43880272 17.77445984]
[29.90800858 3.33492446]
[21.85266685 -9.31859016]
[13.79732323 -21.97210503]
[5.74197960 -34.62562180]
[-5.98549271 -43.97796631]
[-20.11424065 -49.01567459]
[-34.24298859 -54.05338287]
[-48.41320038 -47.05476379]
[-63.35480499 -52.20490646]
[-70.20321655 -66.44831848]
[-64.89539337 -81.33464050]
[-50.58036804 -88.03207397]
[-35.75099564 -82.56716156]
[-29.20528030 -68.18212891]
[-15.07653332 -63.14442062]
[-0.94778568 -58.10671616]
[9.96732044 -68.39556885]
[5.77224779 -82.79700470]
[1.57717478 -97.19844055]
[-2.61789823 -111.59987640]
[-6.81297112 -126.00131226]
[-22.00201607 -139.15856934]
[-16.83379745 -157.73312378]
[-21.70428848 -171.92037964]
[-26.57478142 -186.10763550]
[-31.44527245 -200.29489136]
[-36.31576538 -214.48216248]
[-49.03109741 -224.83842468]
[-46.15319443 -240.98307800]
[-30.64259720 -246.30787659]
[-18.45527840 -235.33512878]
[-22.12850761 -219.35264587]
[-17.25801468 -205.16539001]
[-12.38752270 -190.97813416]
[-7.51703072 -176.79087830]
[-2.64653850 -162.60362244]
[7.00286293 -158.90290833]
[13.10786819 -150.29203796]
[13.41943264 -139.52027893]
[7.58846521 -130.19638062]
[11.78353786 -115.79494476]
[15.97861099 -101.39350891]
[20.17368317 -86.99207306]
[24.36875725 -72.59063721]
[18.39549446 -42.68096542]
[26.45083809 -30.02744865]
[34.50617981 -17.37393379]
[42.56152344 -4.72041893]
[57.11239624 -1.75262916]
[65.46191406 10.96508312]
[62.25036240 26.20725250]
[70.30570221 38.86076736]
[78.36104584 51.51428223]
[86.41638947 64.16779327]
[94.47173309 76.82131195]
[102.52707672 89.47483063]
[98.18323517 75.11756134]
[97.47187805 60.13444138]
[100.43595123 45.43021393]
[106.89646912 31.89279556]
[116.46331787 20.33964348]
[128.55880737 11.46839237]
[142.45256042 5.81473064]
[157.30558777 3.72005534]
[172.22099304 5.31085253]
[186.29811096 10.49106216]
[198.68690491 18.94787788]
[208.63928223 30.17063713]
[215.55424500 43.48165131]
[219.01426697 58.07714081]
[218.81039429 73.07575226]
[214.95494080 87.57180786]
[207.68072510 100.68994904]
[197.42698669 111.63805389]
[184.81291199 119.75500488]
[170.60017395 124.55067444]
[155.64704895 125.73547363]
[140.85644531 123.23786163]
[127.12150574 117.20864868]
[115.27487183 108.01515961]
[124.20590973 120.06656647]
[133.13694763 132.11798096]
[142.06799316 144.16938782]
[150.99903870 156.22079468]
[159.93008423 168.27220154]
[168.86112976 180.32362366]
[184.52839661 182.40016174]
[194.07203674 194.99755859]
[191.82997131 210.64199829]
[179.13237000 220.05192566]
[163.51249695 217.64457703]
[154.23735046 204.84820557]
[156.80970764 189.25465393]
[147.87867737 177.20324707]
[138.94763184 165.15184021]
[130.01658630 153.10043335]
[121.08554077 141.04902649]
[112.15450287 128.99760437]
[103.22345734 116.94619751]
[95.72554779 117.12334442]
[97.78552246 131.98121643]
[104.45214844 145.41833496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[23 86]
[24 85]
[25 84]
[26 83]
[27 82]
[28 81]
[31 78]
[32 77]
[33 76]
[34 75]
[35 46]
[36 45]
[37 44]
[47 74]
[48 73]
[49 72]
[50 71]
[51 70]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
