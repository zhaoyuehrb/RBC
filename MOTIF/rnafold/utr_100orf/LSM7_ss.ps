%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAAAGGGCGCGGGGCGGUGCCUGCGAAGAGCCACACGGCGCGACAAGAUGGCGGAUAAGGAGAAGAAGAAAAAGGAGAGCAUCUUGGACUUGUCCAAGUACAUCGACAAGACGAUCCGGGUAAAGUUCCAGGGAGGCCGCGAAGCCA\
) } def
/len { sequence length } bind def

/coor [
[78.21452332 490.82321167]
[66.75304413 501.14978027]
[51.52439499 503.61795044]
[37.38798523 497.44012451]
[28.85469818 484.58761597]
[28.64746857 469.16165161]
[36.83242416 456.08456421]
[50.79777527 449.52923584]
[52.67777634 434.64752197]
[54.55777359 419.76577759]
[46.87973022 404.01699829]
[58.05001450 389.41635132]
[59.61794281 374.49850464]
[53.25339127 361.03219604]
[62.39081573 348.11639404]
[63.95874023 333.19857788]
[65.52667236 318.28073120]
[54.79425049 310.27862549]
[49.38936615 297.91250610]
[50.82888794 284.38470459]
[58.84183121 273.25686646]
[71.41244507 267.51208496]
[73.29244232 252.63035583]
[75.17243958 237.74862671]
[77.05243683 222.86691284]
[74.75522614 215.78979492]
[79.13080597 207.69444275]
[81.32205200 192.85536194]
[83.51329803 178.01628113]
[71.73059845 164.06906128]
[73.85389709 145.61515808]
[89.00553894 134.32881165]
[90.57346344 119.41098022]
[92.14138794 104.49314880]
[90.11090851 101.12759399]
[89.60651398 96.87216949]
[90.99570465 92.44384003]
[94.30501556 88.69832611]
[96.80654144 73.90838623]
[99.30807495 59.11845016]
[90.42274475 46.32435989]
[93.17034149 31.36089325]
[105.42230988 22.96893501]
[107.92383575 8.17899513]
[93.34229279 -3.01991582]
[86.43745422 -19.96877480]
[89.01803589 -38.00205231]
[100.29425049 -52.20196533]
[117.11675262 -58.73958206]
[118.68467712 -73.65740967]
[120.25260162 -88.57524109]
[121.82053375 -103.49306488]
[123.23215485 -118.42649841]
[124.48731995 -133.37388611]
[125.42918396 -148.34428406]
[126.05731201 -163.33113098]
[126.68544769 -178.31797791]
[127.31358337 -193.30482483]
[127.94171906 -208.29165649]
[128.56985474 -223.27850342]
[129.19798279 -238.26535034]
[117.20748901 -247.93664551]
[113.25706482 -262.64199829]
[118.65928650 -276.68765259]
[131.14678955 -284.76229858]
[131.77491760 -299.74914551]
[132.40306091 -314.73599243]
[133.03118896 -329.72283936]
[119.10865784 -335.76663208]
[108.31230164 -346.43447876]
[102.10223389 -360.28366089]
[101.31832123 -375.44116211]
[106.06658936 -389.85705566]
[115.70485687 -401.58175659]
[128.92964172 -409.02954102]
[143.95239258 -411.19317627]
[158.74140930 -407.78005981]
[171.29660034 -399.25177002]
[179.91998291 -386.76168823]
[183.44529724 -371.99902344]
[181.39578247 -356.96026611]
[174.04862976 -343.67932129]
[162.39747620 -333.95230103]
[148.01803589 -329.09469604]
[147.38990784 -314.10784912]
[146.76176453 -299.12103271]
[146.13363647 -284.13418579]
[157.90167236 -275.04290771]
[162.10963440 -260.59448242]
[156.94255066 -246.27125549]
[144.18482971 -237.63720703]
[143.55670166 -222.65037537]
[142.92855835 -207.66352844]
[142.30043030 -192.67668152]
[141.67228699 -177.68983459]
[141.04415894 -162.70300293]
[140.41601562 -147.71615601]
[142.97798157 -143.61428833]
[142.94445801 -137.84780884]
[139.43472290 -132.11872864]
[138.17955017 -117.17132568]
[140.77110291 -110.19662476]
[136.73835754 -101.92514038]
[135.17042542 -87.00730896]
[133.60250854 -72.08948517]
[132.03457642 -57.17165375]
[142.52630615 -51.58835220]
[150.52316284 -42.74935913]
[155.05798340 -31.68849564]
[155.57041931 -19.71029854]
[151.97604370 -8.23619175]
[144.67916870 1.36419916]
[134.52751160 7.93653393]
[122.71378326 10.68052578]
[120.21224976 25.47046661]
[129.02287292 37.42489624]
[126.69666290 52.45963287]
[114.09801483 61.61997986]
[111.59648132 76.40991974]
[109.09495544 91.19985962]
[107.05921936 106.06108093]
[105.49129486 120.97890472]
[103.92336273 135.89672852]
[113.11576080 143.55937195]
[117.39482880 154.60658264]
[115.79540253 166.22370911]
[108.83444977 175.51100159]
[98.35237885 180.20751953]
[96.16113281 195.04660034]
[93.96989441 209.88569641]
[91.93415833 224.74690247]
[90.05416107 239.62863159]
[88.17416382 254.51034546]
[86.29415894 269.39205933]
[98.76638794 280.77059937]
[101.99110413 297.17361450]
[94.89653778 312.12719727]
[80.44449615 319.84866333]
[78.87657166 334.76647949]
[77.30864716 349.68432617]
[83.56105042 364.21765137]
[74.53577423 376.06643677]
[72.96784210 390.98428345]
[80.48138428 401.52117920]
[78.82691956 413.95120239]
[69.43949127 421.64578247]
[67.55949402 436.52749634]
[65.67949677 451.40924072]
[77.57585907 461.23165894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 148]
[9 147]
[10 146]
[12 143]
[13 142]
[15 140]
[16 139]
[17 138]
[22 134]
[23 133]
[24 132]
[25 131]
[27 130]
[28 129]
[29 128]
[32 123]
[33 122]
[34 121]
[38 120]
[39 119]
[40 118]
[43 115]
[44 114]
[49 106]
[50 105]
[51 104]
[52 103]
[53 101]
[54 100]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[65 87]
[66 86]
[67 85]
[68 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
