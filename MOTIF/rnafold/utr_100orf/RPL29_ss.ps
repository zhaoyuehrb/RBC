%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGGCGUUGUUGACCCUAUUUCCCGUGCUGCACCGCAGCCCCUUUCUCUUCCGGUUCUAGGCGCUUCGGGAGCCGCGGCUUAUGGUGCAGACAUGGCCAAGUCCAAGAACCACACCACACACAACCAGUCCCGAAAAUGGCACAGAAAUGGUAUCAAGAAACCCCGAUCACAAAGAUACGAAUCUCUUAAGG\
) } def
/len { sequence length } bind def

/coor [
[179.22019958 408.59436035]
[184.56596375 397.35083008]
[192.46415710 387.71298218]
[202.45597839 380.24908447]
[197.02409363 366.26715088]
[191.59222412 352.28518677]
[179.77119446 343.22360229]
[181.98596191 327.55819702]
[176.55409241 313.57623291]
[171.12220764 299.59429932]
[156.86839294 289.36706543]
[159.80949402 271.19552612]
[154.15307617 257.30291748]
[148.49664307 243.41029358]
[142.84022522 229.51766968]
[129.05712891 223.98939514]
[123.12280273 209.98088074]
[129.01481628 195.56138611]
[123.35839844 181.66877747]
[117.70197296 167.77615356]
[112.04555511 153.88352966]
[106.38912964 139.99090576]
[100.73270416 126.09828949]
[95.07628632 112.20567322]
[84.59860992 101.47168732]
[70.84673309 95.48121643]
[57.09484863 89.49075317]
[43.34296417 83.50028229]
[29.59108162 77.50981140]
[15.79139042 71.63031006]
[1.94478536 65.86216736]
[-11.90181923 60.09401703]
[-25.74842453 54.32587051]
[-39.59502792 48.55772018]
[-53.44163513 42.78957367]
[-67.28823853 37.02142715]
[-81.13484192 31.25327682]
[-99.32947540 34.04790878]
[-109.44156647 19.71216965]
[-123.37929535 14.16784000]
[-137.31703186 8.62350941]
[-151.25476074 3.07917929]
[-143.71723938 16.04782295]
[-142.79260254 31.01929665]
[-148.67703247 44.81688309]
[-160.12197876 54.51293945]
[-174.69895935 58.05010986]
[-189.31497192 54.67786026]
[-200.86872864 45.11173248]
[-206.90867615 31.38151360]
[-206.15325928 16.40054893]
[-198.76274109 3.34757042]
[-186.30528259 -5.00777483]
[-171.42436218 -6.89263058]
[-184.29223633 -14.60093307]
[-197.16011047 -22.30923462]
[-210.02798462 -30.01753807]
[-222.89584351 -37.72583771]
[-235.76371765 -45.43414307]
[-248.63159180 -53.14244461]
[-264.44625854 -53.59666443]
[-271.38836670 -66.77454376]
[-284.25622559 -74.48284912]
[-300.65304565 -74.20587921]
[-308.85815430 -88.40476227]
[-300.43084717 -102.47290039]
[-284.04040527 -101.93820190]
[-276.54794312 -87.35072327]
[-263.68005371 -79.64241791]
[-248.78578186 -79.73954773]
[-240.92327881 -66.01031494]
[-228.05541992 -58.30200958]
[-215.18754578 -50.59370804]
[-202.31967163 -42.88540649]
[-189.45181274 -35.17710495]
[-176.58393860 -27.46880341]
[-163.71606445 -19.76049995]
[-153.29418945 -19.80069542]
[-145.71043396 -10.85855389]
[-131.77270508 -5.31422377]
[-117.83496857 0.23010649]
[-103.89723206 5.77443647]
[-92.65887451 1.27685928]
[-80.99665070 5.79238796]
[-75.36669922 17.40667152]
[-61.52009201 23.17481995]
[-47.67348480 28.94296837]
[-33.82688141 34.71111679]
[-19.98027611 40.47926331]
[-6.13367176 46.24741364]
[7.71293354 52.01556015]
[21.55953789 57.78370667]
[28.95287514 57.45330811]
[35.58155060 63.75793076]
[49.33343506 69.74839783]
[63.08531570 75.73886871]
[76.83719635 81.72933960]
[90.58908081 87.71980286]
[81.39265442 75.86966705]
[67.77812958 69.57326508]
[55.60852814 60.80395126]
[45.32752609 49.88145447]
[37.30994797 37.20397568]
[31.84809875 23.23371315]
[29.14110756 8.47999573]
[29.28766251 -6.51928806]
[32.28242493 -21.21729469]
[38.01620865 -35.07816696]
[46.27997208 -47.59656143]
[56.77243423 -58.31608582]
[69.11106110 -66.84592438]
[82.84601593 -72.87510681]
[97.47655487 -76.18381500]
[112.46926117 -76.65141296]
[127.27754211 -74.26086426]
[141.36152649 -69.09931946]
[154.20771790 -61.35495758]
[165.34779358 -51.31012344]
[174.37561035 -39.33102798]
[180.96200562 -25.85440636]
[184.86688232 -11.37159061]
[185.94786072 3.58940864]
[184.16552734 18.48314285]
[179.58486938 32.76661682]
[172.37289429 45.91908264]
[162.79252625 57.46103287]
[151.19305420 66.97166443]
[137.99736023 74.10424805]
[123.68562317 78.59893036]
[113.04238129 89.16876984]
[127.45014954 84.99550629]
[138.55281067 73.72423553]
[152.93023682 77.61510468]
[167.33801270 73.44184875]
[174.74244690 59.47940063]
[189.87541199 54.92211914]
[203.75880432 62.47376251]
[208.15582275 77.65406799]
[200.45782471 91.45683289]
[185.23187256 95.69312286]
[171.51127625 87.84961700]
[157.10350037 92.02288055]
[147.03138733 102.99564362]
[131.62341309 99.40327454]
[117.21563721 103.57653809]
[113.11067963 105.81996155]
[108.96890259 106.54924774]
[114.62532806 120.44187164]
[120.28174591 134.33448792]
[125.93817139 148.22711182]
[131.59458923 162.11973572]
[137.25102234 176.01234436]
[142.90744019 189.90496826]
[157.19593811 196.10791016]
[162.73445129 210.27757263]
[156.73284912 223.86125183]
[162.38926697 237.75387573]
[168.04568481 251.64649963]
[173.70211792 265.53912354]
[185.27067566 271.26245117]
[189.69210815 282.96066284]
[185.10415649 294.16241455]
[190.53602600 308.14437866]
[195.96791077 322.12631226]
[208.17745972 332.18798828]
[205.57415771 346.85333252]
[211.00604248 360.83526611]
[216.43791199 374.81719971]
[234.24798584 373.98403931]
[251.25222778 379.26629639]
[265.41754150 390.01547241]
[275.05612183 404.93045044]
[279.02636719 422.21490479]
[276.86825562 439.79376221]
[268.85650635 455.56225586]
[255.96569824 467.63790894]
[262.28671265 481.24102783]
[268.60772705 494.84411621]
[274.92874146 508.44723511]
[288.65313721 517.42346191]
[287.47164917 533.78002930]
[272.59967041 540.69061279]
[259.33624268 531.04626465]
[261.32562256 514.76824951]
[255.00460815 501.16513062]
[248.68359375 487.56204224]
[242.36257935 473.95892334]
[230.18991089 476.04452515]
[217.86172485 475.14282227]
[206.10102844 471.30136108]
[195.59881592 464.74020386]
[186.97351074 455.83947754]
[180.73448181 445.11712646]
[177.25204468 433.19903564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 168]
[5 167]
[6 166]
[8 164]
[9 163]
[10 162]
[12 159]
[13 158]
[14 157]
[15 156]
[18 153]
[19 152]
[20 151]
[21 150]
[22 149]
[23 148]
[24 147]
[25 98]
[26 97]
[27 96]
[28 95]
[29 94]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[39 82]
[40 81]
[41 80]
[42 79]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[130 145]
[131 144]
[133 142]
[134 141]
[176 187]
[177 186]
[178 185]
[179 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
