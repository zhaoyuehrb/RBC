%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGCGGCCCCUCAUCCGGGGAUCCCGGCGCGGCCACCGCCUCCCGCGCACACACGGCCAUGGCGGAGGCCUCCUCGCUGGGGAGGCAGAGUCCUCGCGUGGUCUCCUGCCUCGAGCACAGCCUGUGCCCAGGGGAGCCGGGCUUGCAGACAACAGCAG\
) } def
/len { sequence length } bind def

/coor [
[102.26513672 180.91897583]
[101.97063446 165.92187500]
[101.67612457 150.92475891]
[94.45771027 148.88896179]
[90.38586426 163.32571411]
[75.94917297 159.25363159]
[80.02088165 144.81735229]
[72.80246735 142.78153992]
[64.71539307 155.41481018]
[56.62831879 168.04806519]
[48.54124451 180.68132019]
[52.17263031 196.06275940]
[43.79313660 209.46273804]
[28.37416840 212.93130493]
[15.06352425 204.41061401]
[11.75817394 188.95582581]
[20.41912460 175.73600769]
[35.90798569 172.59425354]
[43.99505997 159.96098328]
[52.08213425 147.32772827]
[60.16920853 134.69447327]
[54.68553543 108.91253662]
[62.56748199 87.25449371]
[78.29837799 75.26824188]
[65.21093750 67.93891907]
[52.12350082 60.60960388]
[39.03606033 53.28028488]
[25.94861984 45.95096588]
[12.86118031 38.62164688]
[-0.22625996 31.29232788]
[-21.55664635 32.95926666]
[-31.51052666 14.91113567]
[-45.00675201 8.36499691]
[-58.50297546 1.81885803]
[-71.99919891 -4.72728062]
[-87.79251099 -3.78818059]
[-95.86722565 -16.30410194]
[-109.36344910 -22.85024071]
[-122.85967255 -29.39637947]
[-136.35589600 -35.94251633]
[-149.85212708 -42.48865509]
[-167.45152283 -35.58639908]
[-184.24340820 -43.55453873]
[-189.83226013 -60.94718552]
[-203.57508850 -66.95841980]
[-217.31790161 -72.96965027]
[-230.63641357 -65.00743866]
[-246.08834839 -66.42783356]
[-257.73211670 -76.68466187]
[-261.09042358 -91.83396149]
[-254.87197876 -106.05051422]
[-241.46788025 -113.86777496]
[-226.03227234 -112.27983856]
[-214.50045776 -101.89730835]
[-211.30667114 -86.71247101]
[-197.56385803 -80.70123291]
[-183.82102966 -74.69000244]
[-174.29582214 -81.07899475]
[-162.74800110 -82.06310272]
[-152.05961609 -77.27986908]
[-144.95483398 -67.82085419]
[-143.30598450 -55.98488235]
[-129.80975342 -49.43874359]
[-116.31352997 -42.89260483]
[-102.81730652 -36.34646606]
[-89.32108307 -29.80032730]
[-74.49311066 -31.20765114]
[-65.45306396 -18.22350502]
[-51.95683670 -11.67736626]
[-38.46061325 -5.13122749]
[-24.96438789 1.41491103]
[-17.07938385 -2.85928583]
[-7.97339678 -2.99785542]
[0.28477049 1.15849090]
[5.75982285 8.77878284]
[7.10305882 18.20488739]
[20.19049835 25.53420639]
[33.27793884 32.86352539]
[46.36537933 40.19284439]
[59.45281982 47.52216339]
[72.54026031 54.85148239]
[85.62770081 62.18080139]
[100.39409637 59.54385757]
[110.13581848 48.13776779]
[119.87754059 36.73167801]
[129.61926270 25.32558823]
[139.36097717 13.91949749]
[149.10270691 2.51340842]
[158.84442139 -8.89268112]
[168.47369385 -20.39385796]
[177.98959351 -31.98901558]
[180.76332092 -47.56518555]
[194.81842041 -52.49500656]
[204.33432007 -64.09016418]
[202.53601074 -79.79180908]
[212.43241882 -92.11400604]
[228.15219116 -93.74622345]
[240.36907959 -83.72008514]
[241.83499146 -67.98393250]
[231.68025208 -55.87373352]
[215.92948914 -54.57426453]
[206.41358948 -42.97910690]
[204.32049561 -28.23230171]
[189.58474731 -22.47311592]
[180.06884766 -10.87795925]
[178.24700928 -3.67499590]
[170.25051880 0.84903967]
[160.50878906 12.25512886]
[150.76707458 23.66121864]
[141.02534485 35.06730652]
[131.28363037 46.47339630]
[121.54190826 57.87948608]
[111.80018616 69.28557587]
[131.07661438 75.54830170]
[145.79702759 94.04463959]
[148.48588562 120.95987701]
[161.98211670 127.50601959]
[175.47833252 134.05215454]
[184.61763000 134.99243164]
[189.17337036 140.86160278]
[202.53846741 147.67146301]
[215.90356445 154.48132324]
[229.26866150 161.29118347]
[242.63375854 168.10102844]
[255.99885559 174.91088867]
[265.11791992 176.03042603]
[269.55755615 181.98791504]
[282.78637695 189.05885315]
[296.08395386 195.99960327]
[309.44906616 202.80946350]
[326.30682373 204.61294556]
[329.24050903 221.31114197]
[314.00698853 228.75270081]
[302.63922119 216.17456055]
[289.27410889 209.36470032]
[281.84805298 209.12884521]
[275.71542358 202.28767395]
[262.48660278 195.21672058]
[249.18899536 188.27598572]
[235.82389832 181.46612549]
[222.45880127 174.65628052]
[209.09370422 167.84642029]
[195.72860718 161.03656006]
[182.36351013 154.22669983]
[168.93220520 147.54838562]
[155.43597412 141.00224304]
[141.93975830 134.45610046]
[135.62312317 138.49964905]
[144.32878113 150.71485901]
[157.37664795 158.11441040]
[157.77812195 173.10902405]
[145.14491272 181.19618225]
[131.69564819 174.55407715]
[130.43830872 159.60671997]
[122.98986053 146.58671570]
[116.67323303 150.63024902]
[116.96774292 165.62736511]
[117.26224518 180.62446594]
[119.83076477 199.83522034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[8 21]
[9 20]
[10 19]
[11 18]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[32 71]
[33 70]
[34 69]
[35 68]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[44 57]
[45 56]
[46 55]
[83 113]
[84 112]
[85 111]
[86 110]
[87 109]
[88 108]
[89 107]
[90 105]
[91 104]
[93 102]
[94 101]
[116 147]
[117 146]
[118 145]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
[125 139]
[127 138]
[128 137]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
