%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUACGUAAUUCCGCUUCCGGCAUCUGGCUCAGUUCCGCCAUGGCCUCCUUGGAAGUCAGUCGUAGUCCUCGCAGGUCUCGGCGGGAGCUGGAAGUGCGCAGUCCACGACAGAACAAAUAUUCGGUGCUUUUACCUACCU\
) } def
/len { sequence length } bind def

/coor [
[97.82175446 157.08720398]
[87.92901611 155.39320374]
[78.56040192 152.01211548]
[69.99871826 147.07461548]
[62.49733734 140.75790405]
[56.27271271 133.27941895]
[51.49816132 124.88946533]
[48.29912186 115.86286926]
[46.74993896 106.48999786]
[46.87236023 97.06742859]
[48.63565826 87.88855743]
[51.95843124 79.23448944]
[56.71195221 71.36541748]
[62.72496414 64.51280975]
[53.48423386 52.69718933]
[44.24349976 40.88156891]
[35.00276947 29.06595039]
[25.76203537 17.25032997]
[16.52130318 5.43471098]
[7.28057146 -6.38090849]
[-1.96016109 -18.19652748]
[-11.20089340 -30.01214790]
[-20.44162560 -41.82776642]
[-23.15185928 -37.09074020]
[-27.39093018 -32.93972015]
[-33.01612091 -29.75562859]
[-47.57411957 -26.14111328]
[-62.13211441 -22.52659798]
[-76.04754639 -12.84170532]
[-89.20612335 -23.53227043]
[-82.57600403 -39.13604736]
[-65.74662781 -37.08459473]
[-51.18863297 -40.69911194]
[-36.63063812 -44.31362534]
[-30.05838394 -57.79715347]
[-36.17963791 -71.49131775]
[-42.30089188 -85.18548584]
[-48.42214584 -98.87965393]
[-54.54339981 -112.57382965]
[-60.66465378 -126.26799774]
[-66.78591156 -139.96215820]
[-81.27527618 -145.68020630]
[-87.28802490 -159.65522766]
[-81.74745178 -173.43339539]
[-87.86870575 -187.12756348]
[-93.98995972 -200.82173157]
[-100.11121368 -214.51589966]
[-106.23246765 -228.21006775]
[-121.43543243 -229.88851929]
[-133.67620850 -238.89186096]
[-139.72674561 -252.72145081]
[-138.05380249 -267.62304688]
[-129.20619202 -279.60574341]
[-135.32745361 -293.29992676]
[-141.44869995 -306.99407959]
[-156.70703125 -307.37667847]
[-170.28437805 -314.34936523]
[-179.48495483 -326.52770996]
[-182.48199463 -341.49368286]
[-178.68040466 -356.27581787]
[-168.83503723 -367.93905640]
[-154.90065002 -374.16766357]
[-139.64395142 -373.72497559]
[-126.09416962 -366.69888306]
[-116.94161224 -354.48440552]
[-114.00354004 -339.50674438]
[-117.86329651 -324.73971558]
[-127.75453186 -313.11532593]
[-121.63327789 -299.42117310]
[-115.51202393 -285.72698975]
[-100.68273926 -284.32778931]
[-88.46359253 -275.63592529]
[-82.19425964 -261.90414429]
[-83.64955139 -246.77870178]
[-92.53829956 -234.33131409]
[-86.41704559 -220.63714600]
[-80.29579163 -206.94297791]
[-74.17453766 -193.24880981]
[-68.05328369 -179.55464172]
[-54.09176636 -174.49386597]
[-47.68886566 -160.69323730]
[-53.09173965 -146.08341980]
[-46.97048569 -132.38925171]
[-40.84923172 -118.69508362]
[-34.72797775 -105.00091553]
[-28.60672379 -91.30673981]
[-22.48546982 -77.61257172]
[-16.36421585 -63.91840744]
[-8.62600613 -51.06850052]
[0.61472625 -39.25288010]
[9.85545826 -27.43725967]
[19.09619141 -15.62164116]
[28.33692360 -3.80602145]
[37.57765579 8.00959778]
[46.81838608 19.82521820]
[56.05912018 31.64083672]
[65.29985046 43.45645523]
[74.54058838 55.27207565]
[95.71056366 47.31427383]
[118.85796356 49.12894821]
[139.57769775 60.88121033]
[153.71253967 80.79817963]
[158.18351746 105.42079926]
[173.17984009 105.75263214]
[188.17617798 106.08445740]
[204.14518738 100.38999939]
[214.03778076 114.15854645]
[203.54583740 127.47604370]
[187.84434509 121.08078766]
[172.84800720 120.74896240]
[157.85168457 120.41712952]
[153.70216370 126.66464996]
[166.70359802 134.14547729]
[179.70503235 141.62631226]
[192.70645142 149.10714722]
[207.69276428 149.74780273]
[217.15193176 161.38928223]
[214.71194458 176.18949890]
[202.01644897 184.17852783]
[187.61756897 179.97468567]
[181.21485901 166.40892029]
[169.27761841 157.32585144]
[157.34037781 148.24276733]
[145.40313721 139.15969849]
[141.25361633 145.40721130]
[147.37487793 159.10137939]
[153.49612427 172.79554749]
[159.61738586 186.48971558]
[174.82734680 189.56163025]
[185.30203247 201.00979614]
[187.01370239 216.43217468]
[179.30419922 229.89854431]
[165.13796997 236.23080444]
[149.96221924 232.99407959]
[139.61235046 221.43295288]
[138.06808472 205.99291992]
[145.92321777 192.61097717]
[139.80195618 178.91680908]
[133.68070984 165.22264099]
[127.55945587 151.52847290]
[117.95315552 155.15136719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[21 91]
[22 90]
[23 89]
[26 34]
[27 33]
[28 32]
[35 88]
[36 87]
[37 86]
[38 85]
[39 84]
[40 83]
[41 82]
[44 79]
[45 78]
[46 77]
[47 76]
[48 75]
[53 70]
[54 69]
[55 68]
[103 111]
[104 110]
[105 109]
[125 140]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
