%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAGCCAAAAACUCUUCUGUGACAGAGUUUAUCCUCGAAGGCUUAACCCACCAGCCGGGACUGCGGAUCCCCCUCUUCUUCCUGUUUCUGGGUUUCU\
) } def
/len { sequence length } bind def

/coor [
[-10.89440060 146.35289001]
[-17.21413040 145.91601562]
[-23.14989281 143.79922485]
[-28.26629066 140.17666626]
[-32.19314957 135.33221436]
[-34.65227509 129.63726807]
[-49.63595200 128.93766785]
[-64.61962891 128.23805237]
[-79.60330200 127.53845215]
[-94.67253876 144.85215759]
[-117.34207916 146.06776428]
[-133.80815125 130.80604553]
[-148.58918762 133.35969543]
[-163.37020874 135.91336060]
[-178.15124512 138.46701050]
[-192.93228149 141.02066040]
[-207.71330261 143.57431030]
[-222.49433899 146.12796021]
[-229.22364807 160.10995483]
[-242.90209961 167.43656921]
[-258.27008057 165.29058838]
[-269.41824341 154.49717712]
[-272.05993652 139.20661926]
[-265.17932129 125.29844666]
[-251.42219543 118.12064362]
[-236.07841492 120.43321991]
[-225.04798889 131.34693909]
[-210.26695251 128.79328918]
[-195.48593140 126.23963165]
[-180.70489502 123.68597412]
[-165.92387390 121.13232422]
[-151.14283752 118.57867432]
[-136.36180115 116.02501678]
[-134.55902100 108.11451721]
[-130.59971619 101.00157166]
[-124.78739166 95.26288605]
[-117.57646179 91.36862183]
[-109.53677368 89.64390564]
[-101.30853271 90.24173737]
[-93.55136871 93.12952423]
[-86.89143372 98.09049988]
[-81.87087250 104.73989105]
[-78.90370178 112.55477905]
[-63.92002106 113.25437927]
[-48.93634796 113.95398712]
[-33.95267105 114.65359497]
[-14.51367950 99.90383911]
[7.81506157 111.24034119]
[22.50952339 108.22824097]
[37.20398712 105.21613312]
[51.89844894 102.20402527]
[66.59291077 99.19191742]
[81.28736877 96.17981720]
[89.35431671 84.14359283]
[103.54869843 81.23399353]
[115.70052338 89.12572479]
[130.39498901 86.11361694]
[145.08944702 83.10150909]
[157.05480957 72.75064087]
[171.07655334 77.77461243]
[185.77101135 74.76250458]
[200.46546936 71.75040436]
[215.15992737 68.73829651]
[220.16871643 53.06924057]
[232.29171753 42.08835602]
[248.19595337 38.68840790]
[263.57165527 43.69504166]
[274.30020142 55.66875076]
[288.89385986 52.20110703]
[298.49859619 39.35086441]
[314.53762817 38.99218369]
[324.70721436 51.40021515]
[321.20608521 67.05657959]
[306.72003174 73.95104980]
[292.36151123 66.79478455]
[277.76782227 70.26242828]
[274.69158936 83.66526031]
[266.06964111 94.46318817]
[253.56016541 100.48718262]
[239.60928345 100.49531555]
[226.97285461 94.42832947]
[218.17204285 83.43275452]
[203.47758484 86.44486237]
[188.78311157 89.45697021]
[174.08865356 92.46907806]
[163.17433167 102.60449982]
[148.10154724 97.79597473]
[133.40708923 100.80808258]
[118.71263123 103.82018280]
[110.64568329 115.85640717]
[96.45130157 118.76600647]
[84.29947662 110.87427521]
[69.60501862 113.88638306]
[54.91055298 116.89849091]
[40.21609116 119.91059113]
[25.52162933 122.92269897]
[10.82716751 125.93480682]
[9.08013821 132.19493103]
[5.72406626 137.72227478]
[1.02367926 142.11506653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 46]
[7 45]
[8 44]
[9 43]
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[48 97]
[49 96]
[50 95]
[51 94]
[52 93]
[53 92]
[56 89]
[57 88]
[58 87]
[60 85]
[61 84]
[62 83]
[63 82]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
