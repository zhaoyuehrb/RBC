%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGGUGGGAGCACAGGCACCGGGCACCAUGGGGAAGGCCGAGAACUAUGAGCUCUACUCGGUGGAGCUGGGUCCUGGCCCUGGCGGGGACAUGGCUGCCAAGAUGAGCAAGAAGAAGAAGGCGGGUG\
) } def
/len { sequence length } bind def

/coor [
[281.30075073 251.27603149]
[269.60562134 241.88325500]
[257.91052246 232.49047852]
[241.33520508 235.05133057]
[227.73912048 224.66659546]
[225.77249146 207.33300781]
[213.85382080 198.22557068]
[199.04321289 196.64593506]
[192.77571106 182.11909485]
[180.85704041 173.01165771]
[166.04643250 171.43202209]
[159.77893066 156.90519714]
[147.86026001 147.79776001]
[140.56147766 146.22033691]
[135.76716614 138.32342529]
[124.07205963 128.93064880]
[112.37693787 119.53786469]
[100.68182373 110.14508820]
[92.84199524 107.92171478]
[88.82119751 100.38130188]
[77.35646057 90.70867157]
[65.89173126 81.03604126]
[50.35470200 78.05084229]
[45.61638641 63.93002319]
[34.15164948 54.25738907]
[22.68691254 44.58475494]
[7.14988661 41.59956360]
[2.41157055 27.47874069]
[-9.05316544 17.80610657]
[-20.51790047 8.13347435]
[-31.98263741 -1.53915906]
[-47.51966476 -4.52435255]
[-52.25798035 -18.64517403]
[-63.72271347 -28.31780815]
[-75.18745422 -37.99044037]
[-90.72447968 -40.97563553]
[-95.46279144 -55.09645844]
[-106.92752838 -64.76908875]
[-118.50830078 -74.30249023]
[-130.20341492 -83.69526672]
[-142.01116943 -92.94605255]
[-153.92984009 -102.05348969]
[-169.14935303 -98.46182251]
[-183.09355164 -105.53950500]
[-189.17837524 -119.94467163]
[-184.53079224 -134.87564087]
[-171.34521484 -143.28247070]
[-155.84748840 -141.19570923]
[-145.35516357 -129.60066223]
[-144.82240295 -113.97215271]
[-132.90373230 -104.86471558]
[-125.60494995 -103.28729248]
[-120.81063843 -95.39038849]
[-109.11552429 -85.99760437]
[-101.85698700 -84.24427795]
[-97.25489807 -76.23382568]
[-85.79016113 -66.56119537]
[-71.07316589 -64.26785278]
[-65.51481628 -49.45517731]
[-54.05008316 -39.78254318]
[-42.58534622 -30.10991096]
[-27.86835480 -27.81656837]
[-22.31000328 -13.00389481]
[-10.84526825 -3.33126163]
[0.61946803 6.34137154]
[12.08420372 16.01400375]
[26.80119514 18.30734634]
[32.35954666 33.12002182]
[43.82428360 42.79265213]
[55.28901672 52.46528625]
[70.00601196 54.75862885]
[75.56436157 69.57130432]
[87.02909851 79.24393463]
[98.49383545 88.91657257]
[110.07460022 98.44997406]
[121.76972198 107.84275055]
[133.46482849 117.23552704]
[145.15994263 126.62830353]
[156.96769714 135.87908936]
[168.88636780 144.98652649]
[184.54946899 147.21759033]
[189.96447754 161.09300232]
[201.88314819 170.20043945]
[217.54624939 172.43148804]
[222.96125793 186.30690002]
[234.87992859 195.41433716]
[247.99755859 192.10099792]
[260.43524170 196.90834045]
[267.69854736 207.85742188]
[267.30328369 220.79536438]
[278.99841309 230.18814087]
[290.69351196 239.58091736]
[304.98760986 234.13792419]
[319.98788452 236.56446838]
[331.68185425 246.11001587]
[336.99224854 260.13342285]
[334.58654785 274.83300781]
[346.28164673 284.22579956]
[357.97677612 293.61856079]
[369.67187500 303.01135254]
[381.36700439 312.40414429]
[393.75286865 303.75735474]
[408.07357788 298.95166016]
[423.16812134 298.37661743]
[437.81292725 302.07882690]
[450.82080078 309.75817871]
[461.13720703 320.79214478]
[467.92587280 334.28622437]
[470.63647461 349.14657593]
[469.04925537 364.16845703]
[463.29290771 378.13415527]
[453.83404541 389.91156006]
[441.43948364 398.54586792]
[427.11398315 403.33718872]
[412.01882935 403.89706421]
[397.37777710 400.18014526]
[384.37762451 392.48773193]
[374.07229614 381.44342041]
[367.29721069 367.94250488]
[364.60153198 353.07946777]
[366.20382690 338.05917358]
[371.97421265 324.09924316]
[360.27911377 314.70648193]
[348.58398438 305.31369019]
[336.88888550 295.92089844]
[325.19375610 286.52813721]
[311.35958862 292.04910278]
[296.52066040 289.88986206]
[284.67663574 280.53115845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[6 86]
[7 85]
[9 83]
[10 82]
[12 80]
[13 79]
[15 78]
[16 77]
[17 76]
[18 75]
[20 74]
[21 73]
[22 72]
[24 70]
[25 69]
[26 68]
[28 66]
[29 65]
[30 64]
[31 63]
[33 61]
[34 60]
[35 59]
[37 57]
[38 56]
[39 54]
[40 53]
[41 51]
[42 50]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
