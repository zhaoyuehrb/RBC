%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCAGCGGCGGCAGCGGCGGCGGCGGCAGCAGCCACCCGAUGUCUUCGGCGCCCGAGAAGCAGCAGCCACCGCACGGCGGCGGCGGCGGCGGCGGCGGGGGAGGCGGCGCGGCCAUGGACCCCGCGUCGUCCGGCCCGU\
) } def
/len { sequence length } bind def

/coor [
[102.59956360 131.48573303]
[99.03427887 146.05586243]
[107.44635773 159.43540955]
[103.85241699 174.82563782]
[90.38466644 183.09579468]
[75.03330231 179.33934021]
[66.90599823 165.78491211]
[70.82454681 150.47412109]
[84.46414185 142.49057007]
[88.02943420 127.92044067]
[76.12913513 118.78902435]
[62.97822952 126.00385284]
[49.82733154 133.21868896]
[41.44990540 146.63990784]
[26.57000923 145.97808838]
[13.41910839 153.19291687]
[5.04168272 166.61415100]
[-9.83821201 165.95231628]
[-22.98911285 173.16716003]
[-31.36653900 186.58837891]
[-46.24643326 185.92655945]
[-59.39733505 193.14138794]
[-67.43756104 207.43428040]
[-83.83647919 207.34710693]
[-91.72428131 192.96952820]
[-82.98667908 179.09197998]
[-66.61216736 179.99049377]
[-53.46126556 172.77565002]
[-46.02447891 159.87048340]
[-30.20394516 160.01625061]
[-17.05304337 152.80142212]
[-9.61625767 139.89625549]
[6.20427704 140.04202271]
[19.35517883 132.82719421]
[26.79196358 119.92201233]
[42.61249924 120.06778717]
[55.76340103 112.85295105]
[68.91429901 105.63812256]
[70.47589874 91.45375824]
[77.99459076 79.78757477]
[89.59553528 72.90636444]
[76.29036713 65.98014069]
[62.98520660 59.05390930]
[49.68004608 52.12767792]
[34.00871277 55.56118011]
[21.64469528 45.33813858]
[22.07260704 29.30079269]
[34.96419144 19.75162506]
[50.43013000 24.01593781]
[56.60627365 38.82251740]
[69.91143799 45.74874496]
[83.21659851 52.67497635]
[96.52175903 59.60120392]
[109.97485352 52.96687317]
[112.57957458 38.19475937]
[115.18429565 23.42264175]
[117.78902435 8.65052509]
[104.66197205 15.90866280]
[90.19303131 11.95269012]
[82.58492279 -0.97467369]
[86.15084076 -15.54465103]
[98.86919403 -23.49723244]
[113.52969360 -20.32394409]
[121.82067108 -7.82547045]
[126.33126068 -22.13122368]
[123.10185242 -37.61933517]
[134.30821228 -47.43089676]
[138.81880188 -61.73665237]
[135.58940125 -77.22476196]
[146.79576111 -87.03632355]
[151.30635071 -101.34207916]
[155.81692505 -115.64783478]
[152.58752441 -131.13594055]
[163.79388428 -140.94750977]
[168.30447388 -155.25326538]
[172.81506348 -169.55902100]
[177.32565308 -183.86477661]
[176.32206726 -200.78898621]
[192.30706787 -206.43843079]
[202.16081238 -192.64205933]
[191.63140869 -179.35418701]
[187.12081909 -165.04843140]
[182.61022949 -150.74267578]
[178.09963989 -136.43692017]
[181.65167236 -121.97205353]
[170.12268066 -111.13724518]
[165.61210632 -96.83148956]
[161.10151672 -82.52574158]
[164.65354919 -68.06087494]
[153.12455750 -57.22606659]
[148.61396790 -42.92031097]
[152.16600037 -28.45544434]
[140.63700867 -17.62063789]
[136.12641907 -3.31488323]
[132.56114197 11.25524807]
[129.95642090 26.02736473]
[127.35169220 40.79948044]
[124.74697113 55.57159805]
[130.78816223 69.30126953]
[143.43904114 77.36076355]
[156.08992004 85.42025757]
[168.74078369 93.47975159]
[181.39166260 101.53924561]
[195.77215576 96.01590729]
[210.47569275 99.97309113]
[219.91802979 111.69086456]
[220.64123535 126.54398346]
[233.29209900 134.60346985]
[245.94297791 142.66296387]
[258.59384155 150.72245789]
[271.24472046 158.78195190]
[283.89559937 166.84144592]
[296.54644775 174.90093994]
[309.19732666 182.96043396]
[321.84820557 191.01992798]
[334.49908447 199.07942200]
[348.46337891 192.52183533]
[363.75314331 194.57754517]
[375.48953247 204.59060669]
[379.92742920 219.36587524]
[375.65075684 234.18861389]
[364.02420044 244.32894897]
[348.75772095 246.55113220]
[334.72280884 240.14607239]
[326.39794922 227.15760803]
[326.43957520 211.73030090]
[313.78869629 203.67080688]
[301.13784790 195.61131287]
[288.48696899 187.55181885]
[275.83609009 179.49232483]
[263.18521118 171.43283081]
[250.53434753 163.37333679]
[237.88348389 155.31384277]
[225.23260498 147.25434875]
[212.58174133 139.19485474]
[198.81460571 144.81661987]
[184.20419312 141.21110535]
[174.40377808 129.55754089]
[173.33216858 114.19011688]
[160.68128967 106.13062286]
[148.03042603 98.07112885]
[135.37954712 90.01163483]
[122.72867584 81.95214081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[11 38]
[12 37]
[13 36]
[15 34]
[16 33]
[18 31]
[19 30]
[21 28]
[22 27]
[41 53]
[42 52]
[43 51]
[44 50]
[54 98]
[55 97]
[56 96]
[57 95]
[64 94]
[65 93]
[67 91]
[68 90]
[70 88]
[71 87]
[72 86]
[74 84]
[75 83]
[76 82]
[77 81]
[99 143]
[100 142]
[101 141]
[102 140]
[103 139]
[107 135]
[108 134]
[109 133]
[110 132]
[111 131]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
