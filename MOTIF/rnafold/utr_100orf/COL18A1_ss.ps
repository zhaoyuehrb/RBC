%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCCAGCCGCACUGCCCCGAUGGCUCCCUACCCCUGUGGCUGCCACAUCCUGCUGCUGCUCUUCUGCUGCCUGGCGGCUGCCCGGGCCAACCUGCUGAACCUGAACUGGCUUUGGUUCA\
) } def
/len { sequence length } bind def

/coor [
[234.57485962 251.19963074]
[236.46730042 228.89007568]
[225.72502136 218.42091370]
[214.98272705 207.95175171]
[204.24044800 197.48258972]
[193.10189819 187.43606567]
[181.58369446 177.82716370]
[170.06549072 168.21826172]
[158.54727173 158.60935974]
[147.02906799 149.00047302]
[135.51086426 139.39157104]
[123.99266052 129.78266907]
[106.62247467 141.89949036]
[83.38455200 143.53138733]
[60.67646027 132.11236572]
[45.78749466 108.93864441]
[32.54731369 115.98829651]
[19.30713081 123.03794861]
[13.26893425 137.90132141]
[-2.15668035 142.30926514]
[-15.13650227 132.88038635]
[-15.71352291 116.84770966]
[-3.44510150 106.51013947]
[12.25747967 109.79776764]
[25.49766159 102.74811554]
[38.73784256 95.69846344]
[39.31665802 88.22083282]
[24.31752396 88.05979919]
[9.31838799 87.89877319]
[-4.79596806 92.97666168]
[-16.72490501 83.88268280]
[-15.56707954 68.92743683]
[-2.38057780 61.77787781]
[10.78380013 68.96734619]
[25.62904549 71.11645508]
[40.47429276 73.26557159]
[41.05310822 65.78794098]
[29.05551910 56.78472519]
[17.05792999 47.78150940]
[5.06034088 38.77829742]
[-6.93724775 29.77508163]
[-23.23510742 25.10430717]
[-23.25856400 8.15037632]
[-6.97369385 3.43451977]
[2.06596661 17.77749252]
[14.06355572 26.78070641]
[26.06114388 35.78392029]
[38.05873108 44.78713608]
[50.05632019 53.79034805]
[57.03955460 51.05457306]
[50.82704926 37.40155792]
[41.85731125 25.37892151]
[50.13568878 12.87018681]
[64.70772552 16.42767906]
[66.29115295 31.34328461]
[71.00601959 45.58301926]
[77.98925018 42.84724426]
[80.67845917 28.09027290]
[75.54062653 13.12654305]
[85.43431854 1.99262846]
[88.12353516 -12.76434040]
[78.92780304 -25.61790276]
[81.59666443 -41.19521713]
[94.54673004 -50.25453949]
[110.09495544 -47.42113495]
[119.01685333 -34.37601089]
[116.01922607 -18.85861015]
[102.88050079 -10.07512951]
[100.19129181 4.68183994]
[105.52147675 18.59005356]
[95.43543243 30.77948570]
[92.74621582 45.53645325]
[120.60280609 53.59882355]
[138.38607788 73.58856964]
[142.36143494 97.77879333]
[133.60156250 118.26446533]
[145.11976624 127.87336731]
[156.63796997 137.48226929]
[168.15617371 147.09115601]
[179.67437744 156.70005798]
[191.19258118 166.30895996]
[202.71080017 175.91784668]
[208.09300232 176.83587646]
[212.12052917 179.51849365]
[214.33853149 183.12049866]
[214.70960999 186.74029541]
[225.45188904 197.20945740]
[236.19418335 207.67861938]
[246.93646240 218.14778137]
[255.00942993 215.05699158]
[263.60437012 214.54243469]
[271.92230225 216.63139343]
[279.19622803 221.11009216]
[284.76174927 227.54534912]
[288.11782837 235.32646179]
[288.97177124 243.72306824]
[287.26477051 251.95378113]
[283.17535400 259.25878906]
[292.17858887 271.25637817]
[301.18179321 283.25396729]
[310.18499756 295.25155640]
[319.18823242 307.24914551]
[328.19143677 319.24673462]
[343.15530396 316.23916626]
[357.94009399 320.03036499]
[369.61026001 329.86752319]
[375.84866333 343.79751587]
[375.41671753 359.05453491]
[368.40014648 372.60925293]
[356.19210815 381.77038574]
[341.21652222 384.71899414]
[326.44677734 380.86962891]
[314.81542969 370.98657227]
[308.63192749 357.03213501]
[309.12396240 341.77694702]
[316.19384766 328.24993896]
[307.19064331 316.25234985]
[298.18740845 304.25476074]
[289.18420410 292.25717163]
[280.18099976 280.25958252]
[271.17776489 268.26199341]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 82]
[7 81]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[16 26]
[17 25]
[18 24]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[57 72]
[58 71]
[60 69]
[61 68]
[98 121]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
