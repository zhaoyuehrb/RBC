%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:15:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAGCCCUGCUGAAUCAAGUGAGAGGAGAGCUGCGGAGCAAUCACCAUGAGUAUCUCAGCUCUUGGAGGCCGCACCAAAGGGAAGCCUCUGCCACCAGGCGAGGAGGAGCGCAAUAACGUUCUCAAGCAGAUGAAAGUGCGAACCA\
) } def
/len { sequence length } bind def

/coor [
[127.61698151 210.01986694]
[112.65291595 211.05752563]
[99.32006073 204.18475342]
[91.48410034 191.39422607]
[91.41696930 176.39436340]
[99.13813019 163.53421021]
[112.40893555 156.54237366]
[127.37937927 157.44525146]
[117.28769684 146.34759521]
[107.19602203 135.24993896]
[92.19935608 135.56617737]
[82.58448792 147.07940674]
[72.96961975 158.59263611]
[74.63338470 174.30909729]
[64.63179016 186.54608154]
[48.89860916 188.04359436]
[36.76805496 177.91317749]
[35.43696976 162.16503906]
[45.69506836 150.14227295]
[61.45639420 148.97776794]
[71.07126617 137.46453857]
[80.68613434 125.95131683]
[78.96221161 118.65213013]
[66.14368439 126.44220734]
[54.77385712 116.65818024]
[60.56572342 102.82147980]
[75.51437378 104.05376434]
[73.79045105 96.75457764]
[60.04051590 90.75964355]
[46.29057693 84.76471710]
[32.54063797 78.76979065]
[18.79069710 72.77485657]
[5.04075813 66.77993011]
[-8.70918083 60.78499985]
[-22.45911980 54.79007339]
[-31.64506721 54.21751785]
[-36.43365097 48.52107620]
[-50.05414581 42.23759079]
[-63.67463684 35.95410538]
[-75.20406342 43.57769012]
[-88.88758087 44.48402405]
[-101.12660980 38.54240036]
[-108.75570679 27.40893555]
[-109.86105347 14.06655121]
[-123.34603882 7.49730158]
[-136.83102417 0.92805213]
[-153.71839905 -0.57304013]
[-156.95085144 -17.21598244]
[-141.85314941 -24.92934036]
[-130.26177979 -12.55693817]
[-116.77679443 -5.98768854]
[-103.29180145 0.58156115]
[-89.08982086 -7.58930445]
[-72.64862823 -5.69031668]
[-60.44109726 5.72937727]
[-57.39115143 22.33361244]
[-43.77066040 28.61709785]
[-30.15016747 34.90058517]
[-16.46419144 41.04013443]
[-2.71425152 47.03506088]
[11.03568745 53.02999115]
[24.78562737 59.02492142]
[38.53556442 65.01985168]
[52.28550339 71.01477814]
[66.03544617 77.00970459]
[79.78538513 83.00463867]
[93.12887573 76.15254211]
[96.26817322 61.48472977]
[99.40747070 46.81691360]
[102.54676819 32.14909744]
[105.68605804 17.48128128]
[108.82535553 2.81346560]
[98.85616302 -6.76055908]
[94.96727753 -19.91109467]
[98.07640076 -33.15609741]
[107.26291656 -43.04372025]
[120.03694916 -47.05185318]
[123.48478699 -61.65022278]
[121.24105835 -78.45504761]
[136.76802063 -85.26312256]
[147.60832214 -72.22763062]
[138.08316040 -58.20238495]
[134.63531494 -43.60401535]
[145.72528076 -31.54283714]
[147.48284912 -15.08592987]
[139.02244568 -0.66876012]
[123.49317169 5.95276165]
[120.35387421 20.62057686]
[117.21457672 35.28839493]
[114.07528687 49.95620728]
[110.93598938 64.62402344]
[107.79669189 79.29183960]
[120.25774384 87.64182281]
[132.63008118 79.16094208]
[145.00241089 70.68005371]
[151.58868408 55.66163254]
[167.91572571 54.12548065]
[177.18766785 67.65186310]
[169.86634827 82.32599640]
[153.48329163 83.05239105]
[141.11096191 91.53327179]
[128.73863220 100.01415253]
[126.66040039 113.58581543]
[118.29367828 125.15826416]
[128.38536072 136.25592041]
[138.47703552 147.35357666]
[149.44537354 151.26837158]
[153.11135864 160.94592285]
[164.92285156 170.19190979]
[180.40484619 168.47563171]
[192.25167847 178.02064514]
[193.79248047 192.79093933]
[205.60398865 202.03692627]
[217.41548157 211.28292847]
[229.22698975 220.52891541]
[243.45199585 214.90785217]
[258.48141479 217.14688110]
[270.29367065 226.54565430]
[275.77877808 240.50163269]
[273.55682373 255.23013306]
[285.36831665 264.47613525]
[297.17984009 273.72210693]
[308.99133301 282.96810913]
[323.87374878 278.57568359]
[338.48437500 283.80151367]
[347.20510864 296.63613892]
[346.68270874 312.14443970]
[337.11798096 324.36309814]
[322.18878174 328.59381104]
[307.63571167 323.20980835]
[299.05471802 310.28131104]
[299.74533081 294.77960205]
[287.93383789 285.53363037]
[276.12234497 276.28762817]
[264.31082153 267.04162598]
[250.54667664 272.73495483]
[235.68194580 270.76116943]
[223.72195435 261.55111694]
[217.93981934 247.49894714]
[219.98098755 232.34042358]
[208.16949463 223.09442139]
[196.35798645 213.84843445]
[184.54649353 204.60243225]
[169.83831787 206.65310669]
[157.72805786 197.44461060]
[155.67686462 182.00341797]
[143.86535645 172.75741577]
[145.86920166 187.62297058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 106]
[9 105]
[10 104]
[11 22]
[12 21]
[13 20]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[37 58]
[38 57]
[39 56]
[44 52]
[45 51]
[46 50]
[67 92]
[68 91]
[69 90]
[70 89]
[71 88]
[72 87]
[77 83]
[78 82]
[93 102]
[94 101]
[95 100]
[108 147]
[109 146]
[112 143]
[113 142]
[114 141]
[115 140]
[120 135]
[121 134]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
