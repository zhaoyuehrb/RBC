%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACGGUAGAACCGAUGGGAAAUGUAGUCCAGGGCAGAAAAGCGGUCAACCCAGCCACGAUGCGAGCCAAAGGAUUCUUGGCUCCAAGCCUGGUCCUGGCUGUUAGUUUGGAAC\
) } def
/len { sequence length } bind def

/coor [
[118.84440613 133.56629944]
[109.24340057 137.36799622]
[98.97722626 138.48066711]
[88.78465271 136.82421875]
[81.70240784 150.04699707]
[74.62017059 163.26977539]
[67.53792572 176.49255371]
[65.38945007 193.30982971]
[48.63465118 195.90078735]
[41.50674820 180.51803589]
[54.31514740 169.41032410]
[61.39738846 156.18754578]
[68.47962952 142.96476746]
[75.56187439 129.74198914]
[70.13957214 124.29325867]
[65.90801239 117.87579346]
[51.52087784 122.11965179]
[37.13373947 126.36351013]
[22.74660492 130.60736084]
[17.67733765 145.27304077]
[4.93669796 154.13056946]
[-10.57628059 153.77403259]
[-22.89654160 144.34054565]
[-27.28668976 129.45745850]
[-22.05862808 114.84762573]
[-9.22264957 106.12883759]
[6.28554916 106.65364075]
[18.50274849 116.22023010]
[32.88988495 111.97637177]
[47.27701950 107.73251343]
[61.66415787 103.48866272]
[65.86466217 82.20712280]
[80.90485382 66.57571411]
[102.00871277 61.55818939]
[122.47470093 68.74787140]
[133.43724060 58.50957489]
[144.39978027 48.27127838]
[155.36231995 38.03298187]
[156.06269836 22.47190094]
[167.32612610 12.24497700]
[182.15692139 13.00857735]
[193.11946106 2.77027988]
[204.08200073 -7.46801710]
[215.04454041 -17.70631409]
[226.00708008 -27.94461250]
[236.96961975 -38.18290710]
[247.93214417 -48.42120743]
[258.89468384 -58.65950394]
[259.13269043 -76.08604431]
[271.60867310 -87.76911163]
[288.34231567 -86.89854431]
[299.02111816 -97.43246460]
[309.69992065 -107.96637726]
[320.37869263 -118.50029755]
[316.65737915 -129.58622742]
[317.40515137 -141.20423889]
[322.47174072 -151.62846375]
[331.06808472 -159.32518005]
[341.88912964 -163.17857361]
[353.31192017 -162.65228271]
[363.63882446 -157.86376953]
[375.14413452 -167.48812866]
[379.80075073 -175.50794983]
[387.09765625 -177.21304321]
[398.86154175 -186.51956177]
[410.62539673 -195.82606506]
[422.38928223 -205.13256836]
[434.15316772 -214.43908691]
[445.91705322 -223.74559021]
[457.68093872 -233.05209351]
[457.95089722 -248.68734741]
[468.24682617 -260.45715332]
[483.70727539 -262.80413818]
[497.03231812 -254.62014771]
[501.93023682 -239.76940918]
[496.08843994 -225.26399231]
[482.26519775 -217.95291138]
[466.98745728 -221.28822327]
[455.22357178 -211.98170471]
[443.45968628 -202.67520142]
[431.69580078 -193.36869812]
[419.93191528 -184.06217957]
[408.16802979 -174.75567627]
[396.40414429 -165.44917297]
[384.76849365 -155.98284912]
[373.26321411 -146.35848999]
[375.70513916 -127.96972656]
[366.63864136 -111.61736298]
[349.47994995 -103.82526398]
[330.91262817 -107.82150269]
[320.23382568 -97.28759003]
[309.55502319 -86.75366974]
[298.87625122 -76.21975708]
[300.58364868 -63.36880493]
[294.44869995 -51.72708893]
[282.53430176 -45.69417191]
[269.13299561 -47.69696426]
[258.17044067 -37.45866776]
[247.20791626 -27.22036934]
[236.24537659 -16.98207283]
[225.28283691 -6.74377489]
[214.32029724 3.49452209]
[203.35775757 13.73281956]
[192.39521790 23.97111702]
[192.14494324 38.81944656]
[181.17321777 49.35870361]
[165.60061646 48.99552155]
[154.63807678 59.23381805]
[143.67553711 69.47211456]
[132.71299744 79.71041107]
[136.92958069 89.13658905]
[138.48867798 99.34450531]
[137.27807617 109.59959412]
[133.38491821 119.16388702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[7 11]
[16 31]
[17 30]
[18 29]
[19 28]
[35 110]
[36 109]
[37 108]
[38 107]
[41 104]
[42 103]
[43 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[51 93]
[52 92]
[53 91]
[54 90]
[61 86]
[62 85]
[64 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
