%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUAUAUCAGAGGGAAAUAAGACUCUUGUGACAGAGUUUGUUCUCACAGGACUUACAGAUCGACCAUGGCUGCACGUCCUCUUCUUUGUUGUGUUUU\
) } def
/len { sequence length } bind def

/coor [
[67.45583344 330.13119507]
[59.94138718 315.55499268]
[69.03392792 301.90737915]
[69.50042725 286.91461182]
[69.96691895 271.92187500]
[70.43341827 256.92913818]
[70.89991760 241.93638611]
[71.36641693 226.94364929]
[71.83291626 211.95089722]
[64.49517059 198.98916626]
[72.65791321 185.43629456]
[73.12441254 170.44354248]
[73.59091187 155.45080566]
[74.05741119 140.45805359]
[74.52390289 125.46531677]
[66.36083984 112.88101959]
[52.48043442 107.19469452]
[38.60002899 101.50836945]
[24.71962166 95.82204437]
[14.73798847 100.67723846]
[3.96542263 99.16639709]
[-3.96514416 92.04878235]
[-6.51886654 81.93173218]
[-20.01890564 75.39346313]
[-33.51894760 68.85520172]
[-47.01898575 62.31693268]
[-60.51902390 55.77866745]
[-74.01906586 49.24040222]
[-87.51910400 42.70213318]
[-102.36393738 48.12490463]
[-116.65988159 41.38682938]
[-121.92539978 26.48549080]
[-115.03655243 12.26158905]
[-100.08037567 7.15391207]
[-85.93010712 14.19275379]
[-80.98083496 29.20209503]
[-67.48079681 35.74036026]
[-53.98075867 42.27862549]
[-40.48072052 48.81689453]
[-26.98068047 55.35515976]
[-13.48063946 61.89342499]
[0.01939992 68.43169403]
[19.01774025 65.45245361]
[30.40594864 81.94163513]
[44.28635406 87.62796021]
[58.16676331 93.31429291]
[72.04717255 99.00061798]
[77.85047913 85.08200073]
[89.60195923 76.78316498]
[103.27531433 76.04981995]
[114.63252258 82.37528229]
[127.46459961 74.60753632]
[140.29667664 66.83979034]
[153.12875366 59.07204819]
[165.96083069 51.30430222]
[167.38398743 35.96543884]
[177.44863892 24.53931618]
[192.13777161 21.26924706]
[205.77258301 27.20472717]
[218.60466003 19.43698311]
[231.43673706 11.66923904]
[237.28614807 4.41823864]
[244.79089355 3.86662722]
[257.85833740 -3.49828410]
[261.86489868 -18.78628540]
[275.55020142 -26.69122887]
[290.79498291 -22.52325058]
[298.55480957 -8.75514126]
[294.22589111 6.44472694]
[280.37649536 14.05854034]
[265.22323608 9.56915951]
[252.15580750 16.93407059]
[239.20448303 24.50131416]
[226.37240601 32.26905823]
[213.54032898 40.03680420]
[212.47726440 54.86946487]
[202.76913452 66.36799622]
[187.97885132 69.98751068]
[173.72857666 64.13637543]
[160.89649963 71.90412140]
[148.06442261 79.67186737]
[135.23234558 87.43961334]
[122.40026855 95.20735931]
[122.86359406 107.84824371]
[116.36286926 119.47812653]
[104.18229675 126.37529755]
[89.51664734 125.93181610]
[89.05014801 140.92456055]
[88.58365631 155.91729736]
[88.11715698 170.91004944]
[87.65065765 185.90278625]
[94.95503235 199.93692017]
[86.82566071 212.41740417]
[86.35916138 227.41014099]
[85.89266205 242.40289307]
[85.42616272 257.39562988]
[84.95966339 272.38836670]
[84.49317169 287.38113403]
[84.02667236 302.37387085]
[92.25315094 316.56036377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[7 95]
[8 94]
[9 93]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 47]
[17 46]
[18 45]
[19 44]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[59 75]
[60 74]
[61 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
