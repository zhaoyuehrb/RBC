%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCAAGCGCCGCGGCCUCAGGCGAACGAACGGGCGGUGUAGUGCAGGUCCGCCAUGGCUGAGGCGUCACGGUGGCACCGAGGCGGGGCUUCGAAACAUAAGUUGCAUUACAGAAAGGAAGUAGAAAUUACAACCACACUUCAGGAAUUGUUAC\
) } def
/len { sequence length } bind def

/coor [
[98.19143677 136.80018616]
[94.33332062 151.29551697]
[90.47519684 165.79086304]
[86.61708069 180.28620911]
[91.40798950 195.96992493]
[80.02461243 207.77462769]
[64.17720032 203.55664062]
[60.16820526 187.65505981]
[72.12174225 176.42808533]
[75.97985840 161.93273926]
[79.83798218 147.43740845]
[83.69609833 132.94206238]
[72.38992310 118.13228607]
[70.73046112 101.49298096]
[57.49722290 108.55565643]
[48.96556473 121.87937164]
[34.09429169 121.04597473]
[20.86105537 128.10865784]
[7.62781668 135.17132568]
[-5.60542154 142.23400879]
[-4.47737551 157.42108154]
[-9.63010597 171.75180054]
[-20.17087173 182.74325562]
[-34.27341843 188.49113464]
[-49.49440002 187.99955750]
[-63.19668579 181.35371399]
[-73.00627136 169.70501709]
[-77.22358704 155.07170105]
[-75.11795807 139.98905945]
[-67.05419922 127.07024384]
[-54.42940521 118.55352783]
[-39.43089294 115.91448975]
[-24.65725136 119.61034393]
[-12.66809845 129.00077820]
[0.56513906 121.93809509]
[13.79837704 114.87541962]
[27.03161430 107.81273651]
[34.61674500 94.99419403]
[50.43454742 95.32241821]
[63.66778564 88.25974274]
[70.99382782 75.17047119]
[70.09391785 60.19748688]
[69.19400024 45.22450638]
[68.29408264 30.25152779]
[67.39416504 15.27854633]
[66.49424744 0.30556583]
[65.59433746 -14.66741467]
[64.69441986 -29.64039612]
[60.25943756 -43.96976852]
[52.54387283 -56.83328629]
[44.82830811 -69.69680023]
[36.98443222 -82.48248291]
[29.01303101 -95.18904877]
[21.04162788 -107.89560699]
[13.07022667 -120.60217285]
[5.09882402 -133.30873108]
[-8.78925800 -140.88711548]
[-8.99857140 -155.78024292]
[-16.96997452 -168.48680115]
[-24.94137764 -181.19337463]
[-32.91278076 -193.89993286]
[-48.37231445 -197.18298340]
[-56.91221237 -210.48130798]
[-53.46590424 -225.90527344]
[-40.07802582 -234.30409241]
[-24.69136429 -230.69490051]
[-16.43455505 -217.21897888]
[-20.20621681 -201.87133789]
[-12.23481369 -189.16477966]
[-4.26341152 -176.45820618]
[3.70799112 -163.75164795]
[17.02590370 -157.08213806]
[17.80538750 -141.28013611]
[25.77678871 -128.57357788]
[33.74819183 -115.86701202]
[41.71959305 -103.16044617]
[49.69099808 -90.45388794]
[55.94469452 -86.43653107]
[57.69182587 -77.41236877]
[65.40738678 -64.54885101]
[73.12295532 -51.68533325]
[88.07492828 -52.88465881]
[93.64141846 -66.81355286]
[99.20791626 -80.74245453]
[104.77440643 -94.67134857]
[110.34089661 -108.60024261]
[110.60420227 -125.55214691]
[126.96650696 -129.99188232]
[135.76228333 -115.49806976]
[124.26979828 -103.03375244]
[118.70330048 -89.10485840]
[113.13681030 -75.17596436]
[107.57032013 -61.24706268]
[102.00382996 -47.31816864]
[113.56674957 -56.87320709]
[128.54278564 -56.02563095]
[141.53520203 -48.52914429]
[149.76402283 -35.98775101]
[151.46855164 -21.08491516]
[146.28407288 -7.00936031]
[135.31990051 3.22719145]
[120.92202759 7.43444681]
[106.17111206 4.71218729]
[94.22340393 -4.35711050]
[87.63558197 -17.83172798]
[79.66739655 -30.54031181]
[80.56731415 -15.56733036]
[81.46723175 -0.59434992]
[82.36714935 14.37863064]
[83.26706696 29.35161209]
[84.16697693 44.32459259]
[85.06689453 59.29757309]
[85.96681213 74.27055359]
[95.44306946 69.97216797]
[106.18674469 69.17913055]
[116.89863586 72.23908997]
[126.19755554 79.01870728]
[132.79762268 88.89138031]
[135.68312073 100.78990173]
[134.25735474 113.32029724]
[146.88352966 121.41842651]
[159.50970459 129.51655579]
[172.13587952 137.61468506]
[184.76205444 145.71282959]
[197.00064087 136.73611450]
[211.65657043 132.79046631]
[226.74774170 134.40946960]
[240.23318481 141.37417603]
[250.28912354 152.74267578]
[255.55555725 166.97746277]
[255.32025146 182.15339661]
[249.61502075 196.21806335]
[239.21147156 207.26933289]
[225.51658630 213.81260681]
[210.38247681 214.96296692]
[195.85592651 210.56483459]
[183.90151978 201.21301270]
[176.13598633 188.17227173]
[173.60955811 173.20625305]
[176.66392517 158.33898926]
[164.03775024 150.24085999]
[151.41157532 142.14273071]
[138.78540039 134.04460144]
[126.15922546 125.94647217]
[119.16727448 128.65989685]
[126.36533356 141.81999207]
[133.56340027 154.98007202]
[140.76145935 168.14016724]
[151.36178589 178.75303650]
[151.22143555 193.75236511]
[140.42436218 204.16500854]
[125.42978668 203.76171875]
[115.20803833 192.78373718]
[115.87423706 177.79837036]
[112.31062317 163.22782898]
[108.74700165 148.65728760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 40]
[15 39]
[17 37]
[18 36]
[19 35]
[20 34]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[47 107]
[48 106]
[49 81]
[50 80]
[51 79]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[58 71]
[59 70]
[60 69]
[61 68]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[120 144]
[121 143]
[122 142]
[123 141]
[124 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
