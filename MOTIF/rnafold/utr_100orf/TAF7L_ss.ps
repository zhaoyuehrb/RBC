%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUACAACCCCAACGAGGUGGGCCAUGGAGUGCCCCGAGGGACAGCUCCCCAUUUCUUCAGAAAAUGAUUCAACACCAACAGUUUCAACAUCGGAAGUAACUAGCCAACAAGAACCCCAAAUUC\
) } def
/len { sequence length } bind def

/coor [
[146.51174927 230.21179199]
[152.69668579 216.48443604]
[161.60087585 204.34321594]
[172.83503723 194.31889343]
[165.38867188 181.29769897]
[157.94229126 168.27650452]
[150.49591064 155.25531006]
[136.10209656 151.60099792]
[128.36492920 138.50173950]
[132.29550171 123.42897034]
[124.84911346 110.40778351]
[117.35929871 119.49932098]
[107.00015259 124.28426361]
[95.95923615 124.10289001]
[86.42204285 119.30947113]
[80.13942719 111.14022064]
[78.10771179 101.41262817]
[63.71057892 97.20282745]
[49.31344223 92.99301910]
[34.91630173 88.78321838]
[20.51916695 84.57341766]
[6.12202883 80.36361694]
[-8.27510834 76.15380859]
[-22.67224503 71.94400787]
[-18.45968437 86.34033966]
[-26.88027763 98.75378418]
[-41.81399918 100.16233826]
[-52.40711975 89.54226685]
[-50.96063232 74.61217499]
[-38.52569199 66.22312164]
[-52.29348373 60.26931000]
[-66.06127930 54.31549835]
[-79.90165710 48.53242111]
[-93.81250000 42.92097092]
[-107.79168701 37.48199844]
[-121.83706665 32.21633911]
[-135.88244629 26.95067787]
[-152.83610535 27.05199242]
[-157.62669373 10.78894806]
[-143.32537842 1.68351793]
[-130.61679077 12.90529442]
[-116.57141113 18.17095375]
[-102.52602386 23.43661308]
[-95.07847595 22.83226395]
[-88.20104980 29.01012421]
[-74.29019928 34.62157822]
[-66.82998657 34.20162582]
[-60.10746384 40.54770660]
[-46.33967209 46.50151825]
[-32.57188034 52.45532990]
[-18.46244240 57.54687119]
[-4.06530571 61.75667572]
[10.33183193 65.96647644]
[24.72896957 70.17627716]
[39.12610626 74.38608551]
[53.52324295 78.59588623]
[67.92037964 82.80568695]
[82.31752014 87.01548767]
[97.45658875 75.69345856]
[117.94364166 79.90457153]
[119.05577850 64.94585419]
[120.16792297 49.98714066]
[110.82753754 36.94349289]
[115.34028625 21.54821396]
[130.24438477 15.61124325]
[144.10667419 23.68691826]
[146.29319763 39.58027267]
[135.12663269 51.09928131]
[134.01449585 66.05799866]
[132.90235901 81.01670837]
[134.01467896 66.05800629]
[138.60890198 51.77890015]
[146.42807007 38.97809219]
[157.03479004 28.37160873]
[169.83578491 20.55273628]
[184.11499023 15.95882893]
[199.07371521 14.84684849]
[213.87522888 17.27899551]
[227.69158936 23.11922646]
[239.74996948 32.04086304]
[249.37585449 43.54486465]
[256.03085327 56.98774719]
[259.34268188 71.61756897]
[259.12609863 86.61601257]
[255.39321899 101.14410400]
[248.35284424 114.38922882]
[238.39878845 125.61048889]
[226.08782959 134.18022156]
[212.10861206 139.61907959]
[197.24304199 141.62283325]
[182.32266235 140.07939148]
[168.18205261 135.07508850]
[155.61216736 126.88985443]
[145.31611633 115.98152924]
[137.87031555 102.96140289]
[145.31668091 115.98258972]
[160.30079651 120.23870087]
[167.66699219 133.55010986]
[163.51710510 147.80894470]
[170.96347046 160.83012390]
[178.40985107 173.85131836]
[185.85623169 186.87251282]
[200.19305420 182.27365112]
[215.17276001 180.75648499]
[230.14053345 182.38731384]
[244.44203186 187.09484863]
[257.45205688 194.67330933]
[268.60186768 204.79138184]
[277.40402222 217.00675964]
[283.47375488 230.78544617]
[286.54574585 245.52507019]
[286.48562622 260.58129883]
[283.29608154 275.29592896]
[277.11654663 289.02572632]
[268.21713257 301.17044067]
[256.98690796 311.19918823]
[243.91680908 318.67352295]
[229.57818604 323.26675415]
[214.59786987 324.77804565]
[199.63075256 323.14132690]
[185.33110046 318.42816162]
[172.32406616 310.84457397]
[161.17823792 300.72210693]
[152.38087463 288.50326538]
[146.31655884 274.72219849]
[143.25039673 259.98138428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[10 96]
[11 95]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[30 50]
[31 49]
[32 48]
[33 46]
[34 45]
[35 43]
[36 42]
[37 41]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
