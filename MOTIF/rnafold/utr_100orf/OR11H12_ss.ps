%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGUCCCUUGACCUUGCAGGUCACUGGCCUAAUGAAUGUCUCUGAGCCAAAUUCCAGCUUUGCUUUUGUAAAUGAAUUUAUACUCCAAGGUUUCACUU\
) } def
/len { sequence length } bind def

/coor [
[42.55687332 192.44033813]
[32.55556488 198.23381042]
[21.39227486 201.16746521]
[9.86644650 201.03990173]
[-1.19880021 197.86857605]
[-11.01545811 191.88804626]
[-18.88674545 183.53259277]
[-32.38678360 190.07086182]
[-37.65785980 204.72874451]
[-51.44196320 211.16716003]
[-65.38352966 206.05166626]
[-78.88356781 212.58993530]
[-92.38360596 219.12820435]
[-105.88364410 225.66647339]
[-119.38368988 232.20472717]
[-132.88372803 238.74299622]
[-144.50347900 251.08876038]
[-159.58341980 243.34074402]
[-156.31275940 226.70527649]
[-139.42199707 225.24296570]
[-125.92195129 218.70469666]
[-112.42191315 212.16642761]
[-98.92187500 205.62815857]
[-85.42183685 199.08988953]
[-71.92179108 192.55163574]
[-67.29148102 178.44149780]
[-53.69366074 171.61845398]
[-38.92505264 176.57083130]
[-25.42501259 170.03256226]
[-26.57209206 151.32711792]
[-19.63221169 133.86799622]
[-5.88759327 120.98986053]
[12.07576084 115.17080688]
[30.85455894 117.55558777]
[46.87299347 127.73062897]
[59.19733047 119.18014526]
[71.52166748 110.62966156]
[83.84600067 102.07917786]
[86.65516663 90.66243744]
[96.41825867 84.11145782]
[108.04778290 85.83992004]
[120.63208008 77.67685699]
[133.21636963 69.51379395]
[136.62767029 54.31508636]
[149.50622559 46.21584702]
[163.97485352 49.56166840]
[176.55914307 41.39860535]
[189.14343262 33.23554230]
[192.41069031 16.13677025]
[206.70413208 6.79996157]
[223.02061462 10.52982807]
[235.34495544 1.97934389]
[247.66928101 -6.57113981]
[259.99362183 -15.12162399]
[272.31796265 -23.67210770]
[284.64227295 -32.22259140]
[285.08990479 -41.95703888]
[289.99133301 -50.21773529]
[298.08245850 -55.13086319]
[307.39440918 -55.65408707]
[315.73199463 -51.79524231]
[328.79943848 -59.16015244]
[341.86688232 -66.52506256]
[354.93432617 -73.88997650]
[368.00177002 -81.25489044]
[375.87786865 -95.63888550]
[392.27670288 -95.73944855]
[400.32858276 -81.45311737]
[391.75042725 -67.47645569]
[375.36669922 -68.18744659]
[362.29925537 -60.82253265]
[349.23181152 -53.45762253]
[336.16436768 -46.09270859]
[323.09692383 -38.72779846]
[314.50030518 -20.07538605]
[293.19277954 -19.89825630]
[280.86843872 -11.34777260]
[268.54409790 -2.79728913]
[256.21975708 5.75319481]
[243.89543152 14.30367851]
[231.57110596 22.85416222]
[231.04682922 35.83133698]
[222.97987366 46.25857544]
[210.17584229 50.13896561]
[197.30648804 45.81983566]
[184.72219849 53.98289871]
[172.13790894 62.14596176]
[169.29443359 76.72163391]
[156.64846802 85.17941284]
[141.37944031 82.09808350]
[128.79513550 90.26114655]
[116.21084595 98.42420959]
[109.07502747 113.52474213]
[92.39648438 114.40351868]
[80.07215118 122.95400238]
[67.74781036 131.50448608]
[55.42347717 140.05496216]
[58.80134201 151.19107056]
[59.10871887 162.80833435]
[56.33201599 174.07679749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[16 20]
[35 97]
[36 96]
[37 95]
[38 94]
[41 92]
[42 91]
[43 90]
[46 87]
[47 86]
[48 85]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
