%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUAGAGACUUAAAUCCUGACACAAUGAGCUACUAUGGCAACUACUACGGAGGACUGGGCUAUGGCUAUGACUGUAAAUAUAGUUAUACCUCUGGCUUUGGUGCCUUUAGAAUCCUGGACUGUG\
) } def
/len { sequence length } bind def

/coor [
[103.05390930 225.47410583]
[101.93296051 210.51605225]
[100.62562561 195.57312012]
[99.13210297 180.64765930]
[97.63858795 165.72219849]
[96.14507294 150.79673767]
[92.30647278 144.38420105]
[94.80513763 135.48124695]
[93.68418884 120.52319336]
[87.49664307 134.18754578]
[81.30908966 147.85188293]
[75.12154388 161.51622009]
[73.40120697 176.41725159]
[66.98171997 189.97416687]
[56.54466248 200.74765015]
[43.19813919 207.59384155]
[28.35917091 209.78587341]
[13.60322952 207.09103394]
[0.49697217 199.79541016]
[-9.56809425 188.67361450]
[-15.52334881 174.90644836]
[-16.73651505 159.95558167]
[-13.07878780 145.40838623]
[-4.93851471 132.80934143]
[6.82004261 123.49610138]
[20.94846153 118.45747375]
[35.94953918 118.22884369]
[50.16205978 113.43257141]
[64.37458038 108.63629913]
[78.58710480 103.84002686]
[63.81498718 101.23530579]
[49.04287338 98.63058472]
[34.27075577 96.02586365]
[17.62232018 99.22990417]
[9.93474388 84.11906433]
[22.32691383 72.54882812]
[36.87548065 81.25374603]
[51.64759445 83.85846710]
[66.41970825 86.46318817]
[81.19182587 89.06790924]
[67.38512421 83.20490265]
[58.62036896 71.03202057]
[57.43878937 56.07862854]
[64.18296814 42.68027115]
[76.89752197 34.72161865]
[91.89602661 34.51017761]
[104.82987976 42.10725403]
[111.94906616 55.31017685]
[111.18948364 70.29093170]
[102.77322388 82.70446777]
[113.76899719 72.50187683]
[124.76477814 62.29928589]
[135.76055908 52.09669495]
[146.75633240 41.89410400]
[157.62406921 31.55522728]
[168.36207581 21.08167458]
[179.10006714 10.60812283]
[189.83807373 0.13457054]
[200.57608032 -10.33898163]
[211.18267822 -20.94558334]
[221.65623474 -31.68358612]
[232.12979126 -42.42158890]
[242.60333252 -53.15959167]
[246.67471313 -71.06577301]
[263.66534424 -75.26584625]
[273.86791992 -86.26161957]
[277.46527100 -94.78011322]
[284.46456909 -97.40031433]
[294.93811035 -108.13832092]
[305.41168213 -118.87631989]
[315.88522339 -129.61431885]
[326.35879517 -140.35232544]
[336.83233643 -151.09033203]
[347.30587769 -161.82833862]
[357.77944946 -172.56632996]
[368.25299072 -183.30433655]
[371.77304077 -199.32124329]
[387.48382568 -204.02265930]
[399.22341919 -192.57217407]
[394.91516113 -176.74905396]
[378.99099731 -172.83078003]
[368.51742554 -162.09278870]
[358.04388428 -151.35478210]
[347.57034302 -140.61677551]
[337.09677124 -129.87876892]
[326.62322998 -119.14077759]
[316.14968872 -108.40277100]
[305.67611694 -97.66477203]
[295.20257568 -86.92676544]
[284.86370850 -76.05902863]
[274.66110229 -65.06325531]
[274.78131104 -52.89863205]
[266.27551270 -43.64696503]
[253.34133911 -42.68603897]
[242.86778259 -31.94803619]
[232.39424133 -21.21003342]
[221.92068481 -10.47203159]
[219.47579956 -3.40958953]
[211.04963684 0.39902100]
[200.31163025 10.87257290]
[189.57362366 21.34612465]
[178.83561707 31.81967735]
[168.09762573 42.29323196]
[165.47741699 49.29252243]
[156.95892334 52.88988113]
[145.96315002 63.09247208]
[134.96736145 73.29505920]
[123.97158813 83.49765015]
[112.97581482 93.70024109]
[115.65162659 97.93410492]
[116.84346008 103.23082733]
[116.15534973 109.04215240]
[113.39960480 114.68122101]
[108.64224243 119.40224457]
[109.76319885 134.36030579]
[111.07053375 149.30322266]
[112.56404877 164.22868347]
[114.05756378 179.15414429]
[115.55108643 194.07960510]
[119.55776978 202.41340637]
[116.89101410 209.39509583]
[118.01197052 224.35314941]
[127.69197083 237.59057617]
[120.82140350 252.48109436]
[104.46810913 253.70660400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 119]
[4 118]
[5 117]
[6 116]
[8 115]
[9 114]
[30 40]
[31 39]
[32 38]
[33 37]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 97]
[61 96]
[62 95]
[63 94]
[65 91]
[66 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
