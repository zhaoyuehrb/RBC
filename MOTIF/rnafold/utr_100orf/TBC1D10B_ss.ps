%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGCGGCCCGCGGCCAUGGAGACGGGCACGGCGCCCCUGGUGGCCCCGCCGCGCCGUCAUGGCGCCCCCGCGGCCCCCUCGCCGCCGCCCCGGGGUUCCCGGGCCGGGCCCGUCG\
) } def
/len { sequence length } bind def

/coor [
[89.93800354 212.00837708]
[89.54205322 197.01359558]
[81.47148895 184.49501038]
[88.84181213 170.49540710]
[88.44585419 155.50062561]
[88.04990387 140.50585938]
[87.65395355 125.51107788]
[73.46331024 120.65044403]
[63.95698166 132.25344849]
[54.45064926 143.85646057]
[44.94432068 155.45945740]
[39.58323288 171.54345703]
[22.64370346 170.84437561]
[18.62613678 154.37332153]
[33.34131622 145.95312500]
[42.84764862 134.35012817]
[52.35397720 122.74712372]
[61.86030579 111.14411926]
[47.95494080 116.76913452]
[36.70068741 106.85238647]
[32.48610687 92.45664978]
[36.61524963 78.03617096]
[47.81049728 68.05286407]
[62.60787582 65.59571075]
[76.42716980 71.42362976]
[89.27117157 79.17163086]
[81.71408844 66.21437836]
[74.15700531 53.25712204]
[66.59992218 40.29986572]
[61.83905029 37.59718323]
[58.96198654 33.69136047]
[58.10885620 29.53863525]
[59.00445175 26.00475883]
[52.49619675 12.49022675]
[45.98794174 -1.02430642]
[39.47968674 -14.53883934]
[32.97142792 -28.05337334]
[26.46317291 -41.56790543]
[14.49978733 -46.60421371]
[9.38732243 -58.09603500]
[13.39300919 -69.59344482]
[7.24376202 -83.27507019]
[1.09451520 -96.95668793]
[-5.05473137 -110.63831329]
[-11.20397854 -124.31993103]
[-17.35322571 -138.00155640]
[-23.50247192 -151.68318176]
[-38.71868515 -154.72396851]
[-49.21676254 -166.15069580]
[-50.95997238 -181.56954956]
[-43.27801895 -195.05165100]
[-29.12476730 -201.41287231]
[-13.94243526 -198.20718384]
[-3.56893635 -186.66725159]
[-1.99309385 -171.23040771]
[-9.82085037 -157.83242798]
[-3.67160392 -144.15080261]
[2.47764301 -130.46917725]
[8.62689018 -116.78755951]
[14.77613640 -103.10593414]
[20.92538261 -89.42431641]
[27.07463074 -75.74269104]
[41.82725906 -66.33845520]
[39.97770691 -48.07616043]
[46.48596191 -34.56163025]
[52.99421692 -21.04709625]
[59.50247574 -7.53256273]
[66.01072693 5.98197031]
[72.51898956 19.49650383]
[79.55717468 32.74278259]
[87.11425781 45.70003891]
[94.67134094 58.65729523]
[102.22843170 71.61454773]
[116.60037231 75.90956879]
[130.02781677 69.22349548]
[143.45527649 62.53742218]
[156.88272095 55.85134506]
[161.66691589 40.78857803]
[175.73905945 33.59481812]
[190.75041199 38.53799820]
[197.79498291 52.68541718]
[192.69337463 67.64366150]
[178.47227478 74.53826904]
[163.56880188 69.27879333]
[150.14134216 75.96486664]
[136.71389771 82.65094757]
[123.28644562 89.33702087]
[122.89049530 104.33179474]
[135.94636536 111.71719360]
[149.00224304 119.10258484]
[164.82334900 119.16275024]
[172.09152222 132.16363525]
[185.14739990 139.54902649]
[198.20327759 146.93441772]
[211.25915527 154.31982422]
[224.31503296 161.70521545]
[237.37091064 169.09060669]
[254.13412476 171.62648010]
[256.33789062 188.43658447]
[240.79478455 195.20771790]
[229.98550415 182.14648438]
[216.92962646 174.76109314]
[203.87374878 167.37570190]
[190.81787109 159.99029541]
[177.76199341 152.60490417]
[164.70613098 145.21951294]
[149.81887817 145.68759155]
[141.61685181 132.15846252]
[128.56097412 124.77306366]
[115.50509644 117.38767242]
[102.64871979 125.11512756]
[103.04467773 140.10989380]
[103.44062805 155.10467529]
[103.83658600 170.09944153]
[111.93547058 183.69056702]
[104.53682709 196.61764526]
[104.93277740 211.61242676]
[107.63119507 230.80534363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 117]
[2 116]
[4 114]
[5 113]
[6 112]
[7 111]
[8 18]
[9 17]
[10 16]
[11 15]
[26 73]
[27 72]
[28 71]
[29 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[74 87]
[75 86]
[76 85]
[77 84]
[88 110]
[89 109]
[90 108]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
