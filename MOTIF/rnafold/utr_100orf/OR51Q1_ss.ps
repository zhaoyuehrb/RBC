%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGAUUAAAUGGGGCAAAGAGAUAUUAUUUCUAAUGUUUCUUUUUCUCCCUGAGUGAAGAUCCUGAAUCUGAAGACACAUUCAUCAGUCAUGUCCCAGGUGACUAACACCACACAAGAAGGCAUCUACUUCAUCCUCACGGACAUCCCUGGAUUUGAGGCCUCCCACAUCUGGAUCUCCAUCCCCGUCU\
) } def
/len { sequence length } bind def

/coor [
[25.71271324 406.91317749]
[14.90052032 417.68624878]
[0.48198849 422.69311523]
[-14.68007278 420.93963623]
[-27.57522583 412.77398682]
[-35.64312744 399.81747437]
[-37.28189087 384.64257812]
[-32.16613770 370.26232910]
[-21.31160355 359.53189087]
[-6.87346601 354.58184814]
[-5.15022564 339.68118286]
[-3.42698550 324.78048706]
[-1.70374525 309.87979126]
[0.01949511 294.97912598]
[1.74273539 280.07843018]
[-4.61471844 276.09939575]
[-23.68707848 264.16226196]
[-36.33610916 272.22463989]
[-48.98513794 280.28701782]
[-61.63417053 288.34939575]
[-74.28320312 296.41180420]
[-86.93222809 304.47418213]
[-99.58126068 312.53656006]
[-112.23029327 320.59893799]
[-124.87931824 328.66131592]
[-137.52835083 336.72372437]
[-150.17738342 344.78610229]
[-162.82641602 352.84848022]
[-169.91123962 367.63824463]
[-186.28053284 368.62753296]
[-195.09494019 354.79864502]
[-187.28697205 340.37756348]
[-170.88879395 340.19946289]
[-158.23976135 332.13705444]
[-145.59072876 324.07467651]
[-132.94171143 316.01229858]
[-120.29267120 307.94992065]
[-107.64364624 299.88754272]
[-94.99461365 291.82513428]
[-82.34558105 283.76275635]
[-69.69655609 275.70037842]
[-57.04752350 267.63800049]
[-44.39849472 259.57562256]
[-31.74946213 251.51322937]
[-35.41302872 236.96681213]
[-39.07625580 222.42167664]
[-54.03518677 221.31243896]
[-67.07701874 230.65536499]
[-82.47317505 226.14559937]
[-88.41304016 211.24266052]
[-80.34005737 197.37881470]
[-64.44713593 195.18919373]
[-52.92595291 206.35351562]
[-37.96702194 207.46275330]
[-23.98256111 202.03735352]
[-13.68561459 191.12988281]
[-3.38866687 180.22242737]
[-0.27815434 165.65623474]
[14.82144642 160.93260193]
[25.11839294 150.02513123]
[35.41534042 139.11766052]
[45.71228790 128.21018982]
[56.00923538 117.30272675]
[66.30618286 106.39525604]
[66.79953766 91.40337372]
[57.24198151 79.84252930]
[47.68442535 68.28168488]
[38.12686539 56.72084427]
[28.56930923 45.15999985]
[13.81293201 39.45387268]
[11.66680431 24.71469307]
[2.10924721 13.15384960]
[-13.43990326 7.94271183]
[-16.43588257 -8.18044376]
[-3.79668403 -18.62949753]
[11.47556782 -12.65535736]
[13.67009068 3.59629250]
[23.22764778 15.15713596]
[37.30040359 20.03635597]
[40.13015366 35.60244370]
[49.68770981 47.16328812]
[59.24526596 58.72413254]
[68.80282593 70.28497314]
[78.36038208 81.84581757]
[98.36928558 71.33524323]
[120.08107758 78.83422852]
[130.37802124 67.92675781]
[140.67497253 57.01929092]
[140.39532471 41.44496918]
[150.99327087 30.52992821]
[165.84272766 30.35930061]
[176.13967896 19.45183182]
[186.43663025 8.54436302]
[196.73358154 -2.36310601]
[207.03051758 -13.27057457]
[217.32746887 -24.17804337]
[208.44155884 -46.57621765]
[216.86712646 -71.59466553]
[241.40867615 -86.48361969]
[246.02046204 -100.75707245]
[250.63224792 -115.03052521]
[255.24401855 -129.30397034]
[249.24661255 -144.18385315]
[257.26596069 -158.07879639]
[273.15029907 -160.32980347]
[284.71453857 -149.21009827]
[283.08758545 -133.24975586]
[269.51748657 -124.69219208]
[264.90570068 -110.41873932]
[260.29391479 -96.14528656]
[255.68212891 -81.87183380]
[261.69122314 -77.38398743]
[270.66690063 -89.40218353]
[279.64279175 -101.42023468]
[291.66070557 -92.44416809]
[282.68511963 -80.42649078]
[273.70941162 -68.40829468]
[279.71850586 -63.92044830]
[292.09552002 -72.39450073]
[304.47253418 -80.86855316]
[316.84954834 -89.34260559]
[318.19589233 -104.92212677]
[329.27813721 -115.95472717]
[344.86352539 -117.23115540]
[357.59317017 -108.14872742]
[361.45648193 -92.99587250]
[354.62933350 -78.92732239]
[340.33529663 -72.58580780]
[325.32360840 -76.96559143]
[312.94659424 -68.49153900]
[300.56958008 -60.01749039]
[288.19256592 -51.54343796]
[287.86285400 -40.45087433]
[284.79003906 -30.08952332]
[279.31918335 -21.10696602]
[271.94006348 -14.02518654]
[263.24636841 -9.21067429]
[253.88981628 -6.85671759]
[244.53201294 -6.97863722]
[235.79811096 -9.42177296]
[228.23493958 -13.88109589]
[217.93798828 -2.97362733]
[207.64103699 7.93384123]
[197.34410095 18.84131050]
[187.04714966 29.74877930]
[176.75019836 40.65624619]
[177.43424988 55.49092484]
[167.14706421 66.69933319]
[151.58244324 67.31623840]
[141.28549194 78.22370911]
[130.98855591 89.13117981]
[132.58918762 104.04553223]
[144.96620178 112.51958466]
[157.34321594 120.99363708]
[173.10128784 122.40554810]
[179.23191833 135.97996521]
[191.60893250 144.45402527]
[200.47430420 146.72598267]
[204.11825562 153.17062378]
[216.35421753 161.84709167]
[232.77207947 166.07676697]
[233.25262451 183.02391052]
[217.10081482 188.17710876]
[207.67773438 174.08305359]
[195.44177246 165.40658569]
[183.13487244 156.83102417]
[170.75785828 148.35697937]
[155.88507080 147.55117798]
[148.86915588 133.37065125]
[136.49214172 124.89659119]
[124.11513519 116.42253876]
[100.49347687 128.70686340]
[77.21365356 116.69220734]
[66.91670227 127.59967804]
[56.61975861 138.50714111]
[46.32281113 149.41461182]
[36.02586365 160.32208252]
[25.72891426 171.22955322]
[21.88189507 186.57591248]
[7.51880169 190.51936340]
[-2.77814555 201.42683411]
[-13.07509327 212.33430481]
[16.64342117 281.80166626]
[14.92018127 296.70236206]
[13.19694042 311.60302734]
[11.47370052 326.50372314]
[9.75046062 341.40441895]
[8.02721977 356.30508423]
[20.95442772 364.41989136]
[29.07328987 377.34457397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 188]
[11 187]
[12 186]
[13 185]
[14 184]
[15 183]
[17 44]
[18 43]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[46 54]
[47 53]
[55 182]
[56 181]
[57 180]
[59 178]
[60 177]
[61 176]
[62 175]
[63 174]
[64 173]
[65 84]
[66 83]
[67 82]
[68 81]
[69 80]
[71 78]
[72 77]
[86 151]
[87 150]
[88 149]
[91 146]
[92 145]
[93 144]
[94 143]
[95 142]
[96 141]
[99 111]
[100 110]
[101 109]
[102 108]
[118 132]
[119 131]
[120 130]
[121 129]
[152 171]
[153 170]
[154 169]
[156 167]
[157 166]
[159 165]
[160 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
