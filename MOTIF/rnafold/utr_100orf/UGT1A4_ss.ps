%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUCAGCUGUCGGUGGCUUCUGCUGAGAUGGCCAGAGGACUCCAGGUUCCCCUGCCGCGGCUGGCCACAGGACUGCUGCUCCUCCUCAGUGUCCAGCCCUGGGCUGAGAGUGGAAAGGUGUUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[263.53952026 165.45388794]
[250.56083679 157.93367004]
[248.10392761 143.13624573]
[257.95523071 131.82560730]
[243.11262512 129.65827942]
[228.27001953 127.49093628]
[213.42742920 125.32360077]
[198.58483887 123.15626526]
[183.74223328 120.98892975]
[168.89964294 118.82159424]
[154.05705261 116.65425873]
[146.91154480 118.82273102]
[138.88369751 114.25103760]
[124.09780884 111.72568512]
[109.31192017 109.20032501]
[83.75691223 139.75422668]
[69.49106598 144.38948059]
[55.22521591 149.02473450]
[40.95936966 153.65998840]
[26.69352150 158.29524231]
[12.48472214 163.10253906]
[-1.66495538 168.08114624]
[-15.81463242 173.05976868]
[-26.07357025 185.85375977]
[-42.23971176 183.09915161]
[-47.68271637 167.62963867]
[-36.80328751 155.35893250]
[-20.79325104 158.91009521]
[-6.64357328 153.93147278]
[7.50610399 148.95285034]
[12.82539558 143.71208191]
[22.05826569 144.02940369]
[36.32411575 139.39414978]
[50.58996201 134.75888062]
[64.85581207 130.12362671]
[79.12165833 125.48838043]
[81.17926025 118.27614594]
[66.43753815 115.50455475]
[51.66814423 118.12466431]
[41.61797714 106.98940277]
[45.73336792 92.56499481]
[60.14618683 88.40920258]
[71.30943298 98.42773438]
[85.29445648 103.85168457]
[87.35205078 96.63945007]
[77.67942047 85.17471313]
[68.00679016 73.70997620]
[58.33415604 62.24524307]
[42.73369598 57.18978500]
[39.57670975 41.09737778]
[52.11083603 30.52251625]
[67.44203949 36.34370804]
[69.79888916 52.57260895]
[79.47152710 64.03734589]
[89.14415741 75.50208282]
[98.81678772 86.96681976]
[111.83727264 94.41443634]
[126.62316132 96.93978882]
[141.40905762 99.46514893]
[156.22438049 101.81166077]
[171.06697083 103.97899628]
[185.90957642 106.14633942]
[200.75216675 108.31367493]
[215.59477234 110.48101044]
[230.43736267 112.64834595]
[245.27995300 114.81568146]
[260.12255859 116.98301697]
[275.06893921 118.25022125]
[290.06454468 118.61267853]
[305.06018066 118.97513580]
[314.97894287 110.62694550]
[327.52325439 111.29632568]
[335.93975830 120.07284546]
[350.92224121 120.79754639]
[365.90472412 121.52224731]
[374.72994995 118.79054260]
[381.23919678 122.44981384]
[396.19979858 123.53633118]
[411.16040039 124.62285614]
[423.05340576 114.56334686]
[438.21011353 115.87834930]
[447.72702026 127.27852631]
[462.68762207 128.36505127]
[477.64822388 129.45156860]
[487.95874023 121.59234619]
[500.45605469 122.86699677]
[508.43872070 132.03990173]
[523.36871338 133.48760986]
[538.29864502 134.93531799]
[548.61193848 123.49229431]
[563.51153564 120.35290527]
[577.24029541 126.51600647]
[584.61920166 139.42686462]
[599.54919434 140.87457275]
[614.47912598 142.32228088]
[629.40911865 143.76998901]
[644.33911133 145.21769714]
[659.03405762 137.93827820]
[672.53393555 147.24879456]
[670.95117188 163.57138062]
[655.91400146 170.11476135]
[642.89141846 160.14767456]
[627.96142578 158.69996643]
[613.03143311 157.25225830]
[598.10144043 155.80455017]
[583.17150879 154.35684204]
[573.44958496 165.60948181]
[558.79241943 169.02009583]
[544.77355957 163.07658386]
[536.85095215 149.86529541]
[521.92095947 148.41758728]
[506.99099731 146.96987915]
[491.49252319 155.10896301]
[476.56170654 144.41217041]
[461.60110474 143.32565308]
[446.64050293 142.23912048]
[435.57626343 152.14457703]
[420.38861084 151.25581360]
[410.07385254 139.58345032]
[395.11328125 138.49693298]
[380.15267944 137.41041565]
[365.18002319 136.50473022]
[350.19754028 135.78002930]
[335.21505737 135.05532837]
[320.12789917 143.93370056]
[304.69772339 133.97074890]
[289.70208740 133.60829163]
[274.70648193 133.24584961]
[282.51300049 146.05435181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[13 59]
[14 58]
[15 57]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[45 56]
[46 55]
[47 54]
[48 53]
[68 128]
[69 127]
[70 126]
[73 124]
[74 123]
[75 122]
[77 121]
[78 120]
[79 119]
[82 116]
[83 115]
[84 114]
[87 112]
[88 111]
[89 110]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
