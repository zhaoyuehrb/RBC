%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUCCUUUCGUUGCCUGAUCGCCGCCAUCAUGGGUCGCAUGCAUGCUCCCGGGAAGGGCCUGUCCCAGUCGGCUUUACCCUAUCGACGCAGCGUCCCCACUUGGUUGAAGUUGACAUCUGACGACGUGA\
) } def
/len { sequence length } bind def

/coor [
[172.13294983 109.06719208]
[168.62049866 103.45616913]
[153.64665222 104.34143829]
[138.67279053 105.22671509]
[123.69894409 106.11198425]
[108.72509003 106.99726105]
[93.76273346 108.05931091]
[78.81396484 109.29800415]
[63.86520004 110.53669739]
[59.44200134 122.78170013]
[50.72270966 132.38682556]
[39.04628754 137.93025208]
[26.18568993 138.60983276]
[14.07867908 134.35896301]
[4.53586531 125.85122681]
[-1.03006935 114.39395905]
[-16.02065468 114.92532349]
[-29.53807831 123.14662170]
[-42.53144836 115.86502838]
[-57.52203369 116.39639282]
[-66.23826599 129.09811401]
[-80.59455109 134.17260742]
[-95.01550293 129.87144470]
[-104.03061676 118.04495239]
[-119.02120209 118.57631683]
[-132.53862000 126.79761505]
[-145.53199768 119.51602173]
[-160.52258301 120.04738617]
[-175.51316833 120.57874298]
[-186.10084534 132.31230164]
[-201.88841248 133.03912354]
[-213.50938416 122.32797241]
[-214.06924438 106.53359985]
[-203.23582458 95.02652740]
[-187.43641663 94.63369751]
[-176.04452515 105.58815765]
[-161.05393982 105.05680084]
[-146.06335449 104.52543640]
[-133.61816406 96.34214020]
[-119.55255890 103.58572388]
[-104.56197357 103.05436707]
[-96.40685272 90.61925507]
[-82.32662964 85.30783081]
[-67.64707947 89.35311127]
[-58.05339813 101.40580750]
[-43.06281281 100.87444305]
[-30.61761475 92.69114685]
[-16.55201530 99.93473816]
[-1.56143057 99.40337372]
[5.88967371 83.96945190]
[20.17258072 74.33821869]
[37.45057297 73.20419312]
[53.02801895 80.96477509]
[62.62650681 95.58792877]
[77.57527924 94.34923553]
[92.52404022 93.11054993]
[99.73606873 89.32793427]
[107.83981323 92.02340698]
[122.81366730 91.13813019]
[137.78752136 90.25286102]
[152.76136780 89.36758423]
[167.73522949 88.48231506]
[186.40168762 72.68746185]
[207.88032532 82.86624146]
[222.50425720 79.52842712]
[237.12817383 76.19061279]
[251.75209045 72.85279846]
[258.15222168 57.24536133]
[272.43399048 48.58356857]
[288.90267944 50.09102249]
[301.12725830 60.98143768]
[315.66824341 57.29915619]
[330.20925903 53.61687469]
[344.75027466 49.93459320]
[359.29125977 46.25231171]
[373.83227539 42.57002640]
[388.37326050 38.88774490]
[402.91427612 35.20546341]
[417.45529175 31.52318001]
[431.99627686 27.84089851]
[443.47479248 16.95261574]
[457.71200562 21.32879639]
[472.25299072 17.64651299]
[476.58679199 -0.18617940]
[489.24945068 -13.35298538]
[506.73773193 -18.33328056]
[524.27435303 -13.85460758]
[537.11309814 -1.21647310]
[551.35687256 -5.91907072]
[565.60070801 -10.62166882]
[579.84448242 -15.32426643]
[592.98950195 -26.03145599]
[606.91717529 -16.36416435]
[601.48327637 -0.30462664]
[584.54705811 -1.08047533]
[570.30328369 3.62212229]
[556.05950928 8.32472038]
[541.81567383 13.02731800]
[541.03118896 24.93416023]
[536.22595215 35.89457321]
[527.95233154 44.58958435]
[517.18164062 49.96404266]
[505.18997192 51.35463333]
[493.40731812 48.57166290]
[483.24679565 41.92453003]
[475.93527222 32.18751907]
[461.39428711 35.86980057]
[450.95584106 46.49470139]
[435.67855835 42.38190079]
[421.13757324 46.06418610]
[406.59655762 49.74646759]
[392.05554199 53.42874908]
[377.51455688 57.11103058]
[362.97354126 60.79331589]
[348.43255615 64.47559357]
[333.89154053 68.15787506]
[319.35052490 71.84016418]
[304.80953979 75.52244568]
[301.00006104 88.37304688]
[291.24334717 97.72067261]
[278.03082275 101.02928925]
[264.81112671 97.32439423]
[255.08990479 87.47672272]
[240.46598816 90.81453705]
[225.84205627 94.15235138]
[211.21813965 97.49016571]
[209.64184570 103.58373260]
[206.36163330 109.00318909]
[201.63362122 113.28028107]
[195.84010315 116.03768158]
[189.45866394 117.02222443]
[183.02285767 116.12796021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 56]
[8 55]
[9 54]
[16 49]
[17 48]
[19 46]
[20 45]
[24 41]
[25 40]
[27 38]
[28 37]
[29 36]
[64 126]
[65 125]
[66 124]
[67 123]
[71 118]
[72 117]
[73 116]
[74 115]
[75 114]
[76 113]
[77 112]
[78 111]
[79 110]
[80 109]
[82 107]
[83 106]
[88 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
