%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:37:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCUCGCGCACACUACGCCAGAACAAGAUGGCCGACGCGGCGGCCACAGCUGGGGCCGGUGGCUCCGGAACGAGAUCGGGAAGUAAACAGUCCACUAACCCUGCCGAUAACUAUCAUCUGGCCCGGA\
) } def
/len { sequence length } bind def

/coor [
[49.80459976 324.26791382]
[34.86881638 324.72369385]
[30.23356247 338.98953247]
[25.59830666 353.25537109]
[29.53528595 369.17492676]
[17.53105736 380.34768677]
[1.93454063 375.28005981]
[-1.20990312 359.18521118]
[11.33245945 348.62011719]
[15.96771431 334.35427856]
[20.60297012 320.08840942]
[8.78756714 310.94067383]
[0.79984719 298.27868652]
[-2.37979913 283.62045288]
[-0.34874636 268.73095703]
[6.66699409 255.40995789]
[17.83774567 245.27415466]
[31.82823753 239.56117249]
[46.95720673 238.97842407]
[51.59246445 224.71257019]
[56.22771835 210.44671631]
[60.86297226 196.18087769]
[65.49822998 181.91502380]
[70.13348389 167.64918518]
[57.36001205 160.41731262]
[46.26660156 150.80494690]
[37.29034424 139.19079590]
[30.78491020 126.03250885]
[27.00662231 111.84850311]
[26.10435104 97.19765472]
[28.11364365 82.65722656]
[13.96396637 77.67860413]
[-0.18571059 72.69998932]
[-14.33538818 67.72136688]
[-28.48506546 62.74275208]
[-42.63474274 57.76413345]
[-56.77558136 64.82190704]
[-71.73857880 59.73425674]
[-78.64645386 45.51958847]
[-73.40088654 30.61121368]
[-59.11397934 23.85401154]
[-44.26190186 29.25690651]
[-37.65612411 43.61445618]
[-23.50644684 48.59307480]
[-9.35676956 53.57169342]
[4.79290724 58.55031204]
[18.94258499 63.52892685]
[33.09226227 68.50754547]
[41.08179474 55.31146240]
[51.63527298 44.06008911]
[64.29344177 35.24305725]
[78.50544739 29.24404907]
[75.62355042 14.52349758]
[72.74164581 -0.19705383]
[69.85974884 -14.91760540]
[66.97784424 -29.63815689]
[64.09594727 -44.35871124]
[61.21404648 -59.07926178]
[58.33214569 -73.79981232]
[49.35532761 -88.18219757]
[60.69061661 -100.78964233]
[75.94327545 -93.38742828]
[73.05269623 -76.68171692]
[75.93460083 -61.96116257]
[78.81649780 -47.24061203]
[81.69840240 -32.52005768]
[84.58029938 -17.79950714]
[87.46220398 -3.07895470]
[90.34410095 11.64159775]
[93.22600555 26.36214828]
[107.65029907 26.44802475]
[121.78350830 29.33247566]
[135.08787537 34.90575027]
[147.05718994 42.95579529]
[157.23602295 53.17631149]
[165.23709106 65.17842102]
[170.75595093 78.50544739]
[185.47650146 75.62355042]
[200.19705200 72.74164581]
[214.91760254 69.85974884]
[229.63815308 66.97784424]
[230.35806274 51.91978836]
[234.66136169 37.47177505]
[242.29785156 24.47379494]
[252.82356262 13.68153667]
[265.62655640 5.72244644]
[279.96243286 1.05925512]
[294.99780273 -0.03692535]
[309.85845947 2.49763560]
[323.68048096 8.51558208]
[335.66021729 17.66703796]
[345.10122681 29.41995049]
[351.45458984 43.09101868]
[354.35095215 57.88542938]
[353.62191772 72.94304657]
[349.30984497 87.38845062]
[341.66546631 100.38179779]
[331.13323975 111.16767120]
[318.32543945 119.11900330]
[303.98669434 123.77349854]
[288.95068359 124.86056519]
[274.09155273 122.31699371]
[260.27319336 116.29067230]
[248.29901123 107.13195038]
[238.86514282 95.37332153]
[232.52006531 81.69840240]
[217.79949951 84.58029938]
[203.07894897 87.46220398]
[188.35839844 90.34410095]
[173.63784790 93.22600555]
[173.44654846 108.60371399]
[170.07867432 123.60930634]
[163.67987061 137.59379578]
[154.52691650 149.95234680]
[143.01564026 160.15043640]
[129.64393616 167.74700928]
[114.99011993 172.41351318]
[99.68797302 173.94810486]
[84.39933014 172.28443909]
[79.76407623 186.55027771]
[75.12882233 200.81613159]
[70.49356842 215.08197021]
[65.85831451 229.34782410]
[61.22305679 243.61367798]
[73.12011719 252.97772217]
[81.08065796 265.82302856]
[84.16030884 280.58905029]
[82.00626373 295.48974609]
[74.89760590 308.72940063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[24 119]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
