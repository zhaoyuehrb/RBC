%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAUCAUCUUACAUCAGCACAAGAAGAAGAGUGAGCAUAGCACACCGAUGUCAGACCCUGCCACUAGCCUCCUUAACAGAAGUUCCCAGCCAUGAAGCCUCUCCUUGUUGUGUUUGUCUUUCUUUUCCUUUGGGAUCCAGUGCUGGCAGGUAUAAAUUCAUUAUCAUCAGAAAUGCACAAGAAAUGCUAUA\
) } def
/len { sequence length } bind def

/coor [
[117.58155823 290.79675293]
[102.95046997 294.10302734]
[87.97672272 293.21603394]
[73.83828735 288.20556641]
[61.64744568 279.46578979]
[52.36324310 267.68429565]
[46.71607208 253.78791809]
[45.15019226 238.86988831]
[47.78879166 224.10377502]
[54.42429352 210.65126038]
[64.53467560 199.57064819]
[77.32456970 191.73364258]
[91.78778839 187.75677490]
[106.78649902 187.95292664]
[121.14077759 192.30664062]
[133.72265625 200.47656250]
[126.47068024 187.34609985]
[119.21871185 174.21563721]
[111.96675110 161.08517456]
[104.71478271 147.95471191]
[97.46281433 134.82426453]
[80.43086243 120.35178375]
[78.58386993 102.40723419]
[87.57254791 91.83776093]
[77.90996552 80.36455536]
[68.24738312 68.89134216]
[58.58480453 57.41813278]
[48.92222595 45.94492340]
[39.25964355 34.47171402]
[29.50400543 23.07752800]
[19.65595627 11.76311588]
[6.85659075 10.09129333]
[-1.11274409 0.45198208]
[-0.39511821 -11.63278675]
[-10.05769920 -23.10599709]
[-19.72027969 -34.57920456]
[-29.38286018 -46.05241394]
[-39.04544067 -57.52562332]
[-48.70802307 -68.99883270]
[-58.37060165 -80.47204590]
[-68.03318024 -91.94525146]
[-77.69576263 -103.41846466]
[-87.35834503 -114.89167023]
[-102.43415070 -112.30957031]
[-116.68416595 -117.58535767]
[-126.31613159 -129.20825195]
[-128.82037354 -143.99285889]
[-123.62304688 -157.95185852]
[-133.28562927 -169.42506409]
[-152.19815063 -170.31024170]
[-164.26322937 -184.48497009]
[-162.18766785 -202.66206360]
[-172.21858215 -213.81468201]
[-182.24948120 -224.96730042]
[-195.82254028 -222.51785278]
[-208.72978210 -227.06262207]
[-217.63174438 -237.31225586]
[-220.28152466 -250.51641846]
[-216.09118652 -263.20132446]
[-225.93922424 -274.51574707]
[-235.78727722 -285.83013916]
[-246.30451965 -283.88677979]
[-256.59915161 -286.47259521]
[-264.82345581 -293.05419922]
[-269.53012085 -302.38732910]
[-269.92687988 -312.75164795]
[-266.00903320 -322.26776123]
[-275.29306030 -334.04940796]
[-284.57705688 -345.83105469]
[-299.19564819 -351.88143921]
[-300.99578857 -366.66683960]
[-310.27981567 -378.44848633]
[-325.91452026 -378.74835205]
[-337.66461182 -389.06674194]
[-339.98205566 -404.53164673]
[-331.77261353 -417.84100342]
[-316.91256714 -422.71057129]
[-302.41833496 -416.84103394]
[-295.13366699 -403.00384521]
[-298.49816895 -387.73251343]
[-289.21414185 -375.95086670]
[-275.25961304 -370.74319458]
[-272.79541016 -355.11508179]
[-263.51141357 -343.33343506]
[-254.22738647 -331.55178833]
[-234.77760315 -330.70150757]
[-222.00877380 -315.60412598]
[-224.47286987 -295.67819214]
[-214.62481689 -284.36380005]
[-204.77676392 -273.04937744]
[-188.48620605 -275.01589966]
[-174.08656311 -266.80746460]
[-167.34503174 -251.48381042]
[-171.09686279 -234.99821472]
[-161.06596375 -223.84559631]
[-151.03504944 -212.69297791]
[-139.76419067 -214.57394409]
[-128.87457275 -210.73434448]
[-121.11643982 -202.02101135]
[-118.50822449 -190.52658081]
[-121.81241608 -179.08764648]
[-112.14983368 -167.61444092]
[-97.51025391 -170.36181641]
[-83.36698914 -165.37944031]
[-73.55170441 -153.91093445]
[-70.77649689 -138.97122192]
[-75.88513184 -124.55425262]
[-66.22255707 -113.08103943]
[-56.55997467 -101.60783386]
[-46.89739227 -90.13462067]
[-37.23481369 -78.66141510]
[-27.57223129 -67.18820190]
[-17.90965080 -55.71499634]
[-8.24707031 -44.24178696]
[1.41551042 -32.76857758]
[11.07809162 -21.29536819]
[27.87330818 -16.22967720]
[30.97036743 1.91506624]
[40.81841660 13.22947788]
[47.59159470 16.21528625]
[50.73285294 24.80913544]
[60.39543533 36.28234482]
[70.05801392 47.75555420]
[79.72059631 59.22876358]
[89.38317871 70.70197296]
[99.04576111 82.17517853]
[113.68504333 85.44494629]
[127.31101990 79.17337036]
[140.93699646 72.90178680]
[149.96302795 59.21007538]
[166.31515503 60.45095825]
[173.17172241 75.34792328]
[163.47927856 88.57624817]
[147.20857239 86.52776337]
[133.58259583 92.79934692]
[119.95661926 99.07092285]
[117.61578369 106.19626617]
[131.86639404 110.87817383]
[127.18424225 125.12870026]
[112.93411255 120.44695282]
[110.59327698 127.57228851]
[117.84523773 140.70274353]
[125.09720612 153.83320618]
[132.34918213 166.96366882]
[139.60113525 180.09413147]
[146.85310364 193.22459412]
[156.13711548 205.00622559]
[167.20773315 215.12757874]
[178.27833557 225.24891663]
[190.53239441 217.56813049]
[204.34713745 213.33035278]
[218.77606201 212.81935120]
[232.83232117 216.06376648]
[245.55616760 222.83561707]
[256.08053589 232.66629028]
[263.69006348 244.87899780]
[267.86978149 258.63531494]
[268.33990479 272.99273682]
[265.07455444 286.96936035]
[258.30313110 299.61087036]
[269.20755005 309.91107178]
[280.11193848 320.21127319]
[291.01632690 330.51147461]
[299.41738892 334.13699341]
[302.01266479 341.06918335]
[312.74795532 351.54553223]
[328.76394653 355.06970215]
[333.46130371 370.78170776]
[322.00778198 382.51837158]
[306.18579102 378.20599365]
[302.27163696 362.28082275]
[291.53634644 351.80447388]
[280.71612549 341.41589355]
[269.81173706 331.11569214]
[258.90734863 320.81549072]
[248.00294495 310.51528931]
[234.61001587 318.49392700]
[219.49920654 322.38558960]
[203.88937378 321.86795044]
[189.04200745 316.97467041]
[176.15927124 308.09332275]
[166.28669739 295.93481445]
[160.22830200 281.47634888]
[158.48110962 265.88290405]
[161.19439697 250.41355896]
[168.15699768 236.31953430]
[157.08638000 226.19818115]
[146.01577759 216.07684326]
[151.01667786 230.21865845]
[151.89355469 245.19300842]
[148.57740784 259.82183838]
[141.32914734 272.95434570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 146]
[17 145]
[18 144]
[19 143]
[20 142]
[21 141]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 119]
[31 118]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[42 108]
[43 107]
[48 102]
[49 101]
[52 96]
[53 95]
[54 94]
[59 90]
[60 89]
[61 88]
[67 85]
[68 84]
[69 83]
[71 81]
[72 80]
[127 136]
[128 135]
[129 134]
[147 188]
[148 187]
[149 186]
[160 176]
[161 175]
[162 174]
[163 173]
[165 172]
[166 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
