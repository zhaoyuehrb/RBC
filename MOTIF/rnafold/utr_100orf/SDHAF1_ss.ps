%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCUUUGCCCUUUGGCCUUUGCUGGCUGUGUGGCGGCUCCGCGGUUCGCAGGUCGUUCGCUGAGCGUCUCUGCUUAGCCGCGGUCAUGAGCCGGCACAGCCGGCUGCAGAGGCAGGUUCUGAGCCUGUACCGCGAUCUGCUGCGCGCCGGGCGUGGGAAGCCGGGCGCCGAGGCGCGAGUGCGGG\
) } def
/len { sequence length } bind def

/coor [
[171.32603455 183.16212463]
[164.67639160 169.49906921]
[165.76556396 154.24256897]
[153.39894104 145.75335693]
[141.03231812 137.26416016]
[128.66569519 128.77494812]
[116.29906464 120.28574371]
[101.08780670 125.99976349]
[85.45240021 121.57633972]
[75.48918152 108.74018860]
[75.08286285 92.49619293]
[62.57611084 84.21481323]
[50.06935883 75.93344116]
[44.81937027 75.61521149]
[40.64284897 73.51437378]
[38.04115295 70.34339142]
[37.15777969 66.91050720]
[25.08172798 58.01280975]
[13.00567722 49.11511230]
[0.92962635 40.21741486]
[-11.14642429 31.31971931]
[-23.22247505 22.42202377]
[-35.29852676 13.52432728]
[-47.37457657 4.62663126]
[-59.66983795 -3.96560431]
[-72.17658997 -12.24698162]
[-84.68334198 -20.52835846]
[-97.19008636 -28.80973625]
[-109.69683838 -37.09111404]
[-122.20359039 -45.37248993]
[-134.71034241 -53.65386581]
[-147.21708679 -61.93524551]
[-159.72384644 -70.21662140]
[-166.32044983 -71.00560760]
[-170.83853149 -74.49406433]
[-172.50375366 -78.98953247]
[-184.72679138 -87.68419647]
[-196.94984436 -96.37886047]
[-209.17288208 -105.07353210]
[-221.39591980 -113.76819611]
[-233.97143555 -121.94478607]
[-246.87745667 -129.58903503]
[-259.78347778 -137.23329163]
[-272.68951416 -144.87753296]
[-285.59552002 -152.52178955]
[-298.50155640 -160.16603088]
[-311.40756226 -167.81028748]
[-324.31359863 -175.45452881]
[-342.71713257 -175.22389221]
[-350.73474121 -190.82478333]
[-363.76669312 -198.25230408]
[-376.79867554 -205.67982483]
[-389.83062744 -213.10734558]
[-402.86257935 -220.53488159]
[-421.25967407 -219.99674988]
[-429.53686523 -235.46148682]
[-442.69113159 -242.67021179]
[-455.84536743 -249.87893677]
[-468.99963379 -257.08764648]
[-482.15386963 -264.29638672]
[-498.94976807 -266.60604858]
[-501.37991333 -283.38491821]
[-485.92950439 -290.36495972]
[-474.94512939 -277.45062256]
[-461.79089355 -270.24191284]
[-448.63665771 -263.03317261]
[-435.48239136 -255.82444763]
[-422.32815552 -248.61572266]
[-410.61950684 -251.70375061]
[-399.59585571 -245.78919983]
[-395.43505859 -233.56683350]
[-382.40310669 -226.13931274]
[-369.37112427 -218.71177673]
[-356.33917236 -211.28425598]
[-343.30722046 -203.85673523]
[-331.54861450 -206.74867249]
[-320.62536621 -200.65074158]
[-316.66934204 -188.36054993]
[-303.76333618 -180.71630859]
[-290.85729980 -173.07205200]
[-277.95126343 -165.42781067]
[-265.04525757 -157.78355408]
[-252.13922119 -150.13931274]
[-239.23320007 -142.49505615]
[-226.32717896 -134.85081482]
[-227.34771729 -149.81605530]
[-216.40023804 -160.07046509]
[-201.53358459 -158.07475281]
[-193.67807007 -145.29623413]
[-198.60922241 -131.12994385]
[-212.70126343 -125.99124146]
[-200.47821045 -117.29656982]
[-188.25517273 -108.60190582]
[-176.03213501 -99.90724182]
[-163.80908203 -91.21257782]
[-151.44245911 -82.72337341]
[-138.93571472 -74.44199371]
[-126.42896271 -66.16061401]
[-113.92221069 -57.87923813]
[-101.41545868 -49.59786224]
[-88.90871429 -41.31648636]
[-76.40196228 -33.03510666]
[-63.89521408 -24.75373077]
[-51.38846207 -16.47235489]
[-47.86112213 -16.82291985]
[-43.98901749 -15.46985245]
[-40.58047485 -12.27005577]
[-38.47687912 -7.44941950]
[-26.40082932 1.44827676]
[-14.32477951 10.34597301]
[-2.24872828 19.24366951]
[9.82732296 28.14136505]
[21.90337372 37.03906250]
[33.97942352 45.93675613]
[46.05547333 54.83445358]
[58.35073853 63.42668915]
[70.85749054 71.70806885]
[83.36423492 79.98944092]
[95.37066650 74.39257812]
[108.57672119 75.43151093]
[119.56024170 82.83702087]
[125.47499847 94.69007111]
[124.78827667 107.91912079]
[137.15489197 116.40832520]
[149.52151489 124.89752960]
[161.88813782 133.38673401]
[174.25476074 141.87594604]
[188.10038757 135.37625122]
[203.24041748 136.67095947]
[215.61735535 145.31259155]
[221.96452332 158.89822388]
[220.66802979 173.73684692]
[233.03465271 182.22605896]
[245.40127563 190.71525574]
[257.76791382 199.20446777]
[270.13452148 207.69367981]
[285.89086914 209.12489319]
[292.00485229 222.70680237]
[304.37145996 231.19601440]
[316.80859375 239.58158875]
[329.31533813 247.86297607]
[341.82208252 256.14434814]
[354.32885742 264.42572021]
[371.39453125 260.62457275]
[385.65417480 270.14614868]
[388.56655884 286.70074463]
[401.20993042 294.77200317]
[413.85333252 302.84323120]
[426.49670410 310.91445923]
[439.14007568 318.98568726]
[454.93545532 319.88961792]
[461.49987793 333.25964355]
[474.14324951 341.33087158]
[486.78662109 349.40213013]
[501.64956665 344.54135132]
[516.14031982 350.41946411]
[523.41680908 364.26095581]
[520.04327393 379.53030396]
[507.61260986 389.01779175]
[491.99420166 388.24374390]
[480.56259155 377.57360840]
[478.71539307 362.04550171]
[466.07202148 353.97427368]
[453.42861938 345.90304565]
[438.53759766 345.57641602]
[431.06884766 331.62908936]
[418.42547607 323.55786133]
[405.78207397 315.48660278]
[393.13870239 307.41537476]
[380.49533081 299.34414673]
[368.41348267 303.85592651]
[355.75158691 300.52960205]
[347.19638062 290.36437988]
[346.04745483 276.93246460]
[333.54071045 268.65109253]
[321.03396606 260.36972046]
[308.52722168 252.08834839]
[301.19979858 251.01477051]
[295.88226318 243.56263733]
[283.51565552 235.07342529]
[268.64385986 234.24942017]
[261.64532471 220.06030273]
[249.27868652 211.57109070]
[236.91206360 203.08187866]
[224.54544067 194.59268188]
[212.17881775 186.10346985]
[198.79768372 192.64645386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[5 125]
[6 124]
[7 123]
[11 118]
[12 117]
[13 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[33 96]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[132 186]
[133 185]
[134 184]
[135 183]
[136 182]
[138 180]
[139 179]
[140 177]
[141 176]
[142 175]
[143 174]
[146 170]
[147 169]
[148 168]
[149 167]
[150 166]
[152 164]
[153 163]
[154 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
