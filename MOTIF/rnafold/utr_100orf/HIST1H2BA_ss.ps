%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGAGGUGUCAUCUAAAGGUGCUACCAUUUCCAAGAAGGGCUUUAAGAAAGCUGUCGUUAAGACCCAGAAAAAGGAAGGCAAAAAGCGCAAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[97.46558380 191.82806396]
[108.39122009 181.34429932]
[102.06369019 167.74421692]
[95.73616791 154.14413452]
[89.40863800 140.54403687]
[75.80854797 134.21650696]
[61.32977676 138.13633728]
[46.85100174 142.05616760]
[32.57080460 146.64703369]
[18.52026749 151.89892578]
[4.46973038 157.15081787]
[-9.58080673 162.40272522]
[-19.79842758 174.48207092]
[-34.42912674 171.69067383]
[-48.47966385 176.94258118]
[-62.53020096 182.19447327]
[-76.58074188 187.44636536]
[-86.58980560 200.43676758]
[-102.80629730 197.99597168]
[-108.54807281 182.63484192]
[-97.90848541 170.15560913]
[-81.83263397 173.39582825]
[-67.78209686 168.14393616]
[-53.73156357 162.89204407]
[-39.68102646 157.64013672]
[-30.46839142 145.93644714]
[-14.83270359 148.35218811]
[-0.78216654 143.10028076]
[13.26836967 137.84838867]
[27.31890678 132.59649658]
[29.12151337 129.37071228]
[32.66991043 126.92868042]
[37.54233170 126.12559509]
[42.93117142 127.57739258]
[57.40994644 123.65756226]
[71.88872528 119.73773956]
[65.99829102 110.98804474]
[62.88549805 100.48188782]
[63.06832886 89.11564636]
[66.77212524 77.93511963]
[73.88800812 68.03937531]
[83.96286774 60.47369766]
[96.22360229 56.12184906]
[95.75710297 41.12910843]
[95.29061127 26.13636208]
[94.82411194 11.14361763]
[94.35761261 -3.84912610]
[93.89111328 -18.84187126]
[87.35510254 -34.48530197]
[100.57783508 -45.09641266]
[114.43467712 -35.32788086]
[108.88385773 -19.30836868]
[109.35035706 -4.31562424]
[109.81685638 10.67712021]
[110.28335571 25.66986465]
[110.74984741 40.66260910]
[111.21634674 55.65535355]
[125.18350983 61.12512589]
[135.70730591 50.43636703]
[146.23110962 39.74760818]
[147.54469299 23.75842094]
[160.94432068 14.93631172]
[176.15093994 20.04884720]
[181.49934387 35.17412567]
[172.88670349 48.70933151]
[156.91987610 50.27140808]
[146.39607239 60.96017075]
[135.87226868 71.64892578]
[142.41053772 85.14897156]
[157.32173157 83.51918793]
[165.86131287 70.41920471]
[180.83847046 65.92266846]
[195.18144226 72.15269470]
[202.11790466 86.16766357]
[198.37269592 101.35013580]
[185.71417236 110.53140259]
[170.11930847 109.37636566]
[158.95150757 98.43038177]
[144.04031372 100.06016541]
[135.90599060 119.39576721]
[120.64498901 131.40026855]
[103.00872803 134.21650696]
[109.33625793 147.81660461]
[115.66378021 161.41668701]
[121.99130249 175.01678467]
[137.04798889 173.41210938]
[151.80934143 176.78570557]
[164.67416382 184.77165222]
[174.24696350 196.50366211]
[179.48937988 210.70915222]
[179.83271790 225.84721375]
[175.23977661 240.27577209]
[166.20874023 252.42974854]
[153.71922302 260.99075317]
[139.12600708 265.03015137]
[124.01204681 264.10980225]
[110.01679993 258.32949829]
[98.65836334 248.31626892]
[91.16881561 235.15628052]
[88.36055756 220.27702332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[6 36]
[7 35]
[8 34]
[9 30]
[10 29]
[11 28]
[12 27]
[14 25]
[15 24]
[16 23]
[17 22]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[58 68]
[59 67]
[60 66]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
