%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGCCGGAGCGCGGGCGCGGCGCACUCGGAGCGGGAUGGAGCGGGCGCGCGGGCCGCGGGCCGAGGCCGACGCGCCUGAGGAGGAGGAGGAGGCGGGGGCGGCCAUGGCUGCUGUGGUGGUGGCGGCUGCGGGUG\
) } def
/len { sequence length } bind def

/coor [
[29.59139442 594.18750000]
[15.50577641 586.50799561]
[12.86964417 570.68304443]
[23.70521355 558.85211182]
[24.39291191 543.86791992]
[25.08061028 528.88366699]
[23.20000076 526.69299316]
[22.11373138 523.59313965]
[22.18508720 519.89794922]
[23.65125275 516.05126953]
[26.58054352 512.57708740]
[28.63785934 497.71887207]
[30.69517326 482.86062622]
[32.75248718 468.00238037]
[34.80980301 453.14413452]
[28.89122200 439.47592163]
[38.44815445 426.86737061]
[40.50547028 412.00912476]
[42.56278610 397.15087891]
[36.64420319 383.48269653]
[46.20113754 370.87414551]
[48.25845337 356.01589966]
[46.04043579 348.89633179]
[50.53706741 340.84207153]
[52.93453217 326.03488159]
[55.33199310 311.22772217]
[53.27780533 304.05917358]
[57.95793533 296.11013794]
[60.69428635 281.36184692]
[55.40856934 267.43664551]
[65.53351593 255.27952576]
[68.26986694 240.53121948]
[71.00621796 225.78291321]
[73.74256897 211.03462219]
[76.47891998 196.28631592]
[69.71743774 180.13288879]
[81.68508148 166.19165039]
[84.08254242 151.38449097]
[86.48000336 136.57731628]
[88.87747192 121.77015686]
[73.97492218 107.57495117]
[74.34998322 84.90274811]
[92.81119537 68.38562012]
[87.75279236 54.26427460]
[82.69438171 40.14292526]
[77.63597107 26.02157402]
[72.57756805 11.90022469]
[67.51915741 -2.22112465]
[62.46075058 -16.34247398]
[57.40234375 -30.46382332]
[43.39156342 -37.27086639]
[38.46278381 -51.66398239]
[45.03860474 -64.97917175]
[39.98019409 -79.10051727]
[34.92178726 -93.22187042]
[29.86338043 -107.34321594]
[17.92551231 -117.72579193]
[20.91760445 -132.31677246]
[15.85919666 -146.43812561]
[4.82564545 -159.31045532]
[14.14053726 -173.47622681]
[30.33132553 -168.44685364]
[29.98054695 -151.49652100]
[35.03895569 -137.37518311]
[46.61500931 -128.00265503]
[43.98472977 -112.40162659]
[49.04313660 -98.28027344]
[54.10154343 -84.15892792]
[59.15995407 -70.03757477]
[72.69458008 -63.92615128]
[78.02568817 -49.67715454]
[71.52368927 -35.52223206]
[76.58209991 -21.40088272]
[81.64051056 -7.27953243]
[86.69891357 6.84181690]
[91.75732422 20.96316719]
[96.81573486 35.08451462]
[101.87413788 49.20586395]
[106.93254852 63.32721329]
[109.26351166 48.50943375]
[111.59447479 33.69165421]
[108.96636200 18.92368317]
[112.99437714 4.47463131]
[122.88356018 -6.80384588]
[136.68218994 -12.68583775]
[151.66697693 -12.01047802]
[164.88053894 -4.91105604]
[173.71505737 7.21129227]
[176.42695618 21.96410942]
[172.48100281 36.43579102]
[162.65600586 47.77021790]
[148.89122009 53.73038864]
[137.82206726 63.85333252]
[126.75292969 73.97627258]
[141.32022095 70.39939117]
[152.77641296 58.66535187]
[168.59742737 62.98131943]
[172.50794983 78.90739441]
[160.48518372 90.06019592]
[144.89710999 84.96667480]
[130.32981873 88.54356384]
[128.96315002 106.85467529]
[118.37348175 119.92736053]
[103.68463898 124.16761780]
[101.28717041 138.97479248]
[98.88970947 153.78195190]
[96.49224854 168.58911133]
[103.41152954 179.54219055]
[101.05210114 191.87200928]
[91.22721863 199.02265930]
[88.49086761 213.77096558]
[85.75451660 228.51927185]
[83.01816559 243.26756287]
[80.28181458 258.01586914]
[85.37181091 272.99594116]
[75.44258881 284.09817505]
[72.70623779 298.84649658]
[70.13916016 313.62518311]
[67.74169922 328.43234253]
[65.34423065 343.23953247]
[63.11669922 358.07321167]
[61.05938339 372.93145752]
[66.83081055 387.66241455]
[57.42103195 399.20819092]
[55.36371613 414.06643677]
[53.30640030 428.92468262]
[59.07782745 443.65563965]
[49.66804886 455.20144653]
[47.61073303 470.05969238]
[45.55341721 484.91793823]
[43.49610519 499.77618408]
[41.43878937 514.63439941]
[40.06483841 529.57135010]
[39.37714005 544.55560303]
[38.68944168 559.53979492]
[48.39578629 572.31347656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 135]
[5 134]
[6 133]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[17 126]
[18 125]
[19 124]
[21 122]
[22 121]
[24 120]
[25 119]
[26 118]
[28 117]
[29 116]
[31 114]
[32 113]
[33 112]
[34 111]
[35 110]
[37 107]
[38 106]
[39 105]
[40 104]
[43 79]
[44 78]
[45 77]
[46 76]
[47 75]
[48 74]
[49 73]
[50 72]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
