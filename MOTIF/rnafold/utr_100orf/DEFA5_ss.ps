%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAUCCACUCCUGCUCUCCCUCCUGCAGGUGACCCCAGCCAUGAGGACCAUCGCCAUCCUUGCUGCCAUUCUCCUGGUGGCCCUGCAGGCCCAGGCUGAGUCACUCCAGGAAAGAGCUGAUGAGGCUACAACCCAGAAGC\
) } def
/len { sequence length } bind def

/coor [
[123.86441803 636.38128662]
[115.32826233 623.96832275]
[109.76875305 609.96691895]
[107.46475220 595.07934570]
[108.53182983 580.05242920]
[112.91646576 565.63983154]
[120.39872742 552.56451416]
[130.60330200 541.48236084]
[143.01834106 532.94921875]
[157.02108765 527.39312744]
[154.72341919 512.57012939]
[152.42573547 497.74716187]
[137.04660034 487.92172241]
[133.59704590 469.67788696]
[144.70001221 454.40231323]
[141.75346375 439.69454956]
[138.80691528 424.98681641]
[135.86036682 410.27905273]
[132.91380310 395.57131958]
[123.85807800 390.63720703]
[118.94734955 381.31875610]
[120.04092407 370.62069702]
[127.01560211 362.14779663]
[124.71791840 347.32482910]
[122.42023468 332.50183105]
[120.12255096 317.67886353]
[117.82487488 302.85589600]
[108.22048187 295.42245483]
[106.22265625 283.03570557]
[113.45080566 272.29220581]
[111.47929382 257.42233276]
[109.50778961 242.55245972]
[107.53628540 227.68257141]
[105.56478119 212.81269836]
[103.59327698 197.94282532]
[94.15449524 190.30020142]
[92.42926025 177.87255859]
[99.89167023 167.29043579]
[98.24729156 152.38084412]
[96.60291290 137.47123718]
[94.95853424 122.56165314]
[93.31415558 107.65205383]
[89.34334564 100.56000519]
[91.80113220 92.39737701]
[90.48467255 77.45525360]
[86.58802032 69.10611725]
[89.30711365 62.17101669]
[88.31921387 47.20358658]
[84.60691833 38.77085876]
[87.47769928 31.89716911]
[86.81883240 16.91164589]
[78.31565857 9.97390175]
[75.14189911 -0.30088684]
[78.12645721 -10.40244770]
[86.03651428 -17.01929665]
[86.03651428 -32.01929474]
[76.19646454 -36.42610550]
[68.43949127 -43.85900497]
[63.65141678 -53.43334961]
[62.36693954 -64.02210999]
[64.71002960 -74.38853455]
[70.38247681 -83.33057404]
[78.70156097 -89.82029724]
[88.68215942 -93.12200165]
[89.99861145 -108.06412506]
[91.31507111 -123.00624084]
[92.63152313 -137.94836426]
[93.94797516 -152.89048767]
[95.26443481 -167.83261108]
[96.58088684 -182.77471924]
[86.23866272 -194.72520447]
[87.45917511 -210.48228455]
[99.51832581 -220.69758606]
[115.26163483 -219.31054688]
[125.34886932 -207.14407349]
[123.79545593 -191.41630554]
[111.52301025 -181.45826721]
[110.20655060 -166.51614380]
[108.89009857 -151.57403564]
[107.57364655 -136.63191223]
[106.25718689 -121.68978882]
[104.94073486 -106.74767303]
[103.62427521 -91.80554962]
[119.19290161 -80.10893250]
[124.69628143 -61.28170013]
[117.77895355 -42.77488327]
[101.03651428 -32.01929474]
[101.03651428 -17.01929665]
[111.94613647 -1.10957575]
[101.80435944 16.25278282]
[102.46321869 31.23830605]
[103.28665161 46.21568680]
[104.27455139 61.18312073]
[105.42679596 76.13880157]
[106.74324799 91.08091736]
[108.22375488 106.00767517]
[109.86813354 120.91727448]
[111.51250458 135.82687378]
[113.15688324 150.73646545]
[114.80126190 165.64605713]
[126.04684448 180.18218994]
[118.46315002 195.97132874]
[120.43465424 210.84120178]
[122.40615845 225.71107483]
[124.37766266 240.58094788]
[126.34917450 255.45082092]
[128.32067871 270.32070923]
[139.88285828 284.60629272]
[132.64784241 300.55819702]
[134.94552612 315.38119507]
[137.24320984 330.20416260]
[139.54089355 345.02713013]
[141.83857727 359.85009766]
[155.19335938 374.88195801]
[147.62155151 392.62475586]
[150.56811523 407.33251953]
[153.51466370 422.04025269]
[156.46121216 436.74801636]
[159.40776062 451.45574951]
[170.47706604 456.03897095]
[177.85542297 465.32473755]
[179.77932739 476.90588379]
[175.88032532 487.85171509]
[167.24870300 495.44946289]
[169.54638672 510.27243042]
[171.84407043 525.09539795]
[186.87179565 526.15155029]
[201.28756714 530.52575684]
[214.36830139 537.99847412]
[225.45788574 548.19500732]
[234.00004578 560.60382080]
[239.56634521 574.60253906]
[241.87756348 589.48901367]
[240.81776428 604.51641846]
[236.44010925 618.93115234]
[228.96418762 632.01007080]
[218.76498413 643.09716797]
[206.35409546 651.63635254]
[192.35401917 657.19927979]
[177.46702576 659.50689697]
[162.43981934 658.44342041]
[148.02616882 654.06231689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 126]
[11 125]
[12 124]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[23 113]
[24 112]
[25 111]
[26 110]
[27 109]
[30 107]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[44 95]
[45 94]
[47 93]
[48 92]
[50 91]
[51 90]
[55 88]
[56 87]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
