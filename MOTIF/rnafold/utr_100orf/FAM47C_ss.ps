%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAUCAGGAACCGCGGAAACUGGAGAGGUGGCACCCCAGCGAGGGCCACCAUGGGGGACCAGAGGCCGCAGGACCGGCCCAGUUCCCCGGGCAUGGACUCCACGCCCUGGUACUGUGACAAACCGCCUUCCAAGUACUUCGCGAAGCGCA\
) } def
/len { sequence length } bind def

/coor [
[104.55022430 434.51351929]
[90.06993866 438.78247070]
[74.97485352 438.98519897]
[60.38513947 435.10668945]
[47.38344574 427.43475342]
[36.93458176 416.53869629]
[29.81392860 403.22711182]
[26.54988098 388.48773193]
[27.38465309 373.41439819]
[32.25630188 359.12561035]
[40.80331802 346.68167114]
[52.39145660 337.00607300]
[66.16079712 330.81674194]
[81.08956909 328.57299805]
[82.93289185 313.68667603]
[84.77621460 298.80038452]
[86.61953735 283.91406250]
[88.46286774 269.02774048]
[90.30619049 254.14144897]
[82.59040833 238.40895081]
[93.73043060 223.78259277]
[95.26772308 208.86157227]
[96.80501556 193.94055176]
[98.18904114 179.00454712]
[99.41965485 164.05511475]
[100.65026855 149.10566711]
[101.88088226 134.15623474]
[80.46991730 124.58293915]
[71.84193420 104.92290497]
[56.90592194 103.53887939]
[41.96990585 102.15485382]
[27.03389549 100.77082825]
[12.09788227 99.38680267]
[-2.83813024 98.00277710]
[-11.73465729 100.33678436]
[-18.06551933 96.43391418]
[-32.96996689 94.74352264]
[-44.18217087 105.64400482]
[-59.78160477 106.73562622]
[-72.40269470 97.50296021]
[-76.08614349 82.30538940]
[-69.09275055 68.31874084]
[-54.72456741 62.14707947]
[-39.76581955 66.70447540]
[-31.27956963 79.83907318]
[-16.37512207 81.52947235]
[-1.45410490 83.06676483]
[13.48190784 84.45079041]
[28.41792107 85.83481598]
[43.35393143 87.21884155]
[58.28994751 88.60286713]
[73.22595978 89.98689270]
[76.32424927 80.42714691]
[82.91125488 71.94215393]
[92.56603241 65.81319427]
[90.11310577 51.01511383]
[87.66017914 36.21703339]
[85.20725250 21.41895485]
[82.75431824 6.62087488]
[80.30139160 -8.17720413]
[77.84846497 -22.97528267]
[66.95487976 -27.91675949]
[59.89488220 -37.42370605]
[58.34552383 -49.04228210]
[62.57983780 -59.84309769]
[71.42728424 -67.15976715]
[69.58396149 -82.04607391]
[67.74063873 -96.93238068]
[65.89731598 -111.81869507]
[64.05398560 -126.70500183]
[51.43752289 -136.22341919]
[49.32964325 -151.88650513]
[58.98091888 -164.40164185]
[74.66542053 -166.34379578]
[87.07780457 -156.56074524]
[88.85403442 -140.85658264]
[78.94029999 -128.54832458]
[80.78362274 -113.66201782]
[82.62694550 -98.77571106]
[84.47026825 -83.88940430]
[86.31359100 -69.00308990]
[101.38859558 -58.69672012]
[104.25380707 -40.33992386]
[92.64654541 -25.42821121]
[95.09947205 -10.63013172]
[97.55239868 4.16794682]
[100.00532532 18.96602631]
[102.45825958 33.76410675]
[104.91118622 48.56218338]
[107.36411285 63.36026382]
[121.17769623 69.20705414]
[133.50897217 60.66659164]
[145.84025574 52.12613297]
[158.17153931 43.58567429]
[165.11112976 29.36763191]
[179.97937012 28.48190498]
[192.31065369 19.94144630]
[204.64193726 11.40098667]
[214.22050476 -2.58785248]
[230.31425476 2.74387264]
[229.64608765 19.68464851]
[213.18240356 23.73227119]
[200.85112000 32.27272797]
[188.51983643 40.81319046]
[182.46226501 54.42036057]
[166.71200562 55.91695786]
[154.38072205 64.45742035]
[142.04943848 72.99787903]
[129.71815491 81.53833771]
[134.41856384 96.49210358]
[132.10174561 111.81797791]
[146.75447083 115.02696991]
[161.40719604 118.23596954]
[170.27784729 111.80828857]
[181.00306702 111.36806488]
[189.99362183 116.81891632]
[194.37510681 126.13341522]
[208.88374329 129.94126892]
[223.40563965 123.12262726]
[237.72656250 130.35386658]
[240.86071777 146.08779907]
[230.40385437 158.25469971]
[214.37757874 157.52116394]
[205.07588196 144.44989014]
[190.56724548 140.64204407]
[172.39485168 147.14291382]
[158.19819641 132.88868713]
[143.54547119 129.67970276]
[128.89274597 126.47070312]
[116.83031464 135.38685608]
[115.59970093 150.33628845]
[114.36908722 165.28572083]
[113.13847351 180.23515320]
[115.56369781 189.10725403]
[111.72603607 195.47784424]
[110.18874359 210.39886475]
[108.65145111 225.31988525]
[116.18540192 235.83859253]
[114.55927277 248.26948547]
[105.19249725 255.98477173]
[103.34917450 270.87109375]
[101.50584412 285.75738525]
[99.66252136 300.64370728]
[97.81919861 315.52999878]
[95.97587585 330.41632080]
[109.90647125 336.23361206]
[121.75027466 345.59454346]
[130.62838745 357.80444336]
[135.88201904 371.95724487]
[137.12129211 387.00274658]
[134.25425720 401.82443237]
[127.49366760 415.32247925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 145]
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[21 137]
[22 136]
[23 135]
[24 133]
[25 132]
[26 131]
[27 130]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 46]
[37 45]
[55 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[91 109]
[92 108]
[93 107]
[94 106]
[96 104]
[97 103]
[98 102]
[111 129]
[112 128]
[113 127]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
