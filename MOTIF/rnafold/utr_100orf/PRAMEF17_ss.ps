%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUUUUCACUGGAGAUUUGUCAGAAUGAGCCUCCAGUCCCCAUCCAGACUCCUGGAGCUGGCAGGCCAGAGCCUGCUGAGGAACCAGUUCUUGACCAUCUUCAUCCUGGACGAGCUGCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[162.44691467 481.11355591]
[147.88607788 484.71661377]
[133.08352661 482.29077148]
[120.43441772 474.22851562]
[111.98543549 461.83438110]
[109.10367584 447.11380005]
[112.25542450 432.44866943]
[120.93071747 420.21185303]
[133.72583008 412.38339233]
[148.57044983 410.22994995]
[163.06262207 414.09994507]
[174.85910034 423.36920166]
[171.18627930 408.82580566]
[167.51347351 394.28240967]
[163.84065247 379.73901367]
[160.16783142 365.19561768]
[156.49502563 350.65222168]
[152.82220459 336.10882568]
[142.55209351 329.59078979]
[139.41822815 317.42172241]
[145.64810181 306.04769897]
[142.33613586 291.41787720]
[139.02416992 276.78808594]
[135.71220398 262.15829468]
[132.21954346 247.57058716]
[128.54672241 233.02719116]
[124.87390900 218.48379517]
[121.20109558 203.94039917]
[104.58342743 198.22109985]
[94.57036591 183.58901978]
[95.26902008 165.71664429]
[106.58927917 151.66813660]
[102.20173645 137.32415771]
[97.81418610 122.98019409]
[93.42664337 108.63622284]
[86.14187622 95.52393341]
[76.28078461 84.22088623]
[66.41969299 72.91783905]
[56.55859375 61.61479568]
[52.35155106 76.01274109]
[38.56976318 81.93408203]
[25.22974014 75.07524109]
[22.02692032 60.42116165]
[31.28908920 48.62234116]
[46.28469849 48.25413132]
[37.89338684 35.82087326]
[29.50207710 23.38761711]
[21.11076546 10.95435905]
[12.71945477 -1.47889900]
[-2.25101256 -8.17345905]
[-3.66921425 -24.51116943]
[9.92377377 -33.68519211]
[24.54465103 -26.25808144]
[25.15271187 -9.87021065]
[33.54402542 2.56304741]
[41.93533325 14.99630547]
[50.32664490 27.42956352]
[58.71795654 39.86281967]
[67.86164093 51.75370407]
[77.72273254 63.05674744]
[87.58383179 74.35979462]
[97.44492340 85.66283417]
[112.18750763 82.89586639]
[117.27905273 68.78643036]
[122.37059021 54.67699051]
[127.46213531 40.56755447]
[132.55368042 26.45811844]
[137.64521790 12.34868145]
[134.22212219 -3.68922687]
[146.57937622 -14.47024155]
[162.00489807 -8.90377998]
[164.63021851 7.28386021]
[151.75465393 17.44022179]
[146.66311646 31.54965973]
[141.57156372 45.65909576]
[136.48002625 59.76853180]
[131.38848877 73.87796783]
[126.29695129 87.98740387]
[118.87133026 100.67829132]
[107.77060699 104.24868011]
[112.15815735 118.59264374]
[116.54570007 132.93661499]
[120.93325043 147.28057861]
[133.30416870 149.79220581]
[143.34909058 157.31681824]
[149.16929626 168.35443115]
[149.69799805 180.74870300]
[144.89543152 192.10813904]
[135.74449158 200.26757812]
[139.41731262 214.81097412]
[143.09011841 229.35438538]
[146.76293945 243.89778137]
[151.95089722 251.54957581]
[150.34199524 258.84634399]
[153.65396118 273.47613525]
[156.96592712 288.10592651]
[160.27790833 302.73571777]
[173.08746338 315.89471436]
[167.36560059 332.43600464]
[171.03842163 346.97940063]
[174.71124268 361.52279663]
[178.38404846 376.06619263]
[182.05686951 390.60958862]
[185.72967529 405.15298462]
[189.40249634 419.69641113]
[196.51101685 427.19244385]
[196.36674500 436.36361694]
[204.13291931 449.19662476]
[211.89907837 462.02966309]
[219.66525269 474.86267090]
[227.43142700 487.69570923]
[242.85560608 488.00918579]
[255.64901733 496.63079834]
[261.72933960 510.80941772]
[259.15637207 526.02069092]
[248.75109863 537.41076660]
[233.83384705 541.34515381]
[219.16464233 536.56829834]
[209.42437744 524.60461426]
[207.72113037 509.27154541]
[214.59840393 495.46188354]
[206.83222961 482.62884521]
[199.06605530 469.79583740]
[191.29988098 456.96279907]
[183.53370667 444.12979126]
[181.83966064 459.03381348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 105]
[13 104]
[14 103]
[15 102]
[16 101]
[17 100]
[18 99]
[21 97]
[22 96]
[23 95]
[24 94]
[25 92]
[26 91]
[27 90]
[28 89]
[32 83]
[33 82]
[34 81]
[35 80]
[36 62]
[37 61]
[38 60]
[39 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
