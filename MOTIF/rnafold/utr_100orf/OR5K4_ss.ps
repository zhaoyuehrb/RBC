%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUAGGGAAAAUCACUCCUUAGCAGCUGAAUUCAUCCUCAUAGGAUUUACAAAUUAUCCAGAGCUGAAGACGCUUCUGUUUGUGGUGUUCUCUGCCA\
) } def
/len { sequence length } bind def

/coor [
[69.65291595 433.20138550]
[72.44161224 414.02136230]
[72.90811157 399.02862549]
[73.37460327 384.03588867]
[73.84110260 369.04315186]
[70.85015869 362.13809204]
[74.56246948 353.59341431]
[75.49501801 338.62243652]
[76.42755890 323.65145874]
[77.36010742 308.68045044]
[78.29264832 293.70947266]
[79.22518921 278.73849487]
[72.29411316 265.55480957]
[80.87439728 252.26235962]
[81.80693817 237.29138184]
[82.73948669 222.32040405]
[83.67202759 207.34941101]
[84.60457611 192.37843323]
[73.49855042 184.79470825]
[67.58325195 172.59614563]
[68.52073669 158.96238708]
[76.17093658 147.50729370]
[88.60013580 141.32104492]
[89.99782562 126.38629913]
[91.39551544 111.45156097]
[85.73837280 98.66530609]
[93.66974640 87.15074921]
[95.06742859 72.21601105]
[96.46511841 57.28126907]
[85.39958954 48.89623260]
[80.00770569 36.22057343]
[81.61621094 22.64961243]
[89.69220734 11.76044846]
[102.01251984 6.36911011]
[103.87400055 -8.51493740]
[105.73548126 -23.39898682]
[107.59696198 -38.28303528]
[100.26413727 -49.03414917]
[102.23437500 -61.48978043]
[111.89020538 -68.95857239]
[114.21368408 -83.77752686]
[116.53715515 -98.59648895]
[109.50595856 -107.18533325]
[108.48551941 -118.01535797]
[113.57696533 -127.37652588]
[122.82960510 -132.19989014]
[126.06987000 -146.84573364]
[129.31013489 -161.49157715]
[132.55039978 -176.13742065]
[121.60751343 -187.01200867]
[118.30332947 -202.08137512]
[123.69220734 -216.53694153]
[136.05458069 -225.76600647]
[151.44564819 -226.82357788]
[164.95419312 -219.37220764]
[172.26966858 -205.78959656]
[171.05775452 -190.40991211]
[161.70515442 -178.14074707]
[147.19624329 -172.89715576]
[143.95597839 -158.25131226]
[140.71571350 -143.60546875]
[137.47544861 -128.95962524]
[144.76594543 -111.16464233]
[131.35610962 -96.27301788]
[129.03263855 -81.45405579]
[126.70916748 -66.63510132]
[133.94129944 -50.72920227]
[122.48101044 -36.42155457]
[120.61952972 -21.53750420]
[118.75804901 -6.65345669]
[116.89656830 8.23059177]
[129.19409180 18.98117065]
[132.75862122 35.09071732]
[126.01090240 50.32770538]
[111.39986420 58.67895889]
[110.00217438 73.61370087]
[108.60448456 88.54843903]
[114.26162720 101.33469391]
[106.33025360 112.84925079]
[104.93257141 127.78398895]
[103.53488159 142.71873474]
[116.34264374 153.63601685]
[120.14600372 169.86044312]
[113.65427399 185.02885437]
[99.57555389 193.31097412]
[98.64301300 208.28196716]
[97.71046448 223.25294495]
[96.77792358 238.22392273]
[95.84537506 253.19491577]
[102.70976257 267.44940186]
[94.19617462 279.67105103]
[93.26363373 294.64202881]
[92.33108521 309.61300659]
[91.39854431 324.58398438]
[90.46599579 339.55496216]
[89.53345490 354.52597046]
[88.83384705 369.50964355]
[88.36734772 384.50238037]
[87.90084839 399.49511719]
[87.43435669 414.48788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[4 98]
[5 97]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[14 89]
[15 88]
[16 87]
[17 86]
[18 85]
[23 81]
[24 80]
[25 79]
[27 77]
[28 76]
[29 75]
[34 71]
[35 70]
[36 69]
[37 68]
[40 66]
[41 65]
[42 64]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
