%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAACCGCAGCACCGCGGACGCGGACGGGCUGCUGGCUGGGCGCGGGCCGGCCGCGGGGGCAUCUGCGGGGGCAUCUGCGGGGCUGGCUGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[105.90876770 143.48419189]
[92.28857422 143.90077209]
[78.98582458 140.08808899]
[73.08432007 153.87837219]
[75.57122803 170.08786011]
[62.60934448 180.13383484]
[47.53273773 173.68185425]
[45.85093307 157.36917114]
[59.29402542 147.97686768]
[65.19552612 134.18658447]
[56.45441437 121.99671173]
[41.49974442 123.16196442]
[26.54507256 124.32722473]
[11.59040165 125.49248505]
[-3.36426878 126.65773773]
[-11.85017300 130.50248718]
[-18.80090523 127.61929321]
[-33.78458023 128.31889343]
[-48.76825714 129.01850891]
[-63.72292709 130.18376160]
[-78.63412476 131.81353760]
[-91.53416443 141.93881226]
[-106.65005493 135.57940674]
[-108.43185425 119.27733612]
[-95.04660797 109.80278015]
[-80.26390839 116.90234375]
[-65.35270691 115.27256012]
[-61.62340164 112.03482056]
[-55.77067947 111.22525787]
[-49.46786118 114.03482819]
[-34.48418808 113.33522034]
[-19.50051117 112.63561249]
[-4.52952671 111.70307159]
[10.42514420 110.53781128]
[25.37981415 109.37255096]
[40.33448410 108.20729828]
[55.28915787 107.04203796]
[56.19386673 91.31360626]
[62.38877487 77.05801392]
[72.97869873 65.97026062]
[86.55611420 59.31341553]
[101.38713074 57.77558136]
[115.63255310 61.40122604]
[127.57593536 69.60339355]
[135.83032227 81.25315094]
[150.18019104 76.88493347]
[161.12901306 65.46417236]
[175.55787659 69.15974426]
[189.90774536 64.79152679]
[204.25761414 60.42330551]
[211.71261597 54.83623123]
[219.12207031 56.14987183]
[233.60084534 52.23004150]
[248.07962036 48.31021500]
[262.55838013 44.39038467]
[277.03717041 40.47055435]
[291.51593018 36.55072784]
[302.81466675 25.47599602]
[317.12161255 29.61852455]
[331.60037231 25.69869423]
[342.89907837 14.62396526]
[357.20602417 18.76649284]
[371.68481445 14.84666348]
[386.16357422 10.92683506]
[389.36968994 7.41238546]
[393.17709351 5.42094278]
[396.99154663 4.94675398]
[400.28982544 5.77760935]
[402.68515015 7.54020548]
[417.53845215 5.44747543]
[432.39175415 3.35474539]
[444.97064209 -7.16680956]
[460.27700806 -1.28058362]
[462.56494141 14.95817852]
[449.48083496 24.84443092]
[434.48446655 18.20804405]
[419.63116455 20.30077362]
[404.77789307 22.39350319]
[390.08340454 25.40561104]
[375.60464478 29.32543945]
[361.12585449 33.24526978]
[350.86276245 44.03962708]
[335.52020264 40.17747116]
[321.04144287 44.09729767]
[310.77835083 54.89165878]
[295.43576050 51.02950287]
[280.95700073 54.94932938]
[266.47821045 58.86915970]
[251.99945068 62.78899002]
[237.52066040 66.70881653]
[223.04188538 70.62864685]
[208.62582397 74.77317047]
[194.27595520 79.14139557]
[179.92610168 83.50961304]
[170.00366211 94.61792755]
[154.54841614 91.23479462]
[140.19854736 95.60301971]
[140.30767822 108.17031860]
[136.51701355 120.37470245]
[129.06451416 131.01580811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 10]
[4 9]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[17 32]
[18 31]
[19 30]
[20 27]
[21 26]
[45 97]
[46 96]
[48 94]
[49 93]
[50 92]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[59 84]
[60 83]
[62 81]
[63 80]
[64 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
