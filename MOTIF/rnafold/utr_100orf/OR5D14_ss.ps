%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGAUGGUUUUAAGGAAUCUGAGCAUGGAGCCCACCUUUGCCCUUUUAGGUUUCACAGAUUACCCAAAGCUUCAGAUUCCUCUCUUCCUUGUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[87.98947906 423.33517456]
[84.90478516 408.21932983]
[90.50330353 393.84365845]
[102.99857330 384.79534912]
[102.06603241 369.82437134]
[101.13348389 354.85339355]
[100.20094299 339.88241577]
[96.57960510 333.28610229]
[99.47957611 324.43267822]
[99.01307678 309.43994141]
[85.33819580 303.48486328]
[75.56479645 292.13629150]
[71.67195892 277.61019897]
[74.48355865 262.77392578]
[83.49453735 250.58010864]
[96.96070862 243.47915649]
[96.49421692 228.48640442]
[96.02771759 213.49366760]
[95.56121826 198.50091553]
[95.09471893 183.50817871]
[94.62821960 168.51542664]
[94.16172791 153.52268982]
[93.69522858 138.52993774]
[93.22872925 123.53720093]
[92.76222992 108.54445648]
[92.06262207 93.56078339]
[91.13008118 78.58979797]
[80.58145905 63.59734344]
[88.78847504 48.17182922]
[87.39078522 33.23709106]
[85.99309540 18.30235100]
[70.64701080 16.06385994]
[56.27987671 10.24754429]
[43.71250916 1.19014621]
[33.66184616 -10.58655167]
[26.70004654 -24.40578270]
[23.22191429 -39.47468948]
[23.42252159 -54.92980957]
[27.28626251 -69.88655853]
[34.58798981 -83.48986053]
[44.90612411 -94.96300507]
[57.64699936 -103.65204620]
[72.07901001 -109.06303406]
[70.21752930 -123.94708252]
[68.35604858 -138.83113098]
[55.72798157 -148.33415222]
[53.60099792 -163.99465942]
[63.23699951 -176.52154541]
[78.91912079 -178.48284912]
[91.34342957 -168.71493530]
[93.13881683 -153.01295471]
[83.24009705 -140.69261169]
[85.10157776 -125.80856323]
[86.96305847 -110.92451477]
[101.42439270 -109.42844391]
[115.18914032 -104.72526550]
[127.55516815 -97.05132294]
[137.89088440 -86.79456329]
[145.66748047 -74.47496033]
[150.48605347 -60.71815872]
[152.09797668 -46.22366714]
[150.41780090 -31.72932434]
[145.52770996 -17.97372055]
[137.67359924 -5.65856791]
[127.25259399 4.58709621]
[114.79307556 12.23904037]
[100.92783356 16.90466118]
[102.32552338 31.83940125]
[103.72321320 46.77414322]
[112.89603424 54.82878876]
[114.08810425 67.38281250]
[106.10106659 77.65724945]
[107.03360748 92.62823486]
[110.69341278 99.98356628]
[107.75497437 108.07795715]
[108.22147369 123.07070160]
[108.68797302 138.06344604]
[109.15446472 153.05619812]
[109.62096405 168.04893494]
[110.08746338 183.04168701]
[110.55396271 198.03442383]
[111.02046204 213.02717590]
[111.48696136 228.01991272]
[111.95345306 243.01264954]
[125.83504486 249.26269531]
[135.58668518 260.87271118]
[139.31520081 275.50549316]
[136.33297729 290.24548340]
[127.28401947 302.17971802]
[114.00582123 308.97344971]
[114.47232056 323.96618652]
[115.17192078 338.94985962]
[116.10446930 353.92083740]
[117.03701019 368.89184570]
[117.96955872 383.86282349]
[131.49111938 391.29052734]
[138.83036804 404.86032104]
[137.64537048 420.24209595]
[128.31427002 432.52761841]
[113.81456757 437.79660034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[9 91]
[10 90]
[16 84]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 73]
[27 72]
[29 69]
[30 68]
[31 67]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
