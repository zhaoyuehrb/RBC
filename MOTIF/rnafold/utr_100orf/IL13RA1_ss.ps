%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCAAGGCUCCAGCCCGGCCGGGCUCCGAGGCGAGAGGCUGCAUGGAGUGGCCGGCGCGGCUCUGCGGGCUGUGGGCGCUGCUGCUCUGCGCCGGCGGCGGGGGCGGGGGCGGGGGCGCCGCGCCUACGGAAACUCAGCCAC\
) } def
/len { sequence length } bind def

/coor [
[92.51841736 260.26351929]
[102.25321198 247.51155090]
[101.59892273 232.52581787]
[90.47816467 222.68385315]
[89.60114288 207.49551392]
[99.99971008 195.89778137]
[99.34542084 180.91204834]
[88.22466278 171.07008362]
[87.34764099 155.88174438]
[97.74620056 144.28401184]
[97.09191132 129.29827881]
[96.43762207 114.31256104]
[87.75246429 115.09605408]
[78.28870392 110.52910614]
[63.29227448 110.20188141]
[48.29316711 110.03826141]
[33.29316711 110.03826141]
[18.29316711 110.03826141]
[3.29316735 110.03826141]
[-11.70683289 110.03826141]
[-26.70683289 110.03826141]
[-32.72335815 113.06332397]
[-38.48398590 112.60692596]
[-42.35755539 109.69676208]
[-57.34327698 109.04247284]
[-72.32900238 108.38818359]
[-87.31472015 107.73388672]
[-102.30044556 107.07959747]
[-117.28617096 106.42530823]
[-134.64723206 116.57150269]
[-150.55877686 105.66278839]
[-165.55877686 105.66278839]
[-180.55877686 105.66278839]
[-192.87400818 115.94455719]
[-208.56149292 112.58567047]
[-215.58715820 98.16278839]
[-208.56149292 83.73989868]
[-192.87400818 80.38101959]
[-180.55877686 90.66278839]
[-165.55877686 90.66278839]
[-150.55877686 90.66278839]
[-143.94345093 82.75410461]
[-133.84420776 79.76896667]
[-123.57075500 82.94004059]
[-116.63188171 91.43958282]
[-101.64615631 92.09387970]
[-86.66043091 92.74816895]
[-71.67471313 93.40245819]
[-56.68898773 94.05674744]
[-41.70326233 94.71103668]
[-26.70683289 95.03826141]
[-11.70683289 95.03826141]
[3.29316735 95.03826141]
[18.29316711 95.03826141]
[33.29316711 95.03826141]
[48.29316711 95.03826141]
[55.03300095 91.86889648]
[63.61949921 95.20545197]
[78.61592865 95.53267670]
[87.87661743 83.73268890]
[83.99433136 69.24380493]
[80.11204529 54.75491714]
[76.22975922 40.26602936]
[72.34747314 25.77714157]
[62.40768814 12.04262257]
[72.85385132 -1.31080508]
[88.57720947 5.03052092]
[86.83636475 21.89485550]
[90.71864319 36.38374329]
[94.60092926 50.87263107]
[98.48321533 65.36151886]
[102.36550140 79.85040283]
[115.51640320 87.06523895]
[129.82215881 82.55464935]
[144.12791443 78.04405975]
[158.43367004 73.53347778]
[172.73942566 69.02288818]
[187.04518127 64.51229858]
[201.35093689 60.00171661]
[215.65669250 55.49112701]
[226.49148560 43.96214294]
[240.95635986 47.51417160]
[255.26211548 43.00358582]
[262.60391235 29.26547050]
[277.17623901 24.89488411]
[290.22817993 31.97882652]
[304.53393555 27.46823883]
[318.83969116 22.95765305]
[333.14544678 18.44706535]
[347.45120239 13.93647861]
[361.75695801 9.42589092]
[372.59176636 -2.10309505]
[387.05661011 1.44893491]
[401.36236572 -3.06165218]
[412.19717407 -14.59063816]
[426.66204834 -11.03860855]
[440.96780396 -15.54919529]
[446.78448486 -30.06471062]
[460.59506226 -37.39973068]
[475.87854004 -34.09088516]
[485.41860962 -21.70051003]
[484.71069336 -6.07895899]
[474.08905029 5.39774752]
[458.56890869 7.31065989]
[445.47839355 -1.24344110]
[431.17263794 3.26714587]
[421.36108398 14.47350502]
[405.87295532 11.24410248]
[391.56719971 15.75468922]
[381.75564575 26.96104813]
[366.26754761 23.73164558]
[351.96179199 28.24223328]
[337.65603638 32.75281906]
[323.35028076 37.26340485]
[309.04452515 41.77399445]
[294.73876953 46.28458023]
[288.11041260 59.57369614]
[273.66659546 64.35186005]
[259.77270508 57.30933762]
[245.46694946 61.81992722]
[235.65538025 73.02628326]
[220.16726685 69.79688263]
[205.86151123 74.30747223]
[191.55577087 78.81805420]
[177.25001526 83.32864380]
[162.94425964 87.83923340]
[148.63850403 92.34981537]
[134.33274841 96.86040497]
[120.02699280 101.37099457]
[111.42334747 113.65827179]
[112.07763672 128.64399719]
[112.73192596 143.62971497]
[124.10173035 154.27703857]
[124.55179596 169.48400879]
[114.33113861 180.25776672]
[114.98543549 195.24348450]
[126.35523987 205.89080811]
[126.80530548 221.09777832]
[116.58464813 231.87153625]
[117.23893738 246.85725403]
[128.04811096 258.71228027]
[125.37670135 274.53134155]
[111.27399445 282.17944336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[6 136]
[7 135]
[10 132]
[11 131]
[12 130]
[14 59]
[15 58]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 41]
[32 40]
[33 39]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[73 129]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[79 123]
[80 122]
[82 120]
[83 119]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[93 109]
[94 108]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
