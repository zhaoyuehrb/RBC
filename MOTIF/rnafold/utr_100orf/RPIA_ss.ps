%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGGCGGGACUUCAGCGGAGGCCGGAGCGAGGCGUCGGGAUGCAGCGCCCCGGGCCCUUCAGCACCCUCUACGGGCGGGUCUUGGCCCCGCUGCCCGGGAGGGCCGGGGGCGCGGCCUCCGGCGGAGGAGGGAACAGCU\
) } def
/len { sequence length } bind def

/coor [
[274.82705688 204.05502319]
[271.97644043 199.49354553]
[258.71838379 192.47752380]
[245.46035767 185.46151733]
[232.20231628 178.44549561]
[217.33407593 179.33128357]
[208.75552368 166.03770447]
[195.49748230 159.02168274]
[182.23945618 152.00567627]
[168.98141479 144.98965454]
[155.72337341 137.97364807]
[142.46534729 130.95762634]
[129.20730591 123.94161987]
[115.94926453 116.92560577]
[100.19860840 123.25544739]
[84.34213257 117.19553375]
[76.82766724 101.97439575]
[62.26967239 98.35987854]
[47.67258453 94.90662384]
[33.03818893 91.61504364]
[18.40379333 88.32346344]
[3.76939797 85.03189087]
[-10.86499691 81.74031067]
[-25.56862640 78.77328491]
[-40.33429718 76.13225555]
[-55.09996414 73.49122620]
[-69.86563110 70.85019684]
[-84.81251526 76.03684998]
[-95.97866058 66.17955017]
[-110.74433136 63.53852463]
[-125.51000214 60.89749527]
[-138.38739014 69.66165924]
[-153.32424927 66.77294159]
[-161.60018921 54.44230652]
[-176.36585999 51.80128098]
[-191.13153076 49.16025162]
[-205.89720154 46.51922226]
[-221.12889099 52.59603882]
[-233.83813477 42.23230743]
[-230.95075989 26.08934784]
[-215.43704224 20.77365494]
[-203.25616455 31.75355530]
[-188.49049377 34.39458466]
[-173.72482300 37.03561020]
[-158.95916748 39.67663956]
[-146.92210388 30.97924232]
[-131.90998840 33.44727707]
[-122.86897278 46.13182831]
[-108.10330200 48.77285385]
[-93.33763885 51.41388321]
[-79.44689178 46.03832626]
[-67.22460175 56.08452988]
[-52.45893860 58.72555923]
[-37.69326782 61.36658478]
[-22.92759895 64.00761414]
[-18.50861359 62.01362991]
[-12.78370190 62.83084488]
[-7.57341909 67.10591888]
[7.06097555 70.39749146]
[21.69537163 73.68907166]
[36.32976532 76.98065186]
[50.96416092 80.27222443]
[58.23766708 78.65847015]
[65.88418579 83.80187988]
[80.44218445 87.41639709]
[86.08174896 81.36837006]
[93.48107910 77.67604828]
[94.14458466 62.69072723]
[94.80808258 47.70541000]
[85.08112335 34.94744110]
[89.13062286 19.42387772]
[103.85016632 13.04306602]
[117.94816589 20.69982147]
[120.60984802 36.52053452]
[109.79340363 48.36891174]
[109.12989807 63.35422897]
[108.46640015 78.33954620]
[120.18328094 88.44619751]
[122.96527863 103.66756439]
[136.22331238 110.68357849]
[149.48135376 117.69959259]
[162.73939514 124.71560669]
[175.99742126 131.73162842]
[189.25546265 138.74763489]
[202.51350403 145.76365662]
[215.77154541 152.77966309]
[231.58808899 152.39572144]
[239.21832275 165.18745422]
[252.47636414 172.20347595]
[265.73440552 179.21948242]
[278.99243164 186.23550415]
[292.47595215 192.80775452]
[306.17013550 198.92901611]
[319.86428833 205.05026245]
[333.55847168 211.17152405]
[347.38470459 216.98832703]
[361.33624268 222.49784851]
[375.28775024 228.00738525]
[385.88583374 217.14660645]
[399.79718018 211.18690491]
[414.88958740 211.00779724]
[428.86291504 216.60545349]
[439.59942627 227.09796143]
[445.48474121 240.86415100]
[445.65072632 255.79405212]
[459.60226440 261.30355835]
[473.55380249 266.81311035]
[487.50531006 272.32263184]
[501.45684814 277.83215332]
[515.40838623 283.34167480]
[529.35992432 288.85119629]
[543.31146240 294.36071777]
[557.26293945 299.87023926]
[574.21582031 300.06427002]
[578.72235107 316.40829468]
[564.26458740 325.26321411]
[551.75341797 313.82177734]
[537.80194092 308.31225586]
[523.85040283 302.80273438]
[509.89886475 297.29318237]
[495.94732666 291.78366089]
[481.99578857 286.27413940]
[468.04428101 280.76461792]
[454.09274292 275.25509644]
[440.14120483 269.74557495]
[429.81906128 280.53366089]
[416.11590576 286.56427002]
[401.10726929 286.88989258]
[387.07962036 281.42984009]
[376.18179321 270.98706055]
[370.09603882 257.13043213]
[369.77822876 241.95890808]
[355.82672119 236.44938660]
[341.87518311 230.93986511]
[337.14907837 232.02037048]
[331.69894409 230.08689880]
[327.43722534 224.86569214]
[313.74304199 218.74443054]
[300.04888916 212.62318420]
[286.35470581 206.50192261]
[282.88510132 207.46525574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 91]
[3 90]
[4 89]
[5 88]
[7 86]
[8 85]
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[17 65]
[18 64]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 55]
[25 54]
[26 53]
[27 52]
[29 50]
[30 49]
[31 48]
[34 45]
[35 44]
[36 43]
[37 42]
[67 77]
[68 76]
[69 75]
[92 140]
[93 139]
[94 138]
[95 137]
[96 134]
[97 133]
[98 132]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
