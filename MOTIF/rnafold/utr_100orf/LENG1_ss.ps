%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUGCAAAGAGGCGGGCGUGCCAGUCCCUGGACAGCUACGACGCCAUGAAUAUCUUGCCCAAGAAGAGCUGGCACGUCCGGAACAAGGACAAUGUCGCCCGCGUGCGGCGUGACGAGGCCCAGGCCCGGGAGGAGGAGAAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[61.67738724 175.28987122]
[54.22142792 171.00358582]
[47.23987961 165.98149109]
[40.80509186 160.27561951]
[34.98374557 153.94509888]
[29.83617020 147.05554199]
[25.41571236 139.67834473]
[21.76817894 131.88995361]
[18.93137169 123.77108765]
[16.93468666 115.40587616]
[15.79881954 106.88101196]
[15.53553772 98.28483582]
[16.14757156 89.70643616]
[17.62857819 81.23471832]
[19.96320915 72.95745850]
[23.12726974 64.96044159]
[10.08449936 57.55192566]
[-2.95827198 50.14340973]
[-16.00104332 42.73489380]
[-29.04381371 35.32637405]
[-42.08658600 27.91785812]
[-55.12935638 20.50934219]
[-68.17212677 13.10082531]
[-81.21489716 5.69230795]
[-94.25766754 -1.71620882]
[-107.30043793 -9.12472534]
[-120.34320831 -16.53324318]
[-133.38598633 -23.94175911]
[-151.38131714 -18.19056702]
[-167.62286377 -27.20296288]
[-172.10890198 -44.90017319]
[-185.45239258 -51.75226593]
[-198.86737061 -58.46331024]
[-212.35237122 -65.03256226]
[-228.14726257 -64.12051392]
[-236.20051575 -76.65025330]
[-249.68551636 -83.21950531]
[-263.84002686 -88.18434906]
[-278.47393799 -91.47809601]
[-291.69476318 -82.81868744]
[-307.14913940 -86.12583923]
[-315.66830444 -99.43747711]
[-312.19793701 -114.85604095]
[-298.79696655 -123.23397064]
[-283.41595459 -119.60079193]
[-275.18017578 -106.11200714]
[-260.54626465 -102.81825256]
[-270.23718262 -114.26755524]
[-273.62420654 -128.88015747]
[-269.95852661 -143.42535400]
[-260.05059814 -154.68734741]
[-246.09092712 -160.17623901]
[-231.16589355 -158.67848206]
[-218.57525635 -150.52520752]
[-211.10267639 -137.51904297]
[-210.40026855 -122.53549194]
[-216.62333679 -108.88729095]
[-228.39599609 -99.59190369]
[-243.11625671 -96.70449066]
[-229.63127136 -90.13524628]
[-214.80091858 -91.51715851]
[-205.78311157 -78.51754761]
[-192.29812622 -71.94830322]
[-184.85705566 -71.84574890]
[-178.60029602 -65.09575653]
[-165.25680542 -58.24366760]
[-155.33644104 -64.03663635]
[-143.73106384 -64.29312897]
[-133.35150146 -58.83210373]
[-126.85773468 -48.92123413]
[-125.97746277 -36.98453140]
[-112.93469238 -29.57601357]
[-99.89192200 -22.16749763]
[-86.84915161 -14.75897980]
[-73.80638123 -7.35046291]
[-60.76361084 0.05805388]
[-47.72084045 7.46657085]
[-34.67807007 14.87508774]
[-21.63529778 22.28360367]
[-8.59252644 29.69212151]
[4.45024490 37.10063934]
[17.49301529 44.50915527]
[30.53578758 51.91767120]
[42.55501175 38.05437469]
[57.28384781 27.11298180]
[74.02755737 19.60958099]
[91.99635315 15.89810467]
[110.34267426 16.15361595]
[128.20114136 20.36406136]
[144.72940063 28.33084106]
[159.14781189 39.67817307]
[170.55903625 29.94246483]
[181.97026062 20.20675850]
[190.09548950 5.32667255]
[206.64334106 9.01515007]
[207.67991638 25.93737984]
[191.70596313 31.61798096]
[180.29475403 41.35368729]
[168.88352966 51.08939362]
[182.01055908 79.71565247]
[183.74143982 111.16061401]
[198.37533569 114.45436859]
[213.00924683 117.74811554]
[227.70933533 120.73261261]
[242.46908569 123.40651703]
[257.42749023 118.25316620]
[268.57165527 128.13531494]
[283.33139038 130.80921936]
[292.40298462 129.25500488]
[298.37274170 133.69822693]
[313.07281494 136.68272400]
[327.77291870 139.66722107]
[339.11755371 129.08049011]
[354.52236938 127.21727753]
[368.06387329 134.79402161]
[374.53509521 148.89732361]
[371.44772339 164.10415649]
[359.98892212 174.56718445]
[344.56481934 176.26316833]
[331.10629272 168.53997803]
[324.78842163 154.36730957]
[310.08831787 151.38282776]
[295.38824463 148.39833069]
[280.65750122 145.56896973]
[265.89773560 142.89506531]
[251.99507141 148.23966980]
[239.79518127 138.16625977]
[225.03543091 135.49235535]
[220.62033081 137.46958923]
[214.91088867 136.64607239]
[209.71549988 132.38201904]
[195.08158875 129.08827209]
[180.44767761 125.79452515]
[177.40837097 133.83978271]
[173.56687927 141.53434753]
[168.96299744 148.79849243]
[163.64443970 155.55693054]
[157.66633606 161.73962402]
[151.09062195 167.28250122]
[143.98545837 172.12812805]
[136.42445374 176.22628784]
[128.48599243 179.53448486]
[120.25231934 182.01847839]
[111.80877686 183.65249634]
[103.24285126 184.41961670]
[94.64332581 184.31187439]
[86.09930420 183.33041382]
[77.69934082 181.48538208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 83]
[17 82]
[18 81]
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[31 66]
[32 65]
[33 63]
[34 62]
[36 60]
[37 59]
[38 47]
[39 46]
[91 99]
[92 98]
[93 97]
[101 133]
[102 132]
[103 131]
[104 128]
[105 127]
[107 125]
[108 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
