%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAAGACAAAAUCAAAGCUGUGUGGUUGAAUUCAUCCUCCUGGGCUUUUCUAACUUUCCUGAGCUCCAGGUGCAGCUCUUUGGGGUUUUCCUAGUUA\
) } def
/len { sequence length } bind def

/coor [
[75.48329926 279.89910889]
[61.34627533 284.91354370]
[46.39973831 286.17883301]
[31.62094688 283.61224365]
[17.97619629 277.38162231]
[6.35763693 267.89431763]
[-2.47506762 255.77062988]
[-7.94440031 241.80329895]
[-9.69275570 226.90554810]
[-7.60581779 212.05142212]
[-1.82004046 198.21218872]
[7.28628063 186.29266357]
[19.11773872 177.07221985]
[32.90074921 171.15371704]
[47.73411942 168.92413330]
[62.64799500 170.52923584]
[76.66724396 175.86410522]
[88.87522888 184.57989502]
[98.47177124 196.10362244]
[97.53923035 181.13264465]
[96.60668182 166.16165161]
[95.67414093 151.19067383]
[94.74159241 136.21968079]
[93.80905151 121.24870300]
[84.61775970 115.91294861]
[78.97342682 106.90785217]
[78.17757416 96.30989075]
[65.11013031 88.94498444]
[49.28895950 88.90962982]
[42.00040436 75.92016602]
[28.93295860 68.55525208]
[12.54923153 69.26624298]
[3.97107291 55.28957748]
[12.02295685 41.00325012]
[28.42179680 41.10380936]
[36.29787064 55.48781204]
[49.36531448 62.85272217]
[64.25180817 62.36128616]
[72.47503662 75.87754059]
[85.54248047 83.24245453]
[93.22627258 78.92983246]
[101.98370361 77.95685577]
[108.31122589 64.35676575]
[114.63875580 50.75667953]
[120.96627808 37.15658951]
[127.29380798 23.55650139]
[133.40905762 9.85965157]
[139.31056213 -3.93064380]
[145.21206665 -17.72093964]
[151.11357117 -31.51123428]
[140.72933960 -42.65068817]
[135.77981567 -57.05284882]
[137.12257385 -72.22245789]
[144.52494812 -85.53128052]
[156.70443726 -94.67348480]
[171.55085754 -98.06513214]
[186.49200439 -95.11860657]
[198.93922424 -86.34439087]
[206.73594666 -73.26268768]
[208.53135681 -58.13998032]
[204.01438904 -43.59635925]
[193.96762085 -32.15160370]
[180.13172913 -25.78858376]
[164.90386963 -25.60973167]
[159.00236511 -11.81943512]
[153.10086060 1.97086012]
[147.19935608 15.76115608]
[147.46641541 23.28140640]
[140.89389038 29.88402557]
[134.56637573 43.48411560]
[128.23884583 57.08420563]
[121.91131592 70.68429565]
[115.58379364 84.28438568]
[121.74790192 104.10658264]
[108.78002930 120.31615448]
[109.71257782 135.28713989]
[110.64511871 150.25813293]
[111.57766724 165.22911072]
[112.51020813 180.20008850]
[113.44275665 195.17108154]
[116.72447968 198.91825867]
[118.34168243 203.26908875]
[118.29928589 207.57231140]
[127.78133392 219.19517517]
[137.26338196 230.81802368]
[146.74542236 242.44088745]
[156.22747803 254.06375122]
[171.97927856 257.10681152]
[179.29325867 271.38565063]
[172.55876160 285.94674683]
[156.94190979 289.62011719]
[144.42262268 279.58779907]
[144.60461426 263.54577637]
[135.12257385 251.92292786]
[125.64052582 240.30007935]
[116.15847778 228.67721558]
[106.67642975 217.05436707]
[107.45733643 232.03402710]
[104.41380310 246.72201538]
[97.74483490 260.15795898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 80]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[27 40]
[28 39]
[30 37]
[31 36]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 67]
[48 66]
[49 65]
[50 64]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
