%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGCCGCGCGGCCGCGCUAGAAUGGAGGCGCCCAGCGGCAGCGAGCCCGGCGGCGACGGGGCCGGGGACUGCGCCCACCCGGACCCCCGGGCCCCUGGCGCCGCGGCGCCCAGCUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[33.00663757 177.48489380]
[29.93558121 162.80264282]
[35.90218353 149.04115295]
[21.97238731 154.60540771]
[8.11419487 160.34565735]
[-5.67017269 166.26098633]
[-19.45454025 172.17633057]
[-33.23890686 178.09167480]
[-47.02327347 184.00700378]
[-52.56959152 195.73426819]
[-64.26330566 200.34619141]
[-75.57322693 195.85787964]
[-89.50302124 201.42213440]
[-94.00959778 206.51036072]
[-99.58289337 208.21322632]
[-104.28198242 206.89566040]
[-118.47571564 211.74722290]
[-132.66946411 216.59880066]
[-146.86320496 221.45036316]
[-161.05694580 226.30194092]
[-165.49822998 241.16983032]
[-177.85086060 250.56091309]
[-193.36497498 250.86410522]
[-206.07508850 241.96282959]
[-211.09388733 227.27981567]
[-206.49157715 212.46096802]
[-194.03779602 203.20443726]
[-178.52131653 203.06956482]
[-165.90850830 212.10820007]
[-151.71476746 207.25662231]
[-137.52102661 202.40505981]
[-123.32728577 197.55348206]
[-109.13354492 192.70191956]
[-95.06726837 187.49234009]
[-81.13747406 181.92808533]
[-71.10948181 167.58602905]
[-52.93861008 170.22264099]
[-39.15424347 164.30729675]
[-25.36987686 158.39196777]
[-11.58551025 152.47662354]
[2.19885683 146.56129456]
[7.16133881 140.96850586]
[16.40814400 140.67561340]
[30.33793831 135.11135864]
[43.63333893 128.16641235]
[56.15791702 119.91202545]
[68.68249512 111.65763092]
[81.20706940 103.40324402]
[84.22652435 89.23182678]
[96.32485962 81.25834656]
[110.53853607 84.07218170]
[123.06311798 75.81778717]
[135.58769226 67.56340027]
[148.11227417 59.30900574]
[155.37724304 45.25444412]
[170.26193237 44.71114731]
[182.78651428 36.45675659]
[188.30932617 29.03463936]
[195.73457336 28.15659523]
[208.46424866 20.22213554]
[221.19390869 12.28767586]
[228.81259155 -1.57833457]
[243.70626831 -1.74438787]
[256.43594360 -9.67884827]
[269.16558838 -17.61330795]
[281.89526367 -25.54776764]
[294.62493896 -33.48222733]
[307.35458374 -41.41668701]
[320.08425903 -49.35115051]
[305.35180664 -52.17165756]
[293.79244995 -61.73100662]
[288.25646973 -75.67205811]
[290.10894775 -90.55723572]
[298.89306641 -102.71614838]
[312.44284058 -109.15066528]
[327.41723633 -108.27416229]
[340.12377930 -100.30276489]
[347.42938232 -87.20206451]
[347.53256226 -72.20241547]
[340.40875244 -59.00333405]
[354.60250854 -63.85490417]
[368.79623413 -68.70647430]
[382.98999023 -73.55804443]
[397.18371582 -78.40961456]
[407.55694580 -91.11112213]
[423.69772339 -88.21169281]
[429.00183105 -72.69401550]
[418.01284790 -60.52133560]
[402.03527832 -64.21587372]
[387.84155273 -59.36430359]
[373.64779663 -54.51273346]
[359.45407104 -49.66116333]
[345.26031494 -44.80959320]
[339.03189087 -37.25729370]
[328.01870728 -36.62148666]
[315.28906250 -28.68702507]
[302.55938721 -20.75256538]
[289.82971191 -12.81810474]
[277.10006714 -4.88364410]
[264.37039185 3.05081582]
[251.64073181 10.98527622]
[244.93255615 24.28376007]
[229.12837219 25.01733971]
[216.39869690 32.95180130]
[203.66903687 40.88626099]
[191.04090881 48.98133469]
[178.51632690 57.23572540]
[172.14720154 70.69987488]
[156.36665344 71.83358765]
[143.84208679 80.08797455]
[131.31750488 88.34236908]
[118.79293060 96.59675598]
[115.77347565 110.76817322]
[103.67514038 118.74165344]
[89.46146393 115.92781830]
[76.93688202 124.18221283]
[64.41230774 132.43659973]
[51.88772964 140.69099426]
[66.59183502 143.65568542]
[76.88776398 154.56411743]
[78.99874878 169.41482544]
[72.15042877 182.76025391]
[58.85492325 189.70500183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[12 35]
[13 34]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[45 118]
[46 117]
[47 116]
[48 115]
[51 112]
[52 111]
[53 110]
[54 109]
[56 107]
[57 106]
[59 105]
[60 104]
[61 103]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
