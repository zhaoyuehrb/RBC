%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGAGUAGAGGGCAGAGCUCCCACCCCGCCCCGCCCCCAGGGGGCGCCCCGGGCCCGGCGCGAGAGGAGGCAGAGGGGGCGUCAGGCCGCGGGAGAGGAGGCCAUGGGCGCGCGCGGGGCGCUGCUGCUGGCGCUGCUGCUGGCUCGGGCUGGACUCAGGAAGCCGGAGUCGCAGGAGGCGGCGCCGUUAUCAGGACCAUGCG\
) } def
/len { sequence length } bind def

/coor [
[77.54618835 144.97064209]
[77.31854248 129.97236633]
[62.65586472 126.80916595]
[56.26505661 140.37963867]
[49.87424850 153.95010376]
[43.48344040 167.52056885]
[37.09263229 181.09103394]
[30.70182228 194.66149902]
[24.31101227 208.23196411]
[33.13849258 220.80062866]
[34.48300171 236.10055542]
[27.98287392 250.01615906]
[15.38660717 258.80419922]
[0.08253782 260.10073853]
[-13.81261826 253.55702209]
[-22.56113243 240.93327332]
[-23.80970001 225.62521362]
[-17.22246170 211.75064087]
[-4.57135057 203.04173279]
[10.74054623 201.84115601]
[17.13135529 188.27069092]
[23.52216339 174.70022583]
[29.91297340 161.12976074]
[36.30377960 147.55929565]
[42.69459152 133.98883057]
[49.08539963 120.41835785]
[58.85092926 111.22029114]
[69.89994049 104.58028412]
[81.76998901 100.65323639]
[93.98213196 99.52132416]
[83.17623138 89.11783600]
[72.37033844 78.71434784]
[61.56443787 68.31086731]
[50.75853729 57.90737534]
[39.95264053 47.50388718]
[29.14674187 37.10039902]
[18.34084320 26.69691277]
[3.75396657 23.20076752]
[-10.59392834 27.57545662]
[-24.94182396 31.95014572]
[-38.32897949 42.35304642]
[-52.03126526 32.36887360]
[-46.23044968 16.43818474]
[-29.31651306 17.60224915]
[-14.96861744 13.22756100]
[-0.62072247 8.85287189]
[3.86271691 -5.46141386]
[-5.42592669 -17.23940659]
[-14.71457100 -29.01739883]
[-24.00321388 -40.79539108]
[-68.00302124 -43.42987442]
[-79.85115814 -52.62887573]
[-91.69929504 -61.82787704]
[-103.54743195 -71.02687836]
[-115.46503448 -80.13570404]
[-127.45141602 -89.15383911]
[-139.43778992 -98.17196655]
[-151.42417908 -107.19010162]
[-167.10351562 -109.30406952]
[-172.62203979 -123.13863373]
[-184.60841370 -132.15676880]
[-196.59480286 -141.17489624]
[-208.58117676 -150.19303894]
[-220.56756592 -159.21116638]
[-233.09468079 -150.70529175]
[-247.70556641 -146.73025513]
[-262.81530762 -147.71723938]
[-276.78494263 -153.55915833]
[-288.09915161 -163.62236023]
[-295.53060913 -176.81523132]
[-298.27325439 -191.70672607]
[-296.02954102 -206.68153381]
[-289.04290771 -220.11528015]
[-278.07116699 -230.55076599]
[-264.30447388 -236.85606384]
[-249.23611450 -238.34719849]
[-234.50061035 -234.86241150]
[-221.69635010 -226.77973938]
[-212.21226501 -214.97589111]
[-207.07707214 -200.73129272]
[-206.84783936 -185.59107971]
[-211.54942322 -171.19754028]
[-199.56304932 -162.17941284]
[-187.57667542 -153.16128540]
[-175.59028625 -144.14314270]
[-163.60391235 -135.12501526]
[-148.78192139 -133.65608215]
[-142.40603638 -119.17648315]
[-130.41966248 -110.15834808]
[-118.43328094 -101.14022064]
[-106.44690704 -92.12208557]
[-99.20969391 -90.61224365]
[-94.34843445 -82.87501526]
[-82.50029755 -73.67601013]
[-70.65215302 -64.47701263]
[-58.80401993 -55.27801132]
[-51.85869980 -58.10865402]
[-57.84618378 -71.86183929]
[-67.28545380 -83.51946259]
[-59.28824234 -96.20979309]
[-44.69867325 -92.72489929]
[-43.30000305 -77.79029846]
[-37.96806335 -63.76994324]
[-31.02274323 -66.60058594]
[-28.98024368 -81.46087646]
[-26.93774414 -96.32116699]
[-30.77100563 -112.83608246]
[-15.96265125 -121.09132385]
[-3.93066883 -109.14696503]
[-12.07745457 -94.27866364]
[-14.11995411 -79.41837311]
[-16.16245461 -64.55809021]
[-12.22522259 -50.08403397]
[-2.93657851 -38.30604172]
[6.35206509 -26.52804947]
[15.64070892 -14.75005817]
[28.74433136 15.89101410]
[39.55022812 26.29450226]
[50.35612869 36.69799042]
[61.16202545 47.10147858]
[71.96792603 57.50496674]
[82.77382660 67.90845490]
[93.57971954 78.31194305]
[104.38562012 88.71543121]
[117.75588226 95.51514435]
[132.52799988 98.11986542]
[147.30010986 100.72458649]
[162.23420715 95.50120544]
[173.42454529 105.33103180]
[188.19667053 107.93575287]
[203.13075256 102.71237183]
[214.32109070 112.54219055]
[229.09321594 115.14691925]
[243.86532593 117.75164032]
[258.63745117 120.35636139]
[273.40957642 122.96108246]
[288.18167114 125.56581116]
[302.95379639 128.17053223]
[317.72592163 130.77525330]
[332.49801636 133.37997437]
[347.27014160 135.98469543]
[362.11450195 138.13990784]
[377.01742554 139.84361267]
[385.90219116 137.70872498]
[392.13299561 141.68792725]
[407.00836182 143.61759949]
[421.88369751 145.54727173]
[436.75906372 147.47694397]
[451.63442993 149.40663147]
[466.31530762 143.50894165]
[477.94143677 152.81924438]
[492.81680298 154.74893188]
[507.69216919 156.67860413]
[522.56750488 158.60827637]
[531.83044434 146.35697937]
[545.98419189 140.39326477]
[561.22161865 142.32136536]
[573.44378662 151.62260437]
[579.36309814 165.79502869]
[577.38726807 181.02629089]
[568.04779053 193.21928406]
[553.85687256 199.09414673]
[538.63183594 197.07057190]
[526.46820068 187.69288635]
[520.63787842 173.48364258]
[505.76248169 171.55397034]
[490.88714600 169.62428284]
[476.01177979 167.69461060]
[462.39489746 173.73031616]
[449.70474243 164.28198242]
[434.82940674 162.35231018]
[419.95404053 160.42263794]
[405.07867432 158.49295044]
[390.20330811 156.56327820]
[375.31372070 154.74653625]
[360.41079712 153.04283142]
[358.13354492 154.68263245]
[355.06851196 155.51773071]
[351.51950073 155.24317932]
[347.89508057 153.66972351]
[344.66543579 150.75682068]
[329.89331055 148.15208435]
[315.12118530 145.54736328]
[300.34906006 142.94264221]
[285.57696533 140.33792114]
[270.80484009 137.73320007]
[256.03271484 135.12847900]
[241.26060486 132.52375793]
[226.48849487 129.91903687]
[211.71636963 127.31430817]
[197.83888245 132.72399902]
[185.59193420 122.70787048]
[170.81982422 120.10314178]
[156.94233704 125.51283264]
[144.69538879 115.49670410]
[129.92327881 112.89198303]
[115.15116119 110.28725433]
[109.44257355 115.15162659]
[123.57645416 120.17491913]
[126.29298401 134.92687988]
[114.87559509 144.65536499]
[100.74182892 139.63175964]
[98.02540588 124.88035583]
[92.31681824 129.74472046]
[92.54446411 144.74299622]
[95.02731323 163.96499634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 205]
[2 204]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[9 20]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[35 119]
[36 118]
[37 117]
[38 46]
[39 45]
[40 44]
[47 116]
[48 115]
[49 114]
[50 113]
[51 96]
[52 95]
[53 94]
[54 93]
[55 91]
[56 90]
[57 89]
[58 88]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[104 112]
[105 111]
[106 110]
[125 197]
[126 196]
[127 195]
[129 193]
[130 192]
[132 190]
[133 189]
[134 188]
[135 187]
[136 186]
[137 185]
[138 184]
[139 183]
[140 182]
[141 181]
[142 176]
[143 175]
[145 174]
[146 173]
[147 172]
[148 171]
[149 170]
[151 168]
[152 167]
[153 166]
[154 165]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
