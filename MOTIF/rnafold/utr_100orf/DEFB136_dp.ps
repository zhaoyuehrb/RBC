%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:38 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DEFB136)
} def

/sequence { (\
AUGAACCUCUGUCUUUCUGCAUUACUCUUUUUCCUGGUGAUCUUACUGCCUUCAGGAAAAGGUAUGUUUGGGAAUGAUGGAGUCAAAGUUCGCACCUGCA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 89 0.020295608 ubox
2 85 0.287968718 ubox
2 88 0.021620511 ubox
2 92 0.390982769 ubox
2 94 0.012316321 ubox
2 100 0.005045736 ubox
3 84 0.319639965 ubox
3 90 0.006234858 ubox
3 91 0.928938524 ubox
3 93 0.010071596 ubox
3 99 0.003387399 ubox
4 83 0.296616329 ubox
4 89 0.006666165 ubox
4 90 0.929589787 ubox
5 83 0.083137674 ubox
5 89 0.929556188 ubox
6 80 0.003462841 ubox
6 82 0.079823683 ubox
6 88 0.929306080 ubox
7 79 0.003482134 ubox
7 80 0.003618726 ubox
7 82 0.994927984 ubox
7 88 0.005076782 ubox
8 79 0.003175142 ubox
8 81 0.999697401 ubox
8 87 0.004622162 ubox
9 79 0.003241288 ubox
9 80 0.999942539 ubox
10 79 0.995988219 ubox
11 78 0.995891087 ubox
12 73 0.003528474 ubox
12 77 0.999675609 ubox
13 72 0.003739690 ubox
13 76 0.996613161 ubox
14 71 0.003933568 ubox
14 72 0.005022321 ubox
14 73 0.058769895 ubox
14 74 0.520774673 ubox
15 70 0.003370385 ubox
15 71 0.005127917 ubox
15 72 0.064796447 ubox
15 73 0.546160231 ubox
15 74 0.771443813 ubox
16 70 0.004645453 ubox
16 71 0.067538334 ubox
16 72 0.546927150 ubox
16 73 0.832498088 ubox
17 70 0.069407517 ubox
17 71 0.548447528 ubox
17 72 0.832554326 ubox
18 70 0.524331227 ubox
18 71 0.813568183 ubox
19 67 0.703557327 ubox
19 69 0.184080503 ubox
20 66 0.718539000 ubox
20 70 0.321423013 ubox
21 65 0.707793441 ubox
21 67 0.181791458 ubox
21 69 0.318664685 ubox
22 64 0.543160823 ubox
22 66 0.177350636 ubox
23 64 0.466916153 ubox
23 66 0.444319354 ubox
23 70 0.003655118 ubox
24 63 0.632372786 ubox
24 65 0.452775738 ubox
24 67 0.200032619 ubox
25 61 0.193519940 ubox
25 62 0.623117497 ubox
25 66 0.202168339 ubox
26 60 0.168137992 ubox
26 61 0.358003820 ubox
26 62 0.123925328 ubox
27 61 0.495627221 ubox
27 62 0.743761582 ubox
28 58 0.013044798 ubox
28 59 0.031015114 ubox
28 60 0.447386097 ubox
28 61 0.757722122 ubox
28 62 0.003191500 ubox
29 57 0.010718660 ubox
29 58 0.023170871 ubox
29 59 0.387796422 ubox
29 60 0.858288407 ubox
29 61 0.005713822 ubox
30 56 0.009962029 ubox
30 57 0.010754133 ubox
30 58 0.317161753 ubox
30 59 0.915810113 ubox
30 60 0.010746693 ubox
31 55 0.009652005 ubox
31 56 0.005948862 ubox
31 57 0.229952404 ubox
31 58 0.944356514 ubox
31 59 0.010257018 ubox
32 54 0.008757979 ubox
32 55 0.005059142 ubox
32 56 0.075294439 ubox
32 57 0.972161684 ubox
32 58 0.007781579 ubox
33 55 0.071889469 ubox
33 56 0.997059791 ubox
34 55 0.997263861 ubox
35 48 0.018925066 ubox
35 54 0.995114612 ubox
36 43 0.009618868 ubox
36 47 0.088608538 ubox
36 50 0.349820995 ubox
36 51 0.016604272 ubox
36 52 0.007414550 ubox
36 53 0.931258085 ubox
37 41 0.003311209 ubox
37 42 0.023378378 ubox
37 43 0.005063356 ubox
37 46 0.213025977 ubox
37 49 0.399068464 ubox
37 50 0.036083497 ubox
37 51 0.023993908 ubox
37 52 0.822263922 ubox
38 45 0.217319820 ubox
38 48 0.397160484 ubox
38 54 0.024604230 ubox
39 44 0.199662929 ubox
39 47 0.313427348 ubox
39 52 0.040108147 ubox
39 53 0.034164827 ubox
40 51 0.050800902 ubox
40 52 0.038309518 ubox
48 53 0.003721710 ubox
82 93 0.003229698 ubox
83 92 0.003373918 ubox
84 98 0.006863585 ubox
85 97 0.006634034 ubox
87 97 0.026069121 ubox
88 95 0.028258008 ubox
88 96 0.026300128 ubox
88 99 0.099746059 ubox
89 94 0.026331429 ubox
89 98 0.099540116 ubox
91 98 0.014483974 ubox
92 97 0.012162570 ubox
92 99 0.809552385 ubox
93 98 0.809948878 ubox
3 91 0.9500000 lbox
4 90 0.9500000 lbox
5 89 0.9500000 lbox
6 88 0.9500000 lbox
7 82 0.9500000 lbox
8 81 0.9500000 lbox
9 80 0.9500000 lbox
10 79 0.9500000 lbox
11 78 0.9500000 lbox
12 77 0.9500000 lbox
13 76 0.9500000 lbox
15 74 0.9500000 lbox
16 73 0.9500000 lbox
17 72 0.9500000 lbox
18 71 0.9500000 lbox
23 66 0.9500000 lbox
24 65 0.9500000 lbox
27 62 0.9500000 lbox
28 61 0.9500000 lbox
29 60 0.9500000 lbox
30 59 0.9500000 lbox
31 58 0.9500000 lbox
32 57 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
35 54 0.9500000 lbox
36 53 0.9500000 lbox
37 52 0.9500000 lbox
92 99 0.9500000 lbox
93 98 0.9500000 lbox
showpage
end
%%EOF
