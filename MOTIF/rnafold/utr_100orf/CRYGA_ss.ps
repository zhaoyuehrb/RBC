%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCUGUCAACAACCAUGGGGAAGAUCACCUUCUACGAGGACCGAGACUUUCAGGGUCGCUGCUACAAUUGCAUCAGUGACUGCCCCAACCUGCGGGUCUACUUCAGCCGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[70.16022491 106.70803070]
[55.16554642 106.30871582]
[40.17086029 105.90940857]
[25.17617607 105.51010132]
[10.18149185 105.11079407]
[-2.92859530 118.64654541]
[-21.45543671 118.43933105]
[-33.83012009 105.07708740]
[-48.82480621 105.47639465]
[-63.81948853 105.87570953]
[-70.13166046 119.72914886]
[-81.78526306 129.42866516]
[-96.43460846 133.09156799]
[-111.16108704 130.04331970]
[-123.05464935 120.94097900]
[-129.78881836 107.63246918]
[-144.78349304 108.03177643]
[-158.37280273 116.13369751]
[-171.30154419 108.73794556]
[-186.29621887 109.13726044]
[-199.88552856 117.23918152]
[-212.81427002 109.84342957]
[-227.80894470 110.24273682]
[-242.80363464 110.64204407]
[-257.79830933 111.04135132]
[-272.79299927 111.44065857]
[-284.83016968 122.04662323]
[-300.60150146 119.10654449]
[-308.00863647 104.87579346]
[-301.36938477 90.27098846]
[-285.77688599 86.49568939]
[-273.19232178 96.44597626]
[-258.19763184 96.04666901]
[-243.20294189 95.64736176]
[-228.20825195 95.24805450]
[-213.21357727 94.84874725]
[-200.69677734 86.77538300]
[-186.69552612 94.14257050]
[-171.70085144 93.74326324]
[-159.18405151 85.66989899]
[-145.18280029 93.03708649]
[-130.18812561 92.63777924]
[-124.17180634 78.98972321]
[-112.77955627 69.26728058]
[-98.23618317 65.43957520]
[-83.41265106 68.31762695]
[-71.25933838 77.38316345]
[-64.21879578 90.88101959]
[-49.22411346 90.48171234]
[-34.22942734 90.08240509]
[-28.26626778 80.18119049]
[-18.13031197 74.37944794]
[-6.33138847 74.24922943]
[4.14226055 79.94106293]
[10.58080006 90.11611176]
[25.57548332 90.51541901]
[40.57016754 90.91472626]
[55.56485367 91.31403351]
[70.55953979 91.71334076]
[76.02077484 81.01563263]
[85.18026733 73.24583435]
[96.62538147 69.60227966]
[108.59095001 70.64688873]
[116.20594025 57.72357941]
[123.82093048 44.80026627]
[118.43296051 30.12021828]
[123.79029083 15.42896080]
[137.36334229 7.66325808]
[152.74334717 10.48983669]
[162.66833496 22.57407379]
[162.45201111 38.21015930]
[152.19654846 50.01521683]
[136.74423218 52.41525269]
[129.12925720 65.33856201]
[121.51426697 78.26187897]
[129.03681946 90.39413452]
[130.23365784 104.61904144]
[144.05334473 110.45140076]
[157.87301636 116.28376770]
[171.69270325 122.11612701]
[185.51237488 127.94849396]
[201.23509216 126.18586731]
[209.95242310 138.26300049]
[223.77210999 144.09536743]
[237.59178162 149.92773438]
[249.65264893 139.09706116]
[265.16516113 134.59646606]
[281.03561401 137.27114868]
[294.12164307 146.54048157]
[301.85433960 160.52317810]
[302.74261475 176.41888428]
[316.71264648 181.88130188]
[330.68267822 187.34370422]
[346.80541992 184.34538269]
[357.25628662 196.98306274]
[351.28436279 212.25617981]
[335.03305054 214.45306396]
[325.22027588 201.31375122]
[311.25024414 195.85133362]
[297.28018188 190.38893127]
[287.54510498 200.36618042]
[274.69265747 205.87492371]
[260.66693115 206.04571533]
[247.60343933 200.81925964]
[237.50381470 190.96054077]
[231.92932129 177.94705200]
[231.75942993 163.74740601]
[217.93974304 157.91503906]
[204.12007141 152.08268738]
[189.38583374 154.26248169]
[179.68000793 141.76817322]
[165.86033630 135.93580627]
[152.04064941 130.10343933]
[138.22097778 124.27108002]
[124.40129852 118.43872070]
[110.64094543 128.67367554]
[93.53497314 129.89335632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 59]
[2 58]
[3 57]
[4 56]
[5 55]
[8 50]
[9 49]
[10 48]
[16 42]
[17 41]
[19 39]
[20 38]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[63 75]
[64 74]
[65 73]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[83 109]
[84 108]
[85 107]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
