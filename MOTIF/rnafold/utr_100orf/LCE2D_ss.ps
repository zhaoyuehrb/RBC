%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUGCAUGUGACCAGGGUUGACUAAACUCCUGCCAGGAUGUCUUGCCAGCAAAACCAGCAGCAGUGCCAGCCCCCUCCCAAAUGUCCUCCCAAGUGUACCCCAAAAUGUCCACCUAAGUGUCCCCCCAAAUGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[96.32456970 307.53988647]
[94.98948669 292.59942627]
[86.15010071 280.61132812]
[92.62840271 266.17724609]
[91.29332733 251.23678589]
[89.95825195 236.29632568]
[88.62316895 221.35585022]
[75.84561157 216.41334534]
[66.41144562 206.38775635]
[62.21376801 193.20722961]
[64.13093567 179.44094849]
[71.84347534 167.79830933]
[83.88563538 160.59570312]
[82.88374329 145.62921143]
[81.88185883 130.66270447]
[78.85451508 117.40351105]
[81.94046021 106.39148712]
[89.07237244 99.90908813]
[76.08198547 92.40908813]
[63.09160614 84.90908813]
[50.10122681 77.40908813]
[37.11084366 69.90908813]
[24.12046432 62.40908813]
[14.70341587 67.71627045]
[4.01027155 68.58497620]
[-5.98742533 64.92325592]
[-13.47487259 57.46821594]
[-17.12338829 47.63875580]
[-16.32589149 37.26582336]
[-28.78631783 28.91490936]
[-41.24674606 20.56399536]
[-57.01805115 19.30839729]
[-63.28296280 5.79543591]
[-75.74339294 -2.55547714]
[-88.20381927 -10.90639019]
[-100.66424561 -19.25730324]
[-113.49980164 -17.53259087]
[-123.72274780 -24.81056023]
[-126.13330841 -36.71607590]
[-138.40458679 -45.34252167]
[-158.49366760 -46.14550400]
[-166.02944946 -63.90142822]
[-178.67283630 -71.97266388]
[-191.31622314 -80.04389954]
[-206.17915344 -75.18314362]
[-220.66992188 -81.06123352]
[-227.94639587 -94.90272522]
[-224.57286072 -110.17208099]
[-212.14221191 -119.65958405]
[-196.52378845 -118.88552094]
[-185.09216309 -108.21538544]
[-183.24497986 -92.68728638]
[-170.60159302 -84.61605072]
[-157.95822144 -76.54481506]
[-148.12052917 -79.65242004]
[-137.99671936 -76.72907257]
[-131.04455566 -68.51914978]
[-129.77815247 -57.61380768]
[-117.50685883 -48.98736191]
[-100.00192261 -48.40874100]
[-92.31333160 -31.71773148]
[-79.85290527 -23.36681747]
[-67.39247894 -15.01590443]
[-54.93205261 -6.66499090]
[-40.05199814 -6.00670576]
[-32.89583206 8.10356808]
[-20.43540382 16.45448112]
[-7.97497749 24.80539513]
[10.71791935 19.57082558]
[27.55835915 29.81951141]
[31.62046432 49.41870499]
[44.61084366 56.91870499]
[57.60122681 64.41870880]
[70.59160614 71.91870880]
[83.58198547 79.41870880]
[96.57237244 86.91870880]
[84.43740082 78.10153198]
[75.20199585 66.28174591]
[69.58132172 52.37462616]
[68.01061249 37.45709229]
[70.61149597 22.68430138]
[77.18257904 9.20020390]
[87.21501923 -1.95103788]
[99.93193817 -9.90591335]
[114.34857941 -14.04842472]
[129.34857178 -14.05779171]
[143.77038574 -9.93328953]
[156.49722290 -1.99430323]
[166.54357910 9.14439964]
[173.13150024 22.62027931]
[175.75083923 37.38981247]
[174.19876099 52.30929565]
[168.59545898 66.22342682]
[159.37481689 78.05473328]
[147.25086975 86.88705444]
[133.16244507 92.03644562]
[118.20536041 93.10448456]
[133.19697571 93.60570526]
[148.18859863 94.10693359]
[162.23960876 86.83508301]
[174.70123291 94.99334717]
[189.69285583 95.49456787]
[199.12135315 83.17047882]
[214.00265503 78.77429199]
[228.61459351 83.99642181]
[237.33859253 96.82885742]
[236.82009888 112.33726501]
[227.25846863 124.55834961]
[212.33035278 128.79284668]
[197.77590942 123.41251373]
[189.19163513 110.48619080]
[174.20001221 109.98497009]
[161.22129822 117.29266357]
[147.68737793 109.09855652]
[132.69575500 108.59732819]
[117.70413208 108.09610748]
[112.49018860 113.48728180]
[127.04194641 117.12683105]
[131.16596985 131.54876709]
[120.73828888 142.33131409]
[106.18646240 138.69204712]
[102.06230164 124.26963806]
[96.84835815 129.66081238]
[97.85025024 144.62731934]
[98.85214233 159.59382629]
[113.73707581 166.70466614]
[122.97171783 180.26074219]
[124.12684631 196.52877808]
[116.98281097 211.08560181]
[103.56363678 220.02078247]
[104.89871216 234.96124268]
[106.23379517 249.90171814]
[107.56887054 264.84219360]
[116.50375366 277.89892578]
[109.92995453 291.26434326]
[111.26503754 306.20480347]
[122.60211945 317.55603027]
[120.65283203 333.48022461]
[106.91251373 341.76168823]
[91.92154694 336.04763794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[4 133]
[5 132]
[6 131]
[7 130]
[13 125]
[14 124]
[15 123]
[18 76]
[19 75]
[20 74]
[21 73]
[22 72]
[23 71]
[29 68]
[30 67]
[31 66]
[33 64]
[34 63]
[35 62]
[36 61]
[39 59]
[40 58]
[42 54]
[43 53]
[44 52]
[97 116]
[98 115]
[99 114]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
