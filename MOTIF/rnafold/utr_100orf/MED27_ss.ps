%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGCGAAGCCGGCUUUGGAGAGCUGCUGUGGCGGCGGCAACAUGGCGGACGUGAUAAAUGUCAGUGUGAACCUGGAGGCCUUUUCCCAGGCCAUUAGUGCCAUCCAGGCGCUGCGCUCCAGCGUGAGCAGGGUGUUCGACU\
) } def
/len { sequence length } bind def

/coor [
[93.92485809 272.26654053]
[79.32978058 267.26779175]
[69.77207184 255.15773010]
[68.30155945 239.80059814]
[75.38747406 226.09683228]
[88.76873779 218.41923523]
[89.42302704 203.43351746]
[90.07731628 188.44778442]
[90.73160553 173.46206665]
[91.22238922 158.47009277]
[91.54961395 143.47366333]
[91.87683868 128.47723389]
[81.21361542 122.89127350]
[73.65469360 113.52271271]
[59.01025772 116.76930237]
[44.36581421 120.01589966]
[32.56742096 130.55670166]
[18.46717834 125.75748444]
[3.82273793 129.00408936]
[-0.53232288 140.16297913]
[-9.66316986 147.72911072]
[-21.20034027 149.89073181]
[-32.22251892 146.21928406]
[-39.99620819 137.74841309]
[-54.76832581 140.35313416]
[-69.54044342 142.95785522]
[-84.31255341 145.56257629]
[-99.08467102 148.16729736]
[-113.85678864 150.77201843]
[-128.62890625 153.37675476]
[-143.17747498 162.08166504]
[-155.56964111 150.51142883]
[-147.88206482 135.40058899]
[-131.23362732 138.60462952]
[-116.46150970 135.99990845]
[-101.68939972 133.39518738]
[-86.91728210 130.79046631]
[-72.14516449 128.18574524]
[-57.37304688 125.58101654]
[-42.60092926 122.97629547]
[-33.09509659 107.39617157]
[-14.92491627 103.57138824]
[0.57614374 114.35964203]
[15.22058392 111.11304474]
[25.97150993 100.80446625]
[41.11922073 105.37145996]
[55.76366043 102.12486267]
[70.40810394 98.87827301]
[72.17273712 89.87170410]
[76.61026001 81.83798981]
[67.47883606 69.93769073]
[58.34741211 58.03739166]
[49.21599197 46.13708878]
[40.08457184 34.23678970]
[24.43045998 30.72560883]
[17.54529953 16.23512459]
[24.71079445 1.88119745]
[40.43019104 -1.32506919]
[52.64491272 9.07589817]
[51.98487091 25.10536766]
[61.11629105 37.00566864]
[70.24771118 48.90596771]
[79.37913513 60.80626678]
[88.51055908 72.70656586]
[101.23505402 70.41261292]
[113.72410583 73.75904846]
[123.59686279 82.10791779]
[137.45506287 76.36766815]
[151.31324768 70.62741089]
[157.42974854 56.30169678]
[171.56570435 50.67768097]
[185.18539429 56.59711456]
[199.04357910 50.85686111]
[212.83833313 44.96578598]
[226.56800842 38.92458725]
[240.29768372 32.88338470]
[254.02735901 26.84218597]
[267.75701904 20.80098534]
[279.45529175 11.41213322]
[288.32495117 -0.68453616]
[297.19458008 -12.78120518]
[306.06423950 -24.87787437]
[314.93386841 -36.97454453]
[312.28225708 -52.55480194]
[321.49221802 -65.39817810]
[337.09963989 -67.88491821]
[349.84490967 -58.53969193]
[352.16650391 -42.90684891]
[342.68704224 -30.26108170]
[327.03054810 -28.10489845]
[318.16088867 -16.00823021]
[309.29125977 -3.91156054]
[300.42160034 8.18510818]
[291.55197144 20.28177834]
[295.23089600 26.81748772]
[302.58874512 39.88890457]
[306.26766968 46.42461395]
[321.21060181 45.11727905]
[336.15350342 43.80994415]
[351.09643555 42.50260544]
[366.03933716 41.19527054]
[380.98226929 39.88793564]
[395.92520142 38.58059692]
[407.29742432 27.26461220]
[423.21798706 29.24345779]
[431.47393799 42.99913406]
[425.73205566 57.97946548]
[410.39700317 62.69282150]
[397.23251343 53.52351761]
[382.28961182 54.83085632]
[367.34667969 56.13819122]
[352.40377808 57.44552612]
[337.46084595 58.75286484]
[322.51791382 60.06019974]
[307.57501221 61.36753464]
[293.11859131 59.23748398]
[282.09020996 52.77516556]
[275.56076050 43.85395050]
[273.79821777 34.53065872]
[260.06854248 40.57185745]
[246.33888245 46.61305618]
[232.60920715 52.65425873]
[218.87953186 58.69545746]
[213.98693848 64.31085968]
[204.78382874 64.71505737]
[190.92564392 70.45530701]
[185.48074341 84.27155304]
[171.50833130 90.29039764]
[157.05349731 84.48560333]
[143.19531250 90.22586060]
[129.33711243 95.96611023]
[124.44150543 116.71978760]
[106.87326813 128.80445862]
[106.54604340 143.80088806]
[106.21882629 158.79731750]
[109.17766571 167.52117920]
[105.71733093 174.11636353]
[105.06304169 189.10208130]
[104.40874481 204.08779907]
[103.75445557 219.07353210]
[116.41564941 227.88816833]
[122.28023529 242.15736389]
[119.47686005 257.32788086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 140]
[7 139]
[8 138]
[9 137]
[10 135]
[11 134]
[12 133]
[14 48]
[15 47]
[16 46]
[18 44]
[19 43]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[67 131]
[68 130]
[69 129]
[72 126]
[73 125]
[74 123]
[75 122]
[76 121]
[77 120]
[78 119]
[79 94]
[80 93]
[81 92]
[82 91]
[83 90]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
