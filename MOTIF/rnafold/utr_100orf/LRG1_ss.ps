%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCUACCAUGUCCUCUUGGAGCAGACAGCGACCAAAAAGCCCAGGGGGCAUUCAACCCCAUGUUUCUAGAACUCUGUUCCUGCUGCUGCUGUUGGCAGCCUCAGCCU\
) } def
/len { sequence length } bind def

/coor [
[126.25738525 286.32601929]
[125.41632843 271.34963989]
[116.97757721 259.07620239]
[123.92892456 244.86392212]
[123.08786774 229.88751221]
[122.24681091 214.91111755]
[121.19579315 199.94798279]
[119.93503571 185.00105286]
[111.15538025 172.96914673]
[117.70539093 158.56747437]
[116.44463348 143.62055969]
[115.18387604 128.67362976]
[108.61970520 125.04573822]
[95.77185059 132.78735352]
[95.49134827 117.78995514]
[88.92717743 114.16206360]
[75.60048676 121.04679108]
[67.20642853 135.13479614]
[50.81478500 134.63880920]
[43.28787613 120.06905365]
[52.36873627 106.41365051]
[68.71575928 107.72010803]
[82.04244995 100.83538055]
[90.89322662 88.72490692]
[93.40582275 73.93684387]
[95.91841888 59.14877319]
[98.43100739 44.36071014]
[100.94360352 29.57264519]
[99.28435516 20.44023323]
[103.73963165 14.40750980]
[106.66598511 -0.30426940]
[109.59233856 -15.01604843]
[112.51869965 -29.72782707]
[115.44505310 -44.43960571]
[106.30895233 -50.85984039]
[99.91104126 -59.95907593]
[96.98329926 -70.64566803]
[97.84352112 -81.64947510]
[102.36106110 -91.67288208]
[109.97570801 -99.54373932]
[119.76699829 -104.35248566]
[118.92594147 -119.32888794]
[118.08488464 -134.30528259]
[117.24382782 -149.28169250]
[106.17382812 -157.10415649]
[101.73916626 -169.70606995]
[105.36319733 -182.36137390]
[115.49091339 -190.46144104]
[115.07022095 -205.45555115]
[114.64952850 -220.44964600]
[114.22883606 -235.44374084]
[101.34880829 -244.09733582]
[96.04672241 -258.68045044]
[100.36134338 -273.58560181]
[112.63360596 -283.08145142]
[128.14457703 -283.51666260]
[140.92997742 -274.72384644]
[146.07354736 -260.08407593]
[141.59748840 -245.22659302]
[129.22293091 -235.86444092]
[129.64363098 -220.87034607]
[130.06431580 -205.87623596]
[130.48501587 -190.88214111]
[143.16706848 -179.93608093]
[144.09625244 -162.87290955]
[132.22023010 -150.12274170]
[133.06127930 -135.14634705]
[133.90234375 -120.16994476]
[134.74339294 -105.19354248]
[140.90658569 -103.39147186]
[146.57974243 -100.38352966]
[151.52973938 -96.29331207]
[155.55317688 -91.28888702]
[169.71142578 -96.24307251]
[183.86967468 -101.19725800]
[198.02793884 -106.15144348]
[210.98124695 -117.08982086]
[225.07797241 -107.67076874]
[219.92938232 -91.51749420]
[202.98211670 -91.99319458]
[188.82386780 -87.03900909]
[174.66561890 -82.08482361]
[160.50737000 -77.13063812]
[153.15583801 -52.90382385]
[130.15682983 -41.51325226]
[127.23047638 -26.80147362]
[124.30412292 -12.08969402]
[121.37776184 2.62208533]
[118.45140839 17.33386421]
[115.73166656 32.08523941]
[113.21907806 46.87330246]
[110.70648193 61.66136932]
[108.19388580 76.44943237]
[105.68129730 91.23749542]
[118.77483368 91.66859436]
[130.24494934 104.88950348]
[130.13079834 127.41287231]
[131.39155579 142.35980225]
[132.65231323 157.30671692]
[141.52215576 170.40773010]
[134.88195801 183.74029541]
[136.14271545 198.68722534]
[140.03044128 207.11572266]
[137.22320557 214.07005310]
[138.06427002 229.04646301]
[138.90531921 244.02285767]
[147.40423584 257.36749268]
[140.39273071 270.50857544]
[141.23377991 285.48498535]
[148.15872192 300.96017456]
[135.20532227 311.89843750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 109]
[2 108]
[4 106]
[5 105]
[6 104]
[7 102]
[8 101]
[10 99]
[11 98]
[12 97]
[16 23]
[17 22]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[41 69]
[42 68]
[43 67]
[44 66]
[48 63]
[49 62]
[50 61]
[51 60]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
