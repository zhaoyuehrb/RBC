%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGAACGCAGGACCAGCUUCCGGGAGGCGCUCCGCACGUUUGCCGUGCUCCGCCGGGAAGAUGGGGAAAGUGAGGGGGUUGCGCGCCCGAGUGCACCAGGCUGCCGUGAGGCCGAAAGGGGAGGCCGCCCCCGGCCCCGCGCCCCCUGCCCCGGAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[97.96887207 291.55578613]
[95.02375031 306.38204956]
[87.83789062 319.68072510]
[77.05025482 330.26931763]
[63.62007904 337.20629883]
[48.74156189 339.87484741]
[33.73768997 338.03765869]
[19.94259834 331.85809326]
[8.58293819 321.88565063]
[0.66880155 309.00708008]
[-3.09609151 294.36752319]
[-2.37696934 279.26870728]
[2.76222444 265.05322266]
[11.86451530 252.98507690]
[24.12053490 244.13740540]
[38.44048691 239.29690552]
[53.55104828 238.89399719]
[57.57363892 224.44343567]
[61.59622574 209.99287415]
[65.61881256 195.54231262]
[69.64140320 181.09175110]
[73.66399384 166.64118958]
[77.68658447 152.19062805]
[81.70917511 137.74006653]
[85.73175812 123.28949738]
[74.07589722 113.76058197]
[68.64502716 98.58306122]
[72.01095581 81.73022461]
[59.02057648 74.23022461]
[49.97521973 72.63571167]
[45.85303497 66.45674133]
[33.01053238 58.70625305]
[20.16802979 50.95576477]
[7.32552528 43.20527267]
[-8.48758316 42.69915390]
[-15.38639450 29.49855995]
[-28.22889709 21.74806786]
[-41.07139969 13.99757862]
[-56.88451004 13.49145794]
[-63.78332138 0.29086438]
[-76.62582397 -7.45962620]
[-89.46833038 -15.21011639]
[-105.28143311 -15.71623707]
[-112.18024445 -28.91683006]
[-125.02275085 -36.66732025]
[-137.86524963 -44.41781235]
[-150.70776367 -52.16830063]
[-165.86877441 -48.59322357]
[-178.78250122 -56.63627243]
[-182.09735107 -71.11202240]
[-194.93984985 -78.86251068]
[-207.78236389 -86.61299896]
[-224.17999268 -86.38984680]
[-232.33845520 -100.61557770]
[-223.86502075 -114.65599060]
[-207.47644043 -114.06749725]
[-200.03187561 -99.45550537]
[-187.18936157 -91.70501709]
[-174.34686279 -83.95452118]
[-159.99440002 -87.76799011]
[-146.85987854 -80.09084320]
[-142.95726013 -65.01080322]
[-130.11476135 -57.26031494]
[-117.27226257 -49.50982285]
[-104.42975616 -41.75933456]
[-89.53523254 -41.80758286]
[-81.71783447 -28.05261993]
[-68.87533569 -20.30212975]
[-56.03282928 -12.55163956]
[-41.13830185 -12.59988594]
[-33.32091141 1.15507472]
[-20.47840691 8.90556526]
[-7.63590384 16.65605545]
[7.25862360 16.60780907]
[15.07601643 30.36277008]
[27.91851997 38.11325836]
[40.76102448 45.86375046]
[53.60352707 53.61424255]
[66.52057648 61.23984528]
[79.51095581 68.73984528]
[93.45117188 63.20175171]
[97.75321960 48.83190918]
[102.05526733 34.46206665]
[106.35731506 20.09222412]
[110.65936279 5.72238207]
[102.93898010 -8.06787491]
[107.31137085 -23.25529480]
[121.18248749 -30.82945061]
[136.32283020 -26.29672813]
[143.74990845 -12.34631443]
[139.05735779 2.74525976]
[125.02920532 10.02443027]
[120.72715759 24.39427376]
[116.42510986 38.76411438]
[112.12306213 53.13395691]
[107.82101440 67.50379944]
[121.85232544 78.91171265]
[126.76499176 94.55771637]
[141.71989441 95.72010803]
[156.67478943 96.88249207]
[171.62968445 98.04487610]
[183.57356262 88.04581451]
[198.72340393 89.43768311]
[208.18237305 100.88597870]
[223.13726807 102.04836273]
[231.98553467 99.58483887]
[238.36996460 103.38105011]
[253.29949951 104.83321381]
[268.22903442 106.28537750]
[282.71343994 99.92042542]
[294.63189697 108.85352325]
[309.56143188 110.30568695]
[324.49096680 111.75785065]
[339.42050171 113.21001434]
[354.35003662 114.66217804]
[359.18893433 112.45494843]
[363.91149902 112.36727905]
[367.71920776 113.99113464]
[370.09664917 116.65763855]
[384.91650391 118.97542572]
[399.73635864 121.29320526]
[414.55621338 123.61098480]
[427.17477417 114.09537506]
[442.81420898 116.37220764]
[452.19589233 129.09069824]
[449.75381470 144.70516968]
[436.93685913 153.95184326]
[421.34909058 151.34483337]
[412.23843384 138.43083191]
[397.41857910 136.11305237]
[382.59872437 133.79527283]
[367.77886963 131.47749329]
[352.89788818 129.59172058]
[337.96835327 128.13955688]
[323.03881836 126.68739319]
[308.10925293 125.23522949]
[293.17971802 123.78306580]
[279.76318359 130.25187683]
[266.77688599 121.21492004]
[251.84733582 119.76275635]
[236.91780090 118.31059265]
[221.97488403 117.00325775]
[207.01998901 115.84087372]
[195.90563965 125.69008636]
[180.72268677 124.72429657]
[170.46728516 112.99977112]
[155.51239014 111.83738708]
[140.55749512 110.67500305]
[125.60260773 109.51261139]
[115.66591644 122.37325287]
[100.18232727 127.31208801]
[96.15973663 141.76264954]
[92.13714600 156.21321106]
[88.11455536 170.66377258]
[84.09196472 185.11433411]
[80.06938171 199.56489563]
[76.04679108 214.01547241]
[72.02420044 228.46603394]
[68.00160980 242.91659546]
[80.73059082 251.06916809]
[90.48977661 262.61254883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 159]
[18 158]
[19 157]
[20 156]
[21 155]
[22 154]
[23 153]
[24 152]
[25 151]
[28 80]
[29 79]
[31 78]
[32 77]
[33 76]
[34 75]
[36 73]
[37 72]
[38 71]
[40 69]
[41 68]
[42 67]
[44 65]
[45 64]
[46 63]
[47 62]
[50 59]
[51 58]
[52 57]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[98 149]
[99 148]
[100 147]
[101 146]
[104 143]
[105 142]
[107 141]
[108 140]
[109 139]
[111 137]
[112 136]
[113 135]
[114 134]
[115 133]
[119 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
