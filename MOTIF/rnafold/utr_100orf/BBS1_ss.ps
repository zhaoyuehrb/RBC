%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCUGCGAAGAUGGCCGCUGCGUCCUCAUCGGAUUCCGACGCCUGCGGAGCUGAGAGCAAUGAGGCCAAUUCGAAGUGGUUGGAUGCGCACUACGACCCAAUGGCCAAUA\
) } def
/len { sequence length } bind def

/coor [
[80.47411346 133.47288513]
[70.55130768 144.72178650]
[60.62850189 155.97068787]
[50.70569992 167.21960449]
[50.71263504 180.20982361]
[42.09824753 189.38792419]
[29.93742943 190.15173340]
[19.70576096 201.12045288]
[9.47409058 212.08917236]
[12.56461906 227.29536438]
[6.09631681 241.40000916]
[-7.44362211 248.97955322]
[-22.84881592 247.11953735]
[-34.19565201 236.53517151]
[-37.12104034 221.29634094]
[-30.50010872 207.26271057]
[-16.87874413 199.83049011]
[-1.49463475 201.85751343]
[8.73703480 190.88877869]
[18.96870422 179.92005920]
[21.91621971 162.68171692]
[39.45679092 157.29679871]
[49.37959671 146.04788208]
[59.30240250 134.79898071]
[69.22520447 123.55007172]
[61.25204849 100.53866577]
[68.58245087 77.31450653]
[58.35078430 66.34578705]
[48.11911392 55.37705994]
[39.85494232 51.15736771]
[37.76071930 43.95830536]
[27.83791351 32.70939636]
[17.91510773 21.46048927]
[7.99230194 10.21158123]
[-0.15137507 5.76379251]
[-2.04466915 -1.49070394]
[-11.65094185 -13.01109982]
[-21.25721359 -24.53149605]
[-30.86348724 -36.05189133]
[-40.46976089 -47.57228851]
[-56.10678101 -47.43965912]
[-68.13772583 -57.42917252]
[-70.88195038 -72.82408142]
[-63.04372025 -86.35538483]
[-48.32400131 -91.63401031]
[-33.67300034 -86.16755676]
[-26.00846672 -72.53711700]
[-28.94936371 -57.17856216]
[-19.34309006 -45.65816498]
[-9.73681831 -34.13776779]
[-0.13054568 -22.61737251]
[9.47572708 -11.09697628]
[19.24120903 0.28877538]
[29.16401482 11.53768349]
[39.08682251 22.78659058]
[49.00962830 34.03549957]
[59.08783722 45.14538956]
[69.31951141 56.11411285]
[79.55117798 67.08283997]
[89.96213531 62.57093430]
[101.23367310 61.26794815]
[112.39944458 63.28559494]
[122.50216675 68.45088959]
[130.67570496 76.32099915]
[136.21931458 86.22119141]
[138.65769958 97.30268860]
[153.54046631 99.17440796]
[168.42323303 101.04613495]
[183.30599976 102.91785431]
[198.18876648 104.78958130]
[213.17933655 91.61524200]
[232.75057983 93.45655823]
[244.65270996 108.72367859]
[259.63967896 109.34903717]
[274.62661743 109.97439575]
[288.73736572 102.81915283]
[301.13101196 111.08033752]
[316.11798096 111.70569611]
[331.10491943 112.33104706]
[346.09188843 112.95640564]
[361.08609009 113.37337494]
[376.08465576 113.58188629]
[388.54159546 103.47229767]
[404.18087769 107.04891205]
[411.00537109 121.56806946]
[403.77990723 135.89190674]
[388.04724121 139.03239441]
[375.87612915 128.58042908]
[360.87759399 128.37193298]
[354.04974365 131.46913147]
[345.46652222 127.94336700]
[330.47958374 127.31800842]
[315.49261475 126.69264984]
[300.50564575 126.06729126]
[287.46688843 133.26725769]
[274.00128174 124.96134949]
[259.01431274 124.33599854]
[244.02735901 123.71063995]
[238.48004150 132.63374329]
[229.61962891 138.43095398]
[219.06034851 139.96395874]
[208.76097107 136.87890625]
[200.66130066 129.68511963]
[196.31703186 119.67234802]
[181.43428040 117.80062103]
[166.55151367 115.92890167]
[151.66874695 114.05717468]
[136.78598022 112.18544769]
[131.62055969 122.40164948]
[123.69563293 130.66285706]
[113.70278931 136.24813843]
[102.51410675 138.67005920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[7 20]
[8 19]
[9 18]
[27 59]
[28 58]
[29 57]
[31 56]
[32 55]
[33 54]
[34 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[73 98]
[74 97]
[75 96]
[77 94]
[78 93]
[79 92]
[80 91]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
