%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:06:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACUUCCCACUUCCUCUGACCCACCAUUCGGCAGGGAGACAUGAUGGAAGCGGAUCGCCCAGAGAAGCUUUUCAUUGGGGGCCUCAACCUCAAAACCGACGAGAAAGCCCUCAAAGCCGAGUUUGGCAAGUAUGGCCACA\
) } def
/len { sequence length } bind def

/coor [
[130.79209900 172.57815552]
[118.46061707 181.11833191]
[103.75574493 184.07919312]
[89.08003998 180.97700500]
[76.83129120 172.31858826]
[69.01074982 159.51863098]
[66.89618683 144.66841125]
[70.83309174 130.19427490]
[80.17950439 118.45998383]
[65.38265991 120.92034912]
[53.03849411 130.81642151]
[39.21449280 125.27149200]
[24.41764832 127.73185730]
[9.62080383 130.19223022]
[-5.17604065 132.65258789]
[-19.97288513 135.11294556]
[-34.74180984 137.73570251]
[-49.48103714 140.52052307]
[-64.18878174 143.46707153]
[-78.86328125 146.57501221]
[-93.13935852 160.73483276]
[-111.27105713 154.14843750]
[-125.79486847 157.89793396]
[-140.31869507 161.64743042]
[-153.10646057 174.84725952]
[-169.81414795 169.58778381]
[-184.25209045 173.65542603]
[-195.30477905 185.77029419]
[-211.26274109 181.99201965]
[-215.70979309 166.20735168]
[-204.07119751 154.65420532]
[-188.31973267 159.21748352]
[-173.88179016 155.14984131]
[-167.66023254 144.71946716]
[-155.60459900 141.24316406]
[-144.06819153 147.12361145]
[-129.54437256 143.37411499]
[-115.02055359 139.62461853]
[-110.59100342 130.31169128]
[-101.55615997 124.89682007]
[-90.81421661 125.40147400]
[-81.97120667 131.90051270]
[-67.29671478 128.79258728]
[-61.35883331 124.29473877]
[-52.26585770 125.78129578]
[-37.52663040 122.99647522]
[-31.49137497 118.63016510]
[-22.43325043 120.31610870]
[-7.63640547 117.85574341]
[7.16043901 115.39537811]
[21.95728302 112.93501282]
[36.75412750 110.47464752]
[48.03992081 100.75456238]
[62.92229080 106.12350464]
[77.71913910 103.66313934]
[63.60622406 98.58124542]
[59.57547379 84.13295746]
[69.01951599 72.47920227]
[83.98943329 73.42878723]
[91.88524628 86.18254089]
[91.22638702 71.19702148]
[90.56752014 56.21149445]
[89.90865326 41.22597122]
[89.24979401 26.24044991]
[80.91379547 12.79345036]
[88.08459473 -0.26139262]
[87.42573547 -15.24691582]
[86.76686859 -30.23243904]
[77.49993896 -43.76225662]
[84.82670593 -58.43367386]
[101.21002960 -59.15399551]
[109.79614258 -45.18221283]
[101.75239563 -30.89130211]
[102.41125488 -15.90577888]
[103.07012177 -0.92025596]
[111.35898590 11.45487785]
[104.23531342 25.58158493]
[104.89418030 40.56710815]
[105.55303955 55.55263138]
[106.21190643 70.53815460]
[106.87077332 85.52367401]
[116.94033813 96.64140320]
[131.78765869 98.77612305]
[146.63497925 100.91085052]
[161.48229980 103.04557037]
[169.75169373 87.94595337]
[182.97030640 76.97663116]
[199.26266479 71.65715027]
[216.33064270 72.70803070]
[231.77770996 79.95334625]
[243.44534302 92.34937286]
[257.22341919 86.41938019]
[271.00149536 80.48939514]
[273.43045044 65.25444794]
[283.72750854 53.76643372]
[298.60687256 49.69113541]
[313.32058716 54.32897186]
[323.17361450 66.20001984]
[325.02182007 81.51627350]
[318.27548218 95.39037323]
[305.08734131 103.39514160]
[289.66567993 102.97628784]
[276.93145752 94.26746368]
[263.15341187 100.19745636]
[249.37532043 106.12744141]
[250.48432922 112.72567749]
[250.61071777 119.41526794]
[249.75173950 126.05068207]
[247.92608643 132.48757935]
[260.97103882 139.89224243]
[274.01599121 147.29692078]
[287.29785156 154.26776123]
[300.80215454 160.79722595]
[314.30645752 167.32667542]
[329.14773560 161.89422607]
[343.44808960 168.62297058]
[348.72332764 183.52085876]
[341.84375000 197.74925232]
[326.89093018 202.86669922]
[312.73605347 195.83708191]
[307.77700806 180.83097839]
[294.27270508 174.30152893]
[280.76840210 167.77206421]
[277.27282715 168.62973022]
[273.18258667 167.78749084]
[269.32437134 164.98252869]
[266.61132812 160.34187317]
[253.56637573 152.93721008]
[240.52142334 145.53253174]
[228.68859863 155.90602112]
[213.99729919 161.62886047]
[198.20443726 161.99427795]
[183.20637512 156.93760681]
[170.81109619 147.04646301]
[162.52032471 133.49253845]
[159.34757996 117.89289093]
[144.50025940 115.75817108]
[129.65293884 113.62344360]
[114.80561829 111.48872375]
[127.96344757 118.69091034]
[137.19526672 130.51348877]
[140.99273682 145.02484131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 55]
[10 54]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 46]
[18 45]
[19 43]
[20 42]
[22 38]
[23 37]
[24 36]
[26 33]
[27 32]
[60 81]
[61 80]
[62 79]
[63 78]
[64 77]
[66 75]
[67 74]
[68 73]
[82 139]
[83 138]
[84 137]
[85 136]
[91 105]
[92 104]
[93 103]
[109 129]
[110 128]
[111 127]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
