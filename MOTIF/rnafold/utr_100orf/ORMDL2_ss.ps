%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGGCAGAAGGAGAGGCGUUACUUCCUGGAGACUUCAGGUGUGGUAGCCGGCGCCGCGCCCAUAGCCGGACGGGGAUCUGAGCUGGCAGGAUGAAUGUGGGGGUGGCACACAGCGAAGUAAACCCCAACACCCGAGUGAUGAAUAGCCGAGGCAUCUGGCUGGCCUACAUCAUCUUGGUAGGAUUGCUGC\
) } def
/len { sequence length } bind def

/coor [
[191.74803162 186.87951660]
[192.87539673 177.78695679]
[195.67756653 169.05671692]
[182.98135376 161.06884766]
[170.28512573 153.08099365]
[157.58889771 145.09312439]
[148.92916870 154.36735535]
[138.79692078 162.00541687]
[127.49709320 167.77745056]
[115.36975098 171.50973511]
[102.77986145 173.08998108]
[90.10631561 172.47059631]
[77.73051453 169.67024231]
[66.02490997 164.77317810]
[55.34177017 157.92680359]
[46.00260162 149.33712769]
[38.28846741 139.26268005]
[24.87384605 145.97445679]
[11.45922470 152.68623352]
[1.68593943 168.28451538]
[-15.77289200 166.57287598]
[-29.07648849 173.50212097]
[-42.38008499 180.43135071]
[-55.68368149 187.36059570]
[-60.30216980 199.41415405]
[-71.53778839 204.90846252]
[-83.11968994 201.38482666]
[-96.53431702 208.09660339]
[-109.94893646 214.80838013]
[-123.36355591 221.52015686]
[-136.77818298 228.23193359]
[-150.19279480 234.94371033]
[-161.65242004 247.43824768]
[-176.83099365 239.88529968]
[-173.77508545 223.20904541]
[-156.90457153 221.52908325]
[-143.48995972 214.81730652]
[-130.07533264 208.10552979]
[-116.66071320 201.39375305]
[-103.24609375 194.68197632]
[-89.83146667 187.97019958]
[-80.97881317 172.82519531]
[-62.61291885 174.05699158]
[-49.30932236 167.12776184]
[-36.00572586 160.19851685]
[-22.70212936 153.26928711]
[-18.76377296 141.82174683]
[-7.72420025 135.94345093]
[4.74744797 139.27162170]
[18.16206932 132.55984497]
[31.57668877 125.84806824]
[26.87470436 101.60095215]
[30.51099777 77.17127991]
[42.07093048 55.34471130]
[60.23635864 38.61005783]
[53.41562653 25.25050926]
[46.59489441 11.89095783]
[39.77416229 -1.46859324]
[32.95342636 -14.82814407]
[19.78715134 -23.60081482]
[20.89098740 -38.45446014]
[14.07025433 -51.81401062]
[7.24952126 -65.17356110]
[0.42878851 -78.53311157]
[-6.39194441 -91.89266205]
[-13.21267700 -105.25221252]
[-20.88819313 -118.13967133]
[-29.38596344 -130.50041199]
[-37.88373184 -142.86114502]
[-46.38150406 -155.22189331]
[-54.87927246 -167.58262634]
[-71.67641449 -175.11120605]
[-72.38903809 -192.63926697]
[-81.08687592 -204.86004639]
[-89.78472137 -217.08084106]
[-104.91699982 -223.40112305]
[-106.74095917 -239.69851685]
[-93.38026428 -249.20767212]
[-78.57925415 -242.14636230]
[-77.56393433 -225.77867126]
[-68.86609650 -213.55789185]
[-60.16825485 -201.33711243]
[-48.28694534 -199.01522827]
[-40.94224930 -188.89187622]
[-42.51853561 -176.08039856]
[-34.02076340 -163.71966553]
[-25.52299309 -151.35891724]
[-17.02522278 -138.99818420]
[-8.52745247 -126.63743591]
[-6.66135979 -141.52090454]
[3.50435185 -152.55079651]
[18.18651009 -155.62231445]
[31.92114449 -149.59240723]
[39.59690857 -136.70509338]
[38.35726166 -121.75640869]
[28.66354370 -110.30950165]
[14.12326908 -106.62433624]
[0.14687377 -112.07295227]
[6.96760654 -98.71339417]
[13.78833961 -85.35384369]
[20.60907173 -71.99429321]
[27.42980576 -58.63474274]
[34.25053787 -45.27519226]
[46.92895126 -37.45808792]
[46.31298065 -21.64887810]
[53.13371277 -8.28932571]
[59.95444489 5.07022476]
[66.77517700 18.42977524]
[73.59590912 31.78932762]
[84.08116913 28.61048698]
[94.92362976 27.03355408]
[105.87999725 27.09391212]
[116.70442200 28.79021072]
[127.15402222 32.08438492]
[136.99430847 36.90251160]
[146.00448608 43.13648605]
[153.98236084 50.64641953]
[160.74893188 59.26379395]
[166.15235901 68.79524994]
[170.07139587 79.02690887]
[172.41810608 89.72917938]
[173.13981628 100.66191864]
[172.22035217 111.57980347]
[169.68034363 122.23785400]
[165.57676697 132.39689636]
[178.27299500 140.38476562]
[190.96920776 148.37263489]
[203.66543579 156.36048889]
[221.15876770 143.63500977]
[242.38456726 139.68705750]
[263.20156860 145.24978638]
[279.56423950 159.20431519]
[288.30892944 178.80465698]
[287.76562500 200.21794128]
[301.58850098 206.04267883]
[315.41140747 211.86741638]
[329.23428345 217.69215393]
[343.05718994 223.51687622]
[356.92703247 229.22892761]
[370.84292603 234.82789612]
[384.75878906 240.42686462]
[398.67465210 246.02583313]
[412.59054565 251.62480164]
[430.61026001 242.77021790]
[449.05706787 249.88980103]
[456.23092651 267.98822021]
[470.40350342 272.90124512]
[484.57611084 277.81423950]
[498.74868774 282.72726440]
[512.92126465 287.64025879]
[527.13336182 292.43777466]
[541.38409424 297.11944580]
[557.31634521 293.23431396]
[568.44995117 305.27484131]
[563.33160400 320.85479736]
[547.22662354 323.94680786]
[536.70239258 311.37011719]
[522.45172119 306.68844604]
[515.10461426 307.58898926]
[508.00827026 301.81286621]
[493.83569336 296.89984131]
[479.66308594 291.98684692]
[465.49050903 287.07382202]
[451.31790161 282.16082764]
[443.60992432 288.97940063]
[433.68734741 291.99920654]
[423.32745361 290.60906982]
[414.41516113 284.99414062]
[408.60012817 276.11428833]
[406.99157715 265.54067993]
[393.07568359 259.94171143]
[379.15982056 254.34274292]
[365.24392700 248.74377441]
[351.32806396 243.14480591]
[343.93792725 243.56539917]
[337.23245239 237.33978271]
[323.40957642 231.51504517]
[309.58666992 225.69030762]
[295.76376343 219.86557007]
[281.94088745 214.04083252]
[276.49822998 221.29367065]
[269.79571533 227.41123962]
[262.06588745 232.17785645]
[253.57762146 235.42477417]
[244.62670898 237.03617859]
[235.52554321 236.95329285]
[226.59223938 235.17648315]
[218.13954163 231.76539612]
[210.46380615 226.83692932]
[203.83468628 220.56123352]
[198.48559570 213.15585327]
[194.60554504 204.87811279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 128]
[4 127]
[5 126]
[6 125]
[17 51]
[18 50]
[19 49]
[21 46]
[22 45]
[23 44]
[24 43]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[73 82]
[74 81]
[75 80]
[134 180]
[135 179]
[136 178]
[137 177]
[138 176]
[139 174]
[140 173]
[141 172]
[142 171]
[143 170]
[146 164]
[147 163]
[148 162]
[149 161]
[150 160]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
