%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGCGCAACGGAGGUCGAAGGCGUUCAGACUCUUAGCUGAACGCGGAGCUGCGGCGGCUAUGCUGUGGAGCGGCUGCCGGCGUUUCGGGGCGCGCCUCGGCUGCCUGCCCGGCGGUCUCCGGGUCCUCGUCCAGACCGGCCACCGGAGCUUGACCUCCU\
) } def
/len { sequence length } bind def

/coor [
[100.23704529 292.03387451]
[97.63232422 306.80596924]
[103.74656677 322.02267456]
[93.41410828 334.75738525]
[77.26409912 331.90969849]
[71.91028595 316.40908813]
[82.86020660 304.20126343]
[85.46493530 289.42913818]
[76.65567017 279.98654175]
[74.88217163 266.99838257]
[81.01706696 255.19381714]
[93.01172638 249.00215149]
[95.90240479 234.28330994]
[98.79309082 219.56448364]
[101.68377686 204.84565735]
[104.57445526 190.12683105]
[107.46514130 175.40800476]
[110.35582733 160.68916321]
[113.24651337 145.97033691]
[116.13719177 131.25151062]
[95.53298187 134.14128113]
[77.35987854 124.95227051]
[67.89385986 107.42227936]
[53.29818344 110.88151550]
[38.70251083 114.34075165]
[24.10683823 117.79998779]
[9.51116562 121.25923157]
[-5.08450747 124.71846771]
[-19.68018150 128.17770386]
[-34.27585220 131.63694763]
[-40.13116837 146.00688171]
[-53.33237457 154.16210938]
[-68.80334473 152.96678162]
[-80.59516907 142.88052368]
[-84.17365265 127.78171539]
[-78.16279602 113.47614288]
[-64.87389374 105.46460724]
[-49.41680527 106.82769012]
[-37.73509216 117.04126740]
[-23.13941956 113.58203125]
[-8.54374599 110.12279510]
[6.05192757 106.66355896]
[20.64760017 103.20431519]
[35.24327469 99.74507904]
[49.83894730 96.28584290]
[64.43461609 92.82660675]
[70.37581635 79.05335999]
[62.87581635 66.06298065]
[55.37581635 53.07260132]
[47.87581635 40.08221817]
[40.37581635 27.09183884]
[25.37429428 22.89754677]
[17.95327950 9.61661243]
[22.04434586 -4.65919876]
[14.54434681 -17.64958000]
[7.04434633 -30.63996124]
[-0.45565367 -43.63034058]
[-7.95565367 -56.62072372]
[-15.45565319 -69.61110687]
[-22.95565414 -82.60148621]
[-30.45565414 -95.59186554]
[-36.04759979 -99.26626587]
[-38.53405380 -104.44544220]
[-37.98338699 -109.23458862]
[-44.97404099 -122.50601196]
[-51.96469498 -135.77743530]
[-66.11910248 -144.05902100]
[-65.75368500 -160.45410156]
[-51.24434662 -168.09681702]
[-37.51705170 -159.12500000]
[-38.69326782 -142.76809692]
[-31.70261383 -129.49667358]
[-24.71196175 -116.22524261]
[-17.46527290 -103.09186554]
[-9.96527290 -90.10148621]
[-2.46527267 -77.11110687]
[5.03472757 -64.12071991]
[12.53472710 -51.13034058]
[20.03472710 -38.13996124]
[27.53472710 -25.14958000]
[35.03472900 -12.15919876]
[49.44347382 -8.56426048]
[57.23459625 4.50299311]
[53.36619568 19.59183884]
[60.86619568 32.58221817]
[68.36619568 45.57260132]
[75.86619568 58.56298065]
[83.36619568 71.55335999]
[111.74865723 68.02785492]
[133.18916321 88.35758972]
[142.83097839 76.86692810]
[152.47279358 65.37625885]
[162.11459351 53.88559341]
[171.75640869 42.39492798]
[174.89741516 33.76387405]
[181.69831848 30.77728271]
[191.56114197 19.47574425]
[194.18879700 3.28848100]
[209.61511230 -2.27576518]
[221.97080994 8.50702477]
[218.54542542 24.54444122]
[202.86267090 29.33856392]
[192.99986267 40.64010239]
[183.24708557 52.03673935]
[173.60527039 63.52740860]
[163.96345520 75.01807404]
[154.32164001 86.50874329]
[144.67982483 97.99940491]
[148.70240784 112.44997406]
[162.89463806 117.30597687]
[177.13327026 122.02415466]
[191.41699219 126.60404205]
[205.70071411 131.18392944]
[219.98443604 135.76382446]
[235.48802185 132.60954285]
[245.24513245 143.86334229]
[259.52883911 148.44322205]
[273.81256104 153.02311707]
[288.09628296 157.60301208]
[292.41116333 156.49668884]
[296.43881226 156.81892395]
[299.75778198 158.29695129]
[302.08190918 160.54737854]
[303.28479004 163.13116455]
[317.17065430 168.80416870]
[331.05651855 174.47717285]
[344.94235229 180.15016174]
[358.06198120 171.86428833]
[373.54403687 172.90599060]
[385.43539429 182.87469482]
[389.16357422 197.93724060]
[383.29504395 212.30177307]
[370.08630371 220.44482422]
[354.61645508 219.23524475]
[342.83392334 209.13812256]
[339.26937866 194.03602600]
[325.38351440 188.36302185]
[311.49765015 182.69003296]
[297.61178589 177.01702881]
[283.51638794 171.88673401]
[269.23266602 167.30683899]
[254.94895935 162.72694397]
[240.66523743 158.14706421]
[226.18333435 161.62892151]
[215.40454102 150.04754639]
[201.12081909 145.46765137]
[186.83709717 140.88775635]
[172.55339050 136.30787659]
[165.18750000 137.26487732]
[158.03862000 131.49819946]
[143.84640503 126.64219666]
[130.85601807 134.14219666]
[127.96533966 148.86102295]
[125.07465363 163.57984924]
[122.18397522 178.29867554]
[119.29328918 193.01751709]
[116.40260315 207.73634338]
[113.51191711 222.45516968]
[110.62123871 237.17399597]
[107.73055267 251.89283752]
[117.74671173 266.20620728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[12 160]
[13 159]
[14 158]
[15 157]
[16 156]
[17 155]
[18 154]
[19 153]
[20 152]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[64 73]
[65 72]
[66 71]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
[96 103]
[97 102]
[109 151]
[110 150]
[111 148]
[112 147]
[113 146]
[114 145]
[116 143]
[117 142]
[118 141]
[119 140]
[124 139]
[125 138]
[126 137]
[127 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
