%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCUGGGCCGCCGGCCCGGCGCGGGCGCCAUGAAGCUGCUGCGGCGGGCGUGGCGGCGGCGGGCGGCGCUAGGCCUGGGCACGCUGGCGCUGUGCGGGGCGGCGCUGCUCUACCUGGCGCGCUGCGCGG\
) } def
/len { sequence length } bind def

/coor [
[67.87450409 305.70858765]
[56.76565170 315.78793335]
[41.78604507 316.56985474]
[29.68813705 307.70190430]
[25.92545700 293.18054199]
[17.76090050 305.76385498]
[9.59634304 318.34719849]
[1.43178678 330.93051147]
[-6.73276997 343.51382446]
[-14.89732647 356.09716797]
[-18.44642258 372.67547607]
[-35.35932922 373.85440063]
[-41.17415237 357.92880249]
[-27.48064995 347.93258667]
[-19.31609344 335.34927368]
[-11.15153599 322.76596069]
[-2.98697925 310.18261719]
[5.17757750 297.59930420]
[13.34213448 285.01599121]
[20.42299652 271.79248047]
[26.37030983 258.02185059]
[32.31762314 244.25126648]
[38.26493454 230.48066711]
[44.21224594 216.71006775]
[50.15956116 202.93945312]
[55.94132996 189.09854126]
[61.55672073 175.18928528]
[67.17211151 161.28002930]
[72.78750610 147.37077332]
[78.40290070 133.46151733]
[84.01829529 119.55226135]
[76.85667419 112.40084839]
[72.87166595 102.67398071]
[72.96089172 91.77201080]
[77.41032410 81.39220428]
[85.80467224 73.26462555]
[74.88493347 62.98069763]
[63.96518707 52.69676590]
[53.04544449 42.41283798]
[42.12570190 32.12890625]
[31.20595741 21.84497833]
[20.28621483 11.56104851]
[9.36647224 1.27711844]
[-5.98447418 -2.55159283]
[-9.94505310 -16.90997314]
[-20.86479759 -27.19390297]
[-36.94087982 -30.43297005]
[-41.91666412 -46.05902481]
[-30.67348480 -57.99732590]
[-14.77736378 -53.96676636]
[-10.58086681 -38.11364746]
[0.33887619 -27.82971573]
[14.90876865 -24.73657990]
[19.65040207 -9.64262486]
[30.57014465 0.64130491]
[41.48988724 10.92523479]
[52.40962982 21.20916367]
[63.32937241 31.49309349]
[74.24911499 41.77702332]
[85.16886139 52.06095123]
[96.08860016 62.34488297]
[111.01964569 63.78157425]
[123.69995880 55.76848602]
[136.38027954 47.75539780]
[149.06059265 39.74230576]
[161.74090576 31.72921753]
[174.42121887 23.71612930]
[187.10153198 15.70303917]
[199.78184509 7.68995047]
[212.46217346 -0.32313871]
[225.14248657 -8.33622742]
[228.63233948 -14.14070034]
[233.77992249 -16.83221436]
[238.62847900 -16.41255188]
[251.67839050 -23.80846977]
[264.72830200 -31.20438766]
[277.77822876 -38.60030365]
[281.99566650 -50.85809708]
[293.09887695 -56.73128128]
[304.82867432 -53.53028488]
[318.05218506 -60.61114883]
[331.27569580 -67.69200897]
[344.49920654 -74.77287292]
[357.63687134 -82.01178741]
[370.68679810 -89.40769958]
[378.52868652 -103.81036377]
[394.92724609 -103.94985962]
[403.01303101 -89.68269348]
[394.46807861 -75.68569946]
[378.08270264 -76.35778046]
[365.03280640 -68.96186829]
[360.72195435 -62.86643982]
[351.58007812 -61.54935837]
[338.35656738 -54.46849442]
[325.13305664 -47.38763046]
[311.90951538 -40.30677032]
[303.53189087 -24.93492699]
[285.17413330 -25.55038643]
[272.12423706 -18.15446854]
[259.07431030 -10.75854969]
[246.02438354 -3.36263180]
[233.15557861 4.34408760]
[220.47525024 12.35717678]
[207.79493713 20.37026596]
[195.11462402 28.38335419]
[182.43431091 36.39644241]
[169.75399780 44.40953445]
[157.07368469 52.42262268]
[144.39335632 60.43571091]
[131.71304321 68.44879913]
[119.03273010 76.46189117]
[127.15637970 89.08787537]
[128.03680420 103.57081604]
[121.93899536 116.17952728]
[110.86425018 123.90319061]
[97.92754364 125.16765594]
[92.31215668 139.07690430]
[86.69676208 152.98616028]
[81.08136749 166.89541626]
[75.46597290 180.80467224]
[69.85058594 194.71392822]
[69.52581024 203.94447327]
[63.93016052 208.88676453]
[57.98284912 222.65737915]
[52.03553772 236.42797852]
[46.08822250 250.19857788]
[40.14091110 263.96917725]
[34.19359970 277.73977661]
[48.36450577 272.82192993]
[62.45169830 277.97470093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[25 123]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[45 52]
[46 51]
[62 111]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[74 101]
[75 100]
[76 99]
[77 98]
[80 96]
[81 95]
[82 94]
[83 93]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
