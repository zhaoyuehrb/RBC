%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUCCAAGCAAGAAGGCAGUGGUCUACUCCAUCGGCAACAUGCUGGUCCUUUAUGGACACAGCACCCAGGACCUUCCGGAAACCAAUGCCCGCGUAGUCGGAGGGACUGAGGCCGGGAGGAAUUCCUGGCCCUCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[69.00254822 137.20999146]
[56.15084076 120.55910492]
[51.57041550 100.03015137]
[36.74993515 97.71641541]
[21.92945480 95.40267944]
[7.10897446 93.08894348]
[-7.71150589 90.77521515]
[-22.39897537 107.20137024]
[-43.93999481 110.84888458]
[-62.88870621 100.35528564]
[-75.98828888 107.66287994]
[-80.28144836 119.88032532]
[-91.40742493 125.68226624]
[-103.10822296 122.42380524]
[-116.36625671 129.43981934]
[-124.94480133 142.73339844]
[-139.81304932 141.84761047]
[-153.07109070 148.86363220]
[-159.25288391 155.69804382]
[-166.70092773 155.88452148]
[-180.11093140 162.60552979]
[-193.52093506 169.32652283]
[-206.93093872 176.04753113]
[-218.38195801 188.54994202]
[-233.56573486 181.00744629]
[-230.52128601 164.32908630]
[-213.65193176 162.63752747]
[-200.24192810 155.91651917]
[-186.83193970 149.19552612]
[-173.42193604 142.47451782]
[-160.08709717 135.60559082]
[-146.82905579 128.58958435]
[-139.19882202 115.79783630]
[-123.38227081 116.18178558]
[-110.12423706 109.16577148]
[-101.65885925 93.83211517]
[-83.29588318 94.56329346]
[-70.19629669 87.25569916]
[-71.27785492 81.58308411]
[-71.34274292 75.80864716]
[-70.38893127 70.11315918]
[-68.44626617 64.67492676]
[-65.57557678 59.66419220]
[-75.57960510 48.48746109]
[-85.58364105 37.31072998]
[-95.58767700 26.13399696]
[-105.59170532 14.95726490]
[-115.71876526 3.89187956]
[-125.96759796 -7.06080627]
[-136.21643066 -18.01349258]
[-146.46527100 -28.96617889]
[-162.38725281 -30.93342018]
[-170.65324402 -44.68307495]
[-164.92227173 -59.66758728]
[-149.59066772 -64.39212036]
[-136.41950989 -55.23241425]
[-135.51258850 -39.21501541]
[-125.26374817 -28.26232910]
[-115.01491547 -17.30964470]
[-104.76607513 -6.35695791]
[-97.84445190 -3.60028648]
[-94.41497803 4.95323229]
[-84.41094208 16.12996292]
[-74.40691376 27.30669594]
[-64.40287781 38.48342514]
[-54.39884567 49.66015625]
[-42.03250885 45.68171310]
[-29.02544022 46.83469009]
[-17.43245697 52.98969269]
[-9.10548496 63.22297287]
[-5.39777184 75.95473480]
[9.42270851 78.26846313]
[24.24318886 80.58219910]
[39.06366730 82.89593506]
[53.88414764 85.20967102]
[56.53702927 78.63657379]
[60.12096786 72.52112579]
[64.55918884 66.99432373]
[69.75661469 62.17456818]
[75.60191345 58.16510010]
[81.96986389 55.05181122]
[88.72405243 52.90139771]
[95.71978760 51.75991821]
[102.80721283 51.65183258]
[109.83451080 52.57945633]
[116.65113068 54.52291107]
[123.11105347 57.44057083]
[129.07589722 61.26993179]
[134.41787720 65.92896271]
[139.02256775 71.31785583]
[142.79132080 77.32117462]
[156.97288513 72.43416595]
[171.15446472 67.54715729]
[182.85658264 53.37697601]
[199.92778015 57.29584885]
[213.99777222 52.09630966]
[224.05514526 39.14326859]
[240.26243591 41.64444351]
[245.94697571 57.02684021]
[235.26098633 69.46636963]
[219.19731140 66.16630554]
[205.12731934 71.36584473]
[199.75157166 82.25746918]
[188.00814819 86.67808533]
[176.04147339 81.72873688]
[161.85989380 86.61574554]
[147.67832947 91.50275421]
[147.12873840 111.14932251]
[138.81709290 128.95960999]
[149.30570984 139.68289185]
[159.79434204 150.40617371]
[170.28295898 161.12945557]
[181.12161255 171.49882507]
[192.29833984 181.50285339]
[203.47508240 191.50688171]
[214.65180969 201.51091003]
[225.82853699 211.51495361]
[237.00526428 221.51898193]
[248.18200684 231.52301025]
[259.35873413 241.52705383]
[275.39227295 242.07940674]
[284.84109497 255.04470825]
[280.45690918 270.47708130]
[265.60284424 276.53814697]
[251.67369080 268.57833862]
[249.35470581 252.70378113]
[238.17796326 242.69975281]
[227.00123596 232.69570923]
[215.82450867 222.69168091]
[204.64778137 212.68765259]
[193.47103882 202.68360901]
[182.29431152 192.67958069]
[171.11758423 182.67555237]
[167.51945496 182.53549194]
[163.81883240 180.59555054]
[160.88430786 176.83139038]
[159.55969238 171.61807251]
[149.07106018 160.89479065]
[138.58242798 150.17152405]
[128.09381104 139.44824219]
[108.71999359 147.63809204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[10 38]
[11 37]
[14 35]
[15 34]
[17 32]
[18 31]
[20 30]
[21 29]
[22 28]
[23 27]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 60]
[49 59]
[50 58]
[51 57]
[91 107]
[92 106]
[93 105]
[95 102]
[96 101]
[109 140]
[110 139]
[111 138]
[112 137]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
