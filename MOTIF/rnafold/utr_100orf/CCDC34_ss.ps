%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGAAAGCGCGUCCCCGCCGCGGCUCCGCCAGUUUGAACUUGGCGGGCCAGAUGUGGGCGGCGGGGCGCUGGGGGCCUACUUUUCCCUCUUCCUACGCCGGUUUCUCUGCUGACUGCAGACCCAGGUCUCGGCCCUCCUCGGACUCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[151.32798767 185.24269104]
[165.37510681 190.50357056]
[158.09558105 177.38838196]
[150.81605530 164.27317810]
[143.53651428 151.15797424]
[136.25698853 138.04278564]
[118.74600983 146.26329041]
[100.40655518 147.27915955]
[83.94794464 141.65925598]
[71.54486847 130.90376282]
[64.55109406 117.13433838]
[63.36350632 102.71079254]
[48.49349213 100.74034119]
[33.62347794 98.76988983]
[24.64499283 100.75181580]
[18.47323036 96.60585785]
[3.64620519 94.33444214]
[-11.18081951 92.06302643]
[-26.00784492 89.79161072]
[-40.83486938 87.52019501]
[-55.66189575 85.24877930]
[-70.48892212 82.97736359]
[-85.31594086 80.70594025]
[-100.14296722 78.43452454]
[-115.10523987 77.37133026]
[-130.10447693 77.52333832]
[-145.10369873 77.67535400]
[-153.71171570 80.90694427]
[-160.40771484 77.67535400]
[-175.40695190 77.52333832]
[-190.40617371 77.37133026]
[-205.40541077 77.21932220]
[-220.40464783 77.06731415]
[-235.40386963 76.91529846]
[-250.40386963 76.91529846]
[-265.40310669 77.06731415]
[-279.23840332 85.87167358]
[-293.65380859 78.05323029]
[-293.81997681 61.65492249]
[-279.56600952 53.54592896]
[-265.55511475 62.06808090]
[-250.55587769 61.91607285]
[-243.85987854 58.68447876]
[-235.25186157 61.91607285]
[-220.25262451 62.06808090]
[-205.25340271 62.22009277]
[-190.25416565 62.37210083]
[-175.25494385 62.52411270]
[-160.25570679 62.67612076]
[-145.25570679 62.67612076]
[-130.25648499 62.52411270]
[-115.25725555 62.37210083]
[-126.32431030 52.24687195]
[-129.47933960 37.58243179]
[-123.55560303 23.80167007]
[-110.74369812 16.00069618]
[-95.78145599 17.06429863]
[-84.20188904 26.59915924]
[-80.28710175 41.07929993]
[-85.48478699 55.14998245]
[-97.87155151 63.60750198]
[-83.04452515 65.87892151]
[-68.21749878 68.15033722]
[-53.39047623 70.42175293]
[-38.56345367 72.69316864]
[-23.73642731 74.96458435]
[-8.90940285 77.23600006]
[5.91762161 79.50741577]
[20.74464607 81.77883148]
[35.59392929 83.89987946]
[50.46394348 85.87033081]
[65.33395386 87.84078217]
[79.01351929 69.84790802]
[100.63736725 63.26888275]
[103.95400238 48.64014816]
[107.27064514 34.01141357]
[110.58728027 19.38267708]
[113.90392303 4.75394106]
[103.01791382 -6.17759371]
[99.79240417 -21.26399803]
[105.25662994 -35.69125748]
[117.66698456 -44.85568237]
[133.06336975 -45.83293915]
[146.53283691 -38.31119156]
[153.77735901 -24.69059753]
[152.48521423 -9.31744289]
[143.06872559 2.90275717]
[128.53265381 8.07058048]
[125.21601868 22.69931602]
[121.89937592 37.32805252]
[118.58274078 51.95678711]
[115.26609802 66.58552551]
[121.88392639 64.14151001]
[129.26222229 62.86232758]
[137.21038818 62.88922501]
[148.88349915 53.46912384]
[150.31262207 37.72957993]
[162.50602722 27.67490196]
[178.22956848 29.27034760]
[188.15476990 41.56936646]
[186.39318848 57.27517319]
[173.98991394 67.06978607]
[158.30360413 65.14224243]
[146.63049316 74.56233978]
[149.16387939 81.62152100]
[163.28230286 76.55497742]
[168.34863281 90.67348480]
[154.23063660 95.73987579]
[156.76402283 102.79904938]
[171.76324463 102.64704132]
[186.76248169 102.49503326]
[201.76170349 102.34301758]
[216.76094055 102.19100952]
[228.97132874 91.78496552]
[244.69206238 94.98470306]
[251.86352539 109.33564758]
[244.98439026 123.82899475]
[229.33174133 127.34667969]
[216.91294861 117.19023895]
[201.91371155 117.34224701]
[186.91448975 117.49426270]
[171.91525269 117.64627075]
[156.91603088 117.79827881]
[149.37219238 130.76324463]
[156.65171814 143.87844849]
[163.93124390 156.99365234]
[171.21078491 170.10885620]
[178.49031067 183.22404480]
[186.93412781 195.62170410]
[196.47204590 207.19876099]
[206.00994873 218.77581787]
[213.93070984 223.44517517]
[215.62098694 230.68551636]
[224.92231750 242.45350647]
[234.22363281 254.22148132]
[249.94789124 255.81002808]
[259.87847900 268.10470581]
[258.12377930 283.81127930]
[245.72480774 293.61132812]
[230.03765869 291.69067383]
[220.36923218 279.18878174]
[222.45565796 263.52279663]
[213.15432739 251.75482178]
[203.85301208 239.98684692]
[194.43290710 228.31373596]
[184.89498901 216.73667908]
[175.35707092 205.15962219]
[175.10781860 220.15754700]
[166.91021729 232.71937561]
[153.28224182 238.98661804]
[138.40983582 237.03425598]
[126.86119843 227.46195984]
[122.18357086 213.20994568]
[125.81373596 198.65585327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 128]
[3 127]
[4 126]
[5 125]
[6 124]
[12 72]
[13 71]
[14 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 52]
[26 51]
[27 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 42]
[36 41]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[95 104]
[96 103]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
[129 147]
[130 146]
[131 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
