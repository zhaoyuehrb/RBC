%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAGCCUCAGUCCCCGCAGCUUGUGCGGCGGCGUCGGCACCAUGAGGCGAGGGCCCCGGAGCCUGCGGGGCAGGGACGCGCCAGCCCCCACGCCCUGCGUCCCGGCCGAGUGCUUCGACCUGCUGGUCCGCCACUGCGUGG\
) } def
/len { sequence length } bind def

/coor [
[63.03301620 153.38670349]
[59.98214722 168.07316589]
[45.26740646 170.98460388]
[36.85368347 158.56649780]
[45.01323318 145.97978210]
[52.72495651 133.11396790]
[45.78811264 130.26261902]
[32.85223770 137.85623169]
[19.91635895 145.44985962]
[18.28602982 160.76808167]
[8.06788826 172.05714417]
[-6.66409636 175.12841797]
[-20.21744919 169.00921631]
[-33.15332794 176.60282898]
[-46.08920288 184.19645691]
[-54.07341766 197.85525513]
[-68.96625519 197.62574768]
[-81.90213013 205.21936035]
[-94.83801270 212.81298828]
[-107.77388763 220.40660095]
[-120.70976257 228.00022888]
[-126.12525940 243.10160828]
[-141.35443115 248.14660645]
[-154.71476746 239.26510620]
[-155.95735168 223.27024841]
[-144.12899780 212.43191528]
[-128.30339050 215.06434631]
[-115.36750793 207.47073364]
[-102.43163300 199.87710571]
[-89.49575043 192.28347778]
[-76.55987549 184.68986511]
[-69.50092316 171.57420349]
[-53.68282318 171.26057434]
[-40.74694824 163.66694641]
[-27.81106949 156.07333374]
[-26.54765511 141.25639343]
[-16.68501472 129.89010620]
[-1.84716749 126.47080231]
[12.32273769 132.51397705]
[25.25861549 124.92035675]
[38.19449234 117.32673645]
[44.89645386 92.57721710]
[59.70277405 75.78288269]
[77.59613800 68.77960205]
[93.62738800 70.84828949]
[104.05578613 79.13751221]
[107.14379883 89.54083252]
[113.73558807 76.06684113]
[120.32737732 62.59285736]
[126.91916656 49.11886978]
[133.51095581 35.64488602]
[140.10275269 22.17089844]
[134.11793518 5.77085304]
[141.66392517 -9.59767723]
[157.65834045 -14.68623734]
[163.95668030 -28.29986954]
[170.25502014 -41.91350174]
[176.55334473 -55.52713013]
[172.84185791 -67.93025970]
[178.42535400 -79.16387939]
[189.80091858 -83.41204834]
[196.39270020 -96.88603210]
[202.98449707 -110.36001587]
[202.60670471 -115.71551514]
[204.20578003 -120.20371246]
[207.10197449 -123.20631409]
[210.46722412 -124.47395325]
[217.92027283 -137.49133301]
[225.37330627 -150.50871277]
[232.82635498 -163.52609253]
[240.27940369 -176.54347229]
[247.73243713 -189.56085205]
[255.18548584 -202.57823181]
[262.63851929 -215.59561157]
[262.11398315 -233.96797180]
[277.54556274 -242.25805664]
[284.71484375 -255.43385315]
[291.88409424 -268.60964966]
[288.98605347 -281.22766113]
[295.28744507 -292.07489014]
[306.91488647 -295.57519531]
[314.36795044 -308.59259033]
[313.76766968 -324.98074341]
[327.80197144 -333.46426392]
[342.03356934 -325.31604004]
[341.82220459 -308.91824341]
[327.38531494 -301.13955688]
[319.93228149 -288.12216187]
[320.97415161 -270.63580322]
[305.05990601 -261.44036865]
[297.89062500 -248.26457214]
[290.72134399 -235.08879089]
[293.84393311 -223.35424805]
[287.91754150 -212.29768372]
[275.65591431 -208.14256287]
[268.20285034 -195.12518311]
[260.74981689 -182.10780334]
[253.29676819 -169.09042358]
[245.84373474 -156.07304382]
[238.39068604 -143.05566406]
[230.93765259 -130.03828430]
[223.48460388 -117.02091217]
[216.45848083 -103.76822662]
[209.86668396 -90.29424286]
[203.27490234 -76.82025909]
[205.45034790 -59.43848038]
[190.16697693 -49.22879410]
[183.86865234 -35.61516571]
[177.57031250 -22.00153160]
[171.27197266 -8.38790131]
[177.37518311 3.00895452]
[175.75277710 16.03149414]
[166.77697754 25.87075043]
[153.57673645 28.76268959]
[146.98493958 42.23667526]
[140.39315796 55.71066284]
[133.80136108 69.18464661]
[127.20957184 82.65863037]
[120.61778259 96.13262177]
[123.52421570 110.84835052]
[134.74359131 120.80454254]
[145.96295166 130.76072693]
[157.18232727 140.71691895]
[173.34724426 143.47871399]
[178.78338623 158.95063782]
[167.89851379 171.21650696]
[151.89004517 167.65824890]
[147.22613525 151.93629456]
[136.00675964 141.98010254]
[124.78739166 132.02391052]
[113.56802368 122.06771851]
[107.18386078 126.00376129]
[94.41552734 133.87585449]
[88.03136444 137.81188965]
[91.88748169 152.30776978]
[95.74359894 166.80363464]
[99.59972382 181.29951477]
[109.51469421 195.05195618]
[99.04443359 208.38650513]
[83.33255768 202.01679993]
[85.10385132 185.15562439]
[81.24772644 170.65975952]
[77.39160919 156.16387939]
[73.53549194 141.66801453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[9 39]
[13 35]
[14 34]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[52 114]
[55 110]
[56 109]
[57 108]
[58 107]
[61 105]
[62 104]
[63 103]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 95]
[76 92]
[77 91]
[78 90]
[81 88]
[82 87]
[120 131]
[121 130]
[122 129]
[123 128]
[134 144]
[135 143]
[136 142]
[137 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
