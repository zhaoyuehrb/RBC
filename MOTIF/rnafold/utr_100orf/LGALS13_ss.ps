%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGACUCAAUUCUGAAGGUCGCCAAGAAGGAGAGAACAAUGUCUUCUUUACCCGUGCCAUACAAACUGCCUGUGUCUUUGUCUGUUGGUUCCUGCGUGAUAAUCAAAGGGACACCAAUCCACUCUUUUAUCAAUGACC\
) } def
/len { sequence length } bind def

/coor [
[118.29611969 167.23641968]
[130.42715454 158.41383362]
[144.28938293 152.68333435]
[159.11444092 150.36454773]
[145.37077332 144.35522461]
[131.62712097 138.34590149]
[117.88346100 132.33659363]
[103.55693054 136.78071594]
[95.62704468 149.51324463]
[87.69715881 162.24575806]
[87.69026184 178.64489746]
[73.35147858 186.60299683]
[59.43132019 177.93344116]
[60.24965286 161.55471802]
[74.96464539 154.31587219]
[82.89453125 141.58335876]
[90.82440948 128.85084534]
[73.49708557 115.86289215]
[69.03269196 94.23057556]
[54.30089188 91.40673065]
[45.20050430 92.86939240]
[39.27395630 88.35237122]
[24.60872841 85.20101166]
[9.94349957 82.04965210]
[-2.45714855 93.49583435]
[-19.06875801 95.30719757]
[-33.35864639 86.96956635]
[-39.82476044 71.92125702]
[-54.55656052 69.09741211]
[-69.28836060 66.27355957]
[-84.02015686 63.44971085]
[-98.75195312 60.62585831]
[-113.48374939 57.80200958]
[-128.21554565 54.97815704]
[-142.94734192 52.15430832]
[-154.17575073 62.86424255]
[-169.55929565 64.89550018]
[-183.18270874 57.46702194]
[-189.80749512 43.43520737]
[-186.88630676 28.19558144]
[-175.54238892 17.60808563]
[-160.13771057 15.74382877]
[-146.59568787 23.31965828]
[-140.12348938 37.42250824]
[-125.39170074 40.24636078]
[-110.65989685 43.07020950]
[-95.92810059 45.89406204]
[-81.19630432 48.71791077]
[-66.46450806 51.54175949]
[-51.73270798 54.36561203]
[-37.00091171 57.18946075]
[-28.11328888 47.16728210]
[-15.32497120 42.83003998]
[-1.96112227 45.41899872]
[8.44694424 54.35954285]
[13.09485817 67.38442230]
[27.76008797 70.53578186]
[42.42531586 73.68714142]
[57.12474060 76.67492676]
[71.85653687 79.49877930]
[83.09272003 69.56156921]
[82.09082794 54.59506226]
[81.08894348 39.62855911]
[80.08705139 24.66205597]
[79.08515930 9.69555283]
[66.35551453 0.61314720]
[62.49217224 -14.53969383]
[69.31928253 -28.60826111]
[83.61329651 -34.94980621]
[98.62501526 -30.57004929]
[107.26636505 -17.53697395]
[105.45716858 -2.00440025]
[94.05166626 8.69366360]
[95.05355835 23.66016769]
[96.05544281 38.62667084]
[97.05733490 53.59317398]
[98.05922699 68.55967712]
[112.08770752 71.17695618]
[123.41646576 79.67046356]
[129.76075745 92.20391083]
[129.89595032 106.13951111]
[123.89278412 118.59293365]
[137.63644409 124.60224915]
[151.38009644 130.61157227]
[165.12374878 136.62089539]
[179.96672058 138.78567505]
[194.85423279 136.95211792]
[209.74174500 135.11854553]
[224.62925720 133.28497314]
[239.51676941 131.45140076]
[254.40428162 129.61784363]
[269.27044678 127.61853027]
[284.11340332 125.45374298]
[298.95639038 123.28894806]
[313.79934692 121.12416077]
[320.58489990 109.43338013]
[332.69903564 103.88996124]
[345.59829712 106.32527924]
[354.58618164 115.62343597]
[369.47369385 113.78986359]
[384.36123657 111.95629883]
[399.34246826 104.01915741]
[411.11666870 116.21772766]
[402.65423584 130.90866089]
[386.19479370 126.84381104]
[371.30728149 128.67738342]
[356.41976929 130.51094055]
[346.68725586 144.18176270]
[329.75128174 146.67141724]
[315.96414185 135.96711731]
[301.12118530 138.13191223]
[286.27819824 140.29670715]
[271.43524170 142.46150208]
[265.22021484 146.57258606]
[256.23785400 144.50535583]
[241.35034180 146.33891296]
[226.46282959 148.17248535]
[211.57531738 150.00605774]
[196.68780518 151.83963013]
[181.80029297 153.67318726]
[195.34098816 160.12683105]
[206.98983765 169.57693481]
[216.09664917 181.49607849]
[222.15316772 195.21899414]
[224.82135010 209.97978210]
[223.95227051 224.95458984]
[219.59443665 239.30760193]
[211.99108887 252.23776245]
[201.56657410 263.02337646]
[188.90274048 271.06246948]
[174.70637512 275.90637207]
[159.76983643 277.28469849]
[144.92677307 275.12051392]
[131.00563049 269.53466797]
[118.78340149 260.83883667]
[108.94223785 249.51844788]
[102.03141022 236.20527649]
[98.43663788 221.64239502]
[98.35855103 206.64259338]
[101.80151367 192.04307556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[7 82]
[8 17]
[9 16]
[10 15]
[19 60]
[20 59]
[22 58]
[23 57]
[24 56]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 113]
[93 112]
[94 111]
[95 110]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
