%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCUUCCUUUUUCUCCACACUUCUAGCUACCUUGUUUUUAUCGUUUUCGGCACCUGCCCUUCCCCAGCGCCCCCACCACCCCGAGCACUAUGUAUGAUCGGGCUCCCCGCCUGCUCAAAUUGGCUGAAGGUGGCAGCACUGAGGCCCAUGUGGGUCCUGGAUCCUACCAGGUACCUUUCCUGAAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[313.95205688 400.42520142]
[328.65679932 403.39801025]
[319.09924316 391.83715820]
[309.54168701 380.27630615]
[299.98413086 368.71548462]
[290.42657471 357.15463257]
[280.86901855 345.59378052]
[268.69140625 349.02792358]
[256.07373047 347.59020996]
[244.89886475 341.45956421]
[236.84788513 331.51779175]
[233.14717102 319.22308350]
[234.38166809 306.39599609]
[240.40281677 294.94995117]
[231.23066711 283.08102417]
[221.96122742 271.28790283]
[212.59510803 259.57144165]
[203.22898865 247.85496521]
[193.86286926 236.13848877]
[187.21925354 232.87136841]
[184.44096375 224.15141296]
[175.26881409 212.28247070]
[166.09666443 200.41352844]
[156.92453003 188.54458618]
[150.33554077 185.16864014]
[147.70104980 176.40415955]
[138.72535706 164.38597107]
[129.74966431 152.36778259]
[120.77396393 140.34959412]
[111.79827118 128.33139038]
[92.79866791 132.26423645]
[73.76720428 123.80905151]
[62.48994827 104.62976074]
[64.58918762 81.04904938]
[50.99167633 74.71598816]
[37.39416504 68.38292694]
[23.79665184 62.04986191]
[10.19914055 55.71680069]
[0.73015076 67.43959045]
[-11.26214409 76.54986572]
[-25.07802200 82.52152252]
[-39.91266632 85.01142120]
[-54.90303802 83.87910461]
[-69.17810059 79.19472504]
[-81.90941620 71.23471069]
[-92.35923004 60.46543121]
[-99.92323303 47.51592636]
[-104.16548920 33.14111710]
[-104.84356689 18.17782211]
[-101.92238617 3.49602723]
[-115.51989746 -2.83703470]
[-129.11740112 -9.17009640]
[-141.49208069 -5.49348450]
[-152.69273376 -11.06142807]
[-156.94924927 -22.39575195]
[-170.44076538 -28.95160103]
[-183.93228149 -35.50745010]
[-197.55845642 -28.08406448]
[-212.94125366 -30.12107468]
[-224.16564941 -40.83520508]
[-226.91563416 -56.10665512]
[-220.13380432 -70.06324005]
[-206.42788696 -77.33837128]
[-191.06809998 -75.13460541]
[-179.96058655 -64.29933929]
[-177.37641907 -48.99895859]
[-163.88491821 -42.44311142]
[-150.39340210 -35.88726044]
[-132.98994446 -38.08549118]
[-122.78434753 -22.76760864]
[-109.18683624 -16.43454552]
[-95.58932495 -10.10148430]
[-86.23078918 -21.78507233]
[-74.34069824 -30.89472771]
[-60.60756683 -36.89747238]
[-45.82793808 -39.44039536]
[-30.86019897 -38.37140274]
[-16.57470703 -33.74830627]
[-3.80319715 -25.83570099]
[6.70965672 -15.08985138]
[14.34965324 -2.13235712]
[18.66895103 12.28578568]
[19.41231728 27.32771683]
[16.53220367 42.11928940]
[30.12971497 48.45235062]
[43.72722626 54.78541183]
[57.32473755 61.11847305]
[70.92224884 67.45153809]
[77.89193726 64.68142700]
[64.86927795 57.23760986]
[62.56942368 42.41497040]
[72.72416687 31.37498665]
[87.68696594 32.43079376]
[96.19079590 44.78736496]
[91.83130646 59.14121246]
[98.80098724 56.37110519]
[104.34120178 42.43173599]
[109.88141632 28.49236679]
[107.78827667 12.81023312]
[119.67926788 3.84064388]
[125.21948242 -10.09872532]
[130.75970459 -24.03809547]
[136.29991150 -37.97746277]
[141.84013367 -51.91683197]
[136.83396912 -67.15881348]
[145.74949646 -80.49646759]
[161.74746704 -81.69829559]
[172.55561829 -69.84234619]
[169.88285828 -54.02350235]
[155.77949524 -46.37661743]
[150.23928833 -32.43724823]
[144.69906616 -18.49787903]
[139.15885925 -4.55851030]
[133.61863708 9.38085938]
[136.10806274 24.06595612]
[123.82078552 34.03258133]
[118.28057098 47.97195053]
[112.74035645 61.91131973]
[127.25414276 73.81507111]
[134.01937866 90.11502075]
[132.40029907 106.56206512]
[123.81646729 119.35570526]
[132.79216003 131.37390137]
[141.76785278 143.39208984]
[150.74354553 155.41027832]
[159.71923828 167.42846680]
[168.79345703 179.37243652]
[177.96560669 191.24137878]
[187.13775635 203.11032104]
[196.30990601 214.97926331]
[205.57934570 226.77236938]
[214.94546509 238.48884583]
[224.31158447 250.20532227]
[233.67770386 261.92178345]
[241.49449158 266.68148804]
[243.09960938 273.90887451]
[252.27175903 285.77780151]
[269.61190796 283.01303101]
[285.88479614 289.36926270]
[296.65002441 303.01547241]
[299.01907349 320.14474487]
[292.42984009 336.03622437]
[301.98742676 347.59707642]
[311.54498291 359.15789795]
[321.10253906 370.71875000]
[330.66009521 382.27960205]
[340.21765137 393.84045410]
[350.60394287 404.66287231]
[361.76211548 414.68759155]
[378.24468994 410.92645264]
[393.57168579 417.65817261]
[401.78918457 432.05163574]
[399.83416748 448.34274292]
[411.15573120 458.18258667]
[422.47726440 468.02243042]
[433.79879761 477.86227417]
[445.20089722 487.60870361]
[456.68273926 497.26101685]
[468.16458130 506.91329956]
[479.64645386 516.56561279]
[491.12829590 526.21795654]
[506.85009766 524.60534668]
[519.05444336 534.64672852]
[520.50073242 550.38470459]
[510.33084106 562.48223877]
[494.57846069 563.76202393]
[482.58917236 553.46484375]
[481.47598267 537.69976807]
[469.99414062 528.04748535]
[458.51226807 518.39514160]
[447.03042603 508.74285889]
[435.54858398 499.09054565]
[428.39328003 497.18966675]
[423.95895386 489.18383789]
[412.63742065 479.34396362]
[401.31585693 469.50411987]
[389.99432373 459.66427612]
[377.31140137 463.86392212]
[364.10446167 461.22283936]
[353.84835815 452.32672119]
[349.29547119 439.42123413]
[351.73739624 425.84576416]
[340.57922363 415.82104492]
[342.94528198 430.63323975]
[337.03558350 444.42004395]
[324.67660522 452.92034912]
[309.68807983 453.50701904]
[296.70248413 445.99874878]
[289.73321533 432.71606445]
[290.93429565 417.76422119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 147]
[3 146]
[4 145]
[5 144]
[6 143]
[7 142]
[14 137]
[15 136]
[16 134]
[17 133]
[18 132]
[19 131]
[21 130]
[22 129]
[23 128]
[24 127]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[50 72]
[51 71]
[52 70]
[55 68]
[56 67]
[57 66]
[96 118]
[97 117]
[98 116]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
[148 183]
[149 182]
[153 177]
[154 176]
[155 175]
[156 174]
[157 172]
[158 171]
[159 170]
[160 169]
[161 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
