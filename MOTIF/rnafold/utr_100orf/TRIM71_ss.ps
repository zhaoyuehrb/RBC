%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCUCCUCCUCCUCCUCCUCUUCCUCUCUGGUCUCCUCCCUCCUCCGGGCUGGGUUGCAAAUGGCUUCGUUCCCCGAGACCGAUUUCCAGAUCUGCUUGCUGUGCAAGGAGAUGUGCGGCUCGCCGGCGCCGCUCUCCUCCAACUCGUCCGCGUCGUCGU\
) } def
/len { sequence length } bind def

/coor [
[-108.23246002 474.44015503]
[-111.82366180 484.84820557]
[-116.38417053 494.86877441]
[-121.87287903 504.41183472]
[-128.24034119 513.39166260]
[-135.42921448 521.72766113]
[-143.37478638 529.34484863]
[-152.00553894 536.17492676]
[-161.24382019 542.15655518]
[-171.00651550 547.23608398]
[-181.20581055 551.36791992]
[-191.74995422 554.51507568]
[-202.54414368 556.64941406]
[-213.49131775 557.75177002]
[-224.49304199 557.81237793]
[-235.45040894 556.83087158]
[-246.26495361 554.81610107]
[-256.83947754 551.78637695]
[-267.07891846 547.76904297]
[-276.89132690 542.80029297]
[-286.18847656 536.92492676]
[-294.88693237 530.19586182]
[-302.90850830 522.67370605]
[-310.18124390 514.42608643]
[-316.63977051 505.52728271]
[-322.22619629 496.05737305]
[-335.91372681 502.19342041]
[-342.94546509 516.61334229]
[-358.63439941 519.96557617]
[-370.94528198 509.67864990]
[-370.43429565 493.64373779]
[-357.49340820 484.16146851]
[-342.04977417 488.50585938]
[-328.36221313 482.36984253]
[-333.74755859 462.94964600]
[-335.68972778 442.88760376]
[-334.12915039 422.78942871]
[-329.11196899 403.26220703]
[-320.78878784 384.89587402]
[-309.41003418 368.24551392]
[-295.31854248 353.81448364]
[-278.93920898 342.03930664]
[-260.76611328 333.27633667]
[-241.34765625 327.79113770]
[-221.27000427 325.75027466]
[-201.13940430 327.21636963]
[-181.56387329 332.14608765]
[-163.13479614 340.39147949]
[-146.40916443 351.70446777]
[-136.21661377 340.69940186]
[-126.02405548 329.69430542]
[-115.83149719 318.68923950]
[-105.63893890 307.68414307]
[-103.39051056 300.60690308]
[-95.14418793 296.56826782]
[-84.74270630 285.76043701]
[-74.34121704 274.95263672]
[-63.93972778 264.14480591]
[-53.53824234 253.33697510]
[-43.13675308 242.52915955]
[-48.98636246 227.68168640]
[-47.78219604 211.71067810]
[-39.71414948 197.80766296]
[-26.34879684 188.77297974]
[-10.32544041 186.45181274]
[5.16502094 191.35751343]
[15.35757732 180.35243225]
[25.55013466 169.34735107]
[24.72478104 154.51985168]
[34.90470886 143.21394348]
[50.46273804 142.44877625]
[60.65529633 131.44369507]
[70.84785461 120.43861389]
[81.04041290 109.43353271]
[79.05308533 96.88804626]
[84.60169983 85.46212006]
[95.69006348 79.26640320]
[108.32898712 80.52987671]
[118.73047638 69.72205353]
[129.13195801 58.91423035]
[139.53344727 48.10640717]
[143.25325012 39.71144867]
[150.23919678 37.19358826]
[160.84579468 26.58698845]
[171.45240784 15.98038578]
[156.73045349 13.10564232]
[149.62538147 -0.10488594]
[155.34269714 -13.97255611]
[169.69363403 -18.33727264]
[182.16403198 -10.00124550]
[183.61756897 4.92796612]
[195.18989563 -4.61567020]
[200.91378784 -19.36516953]
[215.65553284 -21.49355698]
[227.22787476 -31.03719330]
[238.80021667 -40.58082962]
[250.37255859 -50.12446594]
[256.09643555 -64.87396240]
[270.83819580 -67.00234985]
[282.41052246 -76.54598999]
[293.98284912 -86.08962250]
[305.55520630 -95.63326263]
[317.12753296 -105.17689514]
[325.50030518 -119.91911316]
[341.98422241 -115.95459747]
[342.73782349 -99.01740265]
[326.67117310 -93.60456085]
[315.09884644 -84.06092072]
[303.52648926 -74.51728821]
[291.95416260 -64.97364807]
[280.38183594 -55.43001556]
[275.48565674 -41.36314011]
[259.91619873 -38.55212784]
[248.34385681 -29.00849152]
[236.77151489 -19.46485519]
[225.19917297 -9.92121887]
[220.30302429 4.14565516]
[204.73353577 6.95666742]
[193.16119385 16.50030327]
[182.05900574 26.58698845]
[171.45240784 37.19358826]
[160.84579468 47.80018997]
[150.34127808 58.50789642]
[139.93978882 69.31571960]
[129.53829956 80.12354279]
[119.13681030 90.93136597]
[119.84212494 107.39916992]
[108.52661896 119.38438416]
[92.04548645 119.62609100]
[81.85293579 130.63116455]
[71.66037750 141.63624573]
[61.46781921 152.64132690]
[61.89584732 168.21228027]
[51.40237427 179.22779846]
[36.55521393 179.53990173]
[26.36265755 190.54498291]
[16.17010117 201.55006409]
[21.85044289 214.51832581]
[22.14934540 228.62954712]
[17.05464172 241.74584961]
[7.36880398 251.89273071]
[-5.41727448 257.55627441]
[-19.35370064 257.90902710]
[-32.32892990 252.93064880]
[-42.73041916 263.73846436]
[-53.13190460 274.54629517]
[-63.53339386 285.35412598]
[-73.93488312 296.16192627]
[-84.33636475 306.96975708]
[-94.63386536 317.87670898]
[-104.82641602 328.88180542]
[-115.01897430 339.88687134]
[-125.21153259 350.89196777]
[-135.40408325 361.89703369]
[-128.21360779 370.24423218]
[-121.84636688 379.23440552]
[-116.35948181 388.78662109]
[-111.80219269 398.81497192]
[-108.21533966 409.22924805]
[-105.63105774 419.93576050]
[-104.07247162 430.83831787]
[-103.55345917 441.83880615]
[-104.07856750 452.83837891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 34]
[27 33]
[49 154]
[50 153]
[51 152]
[52 151]
[53 150]
[55 149]
[56 148]
[57 147]
[58 146]
[59 145]
[60 144]
[66 137]
[67 136]
[68 135]
[71 132]
[72 131]
[73 130]
[74 129]
[78 126]
[79 125]
[80 124]
[81 123]
[83 122]
[84 121]
[85 120]
[91 119]
[92 118]
[94 116]
[95 115]
[96 114]
[97 113]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
