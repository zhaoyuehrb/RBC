%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:30:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGGCGGAGUCCGGACGUCGGGAGCAGGAUGGCGGCGGAGCAGGACCCCGAGGCGCGCGCGGCGGCGCGGCCGCUGCUCACUGACCUCUACCAGGCCACCAUGGCGUUGGGCUAUUGGCGCGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[-30.79184151 152.78958130]
[-38.48501587 156.07856750]
[-46.75673294 156.00289917]
[-54.21571350 152.65127563]
[-59.63784409 146.65704346]
[-74.43629456 149.10771179]
[-89.23475647 151.55836487]
[-104.03321075 154.00903320]
[-118.83166504 156.45968628]
[-123.25194550 172.07258606]
[-133.98303223 184.16665649]
[-148.85189819 190.36888123]
[-164.88049316 189.49166870]
[-178.88218689 181.75991821]
[-188.09524536 168.75627136]
[-202.83218384 171.55317688]
[-217.56912231 174.35008240]
[-232.30606079 177.14697266]
[-240.24502563 187.38972473]
[-252.64422607 189.37490845]
[-262.71719360 182.57192993]
[-277.51565552 185.02259827]
[-292.31411743 187.47325134]
[-307.11257935 189.92391968]
[-321.91101074 192.37457275]
[-327.92468262 206.58158875]
[-340.67749023 215.26318359]
[-356.10000610 215.64907837]
[-369.27102661 207.61614990]
[-375.98770142 193.72766113]
[-374.10675049 178.41539001]
[-364.22839355 166.56542969]
[-349.50476074 161.95904541]
[-334.63415527 166.06613159]
[-324.36169434 177.57612610]
[-309.56323242 175.12545776]
[-294.76477051 172.67480469]
[-279.96630859 170.22413635]
[-265.16787720 167.77348328]
[-252.28689575 155.91400146]
[-235.10295105 162.41003418]
[-220.36601257 159.61314392]
[-205.62908936 156.81623840]
[-190.89215088 154.01933289]
[-187.95446777 140.41099548]
[-180.01268005 128.92378235]
[-168.24607849 121.32179260]
[-154.42431641 118.78790283]
[-140.64131165 121.73973083]
[-128.99804688 129.76129150]
[-121.28232574 141.66123962]
[-106.48387146 139.21057129]
[-91.68540955 136.75991821]
[-76.88695526 134.30924988]
[-62.08850479 131.85859680]
[-46.98244858 116.40628052]
[-25.96979904 124.05077362]
[-11.46585178 120.22513580]
[3.03809452 116.39949036]
[13.37112999 105.67206573]
[28.68827057 109.63385773]
[43.19221497 105.80821991]
[57.69616318 101.98257446]
[72.20011139 98.15693665]
[86.70405579 94.33129120]
[97.79615784 84.23350525]
[102.96315765 70.15152740]
[108.13016510 56.06955338]
[113.29716492 41.98757553]
[118.46416473 27.90559769]
[123.63117218 13.82361984]
[128.79817200 -0.25835708]
[125.46099091 -16.31436157]
[137.87577820 -27.02906609]
[153.27128601 -21.38010406]
[155.80990601 -5.17864132]
[142.88014221 4.90864563]
[137.71315002 18.99062347]
[132.54614258 33.07260132]
[127.37914276 47.15457916]
[122.21213531 61.23655319]
[117.04513550 75.31853485]
[111.87813568 89.40051270]
[117.24323273 94.64128113]
[127.97344208 105.12281799]
[133.33854675 110.36359406]
[147.29551697 104.86788940]
[161.25250244 99.37219238]
[165.00910950 84.31671143]
[176.91926575 74.37046051]
[192.40327454 73.35798645]
[205.50721741 81.66859436]
[211.19235229 96.10669708]
[207.27265930 111.12053680]
[195.25529480 120.93699646]
[179.76121521 121.78144836]
[166.74819946 113.32917023]
[152.79122925 118.82486725]
[138.83424377 124.32057190]
[137.60478210 139.27009583]
[150.47634888 146.97221375]
[163.34793091 154.67433167]
[176.21949768 162.37643433]
[182.96455383 162.87196350]
[187.68495178 166.24435425]
[189.50183105 170.75334167]
[201.99824524 179.05030823]
[214.49465942 187.34727478]
[226.99107361 195.64424133]
[239.48748779 203.94120789]
[255.43440247 202.18746948]
[266.64566040 213.66296387]
[264.52093506 229.56469727]
[250.69015503 237.69421387]
[235.76309204 231.81524658]
[231.19052124 216.43762207]
[218.69410706 208.14065552]
[206.19769287 199.84368896]
[193.70127869 191.54672241]
[181.20486450 183.24975586]
[168.51739502 175.24801636]
[155.64581299 167.54589844]
[142.77423096 159.84379578]
[129.90266418 152.14167786]
[90.52970123 108.83524323]
[76.02574921 112.66088104]
[61.52180481 116.48652649]
[47.01785660 120.31216431]
[32.51391220 124.13780975]
[21.14345741 135.13887024]
[6.86373615 130.90344238]
[-7.64021063 134.72908020]
[-22.14415741 138.55471802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[15 44]
[16 43]
[17 42]
[18 41]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[57 133]
[58 132]
[59 131]
[61 129]
[62 128]
[63 127]
[64 126]
[65 125]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[86 99]
[87 98]
[88 97]
[100 124]
[101 123]
[102 122]
[103 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
