%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCAUGGGAGAAUCAGACCUUCAACUCCGACUUCAUCCUCCUUGGAAUCUUCAAUCACAGCCCACCACACACGUUCCUCUUCUUUCUGGUCCUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[82.46218109 124.56240082]
[71.40316010 112.51369476]
[68.00570679 95.95515442]
[53.15241241 98.04788208]
[48.76935196 101.50275421]
[43.97391510 102.68141174]
[39.75090790 101.83237457]
[36.82454681 99.57595062]
[21.84086990 100.27555847]
[6.85719395 100.97516632]
[-8.12648201 101.67476654]
[-23.09746552 102.60731506]
[-38.05213547 103.77256775]
[-53.00680923 104.93782806]
[-67.94155121 106.33551788]
[-82.85274506 107.96530151]
[-95.73054504 117.15621185]
[-109.22314453 110.84756470]
[-124.13433838 112.47734833]
[-131.71989441 126.01393127]
[-145.82737732 132.47599792]
[-161.03219604 129.37873840]
[-171.48779297 117.91311646]
[-173.17375183 102.48790741]
[-165.44180298 89.03440857]
[-151.26504517 82.72576904]
[-136.09471130 85.98778534]
[-125.76412201 97.56614685]
[-110.85292816 95.93636322]
[-99.04167175 86.86203003]
[-84.48252869 93.05410004]
[-69.57132721 91.42432404]
[-63.15109253 87.49926758]
[-54.17206573 89.98316193]
[-39.21739578 88.81790161]
[-24.26272392 87.65264130]
[-17.72352219 83.92916107]
[-8.82608795 86.69109344]
[6.15758801 85.99148560]
[21.14126396 85.29187775]
[36.12493896 84.59227753]
[51.05968094 83.19458771]
[65.91297913 81.10185242]
[75.57463837 69.62786865]
[75.10813904 54.63512421]
[74.64163971 39.64237976]
[74.17514038 24.64963531]
[73.70864105 9.65689087]
[67.17263031 -5.98653936]
[80.39536285 -16.59765244]
[94.25220490 -6.82911777]
[88.70138550 9.19039345]
[89.16788483 24.18313789]
[89.63438416 39.17588043]
[90.10088348 54.16862488]
[90.56738281 69.16136932]
[100.53086853 68.61722565]
[109.91072083 71.12807465]
[117.81989288 76.28508759]
[123.56404114 83.43794250]
[126.70172119 91.77264404]
[127.07581329 100.40231323]
[141.42567444 104.77053070]
[155.77554321 109.13875580]
[170.12541199 113.50697327]
[184.66339111 117.20115662]
[199.35784912 120.21326447]
[214.05232239 123.22537231]
[228.74678040 126.23747253]
[235.99818420 112.97442627]
[246.83795166 102.43919373]
[260.30218506 95.56857300]
[275.19369507 92.97349548]
[290.18832397 94.88470459]
[303.95275879 101.13226318]
[315.26306152 111.16064453]
[323.11352539 124.07812500]
[326.80612183 138.73609924]
[326.01251221 153.83117676]
[320.80322266 168.02113342]
[311.64147949 180.04418945]
[299.34194946 188.83128357]
[284.99826050 193.60104370]
[269.88589478 193.92936707]
[255.34861755 189.78706360]
[242.67906189 181.54244995]
[233.00379944 169.92863464]
[227.18315125 155.97831726]
[225.73468018 140.93193054]
[211.04020691 137.91983032]
[196.34574890 134.90773010]
[181.65129089 131.89561462]
[178.41073608 133.67152405]
[174.10717773 133.85617065]
[169.55220032 131.94894409]
[165.75718689 127.85684204]
[151.40731812 123.48861694]
[137.05746460 119.12039948]
[122.70758820 114.75217438]
[112.39033508 125.23511505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 36]
[13 35]
[14 34]
[15 32]
[16 31]
[18 29]
[19 28]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[62 99]
[63 98]
[64 97]
[65 96]
[66 92]
[67 91]
[68 90]
[69 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
