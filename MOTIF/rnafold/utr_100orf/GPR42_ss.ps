%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUGGGGUCUCAAAGAAGCAGUGGCCACCACCAUGGAUACAGGCCCCGACCAGUCCUACUUCUCCGGCAAUCACUGGUUCGUCUUCUCGGUGUACCUUCUCACUUUCCUGGUGGGGCUCCCCCUCAACCUGC\
) } def
/len { sequence length } bind def

/coor [
[96.38811493 274.76269531]
[96.38811493 259.76269531]
[96.38811493 244.76269531]
[86.79302979 230.11491394]
[96.01422119 214.22401428]
[95.66775513 199.22802734]
[95.32128906 184.23202515]
[94.97482300 169.23602295]
[94.62834930 154.24002075]
[94.28188324 139.24403381]
[80.11547852 134.31321716]
[70.53277588 145.85322571]
[60.95007324 157.39323425]
[55.48294830 173.44149780]
[38.54840469 172.63063049]
[34.63962936 156.13342285]
[49.41006470 147.81053162]
[58.99276733 136.27052307]
[68.57546997 124.73050690]
[63.18692780 113.14144135]
[61.81892014 100.72563171]
[64.43190765 88.80735016]
[70.57128143 78.59954071]
[79.43363190 71.08045959]
[89.96748352 66.90058899]
[100.99607849 66.32865906]
[104.76668549 51.81031036]
[108.53729248 37.29195786]
[112.30789948 22.77360725]
[111.43687439 13.58844948]
[116.33690643 7.96543598]
[120.44184875 -6.46194839]
[124.54679871 -20.88933372]
[128.65173340 -35.31671906]
[132.75668335 -49.74410248]
[136.86163330 -64.17148590]
[136.20298767 -73.37431335]
[141.23159790 -78.88264465]
[145.66868591 -93.21136475]
[150.10578918 -107.54008484]
[139.44345093 -119.58195496]
[136.69470215 -135.29605103]
[142.53930664 -149.99845886]
[155.11619568 -159.37968445]
[153.38755798 -174.27975464]
[151.65890503 -189.17980957]
[149.93025208 -204.07986450]
[140.94082642 -210.40187073]
[137.04263306 -220.44076538]
[139.31507874 -230.74154663]
[146.75735474 -237.90222168]
[145.71868896 -252.86621094]
[144.68002319 -267.83020020]
[143.64135742 -282.79418945]
[142.60269165 -297.75820923]
[141.56402588 -312.72219849]
[140.52536011 -327.68618774]
[138.62474060 -342.56530762]
[135.86849976 -357.30987549]
[121.54013062 -363.02841187]
[112.59661102 -375.59887695]
[111.89177704 -391.01013184]
[119.65055084 -404.34448242]
[133.39712524 -411.34698486]
[148.74502563 -409.78317261]
[160.79679871 -400.15206909]
[165.70674133 -385.52688599]
[161.90814209 -370.57449341]
[150.61309814 -360.06613159]
[153.36933899 -345.32153320]
[164.23368835 -355.66397095]
[179.12394714 -353.85278320]
[187.19218445 -341.20748901]
[182.56048584 -326.94049072]
[168.60317993 -321.44564819]
[155.48936462 -328.72485352]
[156.52803040 -313.76086426]
[157.56669617 -298.79687500]
[158.60536194 -283.83285522]
[159.64402771 -268.86886597]
[160.68269348 -253.90487671]
[161.72135925 -238.94088745]
[173.71215820 -223.83869934]
[164.83032227 -205.80851746]
[166.55895996 -190.90846252]
[168.28761292 -176.00839233]
[170.01626587 -161.10833740]
[175.79457092 -159.61357117]
[181.13864136 -156.95573425]
[185.81727600 -153.24984741]
[189.62803650 -148.65621948]
[192.40605164 -143.37362671]
[207.30612183 -145.10227966]
[222.20617676 -146.83091736]
[237.10623169 -148.55957031]
[244.60183716 -162.14616394]
[258.66616821 -168.70164490]
[273.89117432 -165.70530701]
[284.42260742 -154.30929565]
[286.21081543 -138.89559937]
[278.56829834 -125.39112091]
[264.43368530 -118.98858643]
[249.24205017 -122.14991760]
[238.83488464 -133.65950012]
[223.93482971 -131.93086243]
[209.03475952 -130.20220947]
[194.13470459 -128.47357178]
[184.29844666 -110.20369720]
[164.43449402 -103.10299683]
[159.99740601 -88.77427673]
[155.56031799 -74.44555664]
[151.28901672 -60.06654358]
[147.18406677 -45.63915634]
[143.07913208 -31.21177292]
[138.97418213 -16.78438759]
[134.86923218 -2.35700369]
[130.76429749 12.07038116]
[126.82624817 26.54421425]
[123.05564117 41.06256485]
[119.28503418 55.58091736]
[115.51442719 70.09926605]
[131.19573975 83.56175232]
[136.56253052 104.49178314]
[128.63865662 125.60061646]
[109.27787781 138.89755249]
[109.62435150 153.89355469]
[109.97081757 168.88955688]
[110.31728363 183.88555908]
[110.66375732 198.88154602]
[111.01022339 213.87754822]
[119.81372833 223.38415527]
[119.74423981 235.93869019]
[111.38811493 244.76269531]
[111.38811493 259.76269531]
[111.38811493 274.76269531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[5 130]
[6 129]
[7 128]
[8 127]
[9 126]
[10 125]
[11 19]
[12 18]
[13 17]
[26 121]
[27 120]
[28 119]
[29 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[36 112]
[38 111]
[39 110]
[40 109]
[44 87]
[45 86]
[46 85]
[47 84]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 70]
[59 69]
[92 107]
[93 106]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
