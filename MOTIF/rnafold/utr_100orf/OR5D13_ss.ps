%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGCAUCUGAAAGAAAUCAAAGCAGCACACCCACUUUUAUUCUCUUGGGUUUUUCAGAAUACCCAGAAAUCCAGGUUCCACUCUUUCUGGUUUUCU\
) } def
/len { sequence length } bind def

/coor [
[80.74438477 139.68373108]
[68.69177246 130.75431824]
[66.20044708 115.96265411]
[74.66316223 103.57788849]
[89.34961700 100.52372742]
[78.18165588 90.50990295]
[67.01369476 80.49608612]
[48.30087662 82.34938812]
[34.29217529 70.28159332]
[33.38633728 52.12879944]
[21.61742210 42.82865524]
[9.84850883 33.52851105]
[-1.92040563 24.22836876]
[-13.68931961 14.92822552]
[-25.45823288 5.62808275]
[-37.22714615 -3.67206049]
[-48.99606323 -12.97220421]
[-45.65931320 1.65195847]
[-47.68265533 16.51486778]
[-54.80720520 29.71489716]
[-66.12142181 39.56317139]
[-80.17771149 44.79965973]
[-95.17764282 44.75438309]
[-109.20205688 39.43312836]
[-120.45661163 29.51672745]
[-127.50134277 16.27392769]
[-129.43492126 1.39907360]
[-126.00994110 -13.20467758]
[-117.66462708 -25.66885567]
[-105.46671295 -34.39873505]
[-90.97684479 -38.27737427]
[-76.04893494 -36.80852509]
[-62.59614944 -30.18250656]
[-68.92367554 -43.78259659]
[-75.25119781 -57.38268280]
[-81.57872772 -70.98277283]
[-87.90625000 -84.58286285]
[-103.16861725 -84.73480988]
[-116.84979248 -91.50149536]
[-126.23338318 -103.53939056]
[-129.45626831 -118.45836639]
[-125.87854004 -133.29624939]
[-116.21056366 -145.10694885]
[-102.37191010 -151.54547119]
[-87.11026764 -151.33341980]
[-73.45583344 -144.51290894]
[-64.11972046 -132.43815613]
[-60.95561218 -117.50660706]
[-64.59174347 -102.68293762]
[-74.30615997 -90.91038513]
[-67.97863770 -77.31029510]
[-61.65111160 -63.71020889]
[-55.32358551 -50.11011887]
[-48.99606323 -36.51003265]
[-39.69591904 -24.74111748]
[-27.92700386 -15.44097424]
[-16.15809059 -6.14083147]
[-4.38917637 3.15931177]
[7.37973785 12.45945549]
[19.14865112 21.75959778]
[30.91756630 31.05974197]
[42.68647766 40.35988617]
[53.66481018 36.56703568]
[65.21515656 38.64661789]
[74.36804962 46.18415833]
[78.71185303 57.34685135]
[77.02751923 69.32812500]
[88.19548035 79.34194183]
[99.36344147 89.35576630]
[111.41589355 98.28540039]
[124.24797058 106.05314636]
[137.08004761 113.82088470]
[149.91212463 121.58863068]
[165.72453308 122.11600494]
[172.60559082 135.32586670]
[185.43766785 143.09359741]
[198.26974487 150.86134338]
[211.10182190 158.62908936]
[223.93389893 166.39683533]
[237.35261536 158.92463684]
[252.70939636 159.17892456]
[265.87335205 167.09130859]
[273.30346680 180.53337097]
[273.00103760 195.88928223]
[265.04742432 209.02838135]
[251.58215332 216.41630554]
[236.22724915 216.06575012]
[223.11315918 208.07101440]
[215.76747131 194.58262634]
[216.16615295 179.22891235]
[203.33407593 171.46116638]
[190.50199890 163.69342041]
[177.66992188 155.92567444]
[164.83784485 148.15792847]
[149.94326782 148.18615723]
[142.14437866 134.42070007]
[129.31230164 126.65296173]
[116.48022461 118.88521576]
[103.64814758 111.11747742]
[105.00348663 126.05611420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 69]
[6 68]
[7 67]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[70 99]
[71 98]
[72 97]
[73 96]
[75 94]
[76 93]
[77 92]
[78 91]
[79 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
