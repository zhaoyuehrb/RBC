%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAUUCACGUCUUUCUCUUUGUUUUAUUUUUCUUUCUGGUCCCCAUUGCCACCAGGGUGAAAUGUGCCGUGAAAGACACCUAUAGUUGCUUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[103.52294922 407.63290405]
[92.07855225 397.86865234]
[82.62337494 386.16763306]
[75.47946930 372.92831421]
[70.89013672 358.60168457]
[69.01169586 343.67565918]
[69.90813446 328.65863037]
[73.54890442 314.06207275]
[79.81001282 300.38314819]
[88.47821045 288.08773804]
[99.25825500 277.59463501]
[111.78298187 269.26119995]
[125.62580872 263.37130737]
[122.38553619 248.72547913]
[119.14527130 234.07963562]
[115.90500641 219.43379211]
[112.66473389 204.78794861]
[109.42446899 190.14210510]
[106.18420410 175.49627686]
[94.27348328 172.27763367]
[84.85182953 164.19923401]
[79.79408264 152.78605652]
[80.14210510 140.23437500]
[85.89081573 128.98922729]
[95.97700500 121.26813507]
[93.65353394 106.44917297]
[90.71342468 103.65344238]
[89.09987640 99.52229309]
[89.40182495 94.71730804]
[91.87171936 90.14704895]
[90.93917847 75.17606354]
[82.35889435 61.88361359]
[89.28997803 48.69993591]
[88.35742950 33.72895432]
[87.42488861 18.75796890]
[86.49234009 3.78698587]
[77.91205597 -9.50546646]
[84.84313965 -22.68914413]
[83.91059875 -37.66012955]
[82.97805023 -52.63111115]
[82.04550934 -67.60209656]
[81.11296082 -82.57308197]
[80.18041992 -97.54405975]
[79.24787140 -112.51504517]
[65.45944977 -119.28076935]
[56.91451645 -132.04319763]
[55.91161346 -147.36930847]
[62.72052002 -161.13645935]
[75.50967407 -169.64134216]
[90.83885956 -170.59620667]
[104.58459473 -163.74418640]
[113.04935455 -150.92843628]
[113.95615387 -135.59632874]
[107.06107330 -121.87213898]
[94.21885681 -113.44759369]
[95.15140533 -98.47660828]
[96.08394623 -83.50562286]
[97.01649475 -68.53463745]
[97.94903564 -53.56365585]
[98.88157654 -38.59267044]
[99.81412506 -23.62168884]
[108.32770538 -11.40006161]
[101.46332550 2.85444117]
[102.39587402 17.82542610]
[103.32841492 32.79640961]
[104.26096344 47.76739120]
[112.77454376 59.98902130]
[105.91016388 74.24352264]
[106.84270477 89.21450806]
[108.47248840 104.12570190]
[110.79595947 118.94466400]
[127.07843018 126.57741547]
[135.56683350 142.25466919]
[133.10177612 159.75474548]
[120.83003998 172.25599670]
[124.07031250 186.90184021]
[127.31057739 201.54768372]
[130.55084229 216.19352722]
[133.79110718 230.83937073]
[137.03137207 245.48521423]
[140.27165222 260.13104248]
[155.30711365 259.63186646]
[170.17826843 261.90417480]
[184.37860107 266.87060547]
[197.42445374 274.36196899]
[208.87147522 284.12310791]
[218.32980347 295.82159424]
[225.47729492 309.05899048]
[230.07048035 323.38439941]
[231.95294189 338.30990601]
[231.06054688 353.32717896]
[227.42372131 367.92471313]
[221.16629028 381.60531616]
[212.50141907 393.90307617]
[201.72419739 404.39907837]
[189.20172119 412.73587036]
[175.36048889 418.62948608]
[160.67192078 421.87921143]
[145.63630676 422.37435913]
[130.76576233 420.09802246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 75]
[25 71]
[26 70]
[30 69]
[31 68]
[33 66]
[34 65]
[35 64]
[36 63]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
