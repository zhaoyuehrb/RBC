%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAGCCGGAAGUGGCGUAACGUCCGGUCAAGGCAGCCAUCUCGCCGUGAGACAGCAAGUGUCGGAUCCGCAGGCGCAGCCGUGCGAUGUUGUCCUCUACAGCCAUGUAUUCGGCUCCUGGCAGAGACUUGGGGAUGGAACCGCACAGAGCCGCGGGCCCUUUGCAGCUGCGAUUUUCGCCCUACG\
) } def
/len { sequence length } bind def

/coor [
[173.65501404 150.72880554]
[162.23239136 160.45112610]
[147.99278259 165.16636658]
[133.02505493 164.18283081]
[119.52783203 157.64697266]
[120.79936981 142.70097351]
[112.51799011 155.20771790]
[104.23661804 167.71446228]
[95.95523834 180.22122192]
[87.67385864 192.72796631]
[79.39248657 205.23472595]
[78.22475433 221.01277161]
[64.74690247 227.35285950]
[56.46552277 239.85960388]
[59.85873032 255.29533386]
[51.27311707 268.56420898]
[35.80237961 271.79403687]
[22.62502670 263.06860352]
[19.55895042 247.56459045]
[28.42320061 234.48022461]
[43.95877457 231.57823181]
[52.24015045 219.07148743]
[52.81554031 204.18798828]
[66.88573456 196.95333862]
[75.16711426 184.44659424]
[83.44848633 171.93984985]
[91.72986603 159.43309021]
[100.01124573 146.92634583]
[108.29261780 134.41958618]
[103.99650574 128.27195740]
[89.05237579 129.56546021]
[95.40426636 115.97669983]
[91.10814667 109.82906342]
[76.51676941 113.30636597]
[61.92538834 116.78366852]
[47.36357117 120.38276672]
[32.83233261 124.10340118]
[21.49262810 135.95005798]
[5.62974501 131.79060364]
[1.56206095 115.90394592]
[13.47406006 104.63290405]
[29.11169815 109.57216644]
[43.64293671 105.85153198]
[49.35428238 101.13726044]
[58.44808578 102.19229126]
[73.03946686 98.71498871]
[87.63084412 95.23768616]
[100.34122467 87.27236938]
[109.83288574 75.65736389]
[119.32453918 64.04235840]
[128.81620789 52.42734528]
[138.30786133 40.81233597]
[147.79951477 29.19732857]
[145.72564697 11.83686447]
[156.62673950 -1.39809668]
[173.38972473 -2.63879490]
[182.68597412 -14.41078568]
[191.98222351 -26.18277550]
[190.33193970 -41.67194366]
[199.92735291 -53.47798920]
[214.70407104 -54.95582962]
[224.00032043 -66.72782135]
[233.29656982 -78.49980927]
[235.28137207 -98.54722595]
[253.51336670 -104.95315552]
[262.41107178 -117.02920532]
[264.36798096 -132.72892761]
[278.14660645 -138.38565063]
[287.04431152 -150.46170044]
[295.94201660 -162.53775024]
[304.83969116 -174.61381531]
[313.73739624 -186.68986511]
[316.31619263 -195.47393799]
[322.88604736 -198.89169312]
[331.98428345 -210.81738281]
[341.08251953 -222.74305725]
[335.92227173 -233.01744080]
[334.98263550 -244.42485046]
[338.36166382 -255.30697632]
[345.53234863 -264.09625244]
[355.42449951 -269.54165649]
[366.58425903 -270.88677979]
[377.38775635 -267.97451782]
[387.07217407 -279.42929077]
[396.75659180 -290.88409424]
[406.44100952 -302.33886719]
[416.12542725 -313.79364014]
[412.58203125 -328.78533936]
[418.47674561 -342.82476807]
[431.35574341 -350.60906982]
[446.17153931 -349.33233643]
[455.85595703 -360.78710938]
[465.54037476 -372.24191284]
[475.22479248 -383.69668579]
[484.90921021 -395.15145874]
[494.59362793 -406.60626221]
[504.27804565 -418.06103516]
[513.96246338 -429.51580811]
[505.50250244 -444.60684204]
[506.25543213 -463.37707520]
[517.52227783 -480.23056030]
[537.26861572 -489.37744141]
[544.69610596 -502.40942383]
[552.12365723 -515.44134521]
[559.55114746 -528.47332764]
[553.03845215 -542.55749512]
[556.08105469 -557.77337646]
[567.50903320 -568.27008057]
[582.92810059 -570.01141357]
[596.40930176 -562.32788086]
[602.76885986 -548.17388916]
[599.56134033 -532.99194336]
[588.02014160 -522.61981201]
[572.58312988 -521.04577637]
[565.15557861 -508.01385498]
[557.72808838 -494.98187256]
[550.30053711 -481.94992065]
[555.82073975 -476.87274170]
[572.38122559 -461.64120483]
[584.74780273 -470.13040161]
[589.08209229 -485.57687378]
[603.91644287 -491.68597412]
[617.87127686 -483.77130127]
[620.24163818 -467.90432739]
[609.20916748 -456.25683594]
[593.23706055 -457.76376343]
[580.87042236 -449.27456665]
[575.96844482 -433.05285645]
[565.46069336 -420.95248413]
[551.74926758 -414.61105347]
[537.56103516 -414.47534180]
[525.41723633 -419.83139038]
[515.73284912 -408.37661743]
[506.04840088 -396.92184448]
[496.36398315 -385.46704102]
[486.67956543 -374.01226807]
[476.99514771 -362.55749512]
[467.31072998 -351.10269165]
[457.62631226 -339.64791870]
[461.34957886 -325.25085449]
[455.81585693 -311.25650024]
[442.95245361 -303.10873413]
[427.58023071 -304.10922241]
[417.89581299 -292.65444946]
[408.21139526 -281.19967651]
[398.52697754 -269.74487305]
[388.84255981 -258.29010010]
[394.34906006 -240.45115662]
[387.96252441 -222.74871826]
[372.08447266 -212.37033081]
[353.00820923 -213.64482117]
[343.90997314 -201.71913147]
[334.81173706 -189.79345703]
[325.81344604 -177.79216003]
[316.91574097 -165.71611023]
[308.01806641 -153.64006042]
[299.12036133 -141.56401062]
[290.22265625 -129.48796082]
[288.90216064 -114.65200806]
[274.48712158 -108.13150787]
[265.58941650 -96.05545807]
[268.02545166 -86.10678864]
[264.49932861 -76.25651550]
[255.95141602 -69.85002899]
[245.06855774 -69.20355988]
[235.77232361 -57.43157196]
[226.47607422 -45.65958023]
[228.46403503 -30.94280052]
[219.20401001 -18.87189865]
[203.75421143 -16.88652802]
[194.45796204 -5.11453724]
[185.16171265 6.65745354]
[188.44151306 19.13023186]
[183.86447144 31.39556122]
[172.89396667 38.89032364]
[159.41452026 38.68898773]
[149.92286682 50.30399704]
[140.43121338 61.91900253]
[130.93954468 73.53401184]
[121.44789124 85.14902496]
[111.95623779 96.76403046]
[125.85447693 91.12144470]
[140.34538269 87.24669647]
[155.23001099 89.10355377]
[168.32487488 96.41961670]
[177.70901489 108.12165833]
[182.00584412 122.49306488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[13 22]
[14 21]
[33 47]
[34 46]
[35 45]
[36 43]
[37 42]
[48 181]
[49 180]
[50 179]
[51 178]
[52 177]
[53 176]
[56 172]
[57 171]
[58 170]
[61 167]
[62 166]
[63 165]
[65 161]
[66 160]
[68 158]
[69 157]
[70 156]
[71 155]
[72 154]
[74 153]
[75 152]
[76 151]
[83 147]
[84 146]
[85 145]
[86 144]
[87 143]
[91 139]
[92 138]
[93 137]
[94 136]
[95 135]
[96 134]
[97 133]
[98 132]
[102 117]
[103 116]
[104 115]
[105 114]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
