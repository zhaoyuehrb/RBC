%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCGGGGCCGGGGCCCGGGGCGGCGGCGGCGGGACGCGAGGACCAUGGCUGCCUCCGAGCGCCGCGCCUUCGCGCACAAGAUCAACAGGACGGUGGCCGCAGAGGUGCGGAAGCAGGUGUCCCGGGAACGCAGUGGCUCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[70.34426117 466.41253662]
[58.13534927 476.44839478]
[42.41427994 474.82867432]
[32.50807953 462.51434326]
[34.29392242 446.81127930]
[46.71229935 437.03582764]
[48.24959183 422.11480713]
[45.79146194 415.09555054]
[49.97469711 406.90432739]
[51.81802368 392.01800537]
[49.50452805 384.94976807]
[53.85506439 376.84616089]
[56.00364304 362.00082397]
[58.15222168 347.15551758]
[60.30080032 332.31018066]
[62.44937897 317.46487427]
[64.59796143 302.61953735]
[66.74653625 287.77423096]
[51.85284805 275.20129395]
[47.44755936 256.06820679]
[55.45897293 237.98725891]
[72.84006500 228.25775146]
[73.76348114 213.28619385]
[74.68688965 198.31465149]
[75.61030579 183.34309387]
[76.53372192 168.37155151]
[77.45713043 153.39999390]
[78.38054657 138.42845154]
[79.30396271 123.45690155]
[70.76350403 111.12561798]
[56.42343903 106.72531128]
[42.08337784 102.32501221]
[27.74331665 97.92471313]
[13.40325642 93.52441406]
[-0.93680513 89.12411499]
[-13.32765198 98.27687836]
[-28.55405235 98.37733459]
[-40.77540588 89.59652710]
[-45.42712021 75.47209930]
[-59.76718140 71.07180023]
[-70.95589447 81.59359741]
[-85.91017914 85.09575653]
[-100.60739136 80.63622284]
[-111.09406281 69.41458130]
[-114.54933167 54.44939804]
[-110.04375458 39.76623154]
[-98.78929138 29.31478500]
[-83.81335449 25.90643883]
[-69.14438629 30.45802498]
[-58.72826767 41.74518585]
[-55.36688232 56.73173523]
[-41.02682114 61.13203430]
[-29.25341415 52.04771423]
[-14.21040726 51.63307571]
[-1.66100216 60.25664139]
[3.46349525 74.78404999]
[17.80355644 79.18434906]
[32.14361954 83.58465576]
[46.48368073 87.98495483]
[60.82374191 92.38525391]
[75.16380310 96.78555298]
[88.23912811 81.62637329]
[105.55192566 82.26123810]
[115.42762756 70.97096252]
[115.35587311 58.03270340]
[123.86535645 48.82618332]
[135.96818542 47.94086456]
[146.07362366 36.85572815]
[149.56315613 18.80430984]
[166.43708801 14.08041286]
[176.31278992 2.79013228]
[186.18850708 -8.50014782]
[196.06420898 -19.79042816]
[205.93991089 -31.08070755]
[215.81561279 -42.37098694]
[225.69132996 -53.66127014]
[235.56703186 -64.95154572]
[245.44273376 -76.24182892]
[248.70474243 -91.72310638]
[262.90789795 -96.20864868]
[272.78359985 -107.49892426]
[282.65930176 -118.78920746]
[281.78897095 -134.34170532]
[291.96517944 -145.65097046]
[306.79745483 -146.38487244]
[316.67315674 -157.67514038]
[313.38241577 -172.72430420]
[319.51239014 -186.66261292]
[332.52050781 -194.22920227]
[347.31274414 -192.70346069]
[357.18844604 -203.99374390]
[357.55761719 -220.03254700]
[370.41412354 -229.62886047]
[385.89556885 -225.42123413]
[392.12591553 -210.63737488]
[384.32577515 -196.61820984]
[368.47872925 -194.11802673]
[358.60302734 -182.82774353]
[362.08358765 -168.37010193]
[356.31530762 -154.47079468]
[343.31668091 -146.54054260]
[327.96343994 -147.79943848]
[318.08773804 -136.50915527]
[319.33410645 -121.71111298]
[309.47958374 -110.12048340]
[293.94958496 -108.91350555]
[284.07388306 -97.62322235]
[274.19818115 -86.33293915]
[271.64254761 -71.65922546]
[256.73300171 -66.36611938]
[246.85731506 -55.07584381]
[236.98159790 -43.78556442]
[227.10589600 -32.49528122]
[217.23019409 -21.20500183]
[207.35449219 -9.91472149]
[197.47877502 1.37555826]
[187.60307312 12.66583824]
[177.72737122 23.95611954]
[178.21159363 36.08161926]
[170.02267456 45.57440948]
[157.15875244 46.96116257]
[147.05331421 58.04629898]
[144.26109314 75.34508514]
[126.71791077 80.84666443]
[116.84220123 92.13694763]
[116.93121338 113.75653076]
[94.27551270 124.38031006]
[93.35209656 139.35186768]
[92.42868042 154.32341003]
[91.50527191 169.29496765]
[90.58185577 184.26651001]
[89.65843964 199.23806763]
[88.73503113 214.20960999]
[87.81161499 229.18116760]
[97.33130646 234.16816711]
[104.59931183 242.03240967]
[108.79162598 251.84432983]
[109.44572449 262.45581055]
[106.51148224 272.63449097]
[100.35397339 281.20703125]
[91.70829773 287.19421387]
[81.59185791 289.92279053]
[79.44328308 304.76812744]
[77.29470062 319.61343384]
[75.14612579 334.45877075]
[72.99754333 349.30407715]
[70.84896851 364.14941406]
[68.70038605 378.99472046]
[66.70433044 393.86132812]
[64.86100769 408.74765015]
[63.17060852 423.65209961]
[61.63331604 438.57312012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 152]
[7 151]
[9 150]
[10 149]
[12 148]
[13 147]
[14 146]
[15 145]
[16 144]
[17 143]
[18 142]
[22 134]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[30 61]
[31 60]
[32 59]
[33 58]
[34 57]
[35 56]
[39 52]
[40 51]
[63 125]
[64 124]
[67 122]
[68 121]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[78 110]
[80 108]
[81 107]
[82 106]
[85 103]
[86 102]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
