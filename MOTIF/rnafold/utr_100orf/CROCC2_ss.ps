%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGCUCUGCCUCCAGUGAGCCUGGCAAUGGGGACGCCUCCCAACAGCCCCUACUGGGGCUGGACACCGUGAUCCAGAGACUGGAGGACACCAUCCUGA\
) } def
/len { sequence length } bind def

/coor [
[87.11371613 493.51867676]
[74.60659790 485.00823975]
[65.34309387 473.04821777]
[60.23073578 458.81027222]
[59.77039337 443.68930054]
[64.00715637 429.16674805]
[72.52595520 416.66534424]
[84.49220276 407.40985107]
[98.73356628 402.30703735]
[98.26706696 387.31427002]
[97.56745911 372.33059692]
[96.63491821 357.35961914]
[95.70236969 342.38864136]
[94.76982880 327.41766357]
[93.83728027 312.44668579]
[92.90473938 297.47567749]
[91.97219086 282.50469971]
[91.03964996 267.53372192]
[80.88675690 261.89208984]
[74.72418976 251.90419006]
[74.22576141 240.05760193]
[79.63685608 229.37142944]
[89.68172455 222.62690735]
[89.68172455 207.62690735]
[89.68172455 192.62690735]
[89.68172455 177.62690735]
[77.31626129 166.34707642]
[76.83986664 149.28097534]
[89.02616119 136.84967041]
[88.55966187 121.85692596]
[88.09316254 106.86418152]
[81.97791290 93.16732788]
[71.12677765 82.81102753]
[60.27564621 72.45472717]
[49.42451477 62.09843063]
[33.37032318 58.75255585]
[28.49853706 43.09376526]
[39.82083511 31.23047829]
[55.68980789 35.36663055]
[59.78081512 51.24729919]
[70.63195038 61.60359955]
[81.48307800 71.95989990]
[92.33421326 82.31620026]
[99.54224396 80.24393463]
[113.95830536 76.09941101]
[121.16633606 74.02714539]
[124.86051941 59.48916245]
[128.55470276 44.95117950]
[132.24888611 30.41319275]
[135.94306946 15.87520790]
[139.63725281 1.33722341]
[143.33143616 -13.20076180]
[138.36372375 -28.82938576]
[149.61306763 -40.76187515]
[165.50711060 -36.72311401]
[169.69541931 -20.86782646]
[157.86943054 -9.50657845]
[154.17524719 5.03140688]
[150.48106384 19.56939125]
[146.78688049 34.10737610]
[143.09269714 48.64536285]
[139.39851379 63.18334579]
[135.70433044 77.72132874]
[134.86271667 90.05086517]
[130.42420959 100.05723572]
[123.62420654 106.83811188]
[115.88137817 109.99282074]
[108.61809540 109.64364624]
[103.08590698 106.39768219]
[103.55240631 121.39042664]
[104.01890564 136.38316345]
[114.90354156 144.49487305]
[119.01403809 157.22689819]
[115.04521179 169.79875183]
[104.68172455 177.62690735]
[104.68172455 192.62690735]
[104.68172455 207.62690735]
[104.68172455 222.62690735]
[118.55402374 235.32192993]
[118.92121887 253.80816650]
[106.01063538 266.60116577]
[106.94317627 281.57217407]
[107.87572479 296.54315186]
[108.80826569 311.51412964]
[109.74081421 326.48510742]
[110.67335510 341.45608521]
[111.60590363 356.42709351]
[112.53844452 371.39807129]
[116.25075531 379.94274902]
[113.25981140 386.84777832]
[113.72631073 401.84054565]
[128.25737000 406.04809570]
[140.77587891 414.54174805]
[150.05540466 426.48934937]
[155.18682861 440.72042847]
[155.66744995 455.84075928]
[151.45014954 470.36898804]
[142.94810486 482.88180542]
[130.99427795 492.15332031]
[116.75976562 497.27523804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 91]
[10 90]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[23 78]
[24 77]
[25 76]
[26 75]
[29 71]
[30 70]
[31 69]
[32 43]
[33 42]
[34 41]
[35 40]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
