%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUCCCUAUGAAUUGCUGAGGGAGAGAUACAGCAUAGAAAAAAACAAGGUGAUGCGAUGGCGAGGAAGCUCAGUGUAUUGGAAGUCCUUCUGAUCAUCUUCUGCUUAAUUGUGGUGACCAUAGAUAUCCUCUUGCUGCUUCUUGUGUUGGAGGAAA\
) } def
/len { sequence length } bind def

/coor [
[74.69951630 157.63423157]
[68.16767883 144.13107300]
[76.40472412 131.59527588]
[78.32422638 116.71860504]
[70.85348511 116.05678558]
[62.03670502 128.19204712]
[53.21992493 140.32730103]
[44.40314484 152.46255493]
[35.58636856 164.59780884]
[26.76958847 176.73306274]
[33.60997772 190.42494202]
[33.29231262 205.72715759]
[25.88958740 219.12335205]
[13.10289669 227.53520203]
[-2.12947106 229.02970886]
[-16.30723000 223.26345825]
[-26.17243576 211.56147766]
[-29.45813560 196.61280823]
[-25.40929985 181.85253906]
[-14.95632076 170.67247009]
[-0.50121701 165.64170837]
[14.63433456 167.91627502]
[23.45111275 155.78102112]
[32.26789093 143.64576721]
[41.08467102 131.51051331]
[49.90145111 119.37525940]
[58.71822739 107.24000549]
[64.03993988 97.34796143]
[71.33773041 90.47467041]
[79.47492981 86.89965820]
[87.31877136 86.53652191]
[93.84807587 88.95667267]
[98.24843597 93.44277191]
[102.03580475 78.92878723]
[105.82318115 64.41480255]
[109.61055756 49.90081406]
[113.39792633 35.38682938]
[112.53715515 26.23970413]
[117.40476990 20.62648964]
[121.47637177 6.18966150]
[125.54798126 -8.24716663]
[112.21437836 -16.54187393]
[101.75901031 -28.23875809]
[95.01859283 -42.38951874]
[92.52909851 -57.84996414]
[94.48317719 -73.37255096]
[100.71520996 -87.70703888]
[110.71537781 -99.70117950]
[123.67131042 -108.39335632]
[138.53410339 -113.08966827]
[154.10322571 -113.41931915]
[157.89059448 -127.93330383]
[161.67797852 -142.44729614]
[157.67579651 -157.75392151]
[168.37593079 -168.11521912]
[172.16329956 -182.62921143]
[175.80801392 -197.17967224]
[179.30969238 -211.76522827]
[182.81137085 -226.35076904]
[186.31304932 -240.93632507]
[189.81472778 -255.52186584]
[193.02937317 -270.17337036]
[195.95571899 -284.88513184]
[198.88208008 -299.59692383]
[201.66386414 -314.33673096]
[204.30079651 -329.10311890]
[206.93774414 -343.86950684]
[209.57469177 -358.63592529]
[212.21163940 -373.40231323]
[201.62995911 -384.59759521]
[199.69206238 -399.70050049]
[206.93324280 -412.89251709]
[220.39280701 -419.21533203]
[223.02975464 -433.98175049]
[225.66670227 -448.74813843]
[228.30363464 -463.51455688]
[220.59950256 -469.60162354]
[215.69665527 -478.04144287]
[214.24270630 -487.63430786]
[216.39845276 -497.03457642]
[221.82131958 -504.93942261]
[229.71905518 -510.26940918]
[238.96519470 -512.31579590]
[242.75257874 -526.82977295]
[237.88522339 -542.48992920]
[249.21089172 -554.34997559]
[265.07867432 -550.20935059]
[269.16519165 -534.32751465]
[257.26657104 -523.04235840]
[253.47918701 -508.52838135]
[265.30206299 -491.90875244]
[261.06439209 -471.66055298]
[243.07003784 -460.87759399]
[240.43309021 -446.11120605]
[237.79614258 -431.34478760]
[235.15921021 -416.57839966]
[245.59840393 -405.98779297]
[247.82604980 -391.10485840]
[240.78054810 -377.60617065]
[226.97804260 -370.76538086]
[224.34109497 -355.99896240]
[221.70414734 -341.23257446]
[219.06719971 -326.46618652]
[216.43025208 -311.69976807]
[218.36022949 -304.52502441]
[213.59385681 -296.67056274]
[210.66749573 -281.95877075]
[207.74114990 -267.24700928]
[209.63304138 -262.81042480]
[208.72114563 -257.13476562]
[204.40028381 -252.02018738]
[200.89859009 -237.43464661]
[197.39691162 -222.84909058]
[193.89523315 -208.26354980]
[190.39355469 -193.67799377]
[191.89779663 -186.40206909]
[186.67729187 -178.84184265]
[182.88992310 -164.32785034]
[187.16299438 -150.05934143]
[176.19195557 -138.65991211]
[172.40458679 -124.14593506]
[168.61721802 -109.63194275]
[181.07406616 -102.49042511]
[191.25910950 -92.35194397]
[198.46980286 -79.90690613]
[202.20649719 -66.00510406]
[202.20700073 -51.59770966]
[198.46495056 -37.67218018]
[191.23072815 -25.18458557]
[180.99470520 -14.99396324]
[168.45399475 -7.80323267]
[154.46496582 -4.11070538]
[139.98480225 -4.17556047]
[135.91320801 10.26126862]
[131.84159851 24.69809723]
[127.91191864 39.17420197]
[124.12454224 53.68818665]
[120.33716583 68.20217133]
[116.54979706 82.71616364]
[112.76242065 97.23014832]
[114.23268127 112.15792084]
[120.77881622 125.65414429]
[127.32495880 139.15036011]
[133.87109375 152.64659119]
[140.41723633 166.14282227]
[155.42945862 171.08332825]
[162.47654724 185.22949219]
[157.37759399 200.18864441]
[143.15771484 207.08578491]
[128.25331116 201.82896423]
[121.50689697 187.53694153]
[126.92100525 172.68894958]
[120.37487030 159.19273376]
[113.82872772 145.69650269]
[107.28259277 132.20028687]
[100.73645782 118.70405579]
[93.26570892 118.04223633]
[92.54005432 133.02467346]
[98.44505310 146.81347656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[33 140]
[34 139]
[35 138]
[36 137]
[37 136]
[39 135]
[40 134]
[41 133]
[51 122]
[52 121]
[53 120]
[55 118]
[56 117]
[57 115]
[58 114]
[59 113]
[60 112]
[61 111]
[62 108]
[63 107]
[64 106]
[65 104]
[66 103]
[67 102]
[68 101]
[69 100]
[73 96]
[74 95]
[75 94]
[76 93]
[83 90]
[84 89]
[141 156]
[142 155]
[143 154]
[144 153]
[145 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
