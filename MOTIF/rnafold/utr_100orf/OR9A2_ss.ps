%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUGGACAACCACUCUAGUGCCACUGAAUUCCACCUUCUAGGCUUCCCUGGGUCCCAAGGACUACACCACAUUCUUUUUGCUAUAUUCUUUUUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[88.50520325 360.99478149]
[83.29423523 346.92901611]
[82.55642700 331.94628906]
[73.81531525 344.13616943]
[65.26483154 356.46051025]
[56.90704727 368.91632080]
[48.54926300 381.37213135]
[47.98535156 397.76159668]
[33.38453674 405.22805786]
[19.76688385 396.09069824]
[21.14106369 379.74923706]
[36.09344101 373.01434326]
[44.45122528 360.55853271]
[52.80900955 348.10272217]
[53.94195175 340.66351318]
[61.62544632 335.39505005]
[70.36656189 323.20516968]
[75.39930725 309.07467651]
[76.33185577 294.10369873]
[77.26439667 279.13269043]
[78.19694519 264.16171265]
[65.70151520 257.92572021]
[56.52254486 247.34330750]
[52.08762360 234.00933838]
[53.10599518 219.95046997]
[59.45536423 207.31701660]
[70.19549561 198.05413818]
[83.70732880 193.60226440]
[85.10501099 178.66752625]
[86.50270081 163.73278809]
[87.90039062 148.79804993]
[74.07746124 143.64158630]
[62.22271729 134.62409973]
[53.39765167 122.45053101]
[48.42172623 108.11228180]
[47.79679489 92.80666351]
[51.65771103 77.83692169]
[59.75388718 64.50128937]
[71.46396637 53.98043442]
[85.84293365 47.23306656]
[82.14875031 32.69507980]
[78.45456696 18.15709496]
[74.76038361 3.61911011]
[71.06620026 -10.91887474]
[59.24020767 -22.28012466]
[63.42851639 -38.13541031]
[79.32255554 -42.17417526]
[90.57189941 -30.24168205]
[85.60417938 -14.61305809]
[89.29837036 -0.07507354]
[92.99255371 14.46291161]
[96.68673706 29.00089645]
[100.38092041 43.53888321]
[115.23421478 45.63161087]
[122.80146027 32.68028641]
[130.36869812 19.72896004]
[137.93594360 6.77763462]
[140.70597839 -9.94849110]
[157.54525757 -11.91696644]
[164.09838867 3.71930170]
[150.88726807 14.34487820]
[143.32002258 27.29620361]
[135.75277710 40.24752808]
[128.18554688 53.19885635]
[139.76145935 63.24225998]
[148.00045776 76.00283813]
[152.31159973 90.42525482]
[152.42506409 105.34151459]
[148.40782166 119.56552124]
[140.65232849 131.98739624]
[129.83946228 141.66003418]
[116.87937164 147.87121582]
[102.83512878 150.19573975]
[101.43744659 165.13047791]
[100.03975677 180.06521606]
[98.64206696 194.99995422]
[112.58642578 203.21997070]
[121.55383301 216.62635803]
[123.81140137 232.53820801]
[118.96202087 247.79966736]
[108.01313782 259.40579224]
[93.16793060 265.09426880]
[92.23538208 280.06524658]
[91.30284119 295.03622437]
[90.37029266 310.00720215]
[100.41242981 298.86471558]
[113.34152985 291.25955200]
[127.95964813 287.89642334]
[142.91232300 289.08694458]
[156.81411743 294.72079468]
[168.37693787 304.27593994]
[176.52943420 316.86709595]
[180.51622009 331.32757568]
[179.96789551 346.31753540]
[174.93527222 360.44812012]
[165.88464355 372.40997314]
[153.65461731 381.09481812]
[139.37835693 385.69790649]
[124.37866211 385.79278564]
[110.04532623 381.37063599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 17]
[4 16]
[5 14]
[6 13]
[7 12]
[18 85]
[19 84]
[20 83]
[21 82]
[28 76]
[29 75]
[30 74]
[31 73]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
