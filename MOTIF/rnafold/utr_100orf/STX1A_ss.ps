%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCGCAUGCGGGGCUCACACGGCUGCAGCCGGCGCCGCUGCCACUCCCGGGAGCAUGAAGGACCGAACCCAGGAGCUCCGCACGGCCAAGGACAGCGAUGAUGAUGAUGAUGUCGCUGUCACCGUGGACCGAGACCGCUUCAUGGAUGAGUUCU\
) } def
/len { sequence length } bind def

/coor [
[317.70474243 168.39654541]
[303.03460693 165.26808167]
[288.36447144 162.13961792]
[273.69433594 159.01115417]
[271.24209595 160.47616577]
[268.04602051 161.03001404]
[264.46066284 160.37834167]
[260.94262695 158.36442566]
[257.99819946 155.00115967]
[243.62516785 150.70976257]
[229.25213623 146.41836548]
[214.87910461 142.12695312]
[200.50608826 137.83555603]
[186.13305664 133.54415894]
[171.76002502 129.25276184]
[157.38700867 124.96137238]
[143.01397705 120.66997528]
[128.64094543 116.37857819]
[120.33885193 133.09434509]
[102.26976776 144.63821411]
[78.03847504 145.52696228]
[54.13393784 132.81895447]
[40.76203537 139.61544800]
[27.39013100 146.41192627]
[14.01822662 153.20840454]
[5.53122187 167.24061584]
[-10.85678673 166.63627625]
[-18.28722000 152.01708984]
[-9.11628723 138.42201233]
[7.22174406 139.83650208]
[20.59364891 133.04002380]
[33.96555328 126.24353790]
[47.33745575 119.44705963]
[46.81262207 111.96543884]
[32.90604401 117.58746338]
[23.26196098 106.09869385]
[31.20839691 93.37650299]
[45.76294708 97.00221252]
[45.23810959 89.52059937]
[31.04828835 84.65757751]
[16.85846710 79.79455566]
[1.29522467 82.63991547]
[-8.23617935 71.19432831]
[-22.42600060 66.33130646]
[-36.50879288 73.50420380]
[-51.51279831 68.53878784]
[-58.53640747 54.38094330]
[-53.41263580 39.43027496]
[-39.18132401 32.55674744]
[-24.28566360 37.83829880]
[-17.56298065 52.14148331]
[-3.37315917 57.00450516]
[11.17513180 53.81130981]
[21.72148705 65.60473633]
[35.91130829 70.46775818]
[50.10113144 75.33078003]
[55.04857254 69.69404602]
[41.26924896 63.76696777]
[42.64837265 48.83050156]
[57.28001022 45.52668762]
[64.94345856 58.42057037]
[69.89090729 52.78383255]
[63.22854996 39.34460068]
[47.98976898 35.83551788]
[38.61310196 23.32104111]
[39.52592468 7.71012211]
[50.29722214 -3.62623954]
[65.84112549 -5.33536100]
[78.81827545 3.38975263]
[83.10125732 18.42936897]
[76.66777802 32.68224335]
[83.33013916 46.12147522]
[116.38201904 54.24772644]
[134.05477905 77.53875732]
[132.93234253 102.00554657]
[147.30537415 106.29694366]
[161.67840576 110.58834076]
[176.05142212 114.87973785]
[190.42445374 119.17113495]
[204.79748535 123.46253204]
[219.17050171 127.75393677]
[233.54353333 132.04533386]
[247.91656494 136.33673096]
[262.28958130 140.62812805]
[276.82281494 144.34103394]
[291.49295044 147.46948242]
[306.16305542 150.59794617]
[320.83319092 153.72640991]
[331.99139404 137.43338013]
[348.95657349 127.43225098]
[368.50762939 125.56878662]
[386.95495605 132.14868164]
[400.83670044 145.88858032]
[414.59225464 139.90657043]
[428.34783936 133.92457581]
[442.10339355 127.94257355]
[455.85897827 121.96057129]
[469.61453247 115.97856903]
[483.37011719 109.99657440]
[497.12567139 104.01457214]
[510.88122559 98.03256989]
[517.54852295 91.70523834]
[524.97241211 92.07155609]
[538.84490967 86.36598206]
[543.41174316 71.41011810]
[556.55175781 62.93218231]
[572.06048584 64.93518829]
[582.61529541 76.47338104]
[583.23248291 92.09878540]
[573.62066650 104.43354797]
[558.31823730 107.65358734]
[544.55047607 100.23848724]
[530.67797852 105.94406128]
[516.86322021 111.78813934]
[503.10766602 117.77014160]
[489.35211182 123.75213623]
[475.59652710 129.73414612]
[461.84097290 135.71614075]
[448.08538818 141.69813538]
[434.32983398 147.68014526]
[420.57424927 153.66213989]
[406.81869507 159.64414978]
[407.62802124 177.14846802]
[401.67944336 193.63090515]
[413.05136108 203.41250610]
[424.42324829 213.19410706]
[435.79516602 222.97570801]
[447.16708374 232.75732422]
[458.53897095 242.53892517]
[469.91088867 252.32052612]
[485.41873169 255.45385742]
[490.02206421 269.61926270]
[501.39398193 279.40084839]
[517.59967041 281.91247559]
[523.27423096 297.29852295]
[512.58026123 309.73117065]
[496.51870728 306.42074585]
[491.61236572 290.77276611]
[480.24044800 280.99114990]
[465.54602051 278.55746460]
[460.12927246 263.69241333]
[448.75738525 253.91082764]
[437.38546753 244.12922668]
[426.01358032 234.34762573]
[414.64166260 224.56602478]
[403.26974487 214.78440857]
[391.89785767 205.00280762]
[384.09356689 210.27084351]
[375.35211182 213.80206299]
[366.05520630 215.43696594]
[356.60983276 215.09896851]
[347.43060303 212.79795837]
[338.92138672 208.63014221]
[331.45773315 202.77391052]
[325.37008667 195.48231506]
[320.92935181 187.07211304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[22 33]
[23 32]
[24 31]
[25 30]
[39 56]
[40 55]
[41 54]
[43 52]
[44 51]
[62 72]
[63 71]
[93 122]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[103 113]
[104 112]
[124 147]
[125 146]
[126 145]
[127 144]
[128 143]
[129 142]
[130 141]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
