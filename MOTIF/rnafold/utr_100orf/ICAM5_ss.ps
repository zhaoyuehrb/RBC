%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:18:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCUCUAGCCCAGCUCCUCGGCUCGCGCUCUCCUCGCCUCCUGUGCUUUCCCCGCCGCGGCGAUGCCAGGGCCUUCGCCAGGGCUGCGCCGGGCGCUACUCGGCCUCUGGGCUGCUCUGGGCCUGGGGCUCUUCGGCCUCUCAGCGGUCUCGCAGGAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[299.40994263 360.49304199]
[293.82147217 348.42352295]
[296.25387573 335.14913940]
[286.37258911 323.86373901]
[276.49130249 312.57833862]
[266.61001587 301.29293823]
[248.33598328 301.21301270]
[235.67402649 287.59860229]
[236.96043396 268.73181152]
[226.65916443 257.82839966]
[216.35789490 246.92503357]
[206.05662537 236.02163696]
[195.75535583 225.11825562]
[185.45408630 214.21487427]
[175.15281677 203.31147766]
[164.85154724 192.40809631]
[157.81562805 194.01390076]
[150.59486389 193.04721069]
[144.10850525 189.58288574]
[139.19911194 184.01672363]
[136.52317810 177.02078247]
[136.46365356 169.46243286]
[139.07586670 162.29678345]
[129.85089111 150.46885681]
[120.62591553 138.64093018]
[111.40093231 126.81301117]
[82.85636139 129.54318237]
[61.09064865 104.57928467]
[46.18724823 106.27890015]
[31.28384781 107.97851562]
[16.38044930 109.67813110]
[12.22568989 124.30025482]
[2.78763008 136.21626282]
[-10.49449444 143.60906982]
[-25.59525681 145.35131836]
[-40.21189880 141.17733765]
[-52.11548996 131.72360229]
[-59.49081802 118.43177032]
[-61.21320343 103.32872772]
[-57.01998901 88.71759033]
[-47.55060959 76.82644653]
[-34.24908066 69.46860504]
[-19.14378929 67.76609039]
[-4.53817844 71.97852325]
[7.34049988 81.46353912]
[14.68083382 94.77473450]
[29.58423233 93.07511902]
[44.48763275 91.37550354]
[59.39103317 89.67588806]
[63.71865463 83.55039215]
[48.78137589 82.18011475]
[42.49952698 68.55886841]
[51.15504074 56.30806732]
[66.09229279 57.67866898]
[72.37390137 71.29940033]
[76.70152283 65.17391205]
[73.32418060 50.55906677]
[69.94684601 35.94422531]
[66.56950378 21.32938576]
[61.56752014 13.63230991]
[63.26931381 6.40606260]
[60.16915512 -8.27007484]
[57.06899261 -22.94621086]
[53.96883011 -37.62234879]
[50.86867142 -52.29848480]
[37.90837479 -60.93957901]
[34.97343826 -75.86743164]
[43.29126740 -88.16983795]
[40.19110870 -102.84597778]
[37.09094620 -117.52211761]
[24.13064957 -126.16320801]
[21.19571304 -141.09106445]
[29.51354408 -153.39346313]
[26.41338348 -168.06961060]
[23.31322289 -182.74574280]
[11.95884132 -194.57832336]
[16.78820610 -210.25025940]
[32.83328247 -213.63958740]
[43.58826828 -201.25967407]
[37.98936081 -185.84590149]
[41.08951950 -171.16976929]
[44.18968201 -156.49363708]
[56.77237701 -148.60621643]
[60.12545013 -133.76667786]
[51.76708221 -120.62227631]
[54.86724472 -105.94613647]
[57.96740723 -91.27000427]
[70.55010223 -83.38258362]
[73.90317535 -68.54305267]
[65.54480743 -55.39864731]
[68.64496613 -40.72251129]
[71.74513245 -26.04637337]
[74.84529114 -11.37023544]
[77.94544983 3.30590153]
[81.18434906 17.95204544]
[84.56168365 32.56688690]
[87.93902588 47.18172836]
[91.31636810 61.79656982]
[104.72090149 62.55303574]
[116.58337402 67.69947815]
[125.57485199 76.29040527]
[130.81752014 87.01922607]
[131.96566772 98.40840149]
[129.21292114 109.00973511]
[123.22885895 117.58803558]
[132.45384216 129.41595459]
[141.67881775 141.24388123]
[150.90379333 153.07180786]
[173.08607483 159.81651306]
[175.75494385 182.10682678]
[186.05621338 193.01020813]
[196.35748291 203.91360474]
[206.65875244 214.81698608]
[216.96002197 225.72036743]
[227.26129150 236.62376404]
[237.56256104 247.52714539]
[247.86383057 258.43054199]
[259.63861084 256.44485474]
[270.78903198 260.36935425]
[278.56472778 269.11270142]
[281.10772705 280.41061401]
[277.89538574 291.41165161]
[287.77667236 302.69705200]
[297.65798950 313.98245239]
[307.53927612 325.26782227]
[324.99209595 326.09252930]
[336.24401855 339.01562500]
[334.72024536 355.74429321]
[344.81335449 366.84066772]
[354.90643311 377.93704224]
[364.99951172 389.03341675]
[375.09259033 400.12979126]
[385.18569946 411.22616577]
[395.27877808 422.32254028]
[405.37185669 433.41891479]
[415.46496582 444.51528931]
[425.66259766 455.51568604]
[435.96386719 466.41906738]
[446.46963501 477.12554932]
[457.17611694 487.63131714]
[467.88259888 498.13708496]
[483.42855835 496.44683838]
[496.39511108 505.18771362]
[500.65982056 520.23254395]
[494.20904541 534.47753906]
[480.08862305 541.19677734]
[464.96578979 537.21752930]
[455.98110962 524.41876221]
[457.37683105 508.84356689]
[446.67034912 498.33779907]
[435.96386719 487.83203125]
[431.22299194 486.98446655]
[426.97885132 483.12188721]
[425.06048584 476.72033691]
[414.75921631 465.81695557]
[407.84933472 463.10244751]
[404.36859131 454.60839844]
[394.27548218 443.51202393]
[384.18240356 432.41561890]
[374.08932495 421.31924438]
[363.99621582 410.22286987]
[353.90313721 399.12649536]
[343.81005859 388.03012085]
[333.71694946 376.93374634]
[323.62387085 365.83737183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[6 122]
[9 117]
[10 116]
[11 115]
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[23 108]
[24 107]
[25 106]
[26 105]
[28 49]
[29 48]
[30 47]
[31 46]
[56 98]
[57 97]
[58 96]
[59 95]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[68 87]
[69 86]
[70 85]
[73 82]
[74 81]
[75 80]
[128 165]
[129 164]
[130 163]
[131 162]
[132 161]
[133 160]
[134 159]
[135 158]
[136 157]
[137 155]
[138 154]
[139 151]
[140 150]
[141 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
