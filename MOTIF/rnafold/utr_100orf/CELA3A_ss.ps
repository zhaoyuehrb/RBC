%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:21:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUCAUCACAAAACUCAUGAUGCUCCGGCUGCUCAGUUCCCUCCUCCUUGUGGCCGUUGCCUCAGGCUAUGGCCCACCUUCCUCUCACUCUUCCAGCCGCGUUGUCCAUGGUGAGG\
) } def
/len { sequence length } bind def

/coor [
[36.72709274 400.95578003]
[35.55229568 416.03805542]
[29.77244186 430.01834106]
[19.95378494 441.52700806]
[7.05825710 449.43652344]
[-7.65076923 452.97201538]
[-22.73225403 451.78710938]
[-36.70866776 445.99789429]
[-48.21074295 436.17153931]
[-56.11162186 423.27072144]
[-59.63726044 408.55932617]
[-58.44224930 393.47863770]
[-52.64366531 379.50610352]
[-42.80959320 368.01062012]
[-29.90347862 360.11837769]
[-15.18972778 356.60260010]
[-0.10984404 357.80770874]
[5.63040733 343.94952393]
[11.37065887 330.09133911]
[17.11091042 316.23312378]
[22.85116196 302.37493896]
[20.57334518 287.65554810]
[33.00277710 277.86679077]
[38.74302673 264.00857544]
[44.48328018 250.15039062]
[33.13206863 234.39515686]
[33.40393448 214.83758545]
[45.35979462 199.17984009]
[64.42613983 193.68830872]
[68.68637085 179.30601501]
[72.94660187 164.92372131]
[77.20683289 150.54142761]
[81.46706390 136.15913391]
[85.72728729 121.77683258]
[75.61229706 109.12033844]
[74.94026947 92.93242645]
[83.97142792 79.48109436]
[99.20887756 73.97472382]
[103.09116364 59.48583984]
[106.97344971 44.99695206]
[94.27186584 37.87326813]
[83.66486359 27.90872574]
[75.77278137 15.69236660]
[71.05567932 1.94474041]
[69.78649902 -12.52459335]
[72.03528595 -26.86473465]
[77.66535187 -40.23348618]
[86.34155273 -51.84681702]
[97.55023956 -61.02483368]
[110.62968445 -67.23159027]
[124.80912018 -70.10639191]
[139.25418091 -69.48474121]
[143.51441956 -83.86703491]
[142.95648193 -93.11113739]
[148.07899475 -98.56735992]
[152.71424866 -112.83320618]
[157.34950256 -127.09905243]
[161.98475647 -141.36489868]
[166.62001038 -155.63075256]
[171.25526428 -169.89659119]
[168.16113281 -185.41229248]
[179.45269775 -195.12570190]
[184.08795166 -209.39154053]
[188.72320557 -223.65739441]
[187.86735535 -240.58972168]
[203.90104675 -246.09945679]
[213.63401794 -232.21762085]
[202.98904419 -219.02214050]
[198.35379028 -204.75628662]
[193.71853638 -190.49044800]
[197.14421082 -175.99513245]
[185.52110291 -165.26133728]
[180.88584900 -150.99549866]
[176.25059509 -136.72964478]
[171.61534119 -122.46379852]
[166.98008728 -108.19795227]
[162.34483337 -93.93210602]
[157.89671326 -79.60680389]
[153.63647461 -65.22451019]
[166.90515137 -57.24253845]
[177.67936707 -46.10569000]
[185.22869873 -32.56077576]
[189.03919983 -17.51813316]
[188.84848022 -1.99044490]
[184.66366577 12.97543049]
[176.76138306 26.36904526]
[165.66944885 37.28457642]
[152.13159180 44.98209381]
[137.05763245 48.93770981]
[121.46234131 48.87923813]
[117.58005524 63.36812592]
[113.69776917 77.85700989]
[122.84825897 87.51409912]
[126.03372955 100.43089294]
[122.42254639 113.23519135]
[112.95747375 122.58416748]
[100.10958862 126.03706360]
[95.84935760 140.41935730]
[91.58912659 154.80165100]
[87.32889557 169.18395996]
[83.06866455 183.56625366]
[78.80843353 197.94854736]
[87.06709290 205.03788757]
[92.41970062 214.47053528]
[94.25710297 225.12011719]
[92.38816071 235.72500610]
[87.05922699 245.03785706]
[78.92205048 251.97229004]
[68.95416260 255.72958374]
[58.34147263 255.89064026]
[52.60121918 269.74884033]
[46.86096954 283.60702515]
[48.72820282 299.31765747]
[36.70935440 308.11520386]
[30.96910286 321.97338867]
[25.22885132 335.83157349]
[19.48859978 349.68975830]
[13.74834919 363.54797363]
[25.26358223 373.35891724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[23 112]
[24 111]
[25 110]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[38 92]
[39 91]
[40 90]
[52 79]
[53 78]
[55 77]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
