%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUGGGCCUUCGGGACAGCAGAGGAGCAGUGUCCGGCCAUGGCCGGAGCCCGCAGGCUGGAGCUAGGCGAGGCCCUGGCGCUGGGGUCGGGCUGGCGUCAUGCGUGCCACGCUCUCCUCUACGCGCCGGACCCUGGGA\
) } def
/len { sequence length } bind def

/coor [
[73.15838623 501.82666016]
[72.49018097 486.84155273]
[71.82198334 471.85644531]
[68.90438843 467.98266602]
[68.44410706 462.21588135]
[71.47290802 456.19198608]
[71.47290802 441.19198608]
[71.47290802 426.19198608]
[68.73077393 422.19204712]
[68.52783966 416.41049194]
[71.82198334 410.52749634]
[72.49018097 395.54238892]
[73.15838623 380.55728149]
[73.82659149 365.57217407]
[74.49478912 350.58706665]
[61.93267822 344.60150146]
[52.58232117 334.23742676]
[47.88772964 321.04580688]
[48.59280777 307.01803589]
[54.62366104 294.28518677]
[65.09480286 284.79425049]
[78.43901062 280.01058960]
[79.44090271 265.04409790]
[80.44278717 250.07759094]
[81.44467926 235.11108398]
[82.44657135 220.14457703]
[83.44845581 205.17807007]
[84.45034790 190.21157837]
[81.73673248 183.27156067]
[85.64494324 174.92396545]
[86.98001862 159.98350525]
[88.31510162 145.04302979]
[89.65017700 130.10256958]
[90.98525238 115.16210175]
[82.49604797 102.79547882]
[68.07405853 98.67162323]
[53.65206528 94.54777527]
[39.23007202 90.42392731]
[24.80808067 86.30007172]
[9.03896141 90.80194855]
[-2.55454850 79.20356750]
[1.95396006 63.43634033]
[17.92651939 59.72024536]
[28.93193054 71.87808228]
[43.35392380 76.00193024]
[57.77591705 80.12578583]
[72.19790649 84.24963379]
[86.61990356 88.37348175]
[74.80860901 79.12722015]
[73.66873169 64.17059326]
[83.94239044 53.24118423]
[98.94087219 53.45463562]
[108.89934540 64.67198181]
[107.33452606 79.58972168]
[114.39626312 66.35598755]
[121.45800018 53.12224579]
[121.12865448 37.30447006]
[133.94665527 29.71842766]
[141.00839233 16.48468971]
[147.92227173 3.17310238]
[154.68742371 -10.21468067]
[161.45257568 -23.60246277]
[160.77090454 -39.40897751]
[173.41671753 -47.27870560]
[180.18186951 -60.66648865]
[186.94702148 -74.05426788]
[193.71217346 -87.44205475]
[194.80778503 -96.59388733]
[200.78009033 -101.05022430]
[207.84182739 -114.28396606]
[203.47140503 -129.23512268]
[210.82153320 -142.55541992]
[225.10209656 -146.62982178]
[232.16384888 -159.86355591]
[239.22558594 -173.09729004]
[246.28732300 -186.33103943]
[253.34906006 -199.56477356]
[260.41079712 -212.79850769]
[255.57331848 -227.84425354]
[262.86587524 -241.86546326]
[277.96191406 -246.54359436]
[291.90524292 -239.10322571]
[296.42349243 -223.95855713]
[288.83612061 -210.09468079]
[273.64453125 -205.73677063]
[266.58279419 -192.50303650]
[259.52105713 -179.26930237]
[252.45932007 -166.03555298]
[245.39758301 -152.80181885]
[238.33584595 -139.56808472]
[242.90165710 -125.43694305]
[235.92855835 -111.91545105]
[221.07557678 -107.22222900]
[214.01382446 -93.98848724]
[207.09996033 -80.67690277]
[200.33480835 -67.28911591]
[193.56965637 -53.90133667]
[186.80450439 -40.51355362]
[187.97006226 -25.66462326]
[174.84036255 -16.83731079]
[168.07521057 -3.44952846]
[161.31005859 9.93825436]
[161.09904480 17.38694000]
[154.24214172 23.54642677]
[147.18038940 36.78016663]
[148.01484680 51.65137863]
[134.69174194 60.18398666]
[127.62999725 73.41772461]
[120.56826019 86.65146637]
[119.92304230 106.71623993]
[105.92572021 116.49717712]
[104.59064484 131.43765259]
[103.25556183 146.37811279]
[101.92048645 161.31857300]
[100.58541107 176.25904846]
[99.41685486 191.21345520]
[98.41496277 206.17996216]
[97.41307068 221.14646912]
[96.41118622 236.11297607]
[95.40929413 251.07946777]
[94.40740204 266.04598999]
[93.40551758 281.01248169]
[107.59647369 288.89367676]
[116.91257477 302.11587524]
[119.53981018 318.01684570]
[115.00475311 333.42169189]
[104.25898743 345.27685547]
[89.47989655 351.25524902]
[88.81169891 366.24035645]
[88.14349365 381.22546387]
[87.47528839 396.21057129]
[86.80709076 411.19570923]
[86.47290802 426.19198608]
[86.47290802 441.19198608]
[86.47290802 456.19198608]
[86.80709076 471.18826294]
[87.47528839 486.17337036]
[88.14349365 501.15847778]
[94.88941193 516.71252441]
[81.81066895 527.50061035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[6 135]
[7 134]
[8 133]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[22 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[30 115]
[31 114]
[32 113]
[33 112]
[34 111]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[54 109]
[55 108]
[56 107]
[58 105]
[59 104]
[60 102]
[61 101]
[62 100]
[64 98]
[65 97]
[66 96]
[67 95]
[69 94]
[70 93]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
