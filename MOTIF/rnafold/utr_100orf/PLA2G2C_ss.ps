%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAAGGUCAUUGCCAUCCUCACCCUCCUCCUCUUCUGCUCCCCCACCCACAGCAGUUUCUGGCAGUUUCAGAGGAGGGUCAAACACAUCACGGGGCGAA\
) } def
/len { sequence length } bind def

/coor [
[85.26884460 255.52543640]
[79.18132019 269.48474121]
[67.93795776 279.75637817]
[53.48673248 284.56072998]
[38.33140564 283.06542969]
[25.09772873 275.52954102]
[16.07851791 263.25869751]
[12.83640480 248.37889099]
[15.93310642 233.46813965]
[24.83209991 221.10983276]
[37.99158096 213.44511414]
[53.13159180 211.80194092]
[57.67888260 197.50781250]
[62.22616959 183.21368408]
[66.77346039 168.91955566]
[71.32075500 154.62542725]
[69.87201691 149.90722656]
[71.49908447 144.23168945]
[76.61312103 139.60676575]
[82.03174591 125.61968994]
[69.19075775 105.47879028]
[74.30078888 82.14566803]
[94.38447571 69.21538544]
[95.30789185 54.24383545]
[96.23130798 39.27228546]
[97.15471649 24.30073547]
[98.07813263 9.32918549]
[99.00154877 -5.64236498]
[99.92495728 -20.61391449]
[100.84837341 -35.58546448]
[101.77178955 -50.55701447]
[88.52838135 -58.06525421]
[79.89338684 -70.52815247]
[77.53546143 -85.44325256]
[81.86938477 -99.84387970]
[91.98426056 -110.88918304]
[105.83435822 -116.42456055]
[106.75777435 -131.39610291]
[107.68118286 -146.36766052]
[108.60459900 -161.33920288]
[109.52801514 -176.31076050]
[97.40914154 -183.48287964]
[89.63155365 -195.14248657]
[87.68333435 -208.95487976]
[91.89219666 -222.18408203]
[101.37197876 -232.23483276]
[114.20851898 -237.16169739]
[115.59254456 -252.09771729]
[103.84564209 -262.23623657]
[100.33425903 -277.35079956]
[106.40860748 -291.62951660]
[119.73296356 -299.58197021]
[135.18383789 -298.15023804]
[146.82006836 -287.88485718]
[150.16728210 -272.73309326]
[143.93840027 -258.52111816]
[130.52854919 -250.71368408]
[129.14453125 -235.77767944]
[142.50709534 -226.83547974]
[149.62252808 -212.31307983]
[148.48695374 -196.08761597]
[139.31341553 -182.54341125]
[124.49956512 -175.38734436]
[123.57614899 -160.41578674]
[122.65273285 -145.44424438]
[121.72932434 -130.47268677]
[120.80590820 -115.50114441]
[133.87078857 -108.30570984]
[142.55166626 -96.10112762]
[145.08306885 -81.27706146]
[140.91012573 -66.76476288]
[130.80903625 -55.45747375]
[116.74333954 -49.63360214]
[115.81992340 -34.66205215]
[114.89650726 -19.69050026]
[113.97309875 -4.71895123]
[113.04968262 10.25259876]
[112.12626648 25.22414780]
[111.20285797 40.19569778]
[110.27944183 55.16724777]
[109.35602570 70.13880157]
[115.86660004 73.02820587]
[121.55508423 77.31509399]
[126.12673950 82.77733612]
[129.34471130 89.13193512]
[131.04225159 96.04962921]
[131.13140869 103.17201233]
[129.60758972 110.13003540]
[126.54970551 116.56320190]
[122.11622620 122.13818359]
[116.53684235 126.56613159]
[110.10064697 129.61761475]
[103.14111328 131.13455200]
[96.01882935 131.03831482]
[90.60020447 145.02539062]
[85.61488342 159.17271423]
[81.06758881 173.46684265]
[76.52030182 187.76097107]
[71.97301483 202.05509949]
[67.42572021 216.34922791]
[78.83356476 226.43788147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 100]
[13 99]
[14 98]
[15 97]
[16 96]
[19 95]
[20 94]
[23 81]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
