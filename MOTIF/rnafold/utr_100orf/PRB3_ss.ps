%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:37:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACAGAGUUGGGAGUGACUCCAGAGCCUCCAGCAAGAUGCUACUGAUUCUGCUGUCGGUGGCCCUGCUGGCCCUGAGCUCAGCUCAGAGCUUAAAUGAAGAUGUCAGCCAGGAAGAAUCUCCCUCCGUAAUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[86.85185242 420.11264038]
[73.90071869 412.40780640]
[63.07596207 401.92346191]
[54.96135330 389.22503662]
[49.99450302 374.99734497]
[48.44326401 360.00765991]
[50.39129639 345.06439209]
[55.73354340 330.97335815]
[64.18190765 318.49450684]
[75.28076935 308.30078125]
[88.43159485 300.94192505]
[102.92516327 296.81481934]
[102.24735260 281.83013916]
[101.56954193 266.84545898]
[100.89173126 251.86077881]
[100.21392059 236.87611389]
[87.69972229 228.84288025]
[82.25097656 214.81521606]
[86.15262604 200.09684753]
[98.11100006 190.38584900]
[97.43318939 175.40118408]
[96.58609009 160.42510986]
[95.56980896 145.45957947]
[84.10767365 142.82095337]
[73.69940948 137.34272766]
[65.03522491 129.38818359]
[58.68967438 119.48480225]
[55.08354950 108.28932190]
[54.45598221 96.54414368]
[56.84859467 85.02814484]
[62.10271835 74.50497437]
[51.20073318 64.20221710]
[40.29875183 53.89946365]
[29.39676666 43.59671021]
[18.49478149 33.29395676]
[7.59279776 22.99120331]
[-4.09836769 25.64612198]
[-15.49208927 22.32311058]
[-23.75362396 13.97070312]
[-26.88686562 2.77321076]
[-24.21582031 -8.41968536]
[-34.64111328 -19.20454788]
[-45.06640625 -29.98941040]
[-55.49169922 -40.77427292]
[-65.91699219 -51.55913544]
[-76.34228516 -62.34399796]
[-86.76757812 -73.12886047]
[-97.19287872 -83.91371918]
[-107.61817169 -94.69858551]
[-123.42244720 -94.71583557]
[-134.52626038 -105.96221161]
[-134.34191895 -121.76542664]
[-122.97877502 -132.74971008]
[-107.17839813 -132.39830017]
[-96.31485748 -120.91966248]
[-96.83330536 -105.12387848]
[-86.40801239 -94.33901215]
[-75.98271942 -83.55415344]
[-65.55742645 -72.76928711]
[-55.13213348 -61.98442841]
[-44.70683670 -51.19956589]
[-34.28154373 -40.41470337]
[-23.85625076 -29.62984085]
[-13.43095779 -18.84498024]
[4.79414988 -19.69123077]
[18.13772392 -6.78812456]
[17.89555168 12.08921909]
[28.79753685 22.39197350]
[39.69952011 32.69472885]
[50.60150528 42.99748230]
[61.50348663 53.30023575]
[72.40547180 63.60298920]
[86.54119873 56.35299683]
[102.30513000 54.38326263]
[117.79018402 57.93208313]
[125.82186127 45.26353455]
[133.85354614 32.59498215]
[141.88520813 19.92643166]
[149.91688538 7.25788069]
[157.94856262 -5.41066980]
[161.32299805 -22.02540970]
[178.22256470 -23.38227272]
[184.20466614 -7.51876783]
[170.61711121 2.62100625]
[162.58544922 15.28955746]
[154.55377197 27.95810699]
[146.52209473 40.62665939]
[138.49041748 53.29520798]
[130.45874023 65.96376038]
[138.01313782 74.67803192]
[143.14396667 85.00672913]
[157.92898560 82.47623444]
[172.71398926 79.94573975]
[179.65406799 66.19285583]
[193.20315552 59.24479675]
[208.06964111 61.57959366]
[218.58477783 72.09482574]
[233.36979675 69.56432343]
[245.63246155 58.67585373]
[261.10598755 64.10745239]
[263.87252808 80.27156067]
[251.08609009 90.53992462]
[235.90028381 84.34933472]
[221.11528015 86.87983704]
[214.69563293 100.29349518]
[201.45179749 107.43946075]
[186.36325073 105.39280701]
[175.24449158 94.73075104]
[160.45947266 97.26124573]
[145.67446899 99.79174042]
[141.26643372 119.57757568]
[128.73033142 135.50729370]
[110.53533936 144.44329834]
[111.55162048 159.40882874]
[115.28211212 167.84127808]
[112.41786957 174.72337341]
[113.09568024 189.70803833]
[125.88195801 198.29974365]
[131.09648132 212.60575867]
[126.93643951 227.06805420]
[115.19860077 236.19828796]
[115.87641144 251.18296814]
[116.55422211 266.16766357]
[117.23203278 281.15234375]
[117.90984344 296.13699341]
[132.71682739 298.93875122]
[146.47833252 305.08026123]
[158.45217896 314.23031616]
[167.99266052 325.89547729]
[174.58526611 339.44665527]
[177.87445068 354.15304565]
[177.68286133 369.22155762]
[174.02079773 383.83953857]
[167.08576965 397.21871948]
[157.25178528 408.63754272]
[145.04914856 417.48019409]
[131.13595581 423.26980591]
[116.26251221 425.69415283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 125]
[13 124]
[14 123]
[15 122]
[16 121]
[20 117]
[21 116]
[22 114]
[23 113]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[36 67]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
[91 110]
[92 109]
[93 108]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
