%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGUCACACCAAUGUUACCAUCUUCCAUCCUGCAGUUUUUGUCCUUCCUGGCAUCCCUGGGUUGGAGGCUUAUCACAUUUGGCUGUCAAUACCUCUUU\
) } def
/len { sequence length } bind def

/coor [
[120.68936920 376.61093140]
[120.36489868 360.80999756]
[131.36854553 349.46560669]
[130.90205383 334.47283936]
[130.43554688 319.48010254]
[114.36952209 307.10400391]
[112.25180054 286.64938354]
[125.81062317 270.81314087]
[123.48715210 255.99418640]
[121.16367340 241.17523193]
[118.61002350 226.39419556]
[115.82680511 211.65467834]
[113.04358673 196.91514587]
[110.26037598 182.17561340]
[107.24826813 167.48115540]
[104.00800323 152.83531189]
[100.76773071 138.18946838]
[86.10786438 135.58135986]
[73.55905151 127.56630707]
[65.02821350 115.36226654]
[61.81169891 100.82377625]
[64.39828491 86.16009521]
[72.39492035 73.59954071]
[84.58642578 65.05079651]
[81.34616089 50.40495682]
[78.10588837 35.75911331]
[74.86562347 21.11327362]
[71.62535858 6.46743202]
[68.38508606 -8.17840958]
[57.84938812 -19.98135757]
[62.65468979 -34.07952499]
[59.41442108 -48.72536850]
[55.05541992 -54.07497025]
[54.30739975 -59.93587494]
[56.45808792 -64.38169098]
[54.13461685 -79.20064545]
[51.81114578 -94.01959991]
[39.02138519 -99.42116547]
[30.67383003 -110.37849426]
[28.89055061 -123.92759705]
[34.03602600 -136.47030640]
[44.64908600 -144.72982788]
[42.78760529 -159.61387634]
[40.92612457 -174.49792480]
[39.06464386 -189.38197327]
[26.43657494 -198.88499451]
[24.30959129 -214.54550171]
[33.94559479 -227.07238770]
[49.62771225 -229.03367615]
[62.05202866 -219.26577759]
[63.84740829 -203.56379700]
[53.94869232 -191.24345398]
[55.81017303 -176.35940552]
[57.67165375 -161.47535706]
[59.53313446 -146.59130859]
[74.09951782 -139.20046997]
[81.52169800 -124.46498871]
[78.73436737 -108.03549194]
[66.63010406 -96.34307861]
[68.95357513 -81.52411652]
[71.27704620 -66.70516205]
[74.06026459 -51.96563339]
[77.30052948 -37.31979370]
[87.60446930 -26.56441307]
[83.03092957 -11.41867638]
[86.27119446 3.22716451]
[89.51146698 17.87300682]
[92.75173187 32.51884842]
[95.99199677 47.16468811]
[99.23226929 61.81053162]
[113.89213562 64.41863251]
[126.44094849 72.43369293]
[134.97178650 84.63773346]
[138.18830872 99.17622375]
[135.60171509 113.83990479]
[127.60507965 126.40045929]
[115.41357422 134.94920349]
[118.65383911 149.59504700]
[121.89411163 164.24089050]
[126.88516998 172.10739136]
[124.99990082 179.39239502]
[127.78311920 194.13192749]
[130.56632996 208.87145996]
[133.34954834 223.61097717]
[138.09355164 231.62890625]
[135.98263550 238.85176086]
[138.30610657 253.67071533]
[140.62957764 268.48968506]
[150.16282654 271.82821655]
[157.71215820 278.45043945]
[162.21138000 287.36267090]
[163.04693604 297.25222778]
[160.14137268 306.68081665]
[153.95814514 314.29351807]
[145.42829895 319.01361084]
[145.89479065 334.00634766]
[146.36129761 348.99908447]
[158.04893494 359.63745117]
[158.70742798 375.42800903]
[147.94610596 387.00253296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[8 88]
[9 87]
[10 86]
[11 84]
[12 83]
[13 82]
[14 81]
[15 79]
[16 78]
[17 77]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[31 63]
[32 62]
[35 61]
[36 60]
[37 59]
[42 55]
[43 54]
[44 53]
[45 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
