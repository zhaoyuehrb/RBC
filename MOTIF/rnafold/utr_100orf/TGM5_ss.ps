%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUACCAUGGCCCAAGGGCUAGAAGUGGCCCUCACAGACCUCCAGAGCUCCAGAAAUAAUGUGCGGCACCACACGGAGGAGAUCACUGUGGACCACCUGCUUGUUC\
) } def
/len { sequence length } bind def

/coor [
[-3.02651024 313.72064209]
[-2.14439368 298.74658203]
[3.21338749 284.73529053]
[-9.24362469 293.09127808]
[-21.70063591 301.44729614]
[-34.15764999 309.80331421]
[-46.61466217 318.15930176]
[-49.62698364 335.31710815]
[-63.79530334 344.86376953]
[-80.17204285 341.35324097]
[-92.38307953 350.06475830]
[-104.59411621 358.77627563]
[-116.80515289 367.48779297]
[-129.01618958 376.19931030]
[-135.31951904 391.33865356]
[-151.61486816 393.18087769]
[-161.13896179 379.83084106]
[-154.09423828 365.02194214]
[-137.72770691 363.98828125]
[-125.51667023 355.27676392]
[-113.30563354 346.56524658]
[-101.09459686 337.85369873]
[-88.88356781 329.14218140]
[-88.53354645 316.17355347]
[-80.62203979 305.64605713]
[-67.88999939 301.58370972]
[-54.97066879 305.70230103]
[-42.51365662 297.34628296]
[-30.05664444 288.99029541]
[-17.59963226 280.63427734]
[-5.14261913 272.27825928]
[-3.71332359 267.42367554]
[-0.03331369 263.25869751]
[5.51363850 260.82513428]
[12.95115089 247.79885864]
[20.38866234 234.77259827]
[27.82617569 221.74633789]
[35.26368713 208.72009277]
[42.70119858 195.69383240]
[36.76307297 178.49595642]
[45.28993988 162.06767273]
[63.37708664 156.85054016]
[70.05177307 143.41741943]
[76.72647095 129.98431396]
[83.40116119 116.55119324]
[77.08337402 104.92868042]
[78.06424713 91.73645020]
[86.03137207 81.17604828]
[98.44733429 76.61083984]
[102.29480743 62.11266708]
[106.14228821 47.61449814]
[102.20355988 32.29140854]
[112.94653320 21.97453690]
[116.79400635 7.47636700]
[106.31355286 -3.84456992]
[103.63989258 -19.03848648]
[109.62619019 -33.25706100]
[122.36222839 -41.96319199]
[137.78399658 -42.37879181]
[150.97045898 -34.37124252]
[157.71385193 -20.49571991]
[155.86239624 -5.17985630]
[146.00688171 6.68911219]
[131.29217529 11.32384205]
[127.44470215 25.82201195]
[131.65861511 40.10809326]
[120.64045715 51.46197128]
[116.79298401 65.96014404]
[112.94550323 80.45831299]
[115.21063232 82.16463470]
[117.25312042 84.13200378]
[130.96215820 78.04412079]
[140.17138672 64.47495270]
[156.50535583 65.93549347]
[163.16110229 80.92326355]
[153.29174805 94.02012634]
[137.05004883 91.75315857]
[123.34100342 97.84104156]
[116.21289825 116.92942810]
[96.83426666 123.22588348]
[90.15957642 136.65899658]
[83.48488617 150.09211731]
[76.81019592 163.52522278]
[82.79266357 174.00775146]
[82.89806366 185.95596313]
[77.21749878 196.33038330]
[67.29896545 202.54939270]
[55.72745895 203.13133240]
[48.28994751 216.15759277]
[40.85243225 229.18385315]
[33.41492081 242.21011353]
[25.97740936 255.23637390]
[18.53989601 268.26263428]
[32.12839890 261.91024780]
[47.00004578 259.95217896]
[61.76971054 262.57077026]
[75.06175995 269.52212524]
[85.63817596 280.15884399]
[92.51389313 293.49017334]
[95.04850769 308.27447510]
[93.00595093 323.13476562]
[86.57645416 336.68695068]
[76.35887146 347.66879272]
[63.30484390 355.05746460]
[48.63022232 358.16476440]
[33.70177841 356.70132446]
[19.90994453 350.80340576]
[8.53927231 341.02038574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[34 93]
[35 92]
[36 91]
[37 90]
[38 89]
[39 88]
[42 83]
[43 82]
[44 81]
[45 80]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
