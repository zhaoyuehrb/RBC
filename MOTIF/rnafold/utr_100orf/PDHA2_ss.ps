%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCAGGCCUUCCGGCGGUCGUUACGGGACGCCGCUGCCAUCUACAGCACUCCGUGAAGAAUAUGCUGGCCGCCUUCAUCUCCCGCGUGUUGAGGCGAGUUGCCCAGAAAUCAGCUCGCAGAGUGCUGGUGGCAUCCCGUAACUCCUCAAAUGACGCUACAU\
) } def
/len { sequence length } bind def

/coor [
[69.31317902 472.77874756]
[68.06726837 457.83413696]
[61.67018127 471.40164185]
[55.27309418 484.96917725]
[48.87600708 498.53668213]
[49.04492569 505.22146606]
[46.21038055 510.21487427]
[41.96522522 512.49414062]
[35.05316162 525.80664062]
[28.14109421 539.11920166]
[29.41399765 555.46887207]
[15.73998737 564.52166748]
[1.18571568 556.96490479]
[0.72336847 540.57226562]
[14.82856941 532.20709229]
[21.74063492 518.89459229]
[28.65270042 505.58206177]
[35.30849838 492.13958740]
[41.70558548 478.57208252]
[48.10267258 465.00457764]
[54.49975967 451.43707275]
[58.05729294 436.86502075]
[58.63183594 421.87603760]
[59.20637512 406.88705444]
[59.78091812 391.89807129]
[60.35545731 376.90905762]
[60.93000031 361.92007446]
[61.50453949 346.93109131]
[62.07908249 331.94207764]
[62.65362167 316.95309448]
[55.40948868 303.93881226]
[63.66969681 290.44512939]
[64.24423981 275.45611572]
[64.81877899 260.46713257]
[65.39331818 245.47813416]
[65.96785736 230.48915100]
[55.89017487 241.59951782]
[41.44166946 245.62948608]
[27.06837273 241.33900452]
[17.19316292 230.04827881]
[14.85479259 215.23167419]
[20.77281380 201.44845581]
[33.12615967 192.93994141]
[48.11352158 192.32432556]
[61.12306213 199.79104614]
[68.15152740 213.04240417]
[71.28893280 198.37419128]
[74.42634583 183.70596313]
[77.56375885 169.03775024]
[80.70116425 154.36952209]
[83.83857727 139.70130920]
[86.97599030 125.03308868]
[90.11339569 110.36486816]
[85.99288177 97.00399017]
[95.21838379 86.49771881]
[98.35578918 71.82949829]
[101.49320221 57.16128159]
[104.63061523 42.49306488]
[91.57334137 34.87958527]
[81.52222443 23.61825180]
[75.45221710 9.82030296]
[73.94625854 -5.15791893]
[77.13930511 -19.84829140]
[84.70635223 -32.81481552]
[95.89546967 -42.79397583]
[109.60250854 -48.81787872]
[124.48001099 -50.30810165]
[127.61742401 -64.97632599]
[130.75483704 -79.64453888]
[133.75160217 -94.34214020]
[136.60746765 -109.06776428]
[138.89721680 -123.89196777]
[140.61746216 -138.79299927]
[142.33772278 -153.69403076]
[144.05796814 -168.59506226]
[145.77821350 -183.49609375]
[147.49847412 -198.39712524]
[148.93298340 -213.32836914]
[150.08122253 -228.28436279]
[151.22946167 -243.24035645]
[139.92915344 -254.04946899]
[138.27197266 -269.59899902]
[147.04039001 -282.54690552]
[162.09423828 -286.77963257]
[176.32553101 -280.29855347]
[183.01470947 -266.16387939]
[179.00332642 -251.04956055]
[166.18544006 -242.09211731]
[165.03720093 -227.13612366]
[163.88896179 -212.18013000]
[166.29368591 -208.00476074]
[166.06851196 -202.26734924]
[162.39950562 -196.67687988]
[160.67924500 -181.77584839]
[158.95899963 -166.87481689]
[157.23875427 -151.97378540]
[155.51849365 -137.07275391]
[153.79824829 -122.17171478]
[155.47996521 -119.87374878]
[156.33081055 -116.75594330]
[156.02806091 -113.13954163]
[154.37422180 -109.45854950]
[151.33309937 -106.21189880]
[148.47723389 -91.48627472]
[150.29939270 -84.28746796]
[145.42304993 -76.50713348]
[142.28564453 -61.83891296]
[139.14822388 -47.17069244]
[152.11441040 -39.72493744]
[162.15792847 -28.62098694]
[168.28588867 -14.93784618]
[169.88664246 -0.01040492]
[166.79093933 14.70078754]
[159.28962708 27.75242805]
[148.10641479 37.86005783]
[134.32807922 44.02446747]
[119.29883575 45.63047409]
[116.16142273 60.29869461]
[113.02400970 74.96691132]
[109.88660431 89.63513184]
[114.00711823 102.99600983]
[104.78161621 113.50228119]
[101.64421082 128.17050171]
[98.50679779 142.83871460]
[95.36938477 157.50694275]
[92.23197937 172.17515564]
[89.09456635 186.84336853]
[85.95715332 201.51159668]
[82.81974792 216.17980957]
[80.95685577 231.06369019]
[80.38230896 246.05267334]
[79.80776978 261.04165649]
[79.23323059 276.03067017]
[78.65869141 291.01965332]
[85.86172485 305.10604858]
[77.64261627 317.52764893]
[77.06807709 332.51663208]
[76.49353027 347.50561523]
[75.91899109 362.49459839]
[75.34445190 377.48361206]
[74.76991272 392.47259521]
[74.19536591 407.46157837]
[73.62082672 422.45059204]
[73.04628754 437.43957520]
[81.04087067 424.74758911]
[92.11573792 414.63088989]
[105.47741699 407.81433105]
[120.16860199 404.78628540]
[135.13671875 405.76364136]
[149.30938721 410.67645264]
[161.67117310 419.17269897]
[171.33642578 430.64367676]
[177.61264038 444.26751709]
[180.05018616 459.06814575]
[178.47441101 473.98513794]
[172.99819946 487.94976807]
[164.01391602 499.96154785]
[152.16523743 509.15985107]
[138.30107117 514.88568115]
[123.41474152 516.72875977]
[108.57277679 514.55712891]
[94.83854675 508.52630615]
[83.19605255 499.06838989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[8 17]
[9 16]
[10 15]
[22 144]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[28 138]
[29 137]
[30 136]
[32 134]
[33 133]
[34 132]
[35 131]
[36 130]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[55 120]
[56 119]
[57 118]
[58 117]
[67 108]
[68 107]
[69 106]
[70 104]
[71 103]
[72 98]
[73 97]
[74 96]
[75 95]
[76 94]
[77 93]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
