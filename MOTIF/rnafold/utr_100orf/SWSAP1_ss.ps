%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAGGGGCGGUGCGGCCUGGUCCGGGGAGGAGAACAUGCCUGCCGCCGGACCGCCUUUGCUGCUGCUCGGUACACCAGGAUCUGGAAAAACAGCGCUGCUAUUUGCUGCGGCCCUAGAGGCGGCGGGGGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[75.92449951 122.32540894]
[69.72944641 103.40991974]
[54.86915588 101.36742401]
[40.00886917 99.32492065]
[25.12629318 97.45169830]
[10.22336006 95.74799347]
[-4.36631298 101.86779785]
[-16.13241959 92.73500061]
[-31.03535271 91.03130341]
[-45.93828583 89.32759857]
[-60.84121704 87.62389374]
[-75.74414825 85.92018890]
[-90.64707947 84.21649170]
[-105.55001831 82.51278687]
[-122.21321106 90.25561523]
[-135.93008423 79.36866760]
[-150.86793518 78.00464630]
[-165.80578613 76.64061737]
[-172.08816528 79.11228180]
[-177.79522705 78.12487793]
[-181.38719177 74.85935211]
[-196.24748230 72.81685638]
[-211.10777283 70.77435303]
[-225.96806335 68.73185730]
[-240.82835388 66.68935394]
[-255.68864441 64.64685822]
[-270.54891968 62.60435486]
[-285.43151855 60.73113251]
[-300.33444214 59.02743149]
[-315.25579834 57.49346924]
[-330.19366455 56.12944412]
[-345.13150024 54.76542282]
[-355.25430298 66.52589417]
[-370.36413574 70.05751038]
[-384.65097046 64.00228882]
[-392.62124634 50.68859482]
[-391.21020508 35.23580933]
[-380.96041870 23.58584404]
[-365.81317139 20.21834946]
[-351.59283447 26.42819595]
[-343.76748657 39.82756805]
[-328.82962036 41.19159317]
[-313.89178467 42.55561447]
[-306.88436890 40.00936890]
[-298.63073730 44.12449646]
[-283.72781372 45.82820129]
[-276.66424561 43.44212723]
[-268.50643921 47.74406815]
[-253.64614868 49.78656769]
[-238.78585815 51.82906723]
[-223.92556763 53.87156677]
[-209.06527710 55.91406631]
[-194.20498657 57.95656586]
[-179.34469604 59.99906540]
[-164.44175720 61.70276642]
[-149.50390625 63.06679153]
[-134.56605530 64.43081665]
[-125.02093506 56.91262436]
[-112.51425171 57.98268127]
[-103.84631348 67.60985565]
[-88.94338226 69.31356049]
[-74.04045105 71.01725769]
[-59.13751602 72.72096252]
[-44.23458099 74.42466736]
[-29.33164978 76.12836456]
[-14.42871761 77.83206940]
[-0.90500206 71.59040833]
[11.92706299 80.84506226]
[26.82999611 82.54876709]
[33.89355850 80.16268921]
[42.05136871 84.46463013]
[56.91165543 86.50713348]
[71.77194214 88.54962921]
[78.19375610 75.45327759]
[90.70291901 66.04432678]
[107.16479492 63.11220932]
[124.20632935 68.22002411]
[132.57533264 55.77174377]
[140.94435120 43.32346344]
[149.31335449 30.87518311]
[153.13278198 14.35706234]
[170.06268311 13.45454979]
[175.61659241 29.47299004]
[161.76164246 39.24419403]
[153.39262390 51.69247437]
[145.02362061 64.14075470]
[136.65460205 76.58903503]
[138.26400757 83.91432190]
[147.71127319 72.26317596]
[162.71078491 72.38482666]
[171.96783447 84.18766785]
[168.51182556 98.78410339]
[154.94514465 105.18296051]
[141.48281860 98.56489563]
[143.09222412 105.89017487]
[155.90850830 113.68393707]
[171.71981812 114.24338531]
[178.57406616 127.46717072]
[191.39036560 135.26092529]
[207.20167542 135.82037354]
[214.05592346 149.04415894]
[226.87222290 156.83792114]
[226.40655518 141.84515381]
[237.68560791 131.95663452]
[252.48861694 134.37962341]
[260.02639771 147.34812927]
[254.80499268 161.41001892]
[240.62966919 166.31623840]
[252.47781372 175.51524353]
[264.32595825 184.71423340]
[276.17410278 193.91323853]
[291.81954956 196.26492310]
[297.12747192 210.18164062]
[308.97561646 219.38064575]
[320.82376099 228.57963562]
[336.85671997 228.01083374]
[347.18798828 240.28456116]
[343.89233398 255.98545837]
[329.49783325 263.06915283]
[315.04678345 256.10162354]
[311.62475586 240.42778015]
[299.77661133 231.22877502]
[287.92846680 222.02978516]
[273.13049316 220.33607483]
[266.97509766 205.76138306]
[255.12695312 196.56237793]
[243.27880859 187.36337280]
[231.43067932 178.16436768]
[219.07846069 169.65422058]
[206.26216125 161.86045837]
[191.36756897 161.85847473]
[183.59660339 148.07722473]
[170.78031921 140.28346252]
[155.88571167 140.28147888]
[148.11474609 126.50022888]
[135.29846191 118.70646667]
[116.27542114 133.86965942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[4 71]
[5 69]
[6 68]
[8 66]
[9 65]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[16 57]
[17 56]
[18 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 46]
[29 45]
[30 43]
[31 42]
[32 41]
[77 87]
[78 86]
[79 85]
[80 84]
[95 136]
[96 135]
[98 133]
[99 132]
[101 130]
[102 129]
[108 128]
[109 127]
[110 126]
[111 125]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
