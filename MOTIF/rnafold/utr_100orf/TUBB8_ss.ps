%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGAGAUCGUGCUCACGCAGAUCGGGCAGUGCGGGAAUCAGAUCGGCGCCAAGUUCUGGGAGGUGAUCUCUGAUGAACAUGCCAUCGACUCCGCUG\
) } def
/len { sequence length } bind def

/coor [
[5.56314087 215.73930359]
[-2.54972196 225.59811401]
[-12.82418346 233.15876770]
[-24.62904930 237.96362305]
[-37.24078751 239.72415161]
[-49.88786316 238.33819580]
[-61.79794693 233.89595032]
[-72.24507904 226.67405701]
[-80.59391022 217.11843872]
[-94.09394836 223.65670776]
[-107.59399414 230.19497681]
[-121.09403229 236.73323059]
[-127.59363556 243.40765381]
[-135.11712646 243.25756836]
[-148.81398010 249.37283325]
[-162.51083374 255.48808289]
[-171.69293213 269.07562256]
[-188.02978516 267.64770508]
[-194.71545410 252.67326355]
[-184.87228394 239.55671692]
[-168.62608337 241.79122925]
[-154.92922974 235.67597961]
[-141.23239136 229.56072998]
[-127.63229370 223.23320007]
[-114.13225555 216.69493103]
[-100.63221741 210.15666199]
[-87.13217926 203.61839294]
[-89.52373505 186.37818909]
[-86.01293945 169.30703735]
[-76.98818207 154.37019348]
[-63.47353363 143.29243469]
[-47.01253891 137.35894775]
[-29.49194527 137.26623535]
[-12.92543411 143.04039001]
[0.77779907 154.03233337]
[13.36209106 145.86926270]
[25.94638252 137.70620728]
[38.53067398 129.54313660]
[51.11496735 121.38008118]
[53.99837112 109.51821136]
[64.56866455 102.64118195]
[77.37522888 104.95390320]
[90.20730591 97.18615723]
[95.02729797 90.53313446]
[103.56146240 89.38355255]
[116.62890625 82.01863861]
[129.69635010 74.65372467]
[135.76843262 67.58815002]
[143.28671265 67.27020264]
[156.57687378 60.31525040]
[169.86705017 53.36029434]
[183.15722656 46.40534210]
[184.80941772 36.80169296]
[190.69810486 29.21311569]
[199.33639526 25.34206772]
[208.64129639 25.97848511]
[216.43556213 30.84218788]
[230.31596375 25.15586090]
[244.19636536 19.46953583]
[258.07678223 13.78320885]
[264.45993042 -2.41241622]
[280.23760986 -8.93497658]
[295.57867432 -2.24239254]
[309.27554321 -8.35764694]
[322.97238159 -14.47290134]
[336.66921997 -20.58815575]
[343.72283936 -34.99739456]
[359.41680908 -38.32585526]
[371.71209717 -28.02022743]
[371.17675781 -11.98610783]
[358.22152710 -2.52349949]
[342.78448486 -6.89130640]
[329.08764648 -0.77605218]
[315.39077759 5.33920193]
[301.69393921 11.45445633]
[298.77087402 24.10900879]
[288.90927124 32.85837555]
[275.60757446 34.29562378]
[263.76309204 27.66361618]
[249.88269043 33.34994125]
[236.00228882 39.03626633]
[222.12188721 44.72259521]
[211.27696228 62.16399002]
[190.11218262 59.69551468]
[176.82200623 66.65046692]
[163.53182983 73.60542297]
[150.24166870 80.56037140]
[137.06126404 87.72116852]
[123.99382019 95.08608246]
[110.92637634 102.45099640]
[97.97505188 110.01823425]
[85.14297485 117.78598022]
[76.75050354 134.08363342]
[59.27803040 133.96437073]
[46.69373703 142.12744141]
[34.10944748 150.29049683]
[21.52515411 158.45356750]
[8.94086170 166.61662292]
[12.76205254 178.84620667]
[13.46570969 191.62828064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 27]
[10 26]
[11 25]
[12 24]
[14 23]
[15 22]
[16 21]
[35 98]
[36 97]
[37 96]
[38 95]
[39 94]
[42 92]
[43 91]
[45 90]
[46 89]
[47 88]
[49 87]
[50 86]
[51 85]
[52 84]
[57 82]
[58 81]
[59 80]
[60 79]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
