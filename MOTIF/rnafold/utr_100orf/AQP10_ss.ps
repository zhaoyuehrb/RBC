%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGAGGGAGCAGUGAAUAGCAAUAGGGUGUUUCCACCAUGGUCUUCACUCAGGCCCCGGCUGAAAUCAUGGGCCACCUCCGGAUACGCAGCCUCCUGGCCCGGCAGUGCCUGGCAGAGUUUCUGGGUGUGUUUGUAC\
) } def
/len { sequence length } bind def

/coor [
[373.96911621 242.40109253]
[368.98455811 236.59530640]
[365.24456787 229.90837097]
[362.90093994 222.60360718]
[362.05026245 214.96960449]
[362.73013306 207.30868530]
[348.85598755 201.60705566]
[334.98187256 195.90542603]
[321.10775757 190.20378113]
[307.50460815 196.16113281]
[293.35302734 190.57650757]
[287.19665527 176.26788330]
[273.32254028 170.56625366]
[256.12243652 173.86997986]
[244.93571472 159.29049683]
[230.93800354 153.89938354]
[216.94029236 148.50827026]
[202.94258118 143.11714172]
[184.17774963 147.58276367]
[171.61486816 131.88597107]
[157.39088440 127.12375641]
[143.16691589 122.36154938]
[128.94294739 117.59933472]
[120.08499146 127.27680206]
[108.21425629 132.86270142]
[95.11135864 133.51913452]
[82.74176788 129.14762878]
[72.96094513 120.40393066]
[67.23603058 108.59960938]
[52.24440765 109.10083771]
[37.25278473 109.60205841]
[22.26116180 110.10328674]
[8.63463211 119.22740936]
[-5.95891857 111.74674988]
[-6.50689602 95.35675812]
[7.55441236 86.91806030]
[21.75993729 95.11166382]
[36.75156021 94.61043549]
[51.74318314 94.10920715]
[66.73480988 93.60798645]
[67.43294525 90.68240356]
[68.38784027 87.83027649]
[69.59196472 85.07410431]
[57.92426682 75.64729309]
[46.25656891 66.22047424]
[34.58887100 56.79366302]
[22.92117310 47.36685181]
[7.23376369 49.28537750]
[-5.16387129 39.48363113]
[-6.91643476 23.77681732]
[3.01583743 11.48350525]
[18.74030495 9.89710140]
[30.92791939 19.95878983]
[32.34798431 35.69915009]
[44.01568604 45.12596512]
[55.68338394 54.55278015]
[67.35108185 63.97959137]
[79.01878357 73.40640259]
[97.18067932 66.24378204]
[116.27910614 70.29441833]
[129.96987915 84.21276093]
[133.70515442 103.37536621]
[147.92912292 108.13757324]
[162.15310669 112.89978790]
[176.37707520 117.66199493]
[185.90785217 112.21272278]
[196.64128113 112.93972778]
[205.00003052 119.35604095]
[208.33370972 129.11944580]
[222.33140564 134.51055908]
[236.32911682 139.90167236]
[250.32682800 145.29278564]
[262.46398926 140.77444458]
[274.04244995 145.61355591]
[279.02416992 156.69212341]
[292.89828491 162.39375305]
[307.33691406 156.54872131]
[321.32601929 162.52864075]
[326.80938721 176.32966614]
[340.68350220 182.03129578]
[354.55761719 187.73292542]
[368.43176270 193.43455505]
[387.09371948 178.78761292]
[410.68533325 177.84584045]
[430.26702881 190.83366394]
[438.49624634 212.72218323]
[453.33920288 214.88696289]
[468.18218994 217.05175781]
[483.02514648 219.21655273]
[497.79748535 213.55187988]
[509.27487183 223.04498291]
[524.11785889 225.20977783]
[538.96081543 227.37455750]
[557.25286865 219.03086853]
[571.98675537 231.47964478]
[586.91143799 232.98107910]
[601.83612061 234.48251343]
[609.92718506 227.06193542]
[620.55590820 225.39921570]
[630.12585449 229.80989075]
[635.53454590 238.59530640]
[650.37750244 240.76010132]
[665.22045898 242.92489624]
[679.99279785 237.26022339]
[691.47021484 246.75332642]
[706.31317139 248.91810608]
[721.15612793 251.08290100]
[737.70208740 247.38575745]
[745.83508301 262.26159668]
[733.79205322 274.19479370]
[718.99133301 265.92587280]
[704.14837646 263.76107788]
[689.30541992 261.59628296]
[675.59472656 267.41580200]
[663.05566406 257.76785278]
[648.21270752 255.60307312]
[633.36975098 253.43827820]
[616.05554199 261.93997192]
[600.33465576 249.40718079]
[585.41003418 247.90574646]
[570.48535156 246.40431213]
[563.10656738 253.61480713]
[552.75244141 255.57160950]
[542.84472656 251.37959290]
[536.79602051 242.21752930]
[521.95306396 240.05273438]
[507.11007690 237.88793945]
[493.39941406 243.70745850]
[480.86035156 234.05952454]
[466.01739502 231.89472961]
[451.17443848 229.72993469]
[436.33145142 227.56513977]
[433.13238525 234.40879822]
[428.63473511 240.49060059]
[423.01385498 245.56706238]
[416.49005127 249.43392944]
[409.32012939 251.93452454]
[401.78720093 252.96600342]
[394.18951416 252.48362732]
[386.82867432 250.50265503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 82]
[7 81]
[8 80]
[9 79]
[12 76]
[13 75]
[15 72]
[16 71]
[17 70]
[18 69]
[20 65]
[21 64]
[22 63]
[23 62]
[29 40]
[30 39]
[31 38]
[32 37]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[86 132]
[87 131]
[88 130]
[89 129]
[91 127]
[92 126]
[93 125]
[95 121]
[96 120]
[97 119]
[101 117]
[102 116]
[103 115]
[105 113]
[106 112]
[107 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
