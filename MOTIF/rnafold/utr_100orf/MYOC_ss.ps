%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCUCACCAAGCCUCUGCAAUGAGGUUCUUCUGUGCACGUUGCUGCAGCUUUGGGCCUGAGAUGCCAGCUGUCCAGCUGCUGCUUCUGGCCUGCCUGGUGUGGGAUGUGGGGGCCAGGA\
) } def
/len { sequence length } bind def

/coor [
[93.35798645 114.64077759]
[81.66471863 124.03585815]
[69.97145081 133.43092346]
[58.27817917 142.82600403]
[73.19390106 144.41386414]
[84.45847321 154.31889343]
[87.94124603 168.90896606]
[82.36511230 182.83399963]
[69.77481079 190.98779297]
[54.78711319 190.38038635]
[42.89791870 181.23451233]
[38.46691132 166.90390015]
[43.11954117 152.64263916]
[29.76315308 159.46955872]
[16.40676308 166.29647827]
[3.05037189 173.12339783]
[-10.30601883 179.95031738]
[-23.66240883 186.77723694]
[-28.28792763 201.88949585]
[-42.28364182 209.23085022]
[-57.34614563 204.44581604]
[-64.53911591 190.37326050]
[-59.59510040 175.36219788]
[-45.44728851 168.31840515]
[-30.48932838 173.42085266]
[-17.13293839 166.59393311]
[-3.77654815 159.76701355]
[9.57984257 152.94009399]
[22.93623161 146.11317444]
[36.29262161 139.28625488]
[48.88310242 131.13273621]
[60.57637405 121.73766327]
[72.26964569 112.34258270]
[83.96291351 102.94750977]
[70.08429718 108.63821411]
[55.17944336 106.95143127]
[42.92357635 98.30310059]
[36.33874512 84.82570648]
[37.04863739 69.84251404]
[44.87820435 57.04806900]
[57.89683914 49.59721756]
[72.89440918 49.32719040]
[86.17282104 56.30457306]
[94.45788574 68.80887604]
[95.70687866 83.75559998]
[98.75056458 69.06764984]
[93.97444916 53.98456955]
[104.13330841 43.09205627]
[107.17699432 28.40410423]
[110.22068024 13.71615124]
[113.26436615 -0.97180259]
[116.30805206 -15.65975666]
[119.35173798 -30.34770966]
[117.59298706 -36.91705704]
[119.24957275 -42.50727463]
[122.94410706 -45.69914627]
[126.73380280 -60.21252823]
[130.52349854 -74.72590637]
[134.31318665 -89.23928833]
[137.73098755 -103.84471893]
[140.77467346 -118.53267670]
[143.81835938 -133.22062683]
[134.93472290 -146.29183960]
[137.97781372 -161.80038452]
[151.14221191 -170.54533386]
[166.61772156 -167.33845520]
[175.22299194 -154.08232117]
[171.85267639 -138.64158630]
[158.50630188 -130.17694092]
[155.46261597 -115.48899078]
[152.41894531 -100.80104065]
[154.31355286 -96.30125427]
[153.31764221 -90.55643463]
[148.82656860 -85.44960022]
[145.03688049 -70.93621826]
[141.24717712 -56.42283630]
[137.45748901 -41.90945435]
[134.03968811 -27.30402374]
[130.99600220 -12.61607075]
[127.95231628 2.07188249]
[124.90863037 16.75983620]
[121.86495209 31.44779015]
[118.82126617 46.13574219]
[123.81508636 60.16824341]
[113.43851471 72.11133575]
[110.39482880 86.79928589]
[115.82395935 100.78229523]
[127.98169708 109.56805420]
[140.13943481 118.35380554]
[152.29716492 127.13956451]
[164.45489502 135.92532349]
[176.61264038 144.71107483]
[188.77037048 153.49682617]
[200.92810059 162.28257751]
[213.08584595 171.06832886]
[221.98576355 173.60273743]
[225.43801880 180.23696899]
[237.36740112 189.33035278]
[252.82604980 187.41517639]
[264.79461670 196.80709839]
[266.52517700 211.55636597]
[278.45455933 220.64974976]
[294.48184204 219.93852234]
[304.92175293 232.11997986]
[301.76571655 247.84953308]
[287.43472290 255.06082153]
[272.92233276 248.22195435]
[269.36120605 232.57913208]
[257.43179321 223.48574829]
[242.75120544 225.72534180]
[230.52355957 216.67329407]
[228.27401733 201.25975037]
[216.34463501 192.16636658]
[204.30007935 183.22607422]
[192.14234924 174.44032288]
[179.98461914 165.65455627]
[167.82687378 156.86880493]
[155.66914368 148.08305359]
[143.51141357 139.29730225]
[131.35368347 130.51153564]
[119.19594574 121.72578430]
[107.03820801 112.94003296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[13 30]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[45 86]
[46 85]
[48 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 71]
[61 70]
[62 69]
[87 122]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[97 113]
[98 112]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
