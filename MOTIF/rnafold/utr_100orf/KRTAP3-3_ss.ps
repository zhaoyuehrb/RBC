%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:19:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCAAACCCAUAAAUACCACAGACUCUAAUAGCCAUGGAUUGCUGUGCCUCUCGAGGCUGCAGUGUCCCCACCGGGCCUGCCACCACCAUCUGCUCCUCUGACAAAUCCUGCCGCUGUGGAGUCUGCCUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[26.03116798 560.88464355]
[14.36460781 570.39135742]
[1.06740570 577.43908691]
[-13.34932709 581.75695801]
[-28.33145142 583.17901611]
[-43.30309296 581.65051270]
[-57.68878174 577.23034668]
[-70.93556976 570.08831787]
[-82.53429413 560.49890137]
[-92.03911591 548.83081055]
[-99.08470154 535.53247070]
[-103.40024567 521.11505127]
[-104.81986237 506.13269043]
[-103.28897858 491.16131592]
[-98.86645508 476.77633667]
[-91.72226715 463.53070068]
[-82.13101959 451.93353271]
[-70.46138000 442.43060303]
[-57.16189957 435.38717651]
[-42.74377060 431.07394409]
[-27.76118660 429.65676880]
[-12.79004002 431.19006348]
[-8.38436604 416.85165405]
[-3.97869325 402.51324463]
[0.42697990 388.17483521]
[4.83265305 373.83642578]
[9.23832607 359.49801636]
[13.64399910 345.15960693]
[18.04967308 330.82119751]
[22.45534515 316.48278809]
[21.40376663 309.10021973]
[27.12991333 301.86822510]
[31.86319923 287.63458252]
[36.59648514 273.40097046]
[41.32976913 259.16732788]
[31.35935974 246.17710876]
[31.06169319 229.63871765]
[40.75025558 216.02821350]
[56.78959656 210.79220581]
[61.19526672 196.45379639]
[65.60094452 182.11538696]
[70.00661469 167.77697754]
[74.41228485 153.43856812]
[72.96223450 148.80398560]
[74.47140503 143.20980835]
[79.36263275 138.55220032]
[84.42104340 124.43085480]
[89.47944641 110.30950928]
[87.25191498 95.47583008]
[78.26901245 83.46302795]
[69.28610229 71.45022583]
[60.30319977 59.43741989]
[45.02642822 53.47484207]
[42.81960297 37.22486115]
[55.95291901 27.40406036]
[70.91593933 34.11524200]
[72.31600189 50.45451355]
[81.29890442 62.46731567]
[90.28181458 74.48011780]
[99.26471710 86.49291992]
[106.56838989 84.78810120]
[128.47940063 79.67365265]
[131.21574402 64.92535400]
[133.95210266 50.17705154]
[136.68844604 35.42875290]
[135.17134094 26.32988930]
[139.66033936 20.37534332]
[142.73414612 5.69366312]
[145.80793762 -8.98801708]
[148.88174438 -23.66969872]
[141.34179688 -37.83052063]
[147.84408569 -52.49680328]
[163.40058899 -56.41783142]
[176.07771301 -46.58572388]
[176.15063477 -30.54283905]
[163.56341553 -20.59589767]
[160.48962402 -5.91421700]
[157.41581726 8.76746368]
[154.34202576 23.44914436]
[151.43675232 38.16510391]
[148.70039368 52.91340256]
[145.96405029 67.66170502]
[143.22769165 82.41000366]
[158.13403320 80.73635864]
[172.97845459 82.89115143]
[186.79371643 88.73397827]
[198.67962646 97.88411713]
[207.86172485 109.74536133]
[213.74169922 123.54485321]
[215.93643188 138.38342285]
[214.30290222 153.29420471]
[208.94755554 167.30564880]
[200.21934509 179.50476074]
[188.68698120 189.09666443]
[175.10191345 195.45637512]
[160.34931946 198.16949463]
[145.39047241 197.05923462]
[131.20005798 192.19793701]
[118.70271301 183.90237427]
[108.71276093 172.71305847]
[101.88111877 159.35908508]
[98.65294647 144.71057129]
[99.23857117 129.72200012]
[103.60079956 115.36791229]
[98.54238892 129.48925781]
[93.48398590 143.61061096]
[88.75070190 157.84423828]
[84.34502411 172.18264771]
[79.93935394 186.52105713]
[75.53367615 200.85946655]
[71.12800598 215.19787598]
[80.23083496 225.61421204]
[82.95397949 239.06616211]
[78.68707275 251.99661255]
[68.65379333 261.04052734]
[55.56339264 263.90063477]
[50.83010483 278.13424683]
[46.09682083 292.36785889]
[41.36353683 306.60150146]
[36.79375839 320.88845825]
[32.38808441 335.22686768]
[27.98241043 349.56527710]
[23.57673836 363.90368652]
[19.17106438 378.24209595]
[14.76539135 392.58050537]
[10.35971832 406.91891479]
[5.95404530 421.25732422]
[1.54837191 435.59573364]
[14.79747295 442.73348999]
[26.39929581 452.31912231]
[35.90789795 463.98413086]
[42.95779037 477.28018188]
[47.27799606 491.69622803]
[48.70246124 506.67813110]
[47.17642975 521.65002441]
[42.75855637 536.03643799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[32 119]
[33 118]
[34 117]
[35 116]
[39 111]
[40 110]
[41 109]
[42 108]
[43 107]
[46 106]
[47 105]
[48 104]
[49 60]
[50 59]
[51 58]
[52 57]
[62 83]
[63 82]
[64 81]
[65 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
