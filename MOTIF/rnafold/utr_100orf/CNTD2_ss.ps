%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUGCAAGGGUCGGUGCUUGGCCUCGCCCGCAACACCCUCCUGGAGGAUGCUGGUGAGAGGCAGGGACCAGGGGUCCGGCUCCCGGCUCGGGCCUAUCGUUAGGCGCUGGGCCCCCAGGCCCUCUCCUUUGCAGAGUCUCGCUGCCU\
) } def
/len { sequence length } bind def

/coor [
[126.33727264 421.91433716]
[131.81771851 407.79898071]
[141.58636475 396.22952271]
[154.58360291 388.46096802]
[151.46492004 373.78875732]
[148.34625244 359.11654663]
[145.22756958 344.44433594]
[142.10890198 329.77212524]
[138.99021912 315.09988403]
[135.87155151 300.42767334]
[132.75286865 285.75546265]
[129.63420105 271.08325195]
[115.16682434 262.56680298]
[111.22653198 245.90145874]
[120.71388245 231.24191284]
[117.28861237 216.63822937]
[112.66859436 210.80572510]
[113.94793701 201.69288635]
[110.82926178 187.02067566]
[107.71058655 172.34846497]
[104.59191132 157.67625427]
[101.47323608 143.00402832]
[98.35456085 128.33181763]
[79.93261719 120.06738281]
[71.66818237 101.64543915]
[56.99596405 98.52676392]
[42.32374954 95.40808868]
[27.65153694 92.28941345]
[12.97932339 89.17073822]
[-1.69289088 86.05206299]
[-16.80017090 90.75106812]
[-27.64064598 80.53669739]
[-42.31286240 77.41802216]
[-56.98507309 74.29934692]
[-64.22964478 80.51687622]
[-73.39713287 82.63299561]
[-82.36637115 80.28960419]
[-89.12253571 74.14557648]
[-92.20966339 65.69817352]
[-106.65710449 61.66437149]
[-121.10453796 57.63057709]
[-135.55197144 53.59677887]
[-152.43362427 55.16093063]
[-158.60993958 39.37203217]
[-145.14785767 29.06627464]
[-131.51818848 39.14933777]
[-117.07073975 43.18313599]
[-102.62330627 47.21693420]
[-88.17586517 51.25073242]
[-68.78061676 44.29999542]
[-53.86639786 59.62713242]
[-39.19418716 62.74580765]
[-24.52197075 65.86448669]
[-10.46414566 60.94240952]
[1.42578447 71.37985229]
[16.09799767 74.49852753]
[30.77021217 77.61720276]
[45.44242477 80.73587799]
[60.11463928 83.85455322]
[74.78685760 86.97322845]
[81.01036835 78.90987396]
[89.68007660 73.56330872]
[88.11215210 58.64547729]
[86.54422760 43.72764969]
[77.00412750 34.98316574]
[76.03808594 22.48076630]
[83.62058258 13.00257587]
[82.36541748 -1.94481742]
[81.11024475 -16.89221001]
[79.85507965 -31.83960342]
[78.59991455 -46.78699493]
[71.24939728 -62.06463242]
[83.89514923 -73.35716248]
[98.24705505 -64.33168793]
[93.54730988 -48.04216385]
[94.80247498 -33.09477234]
[96.05764008 -18.14737892]
[97.31281281 -3.19998503]
[98.56797791 11.74740791]
[109.35260010 25.55570793]
[101.46205139 42.15972137]
[103.02998352 57.07754898]
[104.59790802 71.99537659]
[109.12790680 73.12844086]
[113.41078186 74.98899078]
[117.33058929 77.52667999]
[120.78119659 80.67278290]
[134.07424927 73.72334290]
[147.36730957 66.77390289]
[160.66035461 59.82446289]
[173.95341492 52.87502289]
[187.24647522 45.92558289]
[200.53952026 38.97614288]
[213.75907898 31.88788033]
[226.90367126 24.66157532]
[240.04827881 17.43527031]
[253.19287109 10.20896435]
[266.33746338 2.98265934]
[274.36523438 -11.31724453]
[290.76422119 -11.24437332]
[298.66455078 3.12630892]
[289.93908691 17.01147652]
[273.56378174 16.12726021]
[260.41918945 23.35356522]
[247.27458191 30.57987022]
[234.12997437 37.80617523]
[220.98538208 45.03247833]
[216.61013794 51.05078888]
[207.48896790 52.26919556]
[194.19590759 59.21863556]
[180.90286255 66.16807556]
[167.60980225 73.11751556]
[154.31674194 80.06695557]
[141.02369690 87.01639557]
[127.73064423 93.96583557]
[125.67859650 112.08342743]
[113.02677155 125.21314240]
[116.14544678 139.88536072]
[119.26412201 154.55757141]
[122.38279724 169.22978210]
[125.50147247 183.90200806]
[128.62014771 198.57421875]
[131.89230347 213.21296692]
[135.31756592 227.81665039]
[147.53825378 233.57308960]
[154.09788513 245.15856934]
[152.78544617 258.21133423]
[144.30641174 267.96456909]
[147.42509460 282.63677979]
[150.54376221 297.30902100]
[153.66244507 311.98123169]
[156.78111267 326.65344238]
[159.89979553 341.32565308]
[163.01846313 355.99786377]
[166.13714600 370.67007446]
[169.25581360 385.34228516]
[184.28913879 387.15277100]
[197.91897583 393.74871826]
[208.66683960 404.41464233]
[215.36689758 417.99359131]
[217.29238892 433.01263428]
[214.23442078 447.84259033]
[206.52473450 460.87481689]
[194.99958801 470.69570923]
[180.90914917 476.23995972]
[165.78186035 476.90612793]
[151.25860596 472.62200928]
[138.91476440 463.85226440]
[130.08929443 451.54821777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 136]
[5 135]
[6 134]
[7 133]
[8 132]
[9 131]
[10 130]
[11 129]
[12 128]
[15 124]
[16 123]
[18 122]
[19 121]
[20 120]
[21 119]
[22 118]
[23 117]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[32 53]
[33 52]
[34 51]
[39 49]
[40 48]
[41 47]
[42 46]
[62 83]
[63 82]
[64 81]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
