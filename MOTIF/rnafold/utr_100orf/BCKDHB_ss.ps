%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUGGAAGCCUCCUCGGGUGCUCCGCCCUCCCCGCAGGCGGCGUGCGGCUGCAUAGCCUGAGAAUCCCGGUGGUGAGCGGGGAUGGCGGUUGUAGCGGCGGCUGCCGGCUGGCUACUCAGGCUCAGGGCGGCAGGGGCUGAGGGGCACUGGCGUCGGCUUCCUGGCGCGGGGCUGGCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[231.25608826 432.22686768]
[217.87951660 439.01419067]
[202.88732910 438.53030396]
[189.97627258 430.89459229]
[182.32995605 417.98977661]
[181.83380127 402.99798584]
[188.61015320 389.61587524]
[200.98809814 381.14318848]
[215.91549683 379.66912842]
[229.71057129 385.55642700]
[223.07148743 372.10568237]
[216.43238831 358.65493774]
[210.63925171 354.03796387]
[209.79695129 344.91894531]
[203.38722229 331.35739136]
[196.97749329 317.79586792]
[190.56776428 304.23431396]
[184.15803528 290.67279053]
[177.74830627 277.11123657]
[163.10308838 274.53146362]
[152.66165161 263.69445801]
[150.57922363 248.61080933]
[157.86199951 235.03630066]
[151.45228577 221.47476196]
[144.92762756 207.96812439]
[138.28854370 194.51739502]
[131.64945984 181.06665039]
[125.01036835 167.61590576]
[118.37127686 154.16516113]
[111.73218536 140.71441650]
[105.09310150 127.26367188]
[91.60664368 127.41351318]
[79.20314789 121.06864166]
[70.91822052 109.31879425]
[68.99008942 94.62276459]
[74.26989746 80.29779816]
[85.93408966 69.77093506]
[77.53446960 57.34328842]
[69.13484192 44.91564178]
[54.99666977 37.81475830]
[54.28014374 22.93739891]
[45.88052368 10.50975418]
[37.48089981 -1.91789007]
[29.08127975 -14.34553528]
[20.68165779 -26.77318001]
[13.26586628 -32.14644241]
[12.24701786 -39.48393631]
[4.05963802 -52.05242157]
[-9.95592213 -59.39235687]
[-10.41971302 -74.27973938]
[-18.60709190 -86.84822845]
[-26.79447174 -99.41670990]
[-34.98185349 -111.98519897]
[-43.16923141 -124.55368042]
[-51.46303177 -137.05220032]
[-59.86265182 -149.47984314]
[-68.26227570 -161.90748596]
[-76.66189575 -174.33512878]
[-85.06151581 -186.76277161]
[-93.46114349 -199.19041443]
[-105.92781067 -197.96438599]
[-117.66166687 -202.13961792]
[-126.44919586 -210.86315918]
[-130.66061401 -222.43038940]
[-129.55186462 -234.61781311]
[-123.39534760 -245.11048889]
[-131.36811829 -257.81619263]
[-139.34089661 -270.52188110]
[-147.31367493 -283.22760010]
[-155.28645325 -295.93328857]
[-169.17535400 -303.51016235]
[-169.38627625 -318.40328979]
[-177.35905457 -331.10897827]
[-192.61396790 -336.07559204]
[-198.10702515 -351.14895630]
[-189.62443542 -364.76605225]
[-173.67330933 -366.48101807]
[-162.48999023 -354.97827148]
[-164.65335083 -339.08175659]
[-156.68058777 -326.37606812]
[-143.36195374 -319.70797729]
[-142.58074951 -303.90606689]
[-134.60797119 -291.20037842]
[-126.63520050 -278.49465942]
[-118.66242218 -265.78897095]
[-110.68964386 -253.08326721]
[-93.05157471 -252.71661377]
[-79.03041840 -241.75277710]
[-74.33963013 -224.42050171]
[-81.03349304 -207.59004211]
[-72.63387299 -195.16239929]
[-64.23425293 -182.73475647]
[-55.83462906 -170.30711365]
[-47.43500900 -157.87945557]
[-39.03538513 -145.45181274]
[-32.67032623 -141.66197205]
[-30.60074615 -132.74105835]
[-22.41336632 -120.17257690]
[-14.22598743 -107.60408783]
[-6.03860760 -95.03560638]
[2.14877200 -82.46711731]
[15.57871532 -76.02616882]
[16.62812233 -60.23980331]
[24.81550217 -47.67131805]
[33.10930252 -35.17280197]
[41.50892258 -22.74515724]
[49.90854645 -10.31751156]
[58.30816650 2.11013293]
[66.70778656 14.53777790]
[80.24517059 20.74975204]
[81.56249237 36.51602173]
[89.96211243 48.94366455]
[98.36173248 61.37131119]
[113.18688965 63.65491104]
[124.93701172 54.33103943]
[136.68713379 45.00717163]
[139.94311523 29.29799461]
[154.31962585 22.17793846]
[168.78826904 29.10889816]
[172.24990845 44.77403641]
[162.04910278 57.15639877]
[146.01100159 56.75729752]
[134.26087952 66.08116913]
[122.51075745 75.40503693]
[130.30215454 91.49652863]
[128.43101501 108.25070190]
[118.54383850 120.62458038]
[125.18292999 134.07533264]
[131.82202148 147.52606201]
[138.46110535 160.97680664]
[145.10020447 174.42755127]
[151.73928833 187.87829590]
[158.37837219 201.32904053]
[164.99810791 207.65715027]
[165.01382446 215.06503296]
[171.42355347 228.62657166]
[186.53535461 231.61650085]
[196.86816406 242.80070496]
[198.61337280 257.74789429]
[191.30984497 270.70150757]
[197.71957397 284.26306152]
[204.12930298 297.82458496]
[210.53903198 311.38613892]
[216.94876099 324.94766235]
[223.35848999 338.50921631]
[229.88313293 352.01583862]
[236.52223206 365.46658325]
[243.16131592 378.91732788]
[252.74136353 385.82617188]
[253.46366882 396.30395508]
[262.07312012 408.58715820]
[276.32983398 415.44692993]
[277.29885864 430.30999756]
[285.90832520 442.59320068]
[294.51776123 454.87643433]
[303.12719727 467.15966797]
[311.73663330 479.44287109]
[320.34606934 491.72610474]
[328.95553589 504.00930786]
[337.56497192 516.29254150]
[346.17440796 528.57574463]
[354.78384399 540.85900879]
[363.39328003 553.14221191]
[378.98666382 554.31744385]
[390.14025879 565.27783203]
[391.58773804 580.84826660]
[382.64562988 593.67687988]
[367.53613281 597.70629883]
[353.39346313 591.03405762]
[346.89538574 576.81054688]
[351.11007690 561.75164795]
[342.50064087 549.46844482]
[333.89117432 537.18518066]
[325.28173828 524.90197754]
[316.67230225 512.61877441]
[308.06286621 500.33554077]
[299.45343018 488.05230713]
[290.84396362 475.76910400]
[282.23452759 463.48587036]
[273.62509155 451.20266724]
[265.01565552 438.91943359]
[251.37474060 432.93823242]
[249.78988647 417.19659424]
[241.18045044 404.91339111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 148]
[11 147]
[12 146]
[14 145]
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[23 136]
[24 135]
[25 133]
[26 132]
[27 131]
[28 130]
[29 129]
[30 128]
[31 127]
[37 113]
[38 112]
[39 111]
[41 109]
[42 108]
[43 107]
[44 106]
[45 105]
[47 104]
[48 103]
[50 101]
[51 100]
[52 99]
[53 98]
[54 97]
[55 95]
[56 94]
[57 93]
[58 92]
[59 91]
[60 90]
[66 86]
[67 85]
[68 84]
[69 83]
[70 82]
[72 80]
[73 79]
[114 124]
[115 123]
[116 122]
[150 184]
[151 183]
[153 181]
[154 180]
[155 179]
[156 178]
[157 177]
[158 176]
[159 175]
[160 174]
[161 173]
[162 172]
[163 171]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
