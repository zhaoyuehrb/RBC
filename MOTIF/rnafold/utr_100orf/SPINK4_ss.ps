%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCAGGCCCCAGCCAGCUCAGGCUACACUAUCCCAGGAUCAGCAUGGCCGUCCGCCAGUGGGUAAUCGCCCUGGCCUUGGCUGCCCUCCUUGUUGUGGACAGGGAAGUGCCAGUGGCAGCAGGAAAGCUCCCUUUCUCAAGAA\
) } def
/len { sequence length } bind def

/coor [
[295.78500366 265.44006348]
[286.25350952 253.85772705]
[276.72201538 242.27537537]
[267.19055176 230.69302368]
[257.65905762 219.11068726]
[236.61027527 211.64985657]
[239.26211548 186.16123962]
[225.91169739 179.32264709]
[216.42214966 183.34457397]
[206.07611084 181.40019226]
[198.37811279 173.90000916]
[196.07211304 163.17701721]
[183.02827454 155.77038574]
[169.98443604 148.36373901]
[156.94058228 140.95710754]
[143.89674377 133.55047607]
[130.85290527 126.14384460]
[117.80906677 118.73721313]
[108.97563171 126.69928741]
[96.61115265 130.29580688]
[82.93611908 128.01408386]
[70.77909851 119.48040771]
[62.99711609 105.67938995]
[48.00059128 105.35665131]
[33.00406265 105.03390503]
[18.00753403 104.71116638]
[3.01100707 104.38842010]
[-8.35394859 115.04091644]
[-23.55796242 114.49997711]
[-33.64344406 103.59957886]
[-48.63997269 103.27684021]
[-63.63910294 103.11545563]
[-78.63910675 103.11545563]
[-93.63910675 103.11545563]
[-107.56290436 111.77915955]
[-121.89834595 103.81503296]
[-121.89834595 87.41588593]
[-107.56290436 79.45175934]
[-93.63910675 88.11545563]
[-78.63910675 88.11545563]
[-63.63910294 88.11545563]
[-56.90147781 84.94721222]
[-48.31723022 88.28031158]
[-33.32070541 88.60305023]
[-22.77560043 78.14665222]
[-7.56239080 78.26032257]
[3.33374858 89.39189911]
[18.33027649 89.71463776]
[33.32680511 90.03737640]
[48.32332993 90.36012268]
[63.31985855 90.68286133]
[67.89623260 84.74090576]
[56.01247787 75.58796692]
[65.16561890 63.70436096]
[77.04898071 72.85700226]
[81.62535095 66.91504669]
[77.48389435 52.49810028]
[73.34243774 38.08115387]
[69.20098877 23.66420746]
[65.05953217 9.24726009]
[59.64492035 1.79871714]
[60.98765182 -5.52456379]
[57.15735245 -20.02728081]
[42.93257523 -26.52264404]
[36.25761795 -40.66403198]
[40.28418732 -55.77431870]
[53.11106110 -64.71888733]
[68.68178558 -63.27438354]
[79.64434052 -52.12285995]
[80.82253265 -36.52972412]
[71.66007233 -23.85758018]
[75.49037170 -9.35486317]
[79.47647858 5.10580587]
[83.61793518 19.52275276]
[87.75938416 33.93970108]
[91.90084076 48.35664749]
[96.04229736 62.77359390]
[123.63616180 78.96118164]
[125.21569824 105.69337463]
[138.25953674 113.10000610]
[151.30337524 120.50663757]
[164.34722900 127.91326904]
[177.39106750 135.31990051]
[190.43490601 142.72653198]
[203.47874451 150.13317871]
[223.55798340 149.00894165]
[232.75030518 165.97222900]
[246.10072327 172.81083679]
[261.09985352 172.64944458]
[274.30001831 165.52519226]
[287.50021362 158.40092468]
[300.70040894 151.27665710]
[313.90057373 144.15238953]
[327.10076904 137.02812195]
[340.30093384 129.90385437]
[353.50112915 122.77958679]
[364.56805420 109.93592072]
[379.97338867 117.01485443]
[377.43572998 133.77781677]
[360.62539673 135.97976685]
[347.42520142 143.10403442]
[334.22503662 150.22830200]
[321.02484131 157.35256958]
[307.82467651 164.47683716]
[294.62448120 171.60110474]
[281.42428589 178.72537231]
[268.22412109 185.84963989]
[272.88989258 198.42059326]
[269.24142456 209.57919312]
[278.77288818 221.16154480]
[288.30438232 232.74389648]
[297.83587646 244.32624817]
[307.36734009 255.90858459]
[318.19970703 266.28451538]
[330.18139648 275.30889893]
[338.98770142 278.00106812]
[342.32101440 284.65856934]
[354.10577393 293.93865967]
[362.85211182 296.81967163]
[366.04141235 303.54736328]
[377.62374878 313.07885742]
[389.20608521 322.61035156]
[404.91015625 320.83312988]
[417.21902466 330.74609375]
[418.83010864 346.46807861]
[408.78753662 358.67144775]
[393.04943848 360.11621094]
[380.95291138 349.94519043]
[379.67462158 334.19268799]
[368.09225464 324.66119385]
[356.50991821 315.12973022]
[344.82568359 305.72338867]
[333.04095459 296.44332886]
[321.15704346 287.29058838]
[309.17535400 278.26620483]
[313.24728394 292.70294189]
[310.27368164 307.40524292]
[300.91149902 319.12487793]
[287.22915649 325.27255249]
[272.24957275 324.49005127]
[259.28225708 316.95022583]
[251.19212341 304.31893921]
[249.76657104 289.38684082]
[255.32054138 275.45294189]
[266.62698364 265.59573364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[7 88]
[8 87]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[30 44]
[31 43]
[32 41]
[33 40]
[34 39]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[62 72]
[63 71]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
[96 100]
[114 135]
[115 134]
[117 133]
[118 132]
[120 131]
[121 130]
[122 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
