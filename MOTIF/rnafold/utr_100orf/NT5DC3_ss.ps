%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGCGGCGCGGCGGCGGUGGCGGCAGCAGGCAGCAGGCAUGACCAUGGCAGCGGCGGCGGUGGUGGCACGCGGGGCCGGGGCGAGGGCAGCGACAGCGGCGGCUUUGCGGGGUGGCUGCGGGACCGCGGCUCGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[140.33668518 104.83539581]
[125.36971283 105.83024597]
[119.19272614 117.58559418]
[108.02099609 124.76444244]
[94.76187134 125.49855042]
[82.86592102 119.59687042]
[75.42897797 108.59526825]
[60.44365692 109.25877380]
[46.99924088 117.59893036]
[33.94217682 110.43216705]
[18.95685959 111.09567261]
[3.97154164 111.75917053]
[-9.47287655 120.09932709]
[-22.52993774 112.93256378]
[-37.51525497 113.59606934]
[-50.95967484 121.93622589]
[-64.01673889 114.76946259]
[-79.00205231 115.43296814]
[-92.44647217 123.77311707]
[-105.50353241 116.60636139]
[-120.48885345 117.26986694]
[-135.47416687 117.93336487]
[-150.45948792 118.59686279]
[-165.43655396 119.42608643]
[-180.40351868 120.42092896]
[-195.35858154 121.58127594]
[-210.29988098 122.90697479]
[-225.07171631 133.83978271]
[-240.69557190 125.92277527]
[-255.60388184 127.57868195]
[-266.70880127 139.15713501]
[-282.67120361 137.55058289]
[-291.24612427 123.99144745]
[-285.85559082 108.88112640]
[-270.63479614 103.81096649]
[-257.25979614 112.67036438]
[-242.35147095 111.01445770]
[-234.50961304 101.73915863]
[-222.04699707 100.27858734]
[-211.62557983 107.96567535]
[-196.68428040 106.63996887]
[-190.24876404 102.88600159]
[-181.39837646 105.45395660]
[-166.43139648 104.45911407]
[-159.91441345 100.84842682]
[-151.12298584 103.61154175]
[-136.13766479 102.94804382]
[-121.15235138 102.28454590]
[-106.16703796 101.62104797]
[-93.79446411 93.32834625]
[-79.66555786 100.44764709]
[-64.68023682 99.78414917]
[-52.30766678 91.49144745]
[-38.17875671 98.61074829]
[-23.19343758 97.94725037]
[-10.82087040 89.65454865]
[3.30804157 96.77384949]
[18.29335976 96.11035156]
[33.27867889 95.44685364]
[45.65124512 87.15415192]
[59.78015900 94.27345276]
[74.76548004 93.60995483]
[83.44944000 79.90789032]
[98.56096649 74.00878906]
[114.23135376 78.20361328]
[124.37486267 90.86326599]
[139.34184265 89.86842346]
[154.16232300 87.55469513]
[168.72032166 83.94017792]
[183.27830505 80.32566071]
[190.92483521 75.18224335]
[198.19833374 76.79600525]
[212.83273315 73.50442505]
[227.46713257 70.21285248]
[242.10151672 66.92127228]
[256.73593140 63.62969208]
[265.20700073 50.55764389]
[280.09524536 47.42798996]
[292.50524902 55.58443451]
[307.13964844 52.29285431]
[321.77404785 49.00127792]
[333.53997803 38.42427444]
[347.65490723 43.18013382]
[362.28930664 39.88855743]
[376.92370605 36.59697723]
[378.95382690 22.45869827]
[385.68542480 9.89510059]
[396.28756714 0.41352785]
[409.46643066 -4.85641956]
[423.62310791 -5.29743528]
[437.04757690 -0.87674576]
[448.12527466 7.85240173]
[455.53128052 19.81989288]
[470.23489380 16.85286522]
[484.93853760 13.88583565]
[499.64215088 10.91880703]
[507.50869751 6.11865807]
[514.70373535 8.05256844]
[529.46936035 5.41154099]
[544.23504639 2.77051306]
[556.41595459 -8.20938778]
[571.92962646 -2.89369392]
[574.81701660 13.24926472]
[562.10778809 23.61299515]
[546.87609863 17.53618240]
[532.11041260 20.17720985]
[517.34472656 22.81823730]
[502.60919189 25.62243652]
[487.90557861 28.58946609]
[473.20193481 31.55649567]
[458.49829102 34.52352524]
[455.70449829 50.08531570]
[447.14559937 63.42460251]
[434.10073853 72.49334717]
[418.54037476 75.88582611]
[402.82879639 73.05647278]
[389.36474609 64.40736389]
[380.21527100 51.23137283]
[365.58087158 54.52295303]
[350.94650269 57.81452942]
[340.22729492 68.15609741]
[325.06561279 63.63567352]
[310.43121338 66.92725372]
[295.79681396 70.21882629]
[288.07443237 82.90346527]
[273.27993774 86.45006561]
[260.02749634 78.26409149]
[245.39309692 81.55566406]
[230.75871277 84.84724426]
[216.12431335 88.13882446]
[201.48991394 91.43039703]
[186.89282227 94.88365936]
[172.33482361 98.49817657]
[157.77684021 102.11268616]
[170.80201721 109.55209351]
[177.12203979 123.15566254]
[174.40676880 137.90786743]
[163.65730286 148.36964417]
[148.83688354 150.68382263]
[135.40972900 143.99717712]
[128.32630920 130.77502441]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[7 62]
[8 61]
[10 59]
[11 58]
[12 57]
[14 55]
[15 54]
[17 52]
[18 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 44]
[25 43]
[26 41]
[27 40]
[29 37]
[30 36]
[68 134]
[69 133]
[70 132]
[72 131]
[73 130]
[74 129]
[75 128]
[76 127]
[79 124]
[80 123]
[81 122]
[83 120]
[84 119]
[85 118]
[93 111]
[94 110]
[95 109]
[96 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
