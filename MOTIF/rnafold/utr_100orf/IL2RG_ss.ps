%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAAACGUGUGGGUGGGGAGGGGUAGUGGGUGAGGGACCCAGGUUCCUGACACAGACAGACUACACCCAGGGAAUGAAGAGCAAGCGCCAUGUUGAAGCCAUCAUUACCAUUCACAUCCCUCUUAUUCCUGCAGCUGCCCCUGCUGGGAGUGGGGCUGAACACGACAAUUCUGACGCCCAAUGGGAAUG\
) } def
/len { sequence length } bind def

/coor [
[214.26878357 393.68383789]
[210.17074585 379.25448608]
[206.07270813 364.82513428]
[201.97467041 350.39578247]
[187.49836731 346.88830566]
[176.64920044 336.53692627]
[172.41000366 322.04913330]
[176.01535034 307.28778076]
[186.59429932 296.24090576]
[182.49626160 281.81155396]
[178.39822388 267.38220215]
[174.30018616 252.95285034]
[170.20214844 238.52349854]
[156.96922302 227.00698853]
[161.59742737 209.19117737]
[157.26506042 194.83044434]
[152.93270874 180.46971130]
[149.25054932 155.18954468]
[138.17993164 145.06819153]
[127.10932922 134.94685364]
[116.03871918 124.82550049]
[104.96810913 114.70415497]
[90.87736511 109.56111145]
[75.88978577 110.17135620]
[60.90220261 110.78160095]
[45.92008591 111.51380157]
[30.94442177 112.36791992]
[15.96875858 113.22203827]
[0.99309546 114.07614899]
[-13.98256779 114.93026733]
[-27.45966148 132.91465759]
[-49.55410767 135.06512451]
[-65.83780670 120.38521576]
[-80.65881348 122.69554901]
[-93.10260010 132.46606445]
[-106.86971283 126.78137207]
[-121.69072723 129.09170532]
[-136.51173401 131.40203857]
[-151.33274841 133.71237183]
[-166.15376282 136.02272034]
[-180.97476196 138.33305359]
[-193.39802551 149.03794861]
[-208.78904724 143.37683105]
[-211.31488037 127.17337036]
[-198.37716675 117.09629822]
[-183.28511047 123.51203918]
[-168.46409607 121.20170593]
[-153.64308167 118.89136505]
[-138.82206726 116.58103180]
[-124.00106049 114.27069855]
[-109.18005371 111.96035767]
[-97.79637146 102.35510254]
[-82.96915436 107.87454224]
[-68.14813995 105.56420135]
[-66.06235504 97.79104614]
[-61.76420593 90.94682312]
[-55.61725235 85.64780426]
[-48.15250778 82.37799835]
[-40.02260590 81.44496918]
[-31.94475746 82.95103455]
[-24.63746643 86.78244019]
[-18.75663185 92.61772919]
[-14.83668327 99.95460510]
[0.13897938 99.10048676]
[15.11464214 98.24637604]
[30.09030533 97.39225769]
[45.06596756 96.53813934]
[51.57482529 93.01313019]
[60.29195786 95.79402161]
[75.27954102 95.18377686]
[90.26712036 94.57353210]
[89.30187225 90.39414215]
[89.82260132 85.62596130]
[87.87479401 70.75296021]
[75.62680817 61.12879944]
[73.86332703 46.01771927]
[83.11397552 34.40044403]
[81.16616821 19.52744484]
[79.21836853 4.65444803]
[77.27056122 -10.21854973]
[65.70983887 -17.14740181]
[60.33350754 -29.29418373]
[62.90150833 -42.12852478]
[72.25529480 -51.00338364]
[70.54983521 -65.90611267]
[57.82663345 -81.52927399]
[66.25340271 -98.92288208]
[64.06377411 -113.76219940]
[61.87413406 -128.60153198]
[49.90477753 -139.28395081]
[50.93769073 -155.29371643]
[64.18050385 -164.34950256]
[79.47447205 -159.50448608]
[85.08736420 -144.47535706]
[76.71345520 -130.79116821]
[78.90309143 -115.95183563]
[81.09272766 -101.11251831]
[89.82476044 -95.76990509]
[94.26032257 -86.30072784]
[92.71185303 -75.73730469]
[85.45256805 -67.61157227]
[87.15802765 -52.70884323]
[100.75716400 -42.82589722]
[103.05331421 -25.83175087]
[92.14355469 -12.16635513]
[94.09136200 2.70664215]
[96.03916931 17.57963943]
[97.98697662 32.45263672]
[109.91720581 41.29600906]
[112.10443115 56.35159683]
[102.74779510 68.80516052]
[104.69560242 83.67815399]
[109.91999054 69.61737061]
[122.65823364 61.69668961]
[137.57957458 63.23079300]
[148.43968201 73.57768250]
[150.69377136 88.40734863]
[143.39854431 101.51382446]
[129.60693359 107.41225433]
[115.08945465 103.63355255]
[126.16006470 113.75489807]
[137.23066711 123.87624359]
[148.30128479 133.99758911]
[159.37188721 144.11892700]
[173.66020203 148.68446350]
[188.54855347 146.85777283]
[203.43692017 145.03108215]
[218.32527161 143.20439148]
[233.21363831 141.37768555]
[248.10198975 139.55099487]
[262.99035645 137.72430420]
[277.87869263 135.89761353]
[292.76705933 134.07092285]
[307.64004517 132.12310791]
[322.49670410 130.05432129]
[337.35336304 127.98553467]
[352.21002197 125.91674042]
[361.53607178 113.15742493]
[377.16540527 110.81233978]
[389.82540894 120.27277374]
[392.00512695 135.92602539]
[382.41137695 148.48530579]
[366.73593140 150.49940491]
[354.27880859 140.77339172]
[339.42214966 142.84217834]
[324.56549072 144.91098022]
[309.70886230 146.97976685]
[303.50811768 151.02226257]
[294.59375000 148.95927429]
[279.70538330 150.78596497]
[264.81704712 152.61265564]
[249.92868042 154.43936157]
[235.04032898 156.26605225]
[220.15196228 158.09274292]
[205.26361084 159.91943359]
[190.37525940 161.74612427]
[175.48689270 163.57283020]
[167.29344177 176.13734436]
[171.62579346 190.49807739]
[175.95816040 204.85881042]
[186.94163513 211.63980103]
[190.24899292 223.70164490]
[184.63150024 234.42546082]
[188.72953796 248.85481262]
[192.82757568 263.28414917]
[196.92559814 277.71350098]
[201.02363586 292.14285278]
[215.82980347 295.98019409]
[226.65579224 306.64294434]
[230.66444397 321.19619751]
[226.87571716 335.70486450]
[216.40402222 346.29776001]
[220.50205994 360.72711182]
[224.60008240 375.15643311]
[228.69812012 389.58578491]
[244.76574707 393.45697021]
[256.62384033 404.83444214]
[261.10461426 420.54772949]
[257.07733154 436.28649902]
[245.73168945 447.78274536]
[250.06404114 462.14349365]
[254.39640808 476.50421143]
[264.75979614 489.92199707]
[254.73524475 503.59478760]
[238.82173157 497.74700928]
[240.03567505 480.83657837]
[235.70330811 466.47583008]
[231.37095642 452.11511230]
[217.89074707 449.87405396]
[206.63906860 442.00311279]
[199.84671021 429.99319458]
[198.89030457 416.16241455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 175]
[2 174]
[3 173]
[4 172]
[9 167]
[10 166]
[11 165]
[12 164]
[13 163]
[15 160]
[16 159]
[17 158]
[18 124]
[19 123]
[20 122]
[21 121]
[22 120]
[23 71]
[24 70]
[25 69]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[73 112]
[74 111]
[77 108]
[78 107]
[79 106]
[80 105]
[84 102]
[85 101]
[87 97]
[88 96]
[89 95]
[125 157]
[126 156]
[127 155]
[128 154]
[129 153]
[130 152]
[131 151]
[132 150]
[133 149]
[134 147]
[135 146]
[136 145]
[137 144]
[180 188]
[181 187]
[182 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
