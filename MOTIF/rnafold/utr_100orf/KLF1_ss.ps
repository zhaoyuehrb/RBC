%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:46:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAGUUCACGAGGCAGCCGAGGAAGAGGAGGCUUGAGGCCCAGGGUGGGCACCAGCCAGCCAUGGCCACAGCCGAGACCGCCUUGCCCUCCAUCAGCACACUGACCGCCCUGGGCCCCUUCCCGGACACACAGGAUGACUUCCUCAAGUGGUGGCGCUCCG\
) } def
/len { sequence length } bind def

/coor [
[118.97624207 641.43322754]
[110.84875488 654.27893066]
[98.42121887 663.03247070]
[83.58873749 666.35900879]
[68.61315155 663.75128174]
[55.77813721 655.60687256]
[47.04093552 643.16784668]
[43.73390961 628.33099365]
[46.36135101 613.35888672]
[54.52260208 600.53460693]
[66.97312164 591.81372070]
[81.81430817 588.52624512]
[84.38758087 573.74859619]
[86.96086121 558.97100830]
[89.39247894 544.16937256]
[91.68221283 529.34521484]
[85.97840118 515.58599854]
[95.73161316 503.12863159]
[98.02134705 488.30441284]
[100.31108856 473.48022461]
[102.03134155 458.57919312]
[103.17958069 443.62319946]
[104.32781982 428.66720581]
[105.47605896 413.71124268]
[106.62429810 398.75524902]
[107.77253723 383.79925537]
[108.92077637 368.84326172]
[110.71302032 342.02850342]
[127.38244629 330.87811279]
[123.96464539 316.27270508]
[120.54683685 301.66726685]
[117.12903595 287.06182861]
[113.71123505 272.45639038]
[103.50457764 283.44839478]
[88.53346252 282.51794434]
[79.76642609 270.34671021]
[83.62659454 255.85189819]
[97.28583527 249.65310669]
[110.73662567 256.29165649]
[108.73126221 241.42631531]
[106.72589874 226.56095886]
[104.72053528 211.69561768]
[102.71517181 196.83027649]
[100.70980835 181.96492004]
[98.70444489 167.09957886]
[96.69908142 152.23423767]
[94.69371796 137.36888123]
[92.68835449 122.50354004]
[90.68299103 107.63819122]
[84.28590393 94.07068634]
[74.09334564 83.06560516]
[63.90079117 72.06052399]
[48.96342468 75.35025024]
[34.48060608 70.75189972]
[24.31157494 59.59586716]
[21.11335182 44.94570160]
[25.64703369 30.75727844]
[15.45447826 19.75219917]
[5.26192141 8.74711895]
[-4.93063498 -2.25796175]
[-20.74822807 -6.58644772]
[-24.64615059 -22.51560974]
[-12.61455536 -33.65889359]
[2.96948457 -28.55304146]
[6.07444525 -12.45051861]
[16.26700211 -1.44543803]
[26.45955849 9.55964184]
[36.65211487 20.56472206]
[51.14595413 17.13045502]
[65.50830841 21.44075394]
[75.85317993 32.43393326]
[79.32939148 47.22625732]
[74.90586853 61.86796951]
[85.09842682 72.87304688]
[95.29098511 83.87812805]
[109.45600128 78.94332123]
[110.60424042 63.98733139]
[111.75247955 49.03134537]
[104.16993713 41.15136719]
[102.24176025 30.61076927]
[106.37071991 20.96173096]
[114.95896912 15.32067966]
[116.67922211 0.41964838]
[112.48926544 -16.00839424]
[127.11539459 -24.58234406]
[139.40318298 -12.90131283]
[131.58026123 2.13989973]
[129.86000061 17.04093170]
[138.85261536 34.12812805]
[126.70846558 50.17958450]
[125.56022644 65.13557434]
[124.41198730 80.09156036]
[131.34107971 82.96168518]
[145.19927979 88.70193481]
[152.12837219 91.57205963]
[161.89192200 80.18465424]
[171.65547180 68.79724884]
[181.41903687 57.40983963]
[183.90493774 41.20020294]
[199.28198242 35.50118637]
[211.73156738 46.17544937]
[208.44662476 62.24222565]
[192.80644226 67.17339325]
[183.04289246 78.56079865]
[173.27932739 89.94820404]
[163.51577759 101.33561707]
[132.80058289 114.13892365]
[105.54833984 105.63282776]
[107.55370331 120.49817657]
[109.55906677 135.36352539]
[111.56443024 150.22886658]
[113.56979370 165.09420776]
[115.57515717 179.95956421]
[117.58052063 194.82490540]
[119.58588409 209.69024658]
[121.59124756 224.55560303]
[123.59661102 239.42094421]
[125.60196686 254.28628540]
[128.31666565 269.03860474]
[131.73446655 283.64401245]
[135.15226746 298.24945068]
[138.57006836 312.85488892]
[141.98786926 327.46032715]
[152.38935852 338.26815796]
[166.85316467 342.24285889]
[178.26576233 331.86230469]
[193.48258972 329.32226562]
[207.64801025 335.43325806]
[216.24188232 348.24530029]
[216.52195740 363.67013550]
[208.39884949 376.78570557]
[194.46461487 383.40692139]
[179.16560364 381.42095947]
[167.38369751 371.46154785]
[162.87844849 356.70666504]
[148.41464233 352.73193359]
[142.28016663 357.04684448]
[150.90974426 369.31591797]
[138.64051819 377.94528198]
[130.01123047 365.67660522]
[123.87676239 369.99151611]
[122.72852325 384.94747925]
[121.58028412 399.90347290]
[120.43204498 414.85946655]
[119.28380585 429.81546021]
[118.13556671 444.77145386]
[116.98732758 459.72741699]
[119.05943298 463.66387939]
[119.67875671 467.65151978]
[119.01240540 471.21887207]
[117.36582184 473.99975586]
[115.13529968 475.76995850]
[112.84555817 490.59417725]
[110.55581665 505.41836548]
[116.09585571 520.23791504]
[106.50642395 531.63494873]
[104.21668243 546.45910645]
[106.00392151 555.46569824]
[101.73848724 561.54425049]
[99.16520691 576.32189941]
[96.59193420 591.09954834]
[109.44833374 599.21008301]
[118.21823120 611.62609863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 161]
[13 160]
[14 159]
[15 157]
[16 156]
[18 154]
[19 153]
[20 152]
[21 147]
[22 146]
[23 145]
[24 144]
[25 143]
[26 142]
[27 141]
[29 123]
[30 122]
[31 121]
[32 120]
[33 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 75]
[51 74]
[52 73]
[57 68]
[58 67]
[59 66]
[60 65]
[76 92]
[77 91]
[78 90]
[82 88]
[83 87]
[95 106]
[96 105]
[97 104]
[98 103]
[124 136]
[125 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
