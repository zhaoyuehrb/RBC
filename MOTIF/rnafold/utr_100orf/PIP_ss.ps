%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCUGGGACACAUUGCCUUCUGUUUUCUCCAGCAUGCGCUUGCUCCAGCUCCUGUUCAGGGCCAGCCCUGCCACCCUGCUCCUGGUUCUCUGCCUGCAGUUGGGGGCCAACAAAGCUCAGGACAACACUCGGA\
) } def
/len { sequence length } bind def

/coor [
[-9.50184822 201.38818359]
[-17.66899490 199.01985168]
[-25.23113823 195.14717102]
[-31.91438866 189.91357422]
[-37.47730255 183.51176453]
[-41.71959305 176.17657471]
[-56.20103455 180.08653259]
[-70.68247223 183.99650574]
[-85.16391754 187.90646362]
[-99.64536285 191.81643677]
[-110.95161438 202.88346863]
[-125.25573730 198.73120117]
[-139.73718262 202.64115906]
[-145.09068298 215.05778503]
[-156.46702576 221.99842834]
[-169.56787109 221.10466003]
[-179.59364319 212.92977905]
[-194.16093445 216.50666809]
[-208.72821045 220.08355713]
[-214.67134094 234.29571533]
[-227.69128418 242.19094849]
[-242.68629456 240.92070007]
[-253.92350769 231.18092346]
[-268.49078369 234.75781250]
[-283.05807495 238.33470154]
[-289.80044556 252.44409180]
[-304.05606079 258.87149048]
[-319.09384155 254.58212280]
[-327.81344604 241.60125732]
[-326.09771729 226.05809021]
[-314.75677490 215.29161072]
[-299.14544678 214.38543701]
[-286.63497925 223.76741028]
[-272.06768799 220.19053650]
[-257.50039673 216.61364746]
[-252.05221558 202.77690125]
[-239.35086060 194.70600891]
[-224.15486145 195.67303467]
[-212.30509949 205.51628113]
[-197.73782349 201.93939209]
[-183.17053223 198.36250305]
[-175.12197876 183.64091492]
[-158.60258484 179.16627502]
[-143.64714050 188.15971375]
[-129.16569519 184.24975586]
[-118.89525604 173.46238708]
[-103.55532837 177.33499146]
[-89.07388306 173.42503357]
[-74.59244537 169.51506042]
[-60.11100006 165.60510254]
[-45.62955856 161.69512939]
[-42.14517593 139.51574707]
[-28.22915268 121.81642914]
[-7.38088512 113.14833832]
[15.10774326 115.77890778]
[33.49556732 129.09907532]
[46.54289627 121.69858551]
[59.59022522 114.29809570]
[72.63755798 106.89761353]
[85.68488312 99.49712372]
[92.93305969 87.54071808]
[106.91462708 87.45554352]
[119.96195984 80.05506134]
[133.00929260 72.65457153]
[146.05661011 65.25408936]
[143.59526062 50.31530762]
[146.38821411 35.46366119]
[154.07940674 22.48807716]
[165.72395325 12.94478035]
[179.90420532 7.97066116]
[194.90231323 8.14784908]
[208.90832520 13.43565845]
[220.23860168 23.17782974]
[233.28593445 15.77734280]
[246.33326721 8.37685680]
[252.31927490 1.35841036]
[259.76568604 0.96019202]
[272.97927856 -6.13918209]
[286.19287109 -13.23855591]
[294.68753052 -26.58589554]
[309.56106567 -25.79377365]
[322.77462769 -32.89314651]
[335.98822021 -39.99252319]
[338.19622803 -55.23820496]
[348.83367920 -66.13307953]
[363.67120361 -68.64545441]
[376.98364258 -62.01846695]
[390.19723511 -69.11784363]
[403.41079712 -76.21721649]
[409.39309692 -91.10317993]
[424.80203247 -95.56907654]
[437.81719971 -86.18905640]
[438.45449829 -70.15866852]
[426.22500610 -59.77505112]
[410.51019287 -63.00362778]
[397.29660034 -55.90425491]
[384.08300781 -48.80487823]
[382.26058960 -34.04626083]
[371.97549438 -23.06079102]
[357.01901245 -20.20462036]
[343.08761597 -26.77893448]
[329.87402344 -19.67955971]
[316.66043091 -12.58018589]
[309.11090088 0.25935787]
[293.29223633 -0.02496914]
[280.07867432 7.07440519]
[266.86508179 14.17377949]
[253.73374939 21.42418671]
[240.68641663 28.82467270]
[227.63909912 36.22515869]
[230.18612671 50.94921875]
[227.53694153 65.68389893]
[219.99229431 78.64741516]
[208.44607544 88.26543427]
[194.27947998 93.36228943]
[179.19581604 93.30467987]
[165.01565552 88.08023834]
[153.45710754 78.30141449]
[140.40977478 85.70190430]
[127.36244202 93.10238647]
[114.31511688 100.50287628]
[107.06694031 112.45928192]
[93.08537292 112.54445648]
[80.03804016 119.94493866]
[66.99071503 127.34542847]
[53.94338226 134.74591064]
[40.89605331 142.14639282]
[43.00811005 150.46867371]
[43.50097275 159.03308105]
[42.35955048 167.52783203]
[39.62820435 175.64416504]
[35.40902710 183.08764648]
[29.85803032 189.58879089]
[23.17938232 194.91288757]
[15.61789322 198.86840820]
[7.45004749 201.31394958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[12 45]
[13 44]
[17 41]
[18 40]
[19 39]
[23 35]
[24 34]
[25 33]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[62 121]
[63 120]
[64 119]
[65 118]
[73 110]
[74 109]
[75 108]
[77 107]
[78 106]
[79 105]
[81 103]
[82 102]
[83 101]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
