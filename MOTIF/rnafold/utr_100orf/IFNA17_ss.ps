%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:17:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAAGGUUACCCAUCUCAAGUAGCCUAGCAACAUUUGCAACAUCCCAAUGGCCCUGUCCUUUUCUUUACUGAUGGCCGUGCUGGUGCUCAGCUACAAAUCCAUCUGUUCUCUAGGCUGUGAUCUGCCUCAGACCCACAGCCUGGGUA\
) } def
/len { sequence length } bind def

/coor [
[121.96942139 196.99667358]
[107.00970459 198.09521484]
[94.69171906 189.53558350]
[90.50431061 175.13191223]
[96.31330109 161.30250549]
[99.47091675 146.63862610]
[89.66960907 157.99354553]
[79.86830139 169.34846497]
[70.06699371 180.70339966]
[60.26568222 192.05831909]
[50.46437073 203.41325378]
[40.66306305 214.76817322]
[45.13613892 229.53283691]
[40.89477921 244.36572266]
[29.29238510 254.53370667]
[14.03123856 256.79223633]
[-0.01888465 250.42060852]
[-8.37464046 237.45199585]
[-8.36973763 222.02462769]
[-0.00574105 209.06134033]
[14.04842854 202.69863892]
[29.30813789 204.96685791]
[39.10944748 193.61193848]
[48.91075516 182.25701904]
[58.71206284 170.90208435]
[68.51337433 159.54716492]
[78.31468201 148.19223022]
[88.11598969 136.83731079]
[81.16623688 123.54367065]
[74.21710968 110.25120544]
[59.29928207 111.81912994]
[44.38145447 113.38705444]
[29.46362495 114.95498657]
[14.34327602 122.62384033]
[2.78839111 110.21735382]
[11.51131916 95.67958069]
[27.89569855 100.03715515]
[42.81352615 98.46923065]
[57.73135376 96.90129852]
[72.64918518 95.33337402]
[76.46699524 88.87780762]
[62.62366486 83.10180664]
[47.63912201 83.78262329]
[37.34768295 72.86995697]
[38.90460205 57.95097351]
[51.22740936 49.39828491]
[65.74851990 53.15825653]
[72.37199402 66.61828613]
[84.10261536 75.96668243]
[87.92042542 69.51111603]
[82.10768890 55.68316650]
[76.29496002 41.85522079]
[70.48222351 28.02727127]
[64.66948700 14.19932461]
[58.85675812 0.37137738]
[53.74841309 -3.99273443]
[51.93458939 -9.46662712]
[53.10360718 -14.15942287]
[47.87502670 -28.21865273]
[42.64644623 -42.27788162]
[27.44424820 -43.64022827]
[14.34304619 -51.47101974]
[5.94409132 -64.21543884]
[3.91500258 -79.34308624]
[8.65865612 -93.85034180]
[19.23319817 -104.85678864]
[33.53904343 -110.17707825]
[48.73575592 -108.75488281]
[61.80601883 -100.87255859]
[70.15472412 -88.09516144]
[72.12422180 -72.95964813]
[67.32347870 -58.47117996]
[56.70567322 -47.50646210]
[61.93425369 -33.44723511]
[67.16283417 -19.38800430]
[72.68470764 -5.44135618]
[78.49743652 8.38659096]
[84.31017303 22.21453857]
[90.12290192 36.04248428]
[95.93563843 49.87043381]
[101.74837494 63.69837952]
[116.70809174 64.79695129]
[124.47849274 51.96648788]
[132.24890137 39.13602448]
[140.01930237 26.30556107]
[137.60426331 10.44532299]
[148.60388184 -1.23320639]
[164.58018494 0.22874041]
[173.27752686 13.70968342]
[168.02404785 28.86819649]
[152.84977722 34.07596588]
[145.07936096 46.90642929]
[137.30895996 59.73689270]
[129.53855896 72.56735992]
[142.50897217 65.03289795]
[154.02209473 55.41790390]
[167.83357239 49.56615067]
[182.74983215 47.98335266]
[197.48181152 50.80628967]
[210.75636292 57.79100418]
[221.42631531 68.33387756]
[228.56954956 81.52380371]
[231.56878662 96.22090149]
[230.16479492 111.15504456]
[224.47892761 125.03564453]
[215.00254822 136.66311646]
[202.55461121 145.03263855]
[188.21086121 149.42091370]
[173.21089172 149.44869995]
[158.85098267 145.11358643]
[146.37568665 136.79345703]
[131.71180725 133.63583374]
[143.06672668 143.43714905]
[154.42166138 153.23844910]
[165.77658081 163.03976440]
[177.13150024 172.84106445]
[188.48643494 182.64237976]
[199.84135437 192.44369507]
[211.19628906 202.24499512]
[222.55120850 212.04631042]
[233.90612793 221.84761047]
[245.26106262 231.64892578]
[263.39868164 234.64575195]
[268.58242798 251.38211060]
[280.14010620 260.94348145]
[291.69781494 270.50482178]
[303.25552368 280.06619263]
[319.31387329 285.50366211]
[318.53430176 302.43966675]
[302.04434204 306.37890625]
[293.69415283 291.62390137]
[282.13644409 282.06253052]
[270.57876587 272.50115967]
[259.02105713 262.93981934]
[246.91061401 263.75683594]
[237.19561768 255.82829285]
[235.45974731 243.00384521]
[224.10482788 233.20254517]
[212.74989319 223.40122986]
[201.39497375 213.59992981]
[190.04005432 203.79861450]
[178.68511963 193.99729919]
[167.33020020 184.19599915]
[155.97526550 174.39468384]
[144.62034607 164.59338379]
[133.26541138 154.79206848]
[121.91049194 144.99075317]
[127.17637634 159.03605652]
[134.94331360 171.86862183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 28]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[30 40]
[31 39]
[32 38]
[33 37]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[58 75]
[59 74]
[60 73]
[82 94]
[83 93]
[84 92]
[85 91]
[112 147]
[113 146]
[114 145]
[115 144]
[116 143]
[117 142]
[118 141]
[119 140]
[120 139]
[121 138]
[122 137]
[124 134]
[125 133]
[126 132]
[127 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
