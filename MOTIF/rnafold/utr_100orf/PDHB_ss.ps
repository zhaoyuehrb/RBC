%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCUGUUGUCGUUUGGCAGCGGAUAGAGGACACGACCAAGAUGGCGGCGGUGUCUGGCUUGGUGCGGAGACCCCUUCGGGAGGUCUCCGGGCUGCUGAAGAGGCGCUUUCACUGGACCGCGCCGGCUGCGCUGCAGGUGA\
) } def
/len { sequence length } bind def

/coor [
[83.19599152 161.72225952]
[97.84748077 158.50759888]
[111.22084808 165.29905701]
[107.02341461 150.89831543]
[92.31163025 147.97195435]
[82.92278290 159.67022705]
[73.53392792 171.36849976]
[64.14507294 183.06675720]
[54.75622177 194.76502991]
[45.36737061 206.46328735]
[35.97851944 218.16156006]
[26.58966637 229.85983276]
[17.20081520 241.55809021]
[15.24226761 257.83987427]
[0.05828157 264.03491211]
[-12.73115921 253.77030945]
[-9.96937466 237.60539246]
[5.50254774 232.16925049]
[14.89140034 220.47097778]
[24.28025246 208.77270508]
[33.66910553 197.07444763]
[43.05795670 185.37617493]
[52.44680786 173.67790222]
[61.83565903 161.97964478]
[71.22451019 150.28137207]
[80.61336517 138.58309937]
[69.80141449 128.99511719]
[63.05671310 116.71816254]
[60.90605545 103.32516479]
[63.30848694 90.42535400]
[69.69291687 79.47129822]
[55.71279907 74.03472900]
[41.73268127 68.59815979]
[27.75256157 63.16158676]
[13.77244377 57.72501755]
[-0.20767410 52.28844452]
[-14.53243446 58.40718842]
[-28.63281631 52.69458008]
[-34.37782288 39.00040054]
[-48.35794067 33.56383133]
[-61.33506393 42.07111740]
[-76.83258057 41.29226685]
[-88.89138031 31.52676392]
[-92.87460327 16.52964592]
[-87.25062561 2.06761003]
[-74.18197632 -6.29839706]
[-58.69382095 -5.35147381]
[-46.74167252 4.54426765]
[-42.92137146 19.58371353]
[-28.94125175 25.02028465]
[-15.45393658 18.80514717]
[-1.19866300 24.11945152]
[5.22889662 38.30832672]
[19.20901489 43.74489975]
[33.18913269 49.18146896]
[47.16925049 54.61803818]
[61.14936829 60.05461121]
[75.12948608 65.49118042]
[88.65414429 59.00399399]
[93.16473389 44.69823837]
[97.67531586 30.39248466]
[96.59947205 23.74477005]
[98.76700592 18.38800049]
[102.70727539 15.56881714]
[107.83757782 1.47342753]
[112.96788025 -12.62196159]
[110.41713715 -28.23619461]
[122.04080200 -37.54960632]
[127.17110443 -51.64499283]
[132.30140686 -65.74038696]
[137.43170166 -79.83576965]
[142.56201172 -93.93115997]
[147.69230652 -108.02655029]
[152.82261658 -122.12194061]
[157.95291138 -136.21733093]
[162.92915344 -150.36784363]
[167.75074768 -164.57179260]
[164.02249146 -180.54151917]
[176.17193604 -191.55618286]
[191.70079041 -186.28485107]
[194.63427734 -170.15022278]
[181.95469666 -159.75019836]
[177.13311768 -145.54624939]
[177.96783447 -138.14533997]
[172.04830933 -131.08702087]
[166.91799927 -116.99163818]
[161.78770447 -102.89624786]
[156.65739441 -88.80085754]
[151.52709961 -74.70547485]
[146.39678955 -60.61008072]
[141.26649475 -46.51469421]
[136.13618469 -32.41930389]
[139.05389404 -17.81326675]
[127.06327057 -7.49165964]
[121.93296814 6.60372972]
[116.80266571 20.69911957]
[111.98107147 34.90307236]
[107.47048950 49.20882416]
[102.95989990 63.51457977]
[115.33560181 65.55892181]
[126.64008331 71.79542542]
[135.45880127 81.72189331]
[140.59872437 94.36217499]
[141.24534607 108.36004639]
[137.08120728 122.12422943]
[151.28515625 126.94582367]
[165.48912048 131.76741028]
[179.69306946 136.58900452]
[193.89701843 141.41059875]
[207.94125366 134.67283630]
[222.27738953 139.76496887]
[228.61425781 153.19551086]
[242.81820679 158.01710510]
[258.78793335 154.28884888]
[269.80261230 166.43829346]
[264.53128052 181.96713257]
[248.39663696 184.90063477]
[237.99661255 172.22105408]
[223.79266357 167.39945984]
[210.58929443 174.19699097]
[196.11578369 169.50955200]
[189.07542419 155.61454773]
[174.87147522 150.79295349]
[160.66752625 145.97135925]
[146.46357727 141.14978027]
[132.25961304 136.32818604]
[121.42415619 146.70088196]
[125.62159729 161.10162354]
[130.90534973 175.14021301]
[137.24461365 188.73483276]
[143.58389282 202.32945251]
[149.92317200 215.92407227]
[162.09692383 227.72390747]
[154.12825012 242.68841553]
[137.54261780 239.17376709]
[136.32855225 222.26333618]
[129.98927307 208.66871643]
[123.65000153 195.07411194]
[117.31072998 181.47949219]
[111.73333740 195.40402222]
[98.59786224 202.64691162]
[83.84557343 199.93212891]
[74.14904022 188.48759460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 128]
[4 127]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[31 58]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[39 50]
[40 49]
[59 99]
[60 98]
[61 97]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 83]
[77 82]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[112 119]
[113 118]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
