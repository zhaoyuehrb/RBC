%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCGUCGGGAAGGCGGCGGGCUAUCCGGUCCUCGGCUGCGGCGGGCACCAUGGUCGGUGGCGAGGCGGCUGCCGCAGUGGAGGAGCUGGUUUCGGGGGUGCGGCAGGCGGCCGACUUCGCGGAGCAGUUCCGCUCCUACUCAGAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[86.60797119 149.97283936]
[71.67118073 148.59727478]
[73.04644775 133.66094971]
[65.57802582 132.97341919]
[57.21269608 145.42417908]
[55.93884277 161.19401550]
[42.41864014 167.44328308]
[34.05331039 179.89404297]
[25.68798065 192.34478760]
[17.32264900 204.79554749]
[8.95731926 217.24629211]
[12.24660492 232.70449829]
[3.57192016 245.91531372]
[-11.92019844 249.04098511]
[-25.03855133 240.22711182]
[-28.00025368 224.70280457]
[-19.04817772 211.67837524]
[-3.49343348 208.88096619]
[4.87189674 196.43022156]
[13.23722649 183.97946167]
[21.60255623 171.52870178]
[29.96788597 159.07795715]
[30.64339447 144.19866943]
[44.76194000 137.05883789]
[53.12726974 124.60809326]
[56.59539413 108.49664307]
[64.64921570 96.56640625]
[75.17615509 89.88410950]
[85.89716339 88.66314697]
[94.67420959 92.27454376]
[85.56303406 80.35874176]
[76.45185089 68.44293213]
[67.21961212 56.62067795]
[57.86726379 44.89320755]
[48.51491928 33.16573334]
[39.16257095 21.43826103]
[29.81022453 9.71078873]
[15.15669250 3.74550772]
[13.27063274 -11.02920246]
[3.91828585 -22.75667381]
[-5.43406105 -34.48414612]
[-14.78640842 -46.21162033]
[-24.13875580 -57.93909073]
[-33.49110413 -69.66656494]
[-42.84344864 -81.39403534]
[-52.19579697 -93.12150574]
[-61.54814529 -104.84897614]
[-70.90048981 -116.57645416]
[-86.29505920 -116.01667023]
[-98.91982269 -124.52953339]
[-104.05043030 -138.67665100]
[-99.91632843 -152.96116638]
[-109.26867676 -164.68862915]
[-123.92220306 -170.65391541]
[-125.80826569 -185.42861938]
[-135.16061401 -197.15609741]
[-150.65544128 -196.32542419]
[-163.66093445 -204.78926086]
[-169.17623901 -219.29309082]
[-165.08058167 -234.25988770]
[-152.94885254 -243.93463135]
[-137.44592285 -244.59716797]
[-124.53300476 -235.99275208]
[-119.17536926 -221.42993164]
[-123.43313599 -206.50843811]
[-114.08079529 -194.78097534]
[-100.09620667 -189.65451050]
[-97.54119873 -174.04098511]
[-88.18885803 -162.31350708]
[-73.34255981 -163.16535950]
[-60.69181442 -155.01535034]
[-55.20166016 -140.81283569]
[-59.17301941 -125.92880249]
[-49.82067108 -114.20132446]
[-40.46832275 -102.47385406]
[-31.11597633 -90.74638367]
[-21.76362991 -79.01891327]
[-12.41128349 -67.29143524]
[-3.05893612 -55.56396484]
[6.29341078 -43.83649445]
[15.64575768 -32.10902023]
[24.99810410 -20.38154984]
[38.98269272 -15.25509548]
[41.53769684 0.35844201]
[50.89004135 12.08591461]
[60.24238968 23.81338692]
[69.59473419 35.54085922]
[78.94708252 47.26832962]
[85.61654663 50.55680847]
[88.36766052 59.33175278]
[97.47883606 71.24755859]
[106.59001923 83.16336823]
[120.59006500 88.54840851]
[135.33795166 85.80986023]
[150.08584595 83.07131195]
[164.83374023 80.33276367]
[179.58163452 77.59421539]
[194.32952881 74.85567474]
[209.04872131 71.96684265]
[223.73768616 68.92802429]
[238.42665100 65.88921356]
[253.11561584 62.85040283]
[267.80456543 59.81158829]
[275.63009644 54.98152542]
[282.82403564 56.86382675]
[297.57192993 54.12527847]
[312.31982422 51.38673401]
[327.06771851 48.64818573]
[337.29882812 36.29083633]
[353.33587646 36.72920227]
[362.87664795 49.62700653]
[358.60223389 65.09015656]
[343.79165649 71.25665283]
[329.80627441 63.39608002]
[315.05838013 66.13462830]
[300.31048584 68.87317657]
[285.56259155 71.61171722]
[270.84338379 74.50054932]
[256.15441895 77.53936768]
[241.46546936 80.57817841]
[226.77650452 83.61698914]
[212.08753967 86.65579987]
[206.13870239 91.11754608]
[197.06808472 89.60356140]
[182.32019043 92.34210968]
[167.57229614 95.08065796]
[152.82440186 97.81920624]
[138.07650757 100.55775452]
[123.32861328 103.29630280]
[119.80157471 109.91521454]
[134.57131958 112.53334808]
[136.64540100 127.38926697]
[123.15749359 133.95254517]
[112.74748993 123.15303802]
[109.22045135 129.77194214]
[115.17205811 143.54069519]
[121.12365723 157.30944824]
[127.07525635 171.07820129]
[133.02685547 184.84693909]
[139.11859131 198.55427551]
[145.34980774 212.19874573]
[159.01475525 221.26525879]
[157.72547913 237.61364746]
[142.80828857 244.42610168]
[129.60870361 234.69454956]
[131.70533752 218.42997742]
[125.47410583 204.78549194]
[119.80049133 199.97863770]
[119.25811005 190.79853821]
[113.30651093 177.02980042]
[107.35490417 163.26104736]
[101.40330505 149.49229431]
[95.45170593 135.72355652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[30 92]
[31 91]
[32 90]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[52 69]
[53 68]
[55 66]
[56 65]
[93 129]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[99 122]
[100 121]
[101 120]
[102 119]
[103 118]
[105 117]
[106 116]
[107 115]
[108 114]
[135 153]
[136 152]
[137 151]
[138 150]
[139 149]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
