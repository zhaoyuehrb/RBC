%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGUGGGAGUGGGCGCGGGCGCAGGCGAACGGCUGCCGGUCAGGUGUCCUUGUCCCCUUGAGUUGCGCGGGUCGUGUUCGAGGGCAUGGACGACAGGUACCCUGCGCUUCAGCGGGCCCAGCUGCGUCUGGAUUUCAUCCACGCCAACUCCACCACUCACAGUUUCCUUUUUGGAGCACUGGCUG\
) } def
/len { sequence length } bind def

/coor [
[384.01205444 596.90039062]
[377.47155762 583.40142822]
[370.93106079 569.90246582]
[356.06567383 568.96105957]
[343.58441162 560.65002441]
[336.89474487 547.11804199]
[337.88305664 531.95495605]
[346.38385010 519.23944092]
[339.84335327 505.74047852]
[333.30285645 492.24151611]
[326.76235962 478.74258423]
[320.22186279 465.24362183]
[307.70932007 457.16366577]
[308.65499878 441.37075806]
[302.11450195 427.87179565]
[295.57400513 414.37283325]
[289.03350830 400.87387085]
[276.52096558 392.79394531]
[277.46667480 377.00103760]
[270.92614746 363.50207520]
[264.38565063 350.00311279]
[243.76042175 344.97592163]
[233.40689087 326.11926270]
[240.41708374 305.48239136]
[232.77282715 292.57635498]
[225.12858582 279.67031860]
[217.48432922 266.76431274]
[209.84008789 253.85827637]
[202.19583130 240.95225525]
[197.85502625 238.91766357]
[194.75579834 234.12422180]
[194.52008057 227.48477173]
[187.31135559 214.33053589]
[180.10263062 201.17628479]
[172.89390564 188.02203369]
[165.68518066 174.86778259]
[158.47645569 161.71353149]
[154.20605469 159.53503418]
[151.26872253 154.64070129]
[151.25500488 147.99708557]
[144.48985291 134.60931396]
[137.72470093 121.22152710]
[130.95954895 107.83374023]
[113.85910797 125.78767395]
[91.20704651 125.12220001]
[77.97419739 109.42397308]
[80.60151672 91.20812225]
[69.99491882 80.60151672]
[59.38831711 69.99491882]
[48.78171539 59.38831711]
[38.17511368 48.78171539]
[22.94581985 44.49461746]
[19.41737747 30.02397919]
[8.81077480 19.41737747]
[2.50350499 17.33024979]
[-1.22918713 13.01175404]
[-1.96560764 8.27467918]
[-12.21186733 -2.68041897]
[-22.45812607 -13.63551712]
[-32.70438385 -24.59061432]
[-42.95064545 -35.54571152]
[-53.19690323 -46.50081253]
[-63.44316483 -57.45590973]
[-68.47636414 -58.98252487]
[-72.05209351 -61.99433136]
[-73.84781647 -65.68206024]
[-73.91131592 -69.22621155]
[-83.59573364 -80.68099213]
[-93.28015137 -92.13578033]
[-102.96456909 -103.59056091]
[-112.64898682 -115.04534149]
[-127.49247742 -123.23724365]
[-123.72979736 -139.76838684]
[-106.80309296 -140.72903442]
[-101.19420624 -124.72975922]
[-91.50978851 -113.27497864]
[-81.82537079 -101.82019806]
[-72.14095306 -90.36540985]
[-62.45653534 -78.91062927]
[-52.48806381 -67.70217133]
[-42.24180603 -56.74707031]
[-31.99554634 -45.79197311]
[-21.74928665 -34.83687592]
[-11.50302792 -23.88177681]
[-1.25676894 -12.92667866]
[8.98949051 -1.97158027]
[19.41737747 8.81077480]
[30.02397919 19.41737747]
[44.49461746 22.94581985]
[48.78171539 38.17511368]
[59.38831711 48.78171539]
[69.99491882 59.38831711]
[80.60151672 69.99491882]
[91.20812225 80.60151672]
[96.17518616 73.65969086]
[104.36566925 68.36454010]
[107.84297180 53.77316284]
[111.32027435 39.18178177]
[114.79757690 24.59040260]
[112.58777618 7.78108549]
[128.12844849 1.00436437]
[138.94241333 14.06171417]
[129.38896179 28.06770515]
[125.91165161 42.65908432]
[122.43434906 57.25046539]
[118.95704651 71.84184265]
[132.71739197 77.81285858]
[140.99876404 65.30611420]
[149.28013611 52.79936218]
[149.74371338 36.40676880]
[164.29853821 28.85105324]
[177.97187805 37.90488815]
[176.69775391 54.25446320]
[161.78689575 61.08073807]
[153.50550842 73.58748627]
[145.22413635 86.09423828]
[144.34733582 101.06858826]
[151.11248779 114.45637512]
[157.87763977 127.84415436]
[164.64279175 141.23193359]
[171.63070679 154.50480652]
[178.83943176 167.65905762]
[186.04815674 180.81330872]
[193.25688171 193.96755981]
[200.46560669 207.12181091]
[207.67433167 220.27604675]
[215.10185242 233.30801392]
[222.74610901 246.21403503]
[230.39036560 259.12005615]
[238.03460693 272.02609253]
[245.67886353 284.93209839]
[253.32310486 297.83813477]
[262.27001953 297.16442871]
[270.90588379 299.43243408]
[278.29486084 304.36700439]
[283.64578247 311.40570068]
[286.39688110 319.76269531]
[286.27468872 328.51654053]
[283.32083130 336.71160889]
[277.88461304 343.46261597]
[284.42510986 356.96157837]
[290.96560669 370.46054077]
[303.94598389 379.50601196]
[302.53247070 394.33337402]
[309.07296753 407.83233643]
[315.61346436 421.33129883]
[322.15396118 434.83026123]
[335.13433838 443.87573242]
[333.72082520 458.70312500]
[340.26132202 472.20205688]
[346.80181885 485.70101929]
[353.34231567 499.19998169]
[359.88281250 512.69897461]
[375.13031006 513.90795898]
[387.64282227 522.52966309]
[394.11679077 536.16613770]
[392.90402222 551.11218262]
[384.43002319 563.36199951]
[390.97052002 576.86096191]
[397.51101685 590.35992432]
[416.94192505 601.50189209]
[414.64736938 623.01660156]
[422.07489014 636.04858398]
[429.50241089 649.08050537]
[436.92993164 662.11248779]
[444.46609497 675.08190918]
[452.11035156 687.98797607]
[459.75457764 700.89398193]
[467.39883423 713.79998779]
[482.52133179 719.15625000]
[487.62594604 734.36553955]
[478.79687500 747.76062012]
[462.80700684 749.06585693]
[451.92242432 737.28002930]
[454.49282837 721.44427490]
[446.84857178 708.53820801]
[439.20431519 695.63220215]
[431.56005859 682.72619629]
[425.43399048 678.56506348]
[423.89797974 669.54003906]
[416.47045898 656.50805664]
[409.04293823 643.47607422]
[401.61541748 630.44415283]
[393.70486450 630.02661133]
[386.52426147 626.46447754]
[381.28427124 620.27496338]
[378.90103149 612.42492676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[8 153]
[9 152]
[10 151]
[11 150]
[12 149]
[14 147]
[15 146]
[16 145]
[17 144]
[19 142]
[20 141]
[21 140]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[40 120]
[41 119]
[42 118]
[43 117]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[53 88]
[54 87]
[57 86]
[58 85]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[67 79]
[68 78]
[69 77]
[70 76]
[71 75]
[96 106]
[97 105]
[98 104]
[99 103]
[107 116]
[108 115]
[109 114]
[162 183]
[163 182]
[164 181]
[165 180]
[166 178]
[167 177]
[168 176]
[169 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
