%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGGCAGCGCAACCGCUGGGGCCGGCCUCAGUGGGCUGAGUGGUCGGGGCAUCGGGGCCCAGAGAGCGGCUGGUUUCGAAGUAUAAAGCAUUCCGCACGACGGGGGAUGGAGAAGGAUGCUGAAGAUGGCGCCCCUUCUGAGGGAGCAGAGGCUCCUCCCUCUACGGAAGAGGCUGCCCCUCCCCGUUCAGAAGAGGAAGAGGCCC\
) } def
/len { sequence length } bind def

/coor [
[160.08615112 339.40957642]
[161.01718140 330.62524414]
[164.76870728 322.57992554]
[170.95965576 316.15759277]
[165.89970398 302.03680420]
[160.83975220 287.91598511]
[155.77981567 273.79519653]
[150.71986389 259.67440796]
[145.65991211 245.55360413]
[140.59996033 231.43281555]
[135.54000854 217.31201172]
[119.57526398 214.81642151]
[106.97479248 204.55131531]
[101.23736572 189.24488831]
[104.01752472 173.04135132]
[114.64982605 160.37905884]
[109.37920380 146.33552551]
[104.10858154 132.29200745]
[74.95611572 127.28136444]
[58.52066422 98.29496765]
[43.54751205 99.19203186]
[28.57436180 100.08909607]
[13.60120964 100.98616028]
[-1.37194276 101.88321686]
[-16.34509468 102.78028107]
[-31.31824684 103.67734528]
[-46.29139709 104.57440948]
[-61.26454926 105.47146606]
[-76.23770142 106.36853027]
[-91.21085358 107.26559448]
[-106.16891479 108.38654327]
[-121.10852814 109.73113251]
[-131.22024536 121.57979584]
[-146.39030457 122.73057556]
[-157.62387085 113.01757812]
[-172.56349182 114.36216736]
[-187.50309753 115.70675659]
[-202.44271851 117.05134583]
[-217.38232422 118.39593506]
[-232.32194519 119.74052429]
[-243.28485107 133.37213135]
[-260.37811279 134.82914734]
[-272.98342896 123.69662476]
[-287.90124512 125.26455688]
[-302.81909180 126.83248138]
[-311.41293335 139.89692688]
[-326.40859985 144.33131409]
[-340.72561646 138.04185486]
[-347.60391235 123.99824524]
[-343.79574585 108.83143616]
[-331.09924316 99.70274353]
[-315.50930786 100.92244720]
[-304.38702393 111.91464996]
[-289.46917725 110.34672546]
[-274.55136108 108.77880096]
[-267.92288208 97.72870636]
[-255.96159363 92.43518066]
[-242.94395447 95.03583527]
[-233.66653442 104.80091095]
[-218.72691345 103.45632172]
[-203.78730774 102.11173248]
[-188.84768677 100.76713562]
[-173.90808105 99.42254639]
[-158.96846008 98.07795715]
[-149.64973450 86.51521301]
[-134.51800537 84.93878937]
[-122.45311737 94.79151917]
[-107.51350403 93.44692993]
[-103.81899261 90.41932678]
[-98.18313599 89.68096161]
[-92.10791779 92.29244232]
[-77.13476562 91.39537811]
[-62.16161346 90.49831390]
[-47.18846130 89.60125732]
[-32.21530914 88.70419312]
[-17.24215698 87.80712891]
[-2.26900506 86.91006470]
[12.70414734 86.01300812]
[27.67729950 85.11594391]
[42.65045166 84.21887970]
[57.62360382 83.32181549]
[62.51575851 77.63703156]
[48.94550705 71.24576569]
[34.00167465 69.94889832]
[23.74838257 59.00038528]
[23.43329620 44.00369263]
[33.21767807 32.63417816]
[48.09385300 30.71078682]
[60.44815445 39.21791458]
[63.95764923 53.80133820]
[72.30007172 66.26745605]
[77.19222260 60.58266449]
[75.84763336 45.64305115]
[74.50304413 30.70343781]
[73.15845490 15.76382256]
[71.81386566 0.82420850]
[70.46927643 -14.11540604]
[56.74823761 -21.16782570]
[49.03797531 -34.53028488]
[49.79880142 -49.93887711]
[58.78794861 -62.47677231]
[73.13700104 -68.14317322]
[88.26724243 -65.12995911]
[99.35065460 -54.39862442]
[102.85057068 -39.37350845]
[97.65016937 -24.84906578]
[85.40888977 -15.45999527]
[86.75347900 -0.52038115]
[88.09806824 14.41923332]
[89.44265747 29.35884857]
[90.78724670 44.29846191]
[92.13183594 59.23807526]
[106.11750793 60.23799133]
[118.53433228 65.74771881]
[128.06106567 54.16146469]
[137.58779907 42.57521057]
[147.11454773 30.98895836]
[156.64128113 19.40270233]
[166.16801453 7.81644869]
[168.76182556 -10.41375923]
[185.41926575 -15.93508720]
[194.77162170 -27.66255951]
[204.12396240 -39.39002991]
[213.47631836 -51.11750412]
[211.45796204 -66.79238129]
[221.18058777 -79.25215912]
[236.87593079 -81.10467529]
[249.23222351 -71.25086212]
[250.91868591 -55.53681564]
[240.93478394 -43.28539658]
[225.20378113 -41.76515579]
[215.85144043 -30.03768349]
[206.49909973 -18.31021118]
[197.14674377 -6.58273983]
[198.18899536 5.46931553]
[190.49270630 15.31631184]
[177.75427246 17.34318542]
[168.22753906 28.92943954]
[158.70079041 40.51569366]
[149.17405701 52.10194778]
[139.64732361 63.68820190]
[130.12059021 75.27445984]
[137.22862244 88.48339081]
[152.14643860 86.91546631]
[167.06427002 85.34753418]
[181.98210144 83.77960968]
[196.89993286 82.21168518]
[211.81776428 80.64375305]
[226.73558044 79.07582855]
[239.65139771 69.93840027]
[253.11770630 76.30295563]
[268.03555298 74.73503113]
[283.15588379 67.06616974]
[294.71078491 79.47266388]
[285.98785400 94.01043701]
[269.60345459 89.65285492]
[254.68563843 91.22078705]
[242.83685303 100.24606323]
[228.30351257 93.99365997]
[213.38568115 95.56158447]
[198.46786499 97.12950897]
[183.55003357 98.69744110]
[168.63220215 100.26536560]
[153.71437073 101.83329010]
[138.79653931 103.40122223]
[134.12335205 113.81639862]
[126.92525482 121.86240387]
[118.15210724 127.02138519]
[123.42272949 141.06491089]
[128.69334412 155.10842896]
[142.59306335 156.68084717]
[154.40281677 164.05361938]
[161.84797668 175.73948669]
[163.52360535 189.42716980]
[159.15928650 202.43843079]
[149.66081238 212.25205994]
[154.72074890 226.37286377]
[159.78070068 240.49365234]
[164.84065247 254.61445618]
[169.90060425 268.73526001]
[174.96055603 282.85604858]
[180.02050781 296.97683716]
[185.08045959 311.09762573]
[205.44471741 318.91113281]
[213.27632141 338.96340942]
[203.85023499 358.00054932]
[209.95127869 371.70373535]
[224.43220520 377.44314575]
[230.42433167 391.42703247]
[224.86344910 405.19699097]
[230.96449280 418.90017700]
[237.06553650 432.60336304]
[252.14622498 436.73947144]
[260.99749756 449.63088989]
[259.44006348 465.19073486]
[248.20928955 476.07208252]
[232.60801697 477.13711548]
[220.00268555 467.88296509]
[216.34513855 452.67913818]
[223.36236572 438.70440674]
[217.26130676 425.00122070]
[211.16026306 411.29806519]
[197.20622253 406.21667480]
[190.82368469 392.40661621]
[196.24810791 377.80477905]
[190.14704895 364.10162354]
[181.53291321 363.90591431]
[173.40843201 360.90844727]
[166.66400146 355.40762329]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 183]
[5 182]
[6 181]
[7 180]
[8 179]
[9 178]
[10 177]
[11 176]
[16 170]
[17 169]
[18 168]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 68]
[32 67]
[35 64]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[43 55]
[44 54]
[45 53]
[92 112]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[114 142]
[115 141]
[116 140]
[117 139]
[118 138]
[119 137]
[121 134]
[122 133]
[123 132]
[124 131]
[143 165]
[144 164]
[145 163]
[146 162]
[147 161]
[148 160]
[149 159]
[151 157]
[152 156]
[186 206]
[187 205]
[190 202]
[191 201]
[192 200]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
