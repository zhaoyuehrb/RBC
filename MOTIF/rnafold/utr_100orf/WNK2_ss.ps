%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:31:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACGGCGAUGGCGGCCGCCGAGACGUCCCCGGCACGCUGAUGGAGCCCGGGCGCGGCGCGGGGCCCGCGGGCAUGGCGGAGCCUCGGGCGAAGGCGG\
) } def
/len { sequence length } bind def

/coor [
[90.38803864 153.08108521]
[89.93588257 138.08634949]
[94.04692841 123.66070557]
[83.52312469 134.34947205]
[79.63964844 142.81771851]
[72.50190735 145.20059204]
[61.65077591 155.55690002]
[50.79964447 165.91319275]
[39.94851303 176.26950073]
[41.12815857 191.86251831]
[31.96687126 204.53552246]
[16.79032898 208.30468750]
[2.76443315 201.39033508]
[-3.48821926 187.05720520]
[0.98468399 172.07298279]
[14.07117462 163.51274109]
[29.59221268 165.41836548]
[40.44334412 155.06207275]
[51.29447556 144.70576477]
[62.14560318 134.34947205]
[72.83436584 123.82566071]
[83.35816956 113.13690186]
[68.64373016 116.04985809]
[57.74707413 105.74147034]
[59.83976746 90.88816833]
[73.16041565 83.99177551]
[86.49726105 90.85695648]
[79.33646393 77.67655182]
[72.17566681 64.49615479]
[58.78893280 56.06371689]
[59.51182175 41.18666077]
[52.35102463 28.00626183]
[45.19022369 14.82586098]
[38.02942657 1.64545953]
[30.86862946 -11.53494167]
[26.09782028 -14.43092442]
[23.31476212 -18.51014137]
[22.63146591 -22.76311111]
[23.72046852 -26.29427528]
[17.81896400 -40.08457184]
[11.91746044 -53.87486649]
[-2.38033915 -61.15171432]
[-5.46432734 -76.89555359]
[5.03126717 -89.02906799]
[21.05512238 -88.24445343]
[30.31510735 -75.14360046]
[25.70775604 -59.77637100]
[31.60925865 -45.98607635]
[37.51076508 -32.19577789]
[44.04903030 -18.69573975]
[51.20982742 -5.51533842]
[58.37062454 7.66506243]
[65.53142548 20.84546280]
[72.69222260 34.02586365]
[85.56676483 41.51555252]
[85.35606384 57.33535385]
[92.51686859 70.51575470]
[99.67766571 83.69615936]
[112.62899017 91.26339722]
[127.62717438 91.03012085]
[141.30534363 83.07913971]
[154.15141296 90.61756897]
[169.14959717 90.38429260]
[184.14778137 90.15101624]
[199.14596558 89.91773987]
[214.14414978 89.68446350]
[229.14233398 89.45118713]
[244.13508606 88.98468781]
[259.11877441 88.28507996]
[274.10244751 87.58547974]
[289.08612061 86.88587189]
[298.42361450 74.34213257]
[313.65133667 70.78541565]
[327.57922363 77.89508820]
[333.63098145 92.31418610]
[328.94912720 107.23445129]
[315.74429321 115.61098480]
[300.25140381 113.48864746]
[289.78570557 101.86954498]
[274.80203247 102.56915283]
[259.81835938 103.26876068]
[244.83468628 103.96836853]
[238.18284607 107.48667908]
[229.37561035 104.44937134]
[214.37742615 104.68264771]
[199.37924194 104.91592407]
[184.38105774 105.14920044]
[169.38287354 105.38248444]
[154.38468933 105.61576080]
[141.77928162 113.55005646]
[127.86045074 106.02830505]
[112.86226654 106.26158905]
[126.13625336 113.24737549]
[139.96281433 119.06339264]
[149.58723450 130.56863403]
[152.86965942 145.20509338]
[149.08029175 159.71855164]
[139.06164551 170.88218689]
[125.04120636 176.21391296]
[110.13621521 174.52832031]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 22]
[4 21]
[6 20]
[7 19]
[8 18]
[9 17]
[27 58]
[28 57]
[29 56]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[39 49]
[40 48]
[41 47]
[59 92]
[60 91]
[62 89]
[63 88]
[64 87]
[65 86]
[66 85]
[67 84]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
