%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGUCGCGGCAAAGGCGGAAAAGGCUUGGGGAAGGGUGGUGCUAAGCGCCAUCGUAAGGUGCUCCGGGAUAACAUCCAGGGCAUUACAAAACCGG\
) } def
/len { sequence length } bind def

/coor [
[104.76643372 232.05905151]
[89.58316040 237.24053955]
[76.14363861 228.47932434]
[74.75752258 212.49626160]
[86.48811340 201.55218506]
[88.34959412 186.66813660]
[90.21107483 171.78410339]
[92.07256317 156.90005493]
[93.93404388 142.01600647]
[81.22431946 134.04963684]
[68.64002991 142.21269226]
[56.05573654 150.37576294]
[54.32164764 165.91690063]
[42.96799850 176.66996765]
[27.35563278 177.55770874]
[14.85623455 168.16094971]
[11.37163639 152.91656494]
[18.54715919 139.02246094]
[32.99473953 133.03903198]
[47.89267349 137.79147339]
[60.47696686 129.62840271]
[73.06125641 121.46533966]
[73.06125641 113.96533966]
[58.10391998 115.09587097]
[43.56578827 118.78947449]
[35.01581955 106.46478271]
[43.56683731 94.14081573]
[58.10391998 97.83480835]
[73.06125641 98.96533966]
[73.06125641 91.46533966]
[60.47696686 83.30227661]
[47.89267349 75.13921356]
[31.49643707 74.83026123]
[23.80379486 60.34732819]
[32.72827911 46.58921814]
[49.08914566 47.70909500]
[56.05573654 62.55492401]
[68.64002991 70.71798706]
[81.22431946 78.88105011]
[94.05639648 71.11330414]
[92.65870667 56.17856598]
[91.26101685 41.24382401]
[89.86332703 26.30908394]
[88.46563721 11.37434387]
[87.06794739 -3.56039691]
[85.67025757 -18.49513626]
[84.27257538 -33.42987823]
[76.77665710 -48.63670731]
[89.31412506 -60.04934311]
[103.75146484 -51.16118240]
[99.20731354 -34.82756805]
[100.60500336 -19.89282608]
[102.00269318 -4.95808601]
[103.40038300 9.97665405]
[104.79806519 24.91139412]
[106.19575500 39.84613419]
[107.59344482 54.78087616]
[108.99113464 69.71561432]
[120.15909576 79.72943878]
[135.15728760 79.49616241]
[150.15547180 79.26288605]
[156.27142334 76.06690979]
[162.16314697 76.51103973]
[166.08653259 79.51067352]
[181.07022095 80.21027374]
[196.05389404 80.90988159]
[211.03756714 81.60948944]
[226.02124023 82.30908966]
[241.00491333 83.00869751]
[251.15390015 74.86283875]
[263.72494507 75.85952759]
[271.92126465 84.90597534]
[286.87594604 86.07123566]
[301.83062744 87.23648834]
[316.78527832 88.40174866]
[333.04626465 83.60412598]
[342.15786743 97.90149689]
[330.94158936 110.61492920]
[315.62002563 103.35642242]
[300.66534424 102.19116211]
[285.71069336 101.02590179]
[270.75601196 99.86064911]
[255.46000671 108.30655670]
[240.30531311 97.99237823]
[225.32164001 97.29277039]
[210.33796692 96.59316254]
[195.35427856 95.89355469]
[180.37060547 95.19395447]
[165.38693237 94.49434662]
[150.38874817 94.26107025]
[135.39056396 94.49434662]
[120.39237213 94.72762299]
[126.66915894 104.12241364]
[127.88690948 117.47322845]
[122.07640076 131.94595337]
[108.81809235 143.87748718]
[106.95660400 158.76153564]
[105.09512329 173.64558411]
[103.23364258 188.52963257]
[101.37216187 203.41368103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[9 96]
[10 22]
[11 21]
[12 20]
[30 39]
[31 38]
[32 37]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[59 92]
[60 91]
[61 90]
[64 89]
[65 88]
[66 87]
[67 86]
[68 85]
[69 84]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
