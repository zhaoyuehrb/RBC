%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCUCGCGAUACCUAGGCGCCUGAGAGGCUCUCUACCGGUGAGGGUUUGCGGGGAAGAUGGAGUAUCCCGCGCCGGCCACGGUGCAGGCCGCGGACGGCGGAGCGGCCGGGCCUUACAGCAGCUCGGAGUUGCUGGAGGGCCAGGAGCCGGACGGGG\
) } def
/len { sequence length } bind def

/coor [
[6.36053705 157.14056396]
[-12.22211266 163.31578064]
[-31.73090363 162.02424622]
[-49.28275681 153.47976685]
[-62.29245758 138.96633911]
[-76.15065002 144.70658875]
[-90.00884247 150.44683838]
[-103.86703491 156.18708801]
[-117.72522736 161.92733765]
[-131.58341980 167.66758728]
[-145.44161987 173.40785217]
[-151.55812073 187.73356628]
[-165.69406128 193.35757446]
[-179.31375122 187.43814087]
[-193.17195129 193.17839050]
[-207.03013611 198.91865540]
[-210.26531982 203.14678955]
[-214.39622498 205.44621277]
[-218.52391052 205.80160522]
[-221.87716675 204.56221008]
[-236.04925537 209.47666931]
[-250.22134399 214.39111328]
[-264.39343262 219.30557251]
[-271.71459961 235.16596985]
[-287.91415405 240.73939514]
[-302.84445190 233.04925537]
[-316.91732788 238.24099731]
[-330.99017334 243.43275452]
[-345.06304932 248.62451172]
[-357.83044434 259.77932739]
[-372.08370972 250.59884644]
[-367.20770264 234.36122131]
[-350.25482178 234.55165100]
[-336.18194580 229.35989380]
[-322.10906982 224.16813660]
[-308.03619385 218.97637939]
[-304.31643677 206.60832214]
[-293.98828125 198.53321838]
[-280.69882202 197.88790894]
[-269.30789185 205.13348389]
[-255.13580322 200.21902466]
[-240.96369934 195.30456543]
[-226.79161072 190.39012146]
[-212.77038574 185.06045532]
[-198.91220093 179.32020569]
[-185.05400085 173.57995605]
[-179.60910034 159.76370239]
[-165.63670349 153.74485779]
[-151.18186951 159.54965210]
[-137.32366943 153.80940247]
[-123.46548462 148.06915283]
[-109.60729218 142.32890320]
[-95.74909210 136.58865356]
[-81.89089966 130.84838867]
[-68.03270721 125.10814667]
[-69.54899597 114.43824005]
[-68.77375793 103.68064880]
[-65.73854065 93.32230377]
[-60.57724380 83.83282471]
[-53.52025604 75.64323425]
[-44.88416290 69.12635040]
[-35.05752563 64.57983398]
[-24.48342514 62.21260452]
[-13.63947487 62.13521957]
[-3.01624179 64.35472107]
[6.90494061 68.77418518]
[15.67378139 75.19689941]
[22.89146996 83.33515930]
[28.22881508 92.82312775]
[42.74280167 89.03575897]
[57.25678635 85.24838257]
[71.77077484 81.46101379]
[82.58358002 71.06469727]
[86.93785095 56.71059418]
[91.29211426 42.35649109]
[95.64638519 28.00238419]
[100.00065613 13.64828014]
[96.60250092 -1.80368137]
[107.70117188 -11.73690128]
[112.05544281 -26.09100723]
[108.65727997 -41.54296875]
[119.75595093 -51.47618866]
[124.11022186 -65.83029175]
[128.46449280 -80.18439484]
[132.81875610 -94.53850555]
[128.56997681 -110.37769318]
[140.35253906 -121.78398132]
[156.04553223 -117.02355957]
[159.50537109 -100.99353790]
[147.17286682 -90.18423462]
[142.81858826 -75.83013153]
[138.46432495 -61.47602463]
[134.11006165 -47.12191772]
[137.81965637 -32.69665909]
[126.40954590 -21.73673630]
[122.05527496 -7.38263130]
[125.76487732 7.04262829]
[114.35476685 18.00255013]
[110.00049591 32.35665512]
[105.64622498 46.71076202]
[101.29195404 61.06486511]
[96.93768311 75.41896820]
[106.75787354 77.45220947]
[114.47788239 83.03041077]
[118.98223114 90.84619141]
[119.83017731 99.32163239]
[133.90304565 104.51338959]
[147.97592163 109.70514679]
[162.04878235 114.89690399]
[178.88690186 106.30284119]
[196.37893677 112.58671570]
[203.64567566 129.34780884]
[217.91151428 133.98306274]
[232.17736816 138.61831665]
[246.44320679 143.25357056]
[260.70904541 147.88882446]
[274.66387939 140.96781921]
[289.06546021 145.87184143]
[295.57757568 159.21829224]
[309.84344482 163.85354614]
[324.10928345 168.48880005]
[338.37512207 173.12406921]
[352.64099121 177.75932312]
[366.90682983 182.39457703]
[381.17266846 187.02983093]
[395.43850708 191.66508484]
[412.37084961 190.80923462]
[417.88058472 206.84292603]
[403.99874878 216.57589722]
[390.80325317 205.93092346]
[376.53741455 201.29566956]
[362.27157593 196.66041565]
[348.00573730 192.02516174]
[333.73986816 187.38990784]
[319.47402954 182.75465393]
[305.20819092 178.11940002]
[290.94232178 173.48414612]
[277.82907104 180.45391846]
[263.29544067 175.95632935]
[256.07379150 162.15467834]
[241.80795288 157.51942444]
[227.54211426 152.88417053]
[213.27626038 148.24890137]
[199.01042175 143.61364746]
[190.15730286 150.90551758]
[178.76155090 153.01676941]
[167.65577698 149.30421448]
[159.65808105 140.58714294]
[156.85702515 128.96977234]
[142.78416443 123.77801514]
[128.71128845 118.58625793]
[114.63842010 113.39450073]
[99.46634674 121.47824097]
[82.18286896 114.74626160]
[75.55814362 95.97499847]
[61.04416275 99.76236725]
[46.53017426 103.54974365]
[32.01618958 107.33712006]
[30.26453972 126.93182373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[11 49]
[14 46]
[15 45]
[16 44]
[20 43]
[21 42]
[22 41]
[23 40]
[26 36]
[27 35]
[28 34]
[29 33]
[69 158]
[70 157]
[71 156]
[72 155]
[73 102]
[74 101]
[75 100]
[76 99]
[77 98]
[79 96]
[80 95]
[82 93]
[83 92]
[84 91]
[85 90]
[106 152]
[107 151]
[108 150]
[109 149]
[112 144]
[113 143]
[114 142]
[115 141]
[116 140]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
