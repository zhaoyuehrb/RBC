%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUGCUGAACGGCGGAGUGGCGUGGACCUCAUGUAGCAAUGACAAUGGAAGGGGCCAGCGGGUCGAGUUUUGGAAUAGACACGAUUUUGUCCAGUGCCAGUUCAGGCAGCCCAGGCAUGAUGAAUGGAGAUUUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[236.53907776 438.22979736]
[236.53907776 423.22979736]
[236.53907776 408.22979736]
[236.53907776 393.22979736]
[232.63027954 378.74804688]
[225.08276367 365.78521729]
[217.53524780 352.82238770]
[209.98773193 339.85955811]
[202.44021606 326.89672852]
[194.75077820 314.01757812]
[186.92031860 301.22366333]
[179.08985901 288.42974854]
[171.25941467 275.63586426]
[163.42895508 262.84194946]
[159.44371033 277.30285645]
[147.20129395 285.97021484]
[132.23779297 284.92462158]
[121.31974030 274.63888550]
[119.38435364 259.76428223]
[127.30681610 247.02714539]
[141.50454712 242.18727112]
[155.55595398 247.43217468]
[149.77766418 233.58979797]
[143.99937439 219.74742126]
[138.22109985 205.90504456]
[132.44281006 192.06266785]
[126.51281738 178.28459167]
[120.43184662 164.57249451]
[114.35087585 150.86038208]
[108.26989746 137.14828491]
[102.18892670 123.43618011]
[84.02410889 125.95347595]
[65.17311859 113.67277527]
[50.37627411 111.21240997]
[35.57942963 108.75205231]
[20.78258324 106.29168701]
[8.07296658 115.68536377]
[-7.54380941 113.25804901]
[-16.80258751 100.44982910]
[-14.21030045 84.85958862]
[-1.30490470 75.73674011]
[14.25705719 78.49371338]
[23.24294853 91.49484253]
[38.03979492 93.95520782]
[52.83663940 96.41556549]
[67.63348389 98.87593079]
[71.33581543 92.35345459]
[63.74062347 79.41850281]
[78.74048615 79.30850220]
[82.44282532 72.78602600]
[72.74502563 61.34256363]
[63.04722977 49.89910507]
[47.27790070 48.84849930]
[36.93320847 36.90015411]
[38.15048218 21.14281082]
[50.20753098 10.92502594]
[65.95111847 12.30882645]
[76.04086304 24.47323036]
[74.49068451 40.20130920]
[84.18848419 51.64476776]
[93.88628387 63.08822632]
[95.76094055 67.48600769]
[97.32426453 71.96372223]
[98.57316589 76.50510406]
[102.48197174 62.02334976]
[106.39077759 47.54159546]
[110.29958344 33.05983734]
[114.20838928 18.57808304]
[118.11719513 4.09632683]
[114.24335480 -11.24329472]
[125.02989960 -21.51460457]
[128.93870544 -35.99636078]
[132.84750366 -50.47811508]
[136.75631714 -64.95986938]
[128.66294861 -78.53459167]
[132.61979675 -93.83553314]
[146.27931213 -101.78492737]
[161.53756714 -97.66653442]
[169.34210205 -83.92372894]
[165.06262207 -68.70986176]
[151.23806763 -61.05106735]
[147.32926941 -46.56930923]
[143.42045593 -32.08755493]
[139.51165771 -17.60579872]
[143.66506958 -3.30200982]
[132.59895325 8.00513172]
[128.69013977 22.48688698]
[124.78134155 36.96864319]
[120.87253571 51.45039749]
[116.96372986 65.93215179]
[113.05492401 80.41390991]
[123.46862793 98.19187927]
[115.90103149 117.35520935]
[121.98200226 131.06730652]
[128.06297302 144.77941895]
[134.14395142 158.49151611]
[140.22492981 172.20361328]
[146.61373901 178.84252930]
[146.28518677 186.28437805]
[152.06347656 200.12675476]
[157.84175110 213.96913147]
[163.62004089 227.81150818]
[169.39833069 241.65388489]
[176.22286987 255.01148987]
[184.05331421 267.80538940]
[191.88377380 280.59930420]
[199.71421814 293.39321899]
[207.54467773 306.18710327]
[214.75064087 311.92874146]
[215.40304565 319.34921265]
[222.95056152 332.31204224]
[230.49807739 345.27487183]
[238.04559326 358.23770142]
[245.59310913 371.20053101]
[288.26101685 368.91906738]
[299.81030273 378.49057007]
[311.35958862 388.06207275]
[326.88339233 386.77783203]
[338.45968628 396.64923096]
[339.58831787 411.45672607]
[351.13763428 421.02825928]
[367.19119263 426.47982788]
[366.39672852 443.41513062]
[349.90332031 447.33990479]
[341.56610107 432.57754517]
[330.01681519 423.00601196]
[315.25720215 424.64608765]
[303.40823364 415.10372925]
[301.78808594 399.61138916]
[290.23880005 390.03985596]
[278.68951416 380.46835327]
[271.90188599 383.65872192]
[278.28262329 397.23391724]
[288.54589844 408.17309570]
[281.31347656 421.31433105]
[266.58050537 418.49658203]
[264.70739746 403.61465454]
[258.32669067 390.03942871]
[251.53907776 393.22979736]
[251.53907776 408.22979736]
[251.53907776 423.22979736]
[251.53907776 438.22979736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 114]
[6 113]
[7 112]
[8 111]
[9 110]
[10 108]
[11 107]
[12 106]
[13 105]
[14 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 97]
[28 96]
[29 95]
[30 94]
[31 93]
[33 46]
[34 45]
[35 44]
[36 43]
[50 61]
[51 60]
[52 59]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[71 84]
[72 83]
[73 82]
[74 81]
[115 131]
[116 130]
[117 129]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
