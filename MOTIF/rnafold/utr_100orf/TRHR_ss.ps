%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGAUGGAACUGCUGCAAUAAAGGUGGGCGCUGGAAAGAAGAUGUUUUGAGAAGUCAGUGUUUCCGAGAAACUUUAAGCUUCUAAAGAUGGAAAACGAGACAGUCAGUGAACUGAACCAAACACAGCUUCAGCCACGAGCAGUGGUGGCCUUAGAAUACCAGGUGGUCACCAUCUUACUUGUACUCA\
) } def
/len { sequence length } bind def

/coor [
[57.65314865 240.52137756]
[66.71350098 228.31570435]
[79.75765228 220.51066589]
[77.53369141 205.67645264]
[75.30973816 190.84223938]
[73.08578491 176.00801086]
[70.86183167 161.17379761]
[68.63787842 146.33958435]
[66.41391754 131.50535583]
[72.71004486 105.54829407]
[90.94604492 96.67150879]
[83.58969116 83.59924316]
[76.23333740 70.52697754]
[68.87698364 57.45471573]
[61.52063370 44.38245392]
[54.16428375 31.31019020]
[46.80792999 18.23792648]
[39.45157623 5.16566229]
[26.56297684 6.25038815]
[14.26798153 2.38796997]
[4.38704300 -5.81258774]
[-1.63090563 -17.10274506]
[-2.92087293 -29.78442383]
[0.67402464 -41.96538162]
[8.58444214 -51.84155273]
[1.66432476 -65.14989471]
[-5.25579262 -78.45823669]
[-18.48708916 -87.13253021]
[-17.49399376 -101.99398804]
[-24.41411209 -115.30233002]
[-37.64540863 -123.97662354]
[-36.65231323 -138.83808899]
[-43.57242966 -152.14642334]
[-50.49254990 -165.45477295]
[-57.41266632 -178.76310730]
[-71.23802948 -175.93890381]
[-85.30560303 -176.84625244]
[-98.62698364 -181.41398621]
[-110.26814270 -189.31402588]
[-119.41491699 -199.98490906]
[-125.42995453 -212.67172241]
[-127.89711761 -226.47947693]
[-126.65025330 -240.43624878]
[-121.78437042 -253.56163025]
[-113.64846039 -264.93551636]
[-123.05610657 -276.61868286]
[-132.46376038 -288.30181885]
[-141.87139893 -299.98498535]
[-151.27903748 -311.66815186]
[-160.68669128 -323.35131836]
[-170.09432983 -335.03445435]
[-180.61288452 -345.72839355]
[-192.13890076 -355.32791138]
[-203.66491699 -364.92745972]
[-215.19093323 -374.52697754]
[-226.71694946 -384.12649536]
[-238.24296570 -393.72604370]
[-253.69081116 -387.85452271]
[-269.89978027 -390.55389404]
[-282.46667480 -400.99496460]
[-288.02603149 -416.25860596]
[-285.15112305 -432.15139771]
[-296.83428955 -441.55905151]
[-308.51745605 -450.96670532]
[-320.20059204 -460.37432861]
[-331.88375854 -469.78198242]
[-348.01263428 -475.00656128]
[-347.45715332 -491.95141602]
[-331.02075195 -496.10842896]
[-322.47613525 -481.46514893]
[-310.79296875 -472.05749512]
[-299.10980225 -462.64984131]
[-287.42663574 -453.24221802]
[-275.74346924 -443.83456421]
[-263.35018921 -449.59527588]
[-249.61805725 -449.44967651]
[-237.23083496 -443.36917114]
[-228.63409424 -432.49060059]
[-225.55235291 -418.90420532]
[-228.64344788 -405.25204468]
[-217.11743164 -395.65252686]
[-205.59141541 -386.05300903]
[-194.06539917 -376.45346069]
[-182.53938293 -366.85394287]
[-171.01335144 -357.25442505]
[-175.30191040 -371.62829590]
[-173.02409363 -386.45431519]
[-164.61845398 -398.87789917]
[-151.70343018 -406.50695801]
[-136.76573181 -407.87255859]
[-122.68145752 -402.71179199]
[-112.16244507 -392.01834106]
[-107.23402405 -377.85110474]
[-108.84513855 -362.93786621]
[-116.68557739 -350.15008545]
[-129.24571228 -341.94992065]
[-144.10722351 -339.91622925]
[-158.41117859 -344.44210815]
[-149.00352478 -332.75894165]
[-139.59588623 -321.07580566]
[-130.18823242 -309.39263916]
[-120.78059387 -297.70947266]
[-111.37294769 -286.02630615]
[-101.96530151 -274.34317017]
[-78.56375122 -281.59890747]
[-54.40965652 -277.49301147]
[-46.62511444 -290.31491089]
[-38.84057236 -303.13681030]
[-31.05602646 -315.95870972]
[-31.23566628 -332.35687256]
[-16.98833275 -340.47753906]
[-2.97046137 -331.96688843]
[-3.60243630 -315.57992554]
[-18.23413658 -308.17416382]
[-26.01868057 -295.35226440]
[-33.80322266 -282.53036499]
[-41.58776855 -269.70846558]
[-34.00181198 -262.13281250]
[-28.09775543 -253.16970825]
[-24.12354851 -243.18682861]
[-22.24787331 -232.59475708]
[-22.55298996 -221.83023071]
[-25.03113937 -211.33807373]
[-29.58466530 -201.55287170]
[-36.02985001 -192.88087463]
[-44.10432434 -185.68322754]
[-37.18420792 -172.37489319]
[-30.26408958 -159.06654358]
[-23.34397125 -145.75820923]
[-10.60764790 -138.03581238]
[-11.10577011 -122.22245026]
[-4.18565226 -108.91410828]
[8.55067158 -101.19171906]
[8.05254936 -85.37835693]
[14.97266674 -72.07001495]
[21.89278412 -58.76166916]
[39.09493256 -58.63460922]
[53.94515610 -49.77635574]
[62.31576157 -34.54433441]
[61.82720947 -17.08174133]
[52.52384186 -2.19069028]
[59.88019180 10.88157368]
[67.23654938 23.95383644]
[74.59289551 37.02610016]
[81.94924927 50.09836578]
[89.30560303 63.17062759]
[96.66195679 76.24288940]
[104.01831055 89.31515503]
[114.35861206 100.18153381]
[127.05004120 108.17700958]
[139.74147034 116.17248535]
[152.43289185 124.16796112]
[164.82031250 115.35772705]
[179.63745117 111.96346283]
[194.62478638 114.50276947]
[207.49687195 122.58842468]
[216.29080200 134.98742676]
[219.66557312 149.80900574]
[217.10655212 164.79299927]
[209.00398254 177.65443420]
[196.59341431 186.43205261]
[181.76741028 189.78732300]
[166.78680420 187.20858765]
[153.93603516 179.08909607]
[145.17474365 166.66700745]
[141.83898926 151.83659363]
[144.43742371 136.85939026]
[131.74598694 128.86390686]
[119.05456543 120.86843872]
[106.36313629 112.87296295]
[100.08438873 116.97507477]
[81.24813843 129.28140259]
[83.47209167 144.11563110]
[85.69604492 158.94984436]
[87.92000580 173.78405762]
[90.14395905 188.61828613]
[92.36791229 203.45249939]
[94.59186554 218.28671265]
[109.35137177 221.92341614]
[121.59270477 230.93553162]
[129.44915771 243.94877625]
[131.72267151 258.97872925]
[128.06655884 273.73342896]
[119.03836060 285.96289062]
[106.01478577 293.80221558]
[90.98185730 296.05596924]
[76.23197174 292.38046265]
[64.01438904 283.33618164]
[56.19220352 270.30230713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 178]
[4 177]
[5 176]
[6 175]
[7 174]
[8 173]
[9 172]
[11 148]
[12 147]
[13 146]
[14 145]
[15 144]
[16 143]
[17 142]
[18 141]
[25 136]
[26 135]
[27 134]
[29 132]
[30 131]
[32 129]
[33 128]
[34 127]
[35 126]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 99]
[51 98]
[52 85]
[53 84]
[54 83]
[55 82]
[56 81]
[57 80]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
[106 117]
[107 116]
[108 115]
[109 114]
[149 170]
[150 169]
[151 168]
[152 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
