%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUCUUGGCGCAGAAACCUGAAAGUCAGGAUCAAAGAGAAUGGCAACGGUGAACACAGAUGCCACAGAUAAAGACAUAUCCAAGUUCAAGGUCACCUUCACUUUGGUGGUCUCCGGAAUAGAGUGCAUCACUGGCAUCC\
) } def
/len { sequence length } bind def

/coor [
[-39.88610458 193.56513977]
[-59.82910919 181.35192871]
[-72.87406921 188.75659180]
[-85.91902161 196.16127014]
[-98.96397400 203.56593323]
[-112.00893402 210.97061157]
[-125.05388641 218.37527466]
[-138.09884644 225.77993774]
[-151.14379883 233.18461609]
[-150.42407227 244.75717163]
[-154.09426880 255.70150757]
[-161.57839966 264.42205811]
[-171.74749756 269.66296387]
[-183.08978271 270.68872070]
[-193.93544006 267.38732910]
[-202.70237732 260.28088379]
[-216.20668030 266.81033325]
[-221.20594788 278.75503540]
[-232.65065002 283.89715576]
[-244.14050293 279.96221924]
[-257.78497314 286.19345093]
[-271.42947388 292.42468262]
[-285.07394409 298.65591431]
[-298.71841431 304.88711548]
[-310.61447144 316.96688843]
[-325.51528931 308.87976074]
[-321.86917114 292.32250977]
[-304.94964600 291.24264526]
[-291.30517578 285.01141357]
[-277.66070557 278.78018188]
[-264.01620483 272.54898071]
[-250.37173462 266.31774902]
[-241.02583313 251.50346375]
[-222.73612976 253.30601501]
[-209.23182678 246.77656555]
[-207.06448364 228.29212952]
[-194.15808105 214.67776489]
[-175.52267456 211.47698975]
[-158.54846191 220.13966370]
[-145.50350952 212.73498535]
[-132.45855713 205.33032227]
[-119.41360474 197.92564392]
[-106.36864471 190.52098083]
[-93.32369232 183.11630249]
[-80.27873993 175.71163940]
[-67.23377991 168.30696106]
[-68.90605927 160.95845032]
[-69.09111023 153.41458130]
[-67.77775574 145.97370911]
[-65.01415253 138.93087769]
[-60.90604782 132.56611633]
[-55.61271667 127.13332367]
[-49.34080124 122.85013580]
[-42.33625793 119.88917542]
[-34.87469864 118.37115479]
[-27.25053787 118.35990143]
[-19.76539803 119.85971832]
[-12.71616459 122.81506348]
[-6.38320732 127.11257935]
[-1.01923692 132.58543396]
[3.16078162 139.01983643]
[17.59872818 134.95219421]
[32.03667450 130.88455200]
[46.47462082 126.81690216]
[60.91256714 122.74925995]
[75.35050964 118.68161774]
[70.43534851 103.30519104]
[73.98301697 88.19799805]
[84.36093903 77.51547241]
[98.15298462 73.85671997]
[101.42191315 59.21724701]
[104.69084930 44.57777786]
[107.95977783 29.93830681]
[99.27796173 16.73218536]
[102.55890656 1.27220631]
[115.85607910 -7.26949978]
[131.28050232 -3.82528949]
[139.68115234 9.56144810]
[136.07405090 24.94859886]
[122.59925079 33.20724106]
[119.33031464 47.84671021]
[116.06138611 62.48617935]
[112.79244995 77.12564850]
[116.32376862 79.49591827]
[119.42521667 82.40615082]
[122.01512146 85.77969360]
[124.02527618 89.52771759]
[138.91590881 87.71966553]
[153.80654907 85.91162109]
[168.69717407 84.10356903]
[184.16088867 71.25129700]
[201.64457703 79.40357971]
[216.44142151 76.94321442]
[231.23826599 74.48284912]
[246.03511047 72.02248383]
[260.83193970 69.56211853]
[275.62878418 67.10175323]
[290.42562866 64.64139557]
[305.22247314 62.18102646]
[312.03985596 48.24176407]
[325.76425171 41.00157547]
[341.11837769 43.24446106]
[352.19824219 54.10798264]
[354.74343872 69.41490173]
[347.77523804 83.27938843]
[333.97311401 90.37026978]
[318.64422607 87.96095276]
[307.68286133 76.97787476]
[292.88601685 79.43824005]
[278.08917236 81.89859772]
[263.29232788 84.35896301]
[248.49546814 86.81932831]
[233.69862366 89.27969360]
[218.90177917 91.74005890]
[204.10493469 94.20042419]
[198.87515259 103.08866882]
[189.39994812 107.68971252]
[178.74374390 106.24425507]
[170.50523376 98.99420166]
[155.61459351 100.80225372]
[140.72396851 102.61029816]
[125.83332825 104.41835022]
[123.37813568 115.00997925]
[116.54273224 124.25037384]
[106.06220245 130.32902527]
[114.17181396 142.94783020]
[122.28142548 155.56663513]
[130.39103699 168.18544006]
[144.04081726 178.24127197]
[138.15661621 194.14134216]
[121.24900818 192.88867188]
[117.77223206 176.29504395]
[109.66262054 163.67623901]
[101.55300903 151.05744934]
[93.44339752 138.43864441]
[79.41815186 133.11956787]
[64.98020935 137.18721008]
[50.54226303 141.25485229]
[36.10431671 145.32249451]
[21.66637039 149.39013672]
[7.22842360 153.45777893]
[1.55608046 176.49519348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[16 35]
[17 34]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[61 141]
[62 140]
[63 139]
[64 138]
[65 137]
[66 136]
[70 83]
[71 82]
[72 81]
[73 80]
[87 122]
[88 121]
[89 120]
[90 119]
[92 115]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
