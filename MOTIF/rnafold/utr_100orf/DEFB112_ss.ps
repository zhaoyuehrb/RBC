%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAAUUAUUGACAACCAUAUGUAGACUGAAACUUGAAAAAAUGUACUCAAAGACAAAUACAUCUUCCACAAUAUUUGAAAAGGCCCGACAUGGGACAG\
) } def
/len { sequence length } bind def

/coor [
[22.54716301 240.85316467]
[9.33047485 247.94676208]
[-4.82353973 252.91304016]
[-19.57492828 255.63270569]
[-34.56938553 256.04043579]
[-49.44676971 254.12643433]
[-63.84975815 249.93669128]
[-77.43241119 243.57182312]
[-89.86849213 235.18469238]
[-100.85931396 224.97676086]
[-110.14089966 213.19320679]
[-117.49031067 200.11705017]
[-122.73104095 186.06233215]
[-125.73720551 171.36665344]
[-126.43659973 156.38296509]
[-124.81243896 141.47116089]
[-120.90371704 126.98937988]
[-114.80432892 113.28546143]
[-106.66076660 100.68854523]
[-96.66861725 89.50118256]
[-85.06787872 79.99208832]
[-72.13718414 72.38964081]
[-58.18710709 66.87644958]
[-43.55270386 63.58491898]
[-28.58546066 62.59411621]
[-13.64487267 63.92783356]
[0.91021699 67.55403900]
[14.73021889 73.38564301]
[27.48320007 81.28256989]
[38.86285782 91.05515289]
[48.59587097 102.46867371]
[56.44846725 115.24900055]
[62.23204422 129.08917236]
[65.80725861 143.65412903]
[73.37449646 130.70280457]
[80.94174194 117.75147247]
[74.65425110 105.99373627]
[75.00936127 92.66516876]
[81.91400146 81.25890350]
[93.55861664 74.76429749]
[106.89138794 74.88346100]
[114.85774994 62.17373657]
[122.82411957 49.46401596]
[130.79048157 36.75429535]
[138.75685120 24.04457474]
[146.72322083 11.33485508]
[138.67854309 -1.58971739]
[137.04983521 -16.66400909]
[142.10690308 -30.89237404]
[152.79620361 -41.47063446]
[166.95993042 -46.33872604]
[181.77136230 -44.58173752]
[189.73773193 -57.29145813]
[197.70410156 -70.00118256]
[205.67047119 -82.71089935]
[199.75285339 -97.05529022]
[203.42953491 -112.13048553]
[215.28675842 -122.13977051]
[230.76518250 -123.23437500]
[243.91302490 -114.99339294]
[249.67468262 -100.58565521]
[245.83467102 -85.55123138]
[233.86956787 -75.67115784]
[218.38018799 -74.74452972]
[210.41381836 -62.03481293]
[202.44744873 -49.32509232]
[194.48107910 -36.61537170]
[202.51844788 -24.05088806]
[204.31089783 -9.18157291]
[199.44973755 5.04973602]
[188.84846497 15.80302238]
[174.57164001 20.90783119]
[159.43293762 19.30122185]
[151.46656799 32.01094055]
[143.50021362 44.72066116]
[135.53384399 57.43038177]
[127.56747437 70.14010620]
[119.60110474 82.84982300]
[125.94577026 97.73084259]
[122.28059387 113.48728943]
[110.01960754 124.04037476]
[93.89306641 125.31871796]
[86.32582855 138.27003479]
[78.75858307 151.22135925]
[79.29219055 154.33992004]
[79.04653168 157.38851929]
[87.78765106 169.57838440]
[96.52876282 181.76826477]
[112.06091309 185.78471375]
[118.47303772 200.49064636]
[110.84630585 214.60490417]
[95.03128815 217.30026245]
[83.15991974 206.50904846]
[84.33889771 190.50936890]
[75.59777832 178.31950378]
[66.85666656 166.12963867]
[64.65356445 180.96696472]
[60.18437195 195.28570557]
[53.55642700 208.74194336]
[44.92892456 221.01248169]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 84]
[35 83]
[36 82]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[52 67]
[53 66]
[54 65]
[55 64]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
