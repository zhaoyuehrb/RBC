%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:29:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUUCCUUGGUGCCAACCAUGCCUGCAUAUCAGGGCAGCAUUCUAUGAUCCCAUGGCUCUCACAUCGACAGACCACAACACUAAGCCAACAAUGAUACGGCGUCCACCAGCAGUUGUUUGCUACAUUUGUGGUCGUGAAUAUGGAACAAAAU\
) } def
/len { sequence length } bind def

/coor [
[79.31460571 239.06684875]
[73.33837891 224.97630310]
[74.60645294 209.72341919]
[82.82742310 196.81318665]
[96.11218262 189.21228027]
[95.50430298 174.22459412]
[94.89641571 159.23692322]
[94.28853607 144.24925232]
[80.38732910 148.36776733]
[64.20555115 147.86590576]
[55.38877487 160.00115967]
[46.57199478 172.13641357]
[37.75521851 184.27166748]
[36.58009338 200.62866211]
[21.71082115 207.54507446]
[8.44363117 197.90589905]
[10.42667294 181.62709045]
[25.61996269 175.45489502]
[34.43674088 163.31964111]
[43.25352097 151.18438721]
[52.07029724 139.04913330]
[43.13099289 127.00384521]
[28.96201897 131.92727661]
[14.79304314 136.85069275]
[0.62406814 141.77412415]
[-13.54490662 146.69755554]
[-17.91080856 161.58776855]
[-30.21568871 171.04132080]
[-45.72806549 171.42312622]
[-58.48311615 162.58636475]
[-63.57626343 147.92895508]
[-59.04908752 133.08697510]
[-46.64237976 123.76747131]
[-31.12677383 123.55397797]
[-18.46833420 132.52857971]
[-4.29935980 127.60515594]
[9.86961555 122.68172455]
[24.03858948 117.75829315]
[38.20756531 112.83486938]
[38.89067459 105.36604309]
[24.26189613 108.68250275]
[16.58737946 95.79444885]
[26.47322655 84.51304626]
[40.25688934 90.42839050]
[40.93999863 82.95956421]
[27.89924431 75.54750061]
[14.85848904 68.13543701]
[1.81773400 60.72336960]
[-11.22302151 53.31130600]
[-27.60920906 53.96311188]
[-36.13682556 39.95554733]
[-28.03339005 25.69839668]
[-11.63502121 25.85819244]
[-3.81095600 40.27054977]
[9.22979927 47.68261337]
[22.27055359 55.09468079]
[35.31130981 62.50674438]
[48.35206223 69.91880798]
[69.01162720 53.37798691]
[93.24210358 48.24646378]
[115.54466248 54.15930176]
[131.49520874 68.39828491]
[143.71919250 59.70493698]
[155.94317627 51.01158905]
[168.16714478 42.31824112]
[153.43905640 39.47517395]
[143.85235596 27.93847656]
[143.75361633 12.93880272]
[153.18757629 1.27688670]
[167.87696838 -1.75984621]
[181.16172791 5.20543480]
[187.01864624 19.01472473]
[182.79241943 33.40674973]
[196.12284851 26.52925873]
[209.45326233 19.65176773]
[222.78369141 12.77427578]
[236.11410522 5.89678383]
[249.44451904 -0.98070782]
[262.77493286 -7.85819960]
[276.10537720 -14.73569202]
[276.04571533 -28.75543404]
[282.01553345 -41.36748123]
[292.79339600 -50.12506485]
[306.23132324 -53.35659790]
[319.68286133 -50.48451233]
[330.52420044 -42.12753677]
[343.99127197 -48.73345184]
[357.45834351 -55.33936310]
[366.44073486 -68.36346436]
[381.27481079 -67.02189636]
[394.74188232 -73.62780762]
[408.20895386 -80.23371887]
[421.67602539 -86.83963013]
[435.14309692 -93.44554138]
[448.61013794 -100.05145264]
[448.83465576 -114.06952667]
[455.05886841 -126.55799103]
[466.01199341 -135.09533691]
[479.51263428 -138.05386353]
[492.90322876 -134.90974426]
[503.57296753 -126.33477020]
[517.17114258 -132.66639709]
[522.34875488 -147.59851074]
[536.60473633 -154.42073059]
[551.48126221 -149.08554077]
[558.15240479 -134.75823975]
[552.66021729 -119.93893433]
[538.26318359 -113.41967010]
[523.50274658 -119.06820679]
[509.90460205 -112.73658752]
[508.89260864 -96.63643646]
[499.86141968 -83.15652466]
[485.18804932 -76.01425934]
[468.82061768 -77.23627472]
[455.21606445 -86.58438873]
[441.74899292 -79.97847748]
[428.28192139 -73.37255859]
[414.81484985 -66.76664734]
[401.34777832 -60.16073608]
[387.88070679 -53.55482483]
[379.86157227 -41.00322723]
[364.06427002 -41.87229538]
[350.59719849 -35.26638031]
[337.13012695 -28.66046906]
[336.44464111 -12.54311657]
[327.68850708 1.11706281]
[313.16290283 8.55524635]
[296.77404785 7.66519928]
[282.98284912 -1.40527129]
[269.65243530 5.47222042]
[256.32202148 12.34971237]
[242.99159241 19.22720528]
[229.66117859 26.10469627]
[216.33074951 32.98218918]
[203.00033569 39.85968018]
[189.66992188 46.73717117]
[176.86050415 54.54222107]
[164.63652039 63.23556900]
[152.41253662 71.92891693]
[140.18855286 80.62226105]
[144.44697571 96.11640930]
[142.94020081 112.11429596]
[135.86364746 126.54083252]
[124.13521576 137.52476501]
[109.27621460 143.64135742]
[109.88409424 158.62904358]
[110.49198151 173.61671448]
[111.09986115 188.60440063]
[124.95654297 195.10447693]
[134.19604492 207.30653381]
[136.69520569 222.40661621]
[131.87971497 236.93486023]
[120.85616302 247.55276489]
[106.15766907 251.82040405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 148]
[6 147]
[7 146]
[8 145]
[10 21]
[11 20]
[12 19]
[13 18]
[22 39]
[23 38]
[24 37]
[25 36]
[26 35]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[62 140]
[63 139]
[64 138]
[65 137]
[73 136]
[74 135]
[75 134]
[76 133]
[77 132]
[78 131]
[79 130]
[80 129]
[86 124]
[87 123]
[88 122]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
