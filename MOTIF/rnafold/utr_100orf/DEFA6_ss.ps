%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACAUCUGCUCCUGCUCUCUCUCCUCCAGCGACCCUAGCCAUGAGAACCCUCACCAUCCUCACUGCUGUUCUCCUCGUGGCCCUCCAGGCCAAGGCUGAGCCACUCCAAGCUGAGGAUGAUCCACUGCAGGCAAAAGCUU\
) } def
/len { sequence length } bind def

/coor [
[79.44919586 305.18804932]
[66.76004791 313.74630737]
[51.54586411 315.41583252]
[37.30275726 309.81292725]
[27.30368423 298.22512817]
[23.84636307 283.31521606]
[27.72525787 268.50936890]
[38.04902649 257.20989990]
[52.44534683 252.01330566]
[54.43065262 237.14526367]
[56.41596222 222.27722168]
[57.74166489 207.33592224]
[58.40516281 192.35060120]
[59.06866455 177.36528015]
[59.73216248 162.37997437]
[60.39566422 147.39465332]
[55.15135193 142.03300476]
[47.38473129 154.86576843]
[39.61811066 167.69851685]
[36.73877716 182.41957092]
[25.82991219 192.71504211]
[10.96702671 194.73857117]
[-2.29715085 187.73417664]
[-9.00716877 174.31866455]
[-6.65618658 159.50405884]
[3.87747765 148.82501221]
[18.65986824 146.27139282]
[31.66129684 138.79055786]
[44.66272736 131.30972290]
[39.41841125 125.94808960]
[24.42208290 126.27992249]
[14.77969646 138.59082031]
[-0.53070122 141.77291870]
[-14.28000736 134.32371521]
[-19.97622108 119.76050568]
[-14.92976284 104.95958710]
[-1.52341676 96.90950012]
[13.91275024 99.41125488]
[24.09025192 111.28359222]
[39.08658218 110.95175934]
[41.13436127 103.73673248]
[45.22991562 89.30667877]
[47.27769470 82.09165192]
[34.69161224 73.93135071]
[22.10553360 65.77104187]
[9.51945400 57.61073685]
[-6.87685013 57.30537415]
[-14.57266331 42.82412720]
[-5.65119219 29.06406212]
[10.70991802 30.18035507]
[17.67975998 45.02465820]
[30.26584053 53.18496323]
[42.85192108 61.34526825]
[55.43799973 69.50557709]
[90.42866516 56.19091415]
[118.36306000 69.39897919]
[128.61189270 58.44629669]
[138.86073303 47.49361038]
[149.10957336 36.54092407]
[159.35841370 25.58823776]
[169.60725403 14.63555050]
[179.85609436 3.68286490]
[190.10491943 -7.26982117]
[192.00843811 -13.73510551]
[196.28233337 -17.63077927]
[201.05761719 -18.46754456]
[211.78088379 -28.95616913]
[222.50416565 -39.44479370]
[232.38395691 -50.73150253]
[241.36103821 -62.74865723]
[250.33811951 -74.76580811]
[259.31521606 -86.78295898]
[261.02087402 -105.08116150]
[277.34005737 -111.44259644]
[286.04910278 -123.65540314]
[294.75814819 -135.86820984]
[295.78921509 -142.52854919]
[299.50988770 -146.95561218]
[304.13241577 -148.41705322]
[313.37313843 -160.23266602]
[322.61389160 -172.04829407]
[331.85461426 -183.86390686]
[341.09533691 -195.67951965]
[340.58309937 -211.71440125]
[352.89315796 -222.00233459]
[368.58233643 -218.65129089]
[375.61520386 -204.23191833]
[368.59677124 -189.80552673]
[352.91094971 -186.43879700]
[343.67022705 -174.62316895]
[334.42950439 -162.80755615]
[325.18878174 -150.99192810]
[315.94802856 -139.17631531]
[306.97094727 -127.15916443]
[298.26190186 -114.94635773]
[289.55285645 -102.73355865]
[291.23400879 -90.70442963]
[284.01055908 -80.44424438]
[271.33236694 -77.80587769]
[262.35528564 -65.78872681]
[253.37818909 -53.77157211]
[244.40110779 -41.75442123]
[259.31005859 -43.40460587]
[271.89395142 -35.24094391]
[276.46392822 -20.95404243]
[270.95394897 -7.00269127]
[257.85498047 0.30601671]
[243.08877563 -2.33202195]
[233.33081055 -13.72420883]
[232.99279785 -28.72151566]
[222.26951599 -18.23288918]
[211.54623413 -7.74426413]
[201.05761719 2.97901607]
[190.80877686 13.93170261]
[180.55993652 24.88438797]
[170.31109619 35.83707428]
[160.06225586 46.78976059]
[149.81343079 57.74244690]
[139.56459045 68.69512939]
[129.31575012 79.64781952]
[136.54473877 89.67053223]
[140.20223999 102.25031281]
[139.40194702 116.07212830]
[133.75173950 129.52400208]
[123.44836426 140.88417053]
[109.30165863 148.53649902]
[92.68019104 151.18768311]
[75.38098145 148.05815125]
[74.71748352 163.04347229]
[74.05398560 178.02879333]
[73.39048004 193.01409912]
[72.72698212 207.99942017]
[74.96800995 211.92898560]
[75.71479797 215.95953369]
[75.12706757 219.59382629]
[73.51394653 222.44206238]
[71.28399658 224.26252747]
[69.29869080 239.13056946]
[67.31338501 253.99861145]
[79.84185028 262.79043579]
[86.83917999 276.40277100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 132]
[13 131]
[14 130]
[15 129]
[16 128]
[30 40]
[31 39]
[43 54]
[44 53]
[45 52]
[46 51]
[56 120]
[57 119]
[58 118]
[59 117]
[60 116]
[61 115]
[62 114]
[63 113]
[66 112]
[67 111]
[68 110]
[69 102]
[70 101]
[71 100]
[72 99]
[74 96]
[75 95]
[76 94]
[79 93]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
