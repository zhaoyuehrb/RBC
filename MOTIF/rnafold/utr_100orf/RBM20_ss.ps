%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGACCGCCCCUCCCUUGAGCUCUCUCGCCGCGAUCCCGGGCGGGUCUCGCCCCGCAUGGUGCUGGCAGCAGCCAUGAGCCAGGACGCGGACCCCAGCGGUCCGGAGCAGCCGGACAGAGUUGCCUGCAGUGUGCCUGGUGCCCGGGCGUCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[88.69850922 309.44778442]
[88.69850922 294.44778442]
[88.69850922 279.44778442]
[88.69850922 264.44778442]
[88.69850922 249.44778442]
[78.01763916 239.13011169]
[77.80395508 223.91796875]
[88.69850922 212.78485107]
[88.69850922 197.78485107]
[88.69850922 182.78485107]
[88.69850922 167.78485107]
[88.69850922 152.78485107]
[74.58630371 147.70098877]
[65.02037048 159.25491333]
[55.45444870 170.80882263]
[53.24815750 187.05888367]
[37.97158432 193.02195740]
[25.33995438 182.56376648]
[28.34760857 166.44277954]
[43.90052795 161.24290466]
[53.46645355 149.68898010]
[63.03238297 138.13507080]
[59.47650146 131.53160095]
[46.26945877 138.64314270]
[39.15813828 125.43598175]
[52.36474228 118.32467651]
[48.80886459 111.72121429]
[33.89735031 113.34807587]
[18.98583221 114.97494507]
[4.07431698 116.60180664]
[-10.83719921 118.22867584]
[-25.74871445 119.85553741]
[-33.99167633 123.91629791]
[-40.97050095 121.36424255]
[-55.91125107 122.69618225]
[-69.01074982 132.56204224]
[-83.99674225 125.90229797]
[-85.45291901 109.56793213]
[-71.88129425 100.36233521]
[-57.24318695 107.75543213]
[-42.30244064 106.42350006]
[-27.37557983 104.94402313]
[-12.46406364 103.31715393]
[2.44745183 101.69029236]
[17.35896873 100.06342316]
[32.27048492 98.43656158]
[47.18199921 96.80970001]
[58.89857101 74.42082214]
[78.26885223 61.84713745]
[99.15702820 60.60463715]
[115.96047211 68.96212769]
[125.52639771 57.40821075]
[135.09231567 45.85429382]
[144.65824890 34.30037308]
[143.36650085 18.77719116]
[153.23229980 7.19614506]
[168.03924561 6.06032991]
[177.60517883 -5.49358940]
[187.17109680 -17.04750824]
[196.73703003 -28.60142899]
[206.30294800 -40.15534592]
[209.14396667 -55.71938324]
[223.22026062 -60.58840942]
[232.78617859 -72.14233398]
[242.35211182 -83.69625092]
[245.19313049 -99.26028442]
[259.26940918 -104.12931061]
[268.83532715 -115.68323517]
[278.40127563 -127.23715210]
[287.96719360 -138.79107666]
[297.53311157 -150.34498596]
[307.09906006 -161.89891052]
[294.29241943 -179.18325806]
[294.70623779 -204.58297729]
[312.63406372 -227.80522156]
[313.22665405 -242.79351807]
[300.96026611 -252.29695129]
[296.65487671 -267.20477295]
[301.96597290 -281.78460693]
[314.85134888 -290.43023682]
[330.35632324 -289.81719971]
[342.51889038 -280.18127441]
[346.66232300 -265.22760010]
[341.19335938 -250.70623779]
[328.21496582 -242.20091248]
[327.62234497 -227.21263123]
[334.75070190 -224.88090515]
[356.13568115 -217.88575745]
[364.51538086 -230.32684326]
[372.89508057 -242.76792908]
[367.45202637 -257.29901123]
[371.62207031 -272.24526978]
[383.80178833 -281.85952759]
[399.30783081 -282.44491577]
[412.17779541 -273.77636719]
[417.46289062 -259.18707275]
[413.13095093 -244.28694153]
[400.84762573 -234.80537415]
[385.33618164 -234.38822937]
[376.95645142 -221.94714355]
[368.57675171 -209.50605774]
[377.91253662 -197.76539612]
[391.92156982 -203.12707520]
[405.93057251 -208.48876953]
[419.93957520 -213.85044861]
[433.94857788 -219.21212769]
[447.95761108 -224.57380676]
[455.78402710 -238.57832336]
[471.63574219 -241.04876709]
[483.35263062 -230.09004211]
[481.94653320 -214.10871887]
[468.49606323 -205.36433411]
[453.31927490 -210.56480408]
[439.31027222 -205.20312500]
[425.30126953 -199.84143066]
[411.29226685 -194.47975159]
[397.28323364 -189.11807251]
[383.27423096 -183.75639343]
[373.62634277 -160.00590515]
[355.14883423 -146.20068359]
[334.72854614 -144.29745483]
[318.65295410 -152.33297729]
[309.08703613 -140.77906799]
[299.52111816 -129.22514343]
[289.95520020 -117.67122650]
[280.38925171 -106.11730957]
[270.82333374 -94.56338501]
[268.66653442 -79.82576752]
[253.90602112 -74.13032532]
[244.34010315 -62.57640457]
[234.77416992 -51.02248383]
[232.61737061 -36.28486252]
[217.85687256 -30.58942032]
[208.29093933 -19.03550148]
[198.72502136 -7.48158216]
[189.15908813 4.07233715]
[179.59317017 15.62625599]
[181.24035645 30.38506317]
[171.70373535 42.23865128]
[156.21217346 43.86629868]
[146.64624023 55.42021942]
[137.08030701 66.97413635]
[127.51438904 78.52806091]
[139.11250305 95.21276855]
[140.10794067 117.86721039]
[127.76603699 139.65689087]
[103.69850922 152.78485107]
[103.69850922 167.78485107]
[103.69850922 182.78485107]
[103.69850922 197.78485107]
[103.69850922 212.78485107]
[114.59306335 223.91796875]
[114.37937927 239.13011169]
[103.69850922 249.44778442]
[103.69850922 264.44778442]
[103.69850922 279.44778442]
[103.69850922 294.44778442]
[103.69850922 309.44778442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 158]
[2 157]
[3 156]
[4 155]
[5 154]
[8 151]
[9 150]
[10 149]
[11 148]
[12 147]
[13 22]
[14 21]
[15 20]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[32 42]
[34 41]
[35 40]
[51 143]
[52 142]
[53 141]
[54 140]
[57 137]
[58 136]
[59 135]
[60 134]
[61 133]
[63 131]
[64 130]
[65 129]
[67 127]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[75 86]
[76 85]
[88 101]
[89 100]
[90 99]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
