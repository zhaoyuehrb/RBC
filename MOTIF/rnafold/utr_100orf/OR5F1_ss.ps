%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCAGAAAAAAUUAUACCUCACUGACUGAGUUCGUCCUAUUGGGAUUAGCAGACACGCUGGAGCUACAGAUUAUCCUCUUUUUGUUUUUUCUUGUGA\
) } def
/len { sequence length } bind def

/coor [
[83.47525787 572.82952881]
[72.71393585 561.25500488]
[73.37242889 545.46441650]
[85.06007385 534.82604980]
[85.52657318 519.83331299]
[78.18882751 506.87158203]
[86.35157013 493.31872559]
[86.81806946 478.32598877]
[87.28456879 463.33322144]
[87.75106049 448.34048462]
[88.21755981 433.34774780]
[88.68405914 418.35501099]
[89.15055847 403.36224365]
[89.61705780 388.36950684]
[90.08355713 373.37677002]
[75.74500275 369.09243774]
[62.99429321 361.23648071]
[52.70375061 350.33926392]
[45.57920456 337.13952637]
[42.11160660 322.53417969]
[42.54316711 307.51742554]
[46.85047531 293.11309814]
[54.74567032 280.30477905]
[65.69567871 269.96878052]
[78.95819092 262.81396484]
[93.63200378 259.33340454]
[94.09850311 244.34065247]
[94.56500244 229.34790039]
[94.79827881 214.34971619]
[94.79827881 199.34971619]
[94.79827881 184.34971619]
[94.56500244 169.35153198]
[94.09850311 154.35879517]
[93.63200378 139.36604309]
[93.16550446 124.37330627]
[92.69900513 109.38056183]
[89.00482178 94.84257507]
[82.25740051 81.44584656]
[75.50997162 68.04912567]
[68.76255035 54.65239716]
[62.01512146 41.25567245]
[49.49015427 29.82932091]
[57.00270462 14.63070488]
[73.68703461 17.64226532]
[75.41184998 34.50824738]
[82.15927124 47.90497208]
[88.90670013 61.30169678]
[95.65412140 74.69842529]
[102.40155029 88.09514618]
[117.38522339 87.39554596]
[122.85499573 73.42838287]
[128.32476807 59.46121979]
[133.79454041 45.49406052]
[127.23496246 31.11534691]
[132.84210205 16.33916855]
[147.28936768 9.93197060]
[162.00543213 15.69502831]
[168.25953674 30.20922279]
[162.34121704 44.86354065]
[147.76170349 50.96383286]
[142.29193115 64.93099213]
[136.82215881 78.89815521]
[131.35238647 92.86531830]
[107.69174957 108.91406250]
[108.15824890 123.90680695]
[108.62474823 138.89955139]
[109.09124756 153.89228821]
[109.55774689 168.88504028]
[113.00251770 177.54103088]
[109.79827881 184.34971619]
[109.79827881 199.34971619]
[109.79827881 214.34971619]
[112.97218323 223.10865784]
[109.55774689 229.81440735]
[109.09124756 244.80714417]
[108.62474823 259.79989624]
[123.05378723 264.18600464]
[135.84584045 272.15148926]
[146.13208008 283.14825439]
[153.21571350 296.42263794]
[156.61917114 311.06689453]
[156.11631775 326.08142090]
[151.74742126 340.44293213]
[143.81602478 353.17422485]
[132.86791992 363.41058350]
[119.65346527 370.45864868]
[105.07630157 373.84326172]
[104.60980225 388.83599854]
[104.14330292 403.82876587]
[103.67680359 418.82150269]
[103.21030426 433.81423950]
[102.74380493 448.80697632]
[102.27731323 463.79974365]
[101.81081390 478.79248047]
[101.34431458 493.78521729]
[108.64868927 507.81933594]
[100.51931763 520.29980469]
[100.05281830 535.29260254]
[111.05647278 546.63696289]
[110.73199463 562.43792725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[7 95]
[8 94]
[9 93]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[26 76]
[27 75]
[28 74]
[29 72]
[30 71]
[31 70]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
