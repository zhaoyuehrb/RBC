%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUGCUUGGAGCUCCUGGGGCCUAACAAAAAGAAACCUGCCAUGCUGCUCUUCCUCCUCUCUGCACUGGUCCUGCUCACACAGCCCCUGGGCUACCUGGAAGCAGAAAUGAAGACCUACUCCCACAGAACAAUGCCCAGUG\
) } def
/len { sequence length } bind def

/coor [
[220.18127441 280.18640137]
[227.86869812 267.26937866]
[237.48225403 255.71401978]
[227.59205627 244.43641663]
[217.70187378 233.15882874]
[207.81169128 221.88122559]
[197.92149353 210.60363770]
[188.03131104 199.32603455]
[178.14112854 188.04843140]
[167.88723755 177.10047913]
[157.28063965 166.49388123]
[146.55897522 156.00360107]
[135.72351074 145.63090515]
[124.88805389 135.25820923]
[117.82778168 132.88696289]
[113.93247986 124.53907776]
[103.32587433 113.93247986]
[89.87144470 110.12855530]
[86.06752014 96.67412567]
[75.46092224 86.06752014]
[64.85431671 75.46092224]
[54.24771500 64.85431671]
[43.64111328 54.24771500]
[30.37347794 61.44839859]
[15.62927723 64.61554718]
[0.60521364 63.50084305]
[-13.48175812 58.20315552]
[-25.49300385 49.15981674]
[-34.46024323 37.11055374]
[-39.66360474 23.03697014]
[-40.68941498 8.08259010]
[-37.46306610 -6.54006290]
[-30.25437546 -19.64777374]
[-40.86097717 -30.25437546]
[-48.37285614 -28.51851654]
[-55.94679260 -29.53079033]
[-62.61835861 -33.11360931]
[-67.55520630 -38.76519775]
[-70.16084290 -45.72935486]
[-70.14646912 -53.09643936]
[-67.56217194 -59.92215347]
[-76.95102692 -71.62042236]
[-86.33987427 -83.31868744]
[-95.72872925 -95.01695251]
[-105.24462891 -106.61211395]
[-114.88644409 -118.10277557]
[-124.52825928 -129.59344482]
[-138.65187073 -124.13428497]
[-153.78289795 -123.55934906]
[-168.28005981 -127.93098450]
[-180.57078552 -136.77499390]
[-189.32189941 -149.13204956]
[-193.58412170 -163.66175842]
[-192.89512634 -178.78802490]
[-187.32965088 -192.87007141]
[-177.49140930 -204.38040161]
[-164.44755554 -212.07043457]
[-149.61300659 -215.10603333]
[-134.59689331 -213.15791321]
[-121.02806854 -206.43737793]
[-110.37835693 -195.67344666]
[-103.80296326 -182.03369141]
[-102.01515198 -166.99765015]
[-105.20883179 -152.19631958]
[-113.03759003 -139.23526001]
[-103.39577484 -127.74459076]
[-93.75395966 -116.25392151]
[-86.99380493 -113.12814331]
[-84.03046417 -104.40580750]
[-74.64160919 -92.70753479]
[-65.25275421 -81.00926971]
[-55.86390305 -69.31100464]
[-34.12672043 -63.71134567]
[-30.25437546 -40.86097717]
[-19.64777374 -30.25437546]
[-6.54006290 -37.46306610]
[8.08259010 -40.68941498]
[23.03697014 -39.66360474]
[37.11055374 -34.46024323]
[49.15981674 -25.49300385]
[58.20315552 -13.48175812]
[63.50084305 0.60521364]
[64.61554718 15.62927723]
[61.44839859 30.37347794]
[54.24771500 43.64111328]
[64.85431671 54.24771500]
[75.46092224 64.85431671]
[86.06752014 75.46092224]
[96.67412567 86.06752014]
[110.12855530 89.87144470]
[113.93247986 103.32587433]
[124.53907776 113.93247986]
[135.26074219 124.42275238]
[146.09620667 134.79544067]
[156.93167114 145.16813660]
[165.36253357 148.88041687]
[167.88723755 155.88726807]
[178.49385071 166.49388123]
[183.68550110 167.87467957]
[187.41372681 170.84577942]
[189.31375122 174.56213379]
[189.41871643 178.15824890]
[199.30891418 189.43585205]
[209.19909668 200.71343994]
[219.08927917 211.99104309]
[228.97947693 223.26864624]
[238.86965942 234.54623413]
[248.75984192 245.82383728]
[261.47116089 237.80081177]
[275.28109741 231.86515808]
[289.84960938 228.16305542]
[304.81787109 226.78567505]
[319.81732178 227.76692200]
[334.47857666 231.08264160]
[348.44061279 236.65118408]
[361.35952759 244.33541870]
[372.91726685 253.94610596]
[382.82916260 265.24658203]
[390.85116577 277.95855713]
[396.78567505 291.76898193]
[400.48657227 306.33779907]
[401.86270142 321.30618286]
[400.88021851 336.30554199]
[397.56329346 350.96652222]
[391.99359131 364.92810059]
[384.30828857 377.84640503]
[374.69665527 389.40335083]
[363.39535522 399.31430054]
[350.68270874 407.33523560]
[336.87179565 413.26861572]
[322.30270386 416.96829224]
[307.33419800 418.34323120]
[292.33489990 417.35949707]
[277.67419434 414.04135132]
[263.71310425 408.47048950]
[250.79542542 400.78414917]
[239.23927307 391.17153931]
[229.32923889 379.86944580]
[221.30935669 367.15612793]
[215.37712097 353.34472656]
[211.67863464 338.77529907]
[210.30496216 323.80670166]
[211.28991699 308.80749512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[9 102]
[10 98]
[11 97]
[12 95]
[13 94]
[14 93]
[16 92]
[17 91]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[33 75]
[34 74]
[41 72]
[42 71]
[43 70]
[44 69]
[45 67]
[46 66]
[47 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
