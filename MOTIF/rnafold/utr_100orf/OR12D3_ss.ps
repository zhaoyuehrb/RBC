%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUGGAGAAUGUCACUACAAUGAAUGAGUUUCUUCUACUUGGCCUGACUGGUGUUCAGGAGCUGCAGCCUUUCUUCUUUGGGAUUUUCUUAAUCAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[123.12898254 463.24905396]
[117.19493103 449.34658813]
[115.62399292 434.31250000]
[118.55584717 419.48364258]
[125.72981262 406.17852783]
[136.50796509 395.58029175]
[149.93193054 388.63128662]
[147.25357056 373.87234497]
[144.57522583 359.11340332]
[141.89686584 344.35446167]
[139.21852112 329.59552002]
[136.54016113 314.83657837]
[133.86180115 300.07763672]
[123.97630310 288.93643188]
[129.12515259 273.97650146]
[126.44679260 259.21755981]
[123.76844025 244.45860291]
[107.88205719 243.36764526]
[92.79048920 238.25399780]
[79.49549866 229.45133972]
[68.88108826 217.53851318]
[61.65464783 203.30128479]
[58.29987335 187.68064880]
[59.04435730 171.71057129]
[63.84418106 156.44955444]
[72.38644409 142.91049194]
[84.10967255 131.99345398]
[98.24072266 124.42580414]
[94.68451691 109.85345459]
[90.91071320 95.33593750]
[86.92016602 80.87649536]
[82.92961121 66.41705322]
[78.93905640 51.95760727]
[74.94850159 37.49816513]
[70.95795441 23.03872108]
[66.96739960 8.57927895]
[54.48274231 3.26898980]
[47.48359680 -8.12436771]
[48.36415100 -21.27079964]
[56.57294464 -31.32583427]
[53.01673889 -45.89818573]
[49.16380310 -49.89846039]
[47.51567459 -54.53008652]
[47.92578888 -58.80073547]
[49.85778809 -61.93598175]
[47.62215424 -76.76844788]
[45.38652039 -91.60090637]
[33.38410187 -102.24616241]
[34.36737061 -118.25905609]
[47.58204269 -127.35586548]
[62.89096069 -122.55829620]
[68.55042267 -107.54663086]
[60.21898270 -93.83654022]
[62.45461655 -79.00408173]
[64.69025421 -64.17161560]
[67.58908844 -49.45439148]
[71.14529419 -34.88203812]
[85.83580780 -26.84918976]
[90.33632660 -10.37398434]
[81.42684174 4.58872604]
[85.41739655 19.04816818]
[89.40795135 33.50761032]
[93.39849854 47.96705627]
[97.38905334 62.42649841]
[101.37960815 76.88594055]
[105.37015533 91.34538269]
[110.45782471 97.78151703]
[109.25686646 106.29724884]
[112.81307220 120.86959839]
[126.95789337 120.83560181]
[140.73779297 123.99274445]
[153.44262695 130.17466736]
[164.41853333 139.05921936]
[173.10147095 150.18525696]
[179.04629517 162.97656250]
[181.94953918 176.77172852]
[181.66493225 190.85829163]
[178.21072388 204.50956726]
[171.76856995 217.02215576]
[162.67404175 227.75215149]
[151.39903259 236.14828491]
[138.52738953 241.78024292]
[141.20573425 256.53918457]
[143.88409424 271.29812622]
[153.96116638 283.49499512]
[148.62075806 297.39926147]
[151.29910278 312.15820312]
[153.97746277 326.91717529]
[156.65580750 341.67611694]
[159.33416748 356.43505859]
[162.01251221 371.19400024]
[164.69087219 385.95294189]
[179.70056152 387.74200439]
[193.51539612 393.87725830]
[204.90698242 403.81320190]
[212.86239624 416.66635132]
[216.67422485 431.29376221]
[216.00352478 446.39480591]
[210.90995789 460.62670898]
[201.84642029 472.72396851]
[189.61883545 481.61090088]
[175.31448364 486.49731445]
[160.20529175 486.94866943]
[145.63476562 482.92486572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[15 84]
[16 83]
[17 82]
[28 69]
[29 68]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[40 57]
[41 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
