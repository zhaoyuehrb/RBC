%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACCUACUGCGACGACCUGGGCCCCUCCUCGGCCCCGCCCGGCCAGGCCCAGGCCACCGCGCACCCCCCGGGCUAUGAGCCAGGGGAUCUGGGCG\
) } def
/len { sequence length } bind def

/coor [
[93.80896759 199.39022827]
[79.85076141 191.48150635]
[77.47366333 175.61552429]
[88.50118256 163.96334839]
[89.43372345 148.99235535]
[90.36626434 134.02137756]
[81.04081726 129.84648132]
[73.29841614 123.17947388]
[67.78552246 114.57704926]
[64.96246338 104.75747681]
[65.06494141 94.54066467]
[68.08441162 84.77969360]
[73.76874542 76.28958130]
[65.02763367 64.09970856]
[56.28651810 51.90984344]
[47.54540253 39.71997452]
[39.86190796 34.45152283]
[38.72896576 27.01230621]
[30.37118149 14.55648708]
[10.59540367 6.62173510]
[9.39233208 -13.88112164]
[-0.08971390 -25.50397873]
[-9.57176018 -37.12683487]
[-19.05380630 -48.74969101]
[-28.53585243 -60.37254715]
[-38.01789856 -71.99540710]
[-47.49994659 -83.61826324]
[-56.98199081 -95.24111938]
[-64.26418304 -94.06333923]
[-71.48470306 -95.29277802]
[-77.87470245 -98.76420593]
[-82.76489258 -104.07552338]
[-85.65557098 -110.63405609]
[-86.26760864 -117.72261810]
[-84.56906128 -124.57789612]
[-80.77497101 -130.47261047]
[-87.93576813 -143.65299988]
[-95.09656525 -156.83340454]
[-102.25736237 -170.01380920]
[-117.48120880 -174.25764465]
[-125.17236328 -188.06422424]
[-120.76780701 -203.24235535]
[-106.88068390 -210.78710938]
[-91.74997711 -206.22232056]
[-84.35246277 -192.25621033]
[-89.07696533 -177.17460632]
[-81.91616058 -163.99420166]
[-74.75536346 -150.81379700]
[-67.59456635 -137.63340759]
[-46.28195953 -128.55535889]
[-45.35913467 -104.72316742]
[-35.87709045 -93.10031128]
[-26.39504242 -81.47745514]
[-16.91299629 -69.85459137]
[-7.43095016 -58.23173904]
[2.05109620 -46.60888290]
[11.53314304 -34.98602676]
[21.01518822 -23.36316872]
[30.18581963 -23.91599655]
[38.66579056 -20.03318024]
[44.40821838 -12.50790787]
[45.95988083 -3.02869725]
[42.82699966 6.19870329]
[51.18478394 18.65452385]
[59.73526764 30.97885704]
[68.47638702 43.16872787]
[77.21749878 55.35859680]
[85.95861816 67.54846191]
[110.07638550 66.10709381]
[129.48951721 80.49023438]
[135.13406372 103.98243713]
[149.34114075 108.79482269]
[163.54821777 113.60720825]
[177.75529480 118.41959381]
[193.30828857 115.51875305]
[202.88044739 126.93028259]
[217.08752441 131.74266052]
[231.29460144 136.55505371]
[245.50166321 141.36744690]
[262.44332886 140.72232056]
[267.75317383 156.82331848]
[253.75131226 166.38282776]
[240.68928528 155.57450867]
[226.48220825 150.76213074]
[212.27513123 145.94973755]
[198.06805420 141.13735962]
[183.53125000 144.38241577]
[172.94290161 132.62666321]
[158.73582458 127.81427765]
[144.52876282 123.00189209]
[130.32168579 118.18950653]
[127.34186554 122.42063141]
[123.77636719 126.17149353]
[119.70155334 129.36174011]
[115.20471954 131.92301941]
[110.38217926 133.80049133]
[105.33724976 134.95391846]
[104.40470886 149.92489624]
[103.47216034 164.89588928]
[112.96840668 177.82650757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 99]
[5 98]
[6 97]
[13 68]
[14 67]
[15 66]
[16 65]
[18 64]
[19 63]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 52]
[28 51]
[36 49]
[37 48]
[38 47]
[39 46]
[71 91]
[72 90]
[73 89]
[74 88]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
