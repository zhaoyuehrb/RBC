%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUAGGAUCCAAACCAAGAGUUCAUUUGUAUAUUUUGCCCUGUGCCUCUCAACAGGUUUCUACCAUGGGUGACAGGGGAACAAGCAAUCACUCAGAAA\
) } def
/len { sequence length } bind def

/coor [
[23.43026733 385.91159058]
[13.42418671 397.17993164]
[1.08882141 405.83645630]
[-12.91059875 411.41436768]
[-27.81910324 413.61282349]
[-42.83269501 412.31326294]
[-57.14170837 407.58581543]
[-69.97447968 399.68539429]
[-80.63894653 389.03805542]
[-88.55999756 376.21801758]
[-93.31045532 361.91659546]
[-94.63413239 346.90512085]
[-92.45964813 331.99310303]
[-86.90426636 317.98474121]
[-78.26757812 305.63546753]
[-67.01535797 295.61129761]
[-53.75442505 288.45278931]
[-39.19991302 284.54598999]
[-24.13673782 284.10162354]
[-9.37723541 287.14361572]
[-3.04970980 273.54351807]
[3.27781558 259.94345093]
[9.60534096 246.34335327]
[3.37730336 236.53921509]
[2.73038602 224.82099915]
[7.94781876 214.17353821]
[17.80394936 207.36685181]
[29.85004807 206.23577881]
[37.01084518 193.05537415]
[44.17164612 179.87496948]
[51.33244324 166.69458008]
[44.45315933 156.45249939]
[42.64032745 144.17480469]
[46.30885696 132.24235535]
[54.80456161 122.99632263]
[66.51982880 118.27897644]
[79.19760132 119.06674194]
[87.16397095 106.35701752]
[87.86311340 92.39267731]
[100.12631226 85.67661285]
[108.09267426 72.96688843]
[116.05904388 60.25717163]
[124.02541351 47.54745102]
[131.99177551 34.83773041]
[139.95814514 22.12800980]
[135.02893066 11.07854271]
[136.11936951 -0.84979582]
[142.83331299 -10.62287045]
[153.35942078 -15.81287479]
[164.95834351 -15.20101070]
[173.69946289 -27.39087868]
[182.44058228 -39.58074951]
[191.18168640 -51.77061844]
[188.76553345 -62.60427094]
[192.72581482 -72.73575592]
[201.48397827 -78.80607605]
[211.91734314 -78.95180511]
[221.39938354 -90.57466125]
[230.88143921 -102.19751740]
[232.97004700 -118.46311188]
[248.20306396 -124.53661346]
[260.91006470 -114.17011261]
[258.01916504 -98.02778625]
[242.50428772 -92.71546936]
[233.02224731 -81.09261322]
[223.54019165 -69.46975708]
[222.04676819 -50.29731369]
[203.37156677 -43.02950287]
[194.63044739 -30.83963203]
[185.88932800 -18.64976311]
[177.14820862 -6.45989513]
[181.29328918 11.23651218]
[171.16427612 26.70515060]
[152.66786194 30.09437561]
[144.70149231 42.80409622]
[136.73513794 55.51381683]
[128.76876831 68.22354126]
[120.80239868 80.93325806]
[112.83602905 93.64298248]
[112.13688660 107.60732269]
[99.87368774 114.32338715]
[91.90732574 127.03311157]
[99.19116974 143.47462463]
[95.31523895 160.87596130]
[81.97576141 172.46852112]
[64.51284027 173.85537720]
[57.35204697 187.03578186]
[50.19124603 200.21617126]
[43.03044891 213.39657593]
[49.15951157 231.17405701]
[40.65708923 247.59307861]
[23.20543098 252.67088318]
[16.87790489 266.27096558]
[10.55037880 279.87106323]
[4.22285366 293.47113037]
[16.05653000 302.80178833]
[25.41896439 314.61032104]
[31.80524635 328.25994873]
[34.87097931 343.01452637]
[34.45082474 358.07839966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 95]
[21 94]
[22 93]
[23 92]
[28 89]
[29 88]
[30 87]
[31 86]
[37 82]
[38 81]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[50 71]
[51 70]
[52 69]
[53 68]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
