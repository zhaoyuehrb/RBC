%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCUCAAGUUGAGAGAAAUUUGUGCCUUUGAACUCCAUGGCAUAUUCAUCCUCUAACAGCGACAUAGAGGACGACAGCUCCAAAUCCAAUUCCAACCUGAGCCUCUCUGUGGGCUAUUUCCCCUGUGAGGACACCC\
) } def
/len { sequence length } bind def

/coor [
[169.50825500 300.12100220]
[170.59417725 285.16036987]
[177.95098877 272.08834839]
[190.17631531 263.39688110]
[204.93963623 260.74279785]
[219.42741394 264.63238525]
[210.07507324 252.90492249]
[200.72271729 241.17744446]
[191.37037659 229.44996643]
[177.38578796 224.32351685]
[174.83078003 208.70997620]
[165.47843933 196.98251343]
[156.12608337 185.25503540]
[146.77374268 173.52755737]
[140.08892822 170.23207092]
[137.34666443 161.43040466]
[128.25981140 149.49603271]
[113.32206726 155.41658020]
[97.32547760 156.93260193]
[81.54145813 153.92361450]
[67.22453308 146.62878418]
[55.51259995 135.62788391]
[47.33653259 121.79526520]
[43.34616470 106.23036957]
[28.34994125 105.89379883]
[13.35371685 105.55722046]
[-1.64250636 105.22064972]
[-16.63872910 104.88407898]
[-31.63495255 104.54750824]
[-41.52825928 112.90682220]
[-54.06220245 112.27005768]
[-62.49839020 103.52881622]
[-77.48328400 102.85584259]
[-90.24739838 112.57473755]
[-105.76840210 108.51542664]
[-112.13990784 93.79185486]
[-104.47424316 79.69869995]
[-88.65184784 77.04701233]
[-76.81031036 87.87094879]
[-61.82541656 88.54392242]
[-46.75750732 79.61701202]
[-31.29838181 89.55128479]
[-16.30215836 89.88785553]
[-1.30593538 90.22442627]
[13.69028854 90.56099701]
[28.68651199 90.89757538]
[43.68273544 91.23414612]
[54.26853561 65.98371124]
[75.40768433 48.58314896]
[70.77243042 34.31729889]
[59.14933395 23.58351326]
[62.57500076 9.08820152]
[57.93974304 -5.17764568]
[53.30448914 -19.44349289]
[48.66923523 -33.70934296]
[44.03398132 -47.97518921]
[39.39872360 -62.24103546]
[34.76346970 -76.50688171]
[19.81713486 -80.32926941]
[9.32675552 -91.64100647]
[6.63977575 -106.83257294]
[12.61359978 -121.05638885]
[25.34200287 -129.77369690]
[40.76339722 -130.20281982]
[53.95687103 -122.20683289]
[60.71243668 -108.33722687]
[58.87441635 -93.01974487]
[49.02931595 -81.14214325]
[53.66457367 -66.87628937]
[58.29982758 -52.61044312]
[62.93508148 -38.34459686]
[67.57033539 -24.07874870]
[72.20558929 -9.81290054]
[76.84085083 4.45294714]
[88.13240051 14.16634464]
[85.03827667 29.68204498]
[89.67353058 43.94789505]
[98.13581848 43.03510284]
[106.63967133 43.39267349]
[114.99545288 45.01263046]
[123.01683044 47.85884476]
[130.52491760 51.86784744]
[137.35226440 56.95023346]
[143.34663391 62.99266052]
[148.37434387 69.86037445]
[152.32327271 77.40023041]
[155.10534668 85.44407654]
[156.65853882 93.81253052]
[156.94819641 102.31896973]
[155.96786499 110.77369690]
[153.73941040 118.98815918]
[150.31253052 126.77917480]
[145.76364136 133.97299194]
[140.19418335 140.40917969]
[149.28103638 152.34355164]
[158.50122070 164.17521667]
[167.85356140 175.90269470]
[177.20590210 187.63015747]
[186.55825806 199.35763550]
[201.21179199 205.32290649]
[203.09785461 220.09762573]
[212.45019531 231.82508850]
[221.80253601 243.55256653]
[231.15489197 255.28004456]
[241.99681091 265.64596558]
[254.13206482 274.46276855]
[266.26733398 283.27954102]
[278.40258789 292.09631348]
[290.91195679 285.73760986]
[304.87448120 285.40866089]
[317.54849243 291.11672974]
[326.47003174 301.68923950]
[329.93194580 315.01428223]
[327.31024170 328.46221924]
[339.24459839 337.54904175]
[351.17898560 346.63589478]
[366.80462646 344.26635742]
[379.47943115 353.70693970]
[381.68365479 369.35678101]
[372.10955811 381.93106079]
[356.43731689 383.96969604]
[343.96496582 374.26321411]
[342.09213257 358.57028198]
[330.15774536 349.48342896]
[318.22338867 340.39657593]
[303.51498413 346.99569702]
[287.39031982 345.29061890]
[274.23635864 335.65060425]
[267.67944336 320.61645508]
[269.58578491 304.23156738]
[257.45053101 295.41479492]
[245.31529236 286.59802246]
[233.18003845 277.78125000]
[237.71563721 292.07907104]
[235.72692871 306.94665527]
[227.59300232 319.54980469]
[214.86442566 327.48602295]
[199.96762085 329.24240112]
[185.74230957 324.48416138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 104]
[7 103]
[8 102]
[9 101]
[11 99]
[12 98]
[13 97]
[14 96]
[16 95]
[17 94]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[32 40]
[33 39]
[49 77]
[50 76]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[105 133]
[106 132]
[107 131]
[108 130]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
