%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:25:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGGGCCUGGGAAGAUGUGUUUCCCCUGGAUGUGCACAUUCCUGUUUGUGGCUUAUCGCCUCUCAUUUAUUCUGUGUGAGUAGGUAGAAAAUGAGCAUCACGGACGUGCUCAGUGCUGACGACAUUGCAGCAGCGCUCCAGGAAUGCCGAGACCCAGACACUUUUGAACCCCAAAAAUUCUUCCAGACAU\
) } def
/len { sequence length } bind def

/coor [
[248.91891479 486.51016235]
[261.11474609 495.24441528]
[254.73248291 481.66992188]
[248.35020447 468.09542847]
[241.96794128 454.52096558]
[232.06497192 451.92807007]
[225.08351135 444.14352417]
[223.51502991 433.58306885]
[228.11802673 423.70697021]
[222.18098450 409.93194580]
[216.24394226 396.15692139]
[210.30690002 382.38189697]
[204.36985779 368.60684204]
[189.46363831 368.08682251]
[176.20690918 361.11770630]
[167.25398254 349.03439331]
[164.42364502 334.20169067]
[168.32991028 319.55151367]
[178.24974060 308.00341797]
[172.31269836 294.22836304]
[166.37565613 280.45333862]
[160.43861389 266.67831421]
[154.50157166 252.90327454]
[151.36219788 251.26690674]
[148.86485291 248.02076721]
[147.76101685 243.48579407]
[148.62921143 238.30792236]
[143.37164307 224.25950623]
[138.11408997 210.21107483]
[132.85653687 196.16265869]
[127.59897614 182.11424255]
[122.34142303 168.06582642]
[117.04446411 162.89540100]
[117.11465454 153.74571228]
[112.08646393 139.61358643]
[107.05826569 125.48144531]
[102.03006744 111.34931183]
[98.56765747 112.61206055]
[94.56347656 112.74582672]
[90.40123749 111.55335236]
[86.52902985 108.97006226]
[83.41349030 105.08312225]
[81.48887634 100.13493347]
[81.10620880 94.50978088]
[82.48807526 88.70413208]
[73.39706421 76.77293396]
[64.30605316 64.84173584]
[55.21503830 52.91053772]
[46.12402344 40.97933960]
[37.03301239 29.04813957]
[27.94199944 17.11694336]
[18.85098648 5.18574429]
[9.56697369 -6.59589863]
[0.09242249 -18.22486496]
[-9.38212872 -29.85383224]
[-18.85667992 -41.48279953]
[-28.33123207 -53.11176682]
[-38.08687210 -64.50595093]
[-48.11777878 -75.65856934]
[-58.23912430 -86.72917938]
[-68.45023346 -97.71704865]
[-78.66134644 -108.70491028]
[-88.87245941 -119.69277954]
[-99.17266083 -130.59716797]
[-109.56126404 -141.41737366]
[-119.94987488 -152.23757935]
[-130.33848572 -163.05778503]
[-140.72709656 -173.87799072]
[-155.84533691 -170.80522156]
[-170.21659851 -176.41508484]
[-179.25505066 -188.91748047]
[-180.07653809 -204.32295227]
[-172.41896057 -217.71568298]
[-158.72578430 -224.82206726]
[-143.36648560 -223.37451172]
[-131.24214172 -213.83491516]
[-126.22160339 -199.24732971]
[-129.90689087 -184.26660156]
[-119.51828003 -173.44639587]
[-109.12966919 -162.62619019]
[-98.74105835 -151.80598450]
[-88.35245514 -140.98577881]
[-81.44160461 -138.33415222]
[-77.88459015 -129.90388489]
[-67.67348480 -118.91602325]
[-57.46237183 -107.92815399]
[-47.25125885 -96.94029236]
[-40.38448715 -94.17652893]
[-36.96516418 -85.68948364]
[-26.93425369 -74.53686523]
[-23.43641090 -73.99051666]
[-20.03202248 -71.71362305]
[-17.53573990 -67.76989746]
[-16.70226479 -62.58631897]
[-7.22771406 -50.95735168]
[2.24683762 -39.32838440]
[11.72138977 -27.69941711]
[21.19594193 -16.07044983]
[25.78612137 -14.70253563]
[29.55970001 -10.42766857]
[30.78218460 -3.90526843]
[39.87319565 8.02592945]
[48.96421051 19.95712662]
[58.05522156 31.88832474]
[67.14623260 43.81952286]
[76.23725128 55.75072098]
[85.32826233 67.68192291]
[94.41927338 79.61312103]
[109.36962128 80.83259583]
[120.27401733 70.53239441]
[131.17842102 60.23219681]
[142.08280945 49.93199539]
[152.90301514 39.54338837]
[163.63830566 29.06706047]
[174.37361145 18.59073448]
[185.10890198 8.11440849]
[195.84420776 -2.36191821]
[194.49122620 -17.94086266]
[203.51103210 -30.71494865]
[218.64471436 -34.65264893]
[232.74662781 -27.89469528]
[239.15827942 -13.63199043]
[234.85227966 1.40105236]
[221.86180115 10.10629082]
[206.32052612 8.37337780]
[195.58523560 18.84970474]
[184.84992981 29.32603073]
[174.11463928 39.80235672]
[163.37934875 50.27868271]
[160.78405762 57.21088409]
[152.38301086 60.83639145]
[141.47862244 71.13658905]
[130.57421875 81.43679047]
[119.66982269 91.73699188]
[116.16220856 106.32111359]
[121.19039917 120.45325470]
[126.21859741 134.58538818]
[131.24679565 148.71752930]
[136.38983154 162.80827332]
[141.64739990 176.85668945]
[146.90495300 190.90510559]
[152.16250610 204.95352173]
[157.42007446 219.00193787]
[162.67762756 233.05036926]
[168.27659607 246.96623230]
[174.21363831 260.74127197]
[180.15068054 274.51629639]
[186.08772278 288.29132080]
[192.02478027 302.06637573]
[207.23152161 302.78488159]
[220.56396484 310.00518799]
[229.40322876 322.24804688]
[232.03950500 337.05383301]
[228.00262451 351.47650146]
[218.14488220 362.66979980]
[224.08192444 376.44485474]
[230.01896667 390.21987915]
[235.95602417 403.99490356]
[241.89306641 417.76992798]
[258.58636475 429.05252075]
[255.54241943 448.13870239]
[261.92468262 461.71316528]
[268.30697632 475.28765869]
[274.68923950 488.86215210]
[282.88269043 501.42666626]
[292.73074341 512.74108887]
[302.57879639 524.05548096]
[312.42684937 535.36987305]
[328.26773071 537.90881348]
[336.03353882 551.94708252]
[329.76705933 566.71563721]
[314.27536011 570.88537598]
[301.44235229 561.25762939]
[301.11242676 545.21795654]
[291.26437378 533.90356445]
[281.41632080 522.58911133]
[271.56829834 511.27471924]
[274.64266968 525.95629883]
[272.85476685 540.84936523]
[266.39279175 554.38604736]
[255.93701172 565.14135742]
[242.58816528 571.98303223]
[227.75152588 574.19079590]
[212.98899841 571.53216553]
[199.85472107 564.28717041]
[189.73135376 553.21838379]
[183.68463135 539.49114990]
[182.35113525 524.55053711]
[185.87123108 509.96942139]
[193.87435913 497.28280640]
[205.51797485 487.82629395]
[219.57632446 482.59533691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[9 159]
[10 158]
[11 157]
[12 156]
[13 155]
[19 149]
[20 148]
[21 147]
[22 146]
[23 145]
[27 144]
[28 143]
[29 142]
[30 141]
[31 140]
[32 139]
[34 138]
[35 137]
[36 136]
[37 135]
[45 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 103]
[51 102]
[52 101]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 90]
[59 89]
[60 87]
[61 86]
[62 85]
[63 84]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
[109 134]
[110 133]
[111 132]
[112 131]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
[165 177]
[166 176]
[167 175]
[168 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
