%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCUGCCUUUCCUCGUUGGCUACUUUCAGUAAGUUGUGACCAGUAUGUCUGGACGUGGCAAGCAAGGCGGUAAAGCUCGCGCCAAGGCCAAGACCCGCUCUUCUCGGGCUGGGCUUCAGUUCCCCGUGGGCCGAGUGCACCGCC\
) } def
/len { sequence length } bind def

/coor [
[93.44033813 134.37184143]
[89.66066742 148.88783264]
[85.88099670 163.40382385]
[82.10132599 177.91981506]
[83.96145630 194.77140808]
[68.28336334 201.22383118]
[57.74297714 187.94465637]
[67.58533478 174.14015198]
[71.36500549 159.62414551]
[75.14467621 145.10815430]
[78.92434692 130.59216309]
[74.99204254 124.20569611]
[67.86256409 137.40306091]
[52.86856461 137.82733154]
[45.00423431 125.05422211]
[52.13399887 111.85700989]
[67.12743378 111.43275452]
[63.19512939 105.04628754]
[48.53179932 101.88610077]
[33.86847305 98.72591400]
[18.74795151 103.38214111]
[7.93642950 93.13713074]
[-6.72689915 89.97693634]
[-21.39022827 86.81674957]
[-36.05355453 83.65656281]
[-50.71688461 80.49636841]
[-65.83740234 85.15260315]
[-76.64892578 74.90759277]
[-91.31225586 71.74739838]
[-105.97558594 68.58721161]
[-120.63891602 65.42702484]
[-135.30224609 62.26683426]
[-146.24374390 74.61956024]
[-161.82615662 79.75885773]
[-177.78639221 76.37793732]
[-189.80772400 65.48757172]
[-194.68734741 50.11641693]
[-209.41444397 47.26817322]
[-224.14154053 44.41993332]
[-239.45712280 50.28212357]
[-252.01948547 39.74083328]
[-248.90557861 23.64004135]
[-233.31869507 18.54285812]
[-221.29330444 29.69283104]
[-206.56620789 32.54107285]
[-191.83909607 35.38931656]
[-183.56071472 24.48083305]
[-171.32444763 18.18634224]
[-157.50346375 17.79101753]
[-144.80621338 23.42961121]
[-135.74568176 34.04880524]
[-132.14205933 47.60350418]
[-117.47872162 50.76369476]
[-102.81539154 53.92388153]
[-88.15206909 57.08407211]
[-73.48873901 60.24426270]
[-59.41703796 55.36199570]
[-47.55669403 65.83304596]
[-32.89336777 68.99323273]
[-18.23003769 72.15341949]
[-3.56671000 75.31361389]
[11.09661865 78.47380066]
[25.16831779 73.59152985]
[37.02865982 84.06258392]
[51.69198990 87.22277069]
[66.35531616 90.38295746]
[85.36712646 72.44747162]
[108.51467133 73.95429993]
[121.25015259 89.71756744]
[136.12866211 87.81230164]
[151.00715637 85.90703583]
[165.88566589 84.00177002]
[180.76417542 82.09649658]
[195.64268494 80.19123077]
[202.62663269 68.62592316]
[214.82748413 63.29302597]
[227.67739868 65.94346619]
[236.50579834 75.38407135]
[251.42140198 73.79503632]
[266.33700562 72.20600128]
[281.25259399 70.61696625]
[296.16818237 69.02792358]
[304.43695068 64.98237610]
[311.41674805 67.56691742]
[326.36270142 66.29483032]
[341.30868530 65.02273560]
[346.11962891 50.84413528]
[363.24218750 42.57490540]
[377.48825073 37.87912750]
[391.73428345 33.18334961]
[405.98031616 28.48757362]
[420.22634888 23.79179764]
[430.91070557 12.12323475]
[445.42044067 15.48733234]
[459.66647339 10.79155540]
[466.89733887 5.09475231]
[474.26498413 6.15078020]
[488.60748291 1.75843847]
[502.94998169 -2.63390303]
[517.29248047 -7.02624464]
[523.22882080 -21.49324989]
[537.09942627 -28.71401787]
[552.35510254 -25.27912140]
[561.79254150 -12.81041527]
[560.95568848 2.80475974]
[550.23968506 14.19339561]
[534.70428467 15.97812557]
[521.68481445 7.31625652]
[507.34231567 11.70859814]
[492.99981689 16.10093880]
[478.65731812 20.49328041]
[464.36224365 25.03759575]
[450.11621094 29.73337364]
[440.45083618 41.06606293]
[424.92214966 38.03783798]
[410.67608643 42.73361588]
[396.43005371 47.42939377]
[382.18402100 52.12516785]
[367.93798828 56.82094574]
[365.71734619 71.65566254]
[377.96389771 80.31716919]
[392.61544800 75.20722198]
[407.46261597 79.71738434]
[416.79632568 92.11339569]
[417.02761841 107.62874603]
[408.06753540 120.29746246]
[393.36141968 125.24816895]
[378.56405640 120.57721710]
[369.36535645 108.08068085]
[369.30239868 92.56372833]
[357.05581665 83.90222168]
[342.58074951 79.96869659]
[327.63479614 81.24079132]
[312.68884277 82.51287842]
[297.75723267 83.94351959]
[282.84161377 85.53255463]
[267.92602539 87.12158966]
[253.01043701 88.71063232]
[238.09483337 90.29966736]
[228.13346863 103.81110382]
[211.15238953 106.01410675]
[197.54794312 95.06974030]
[182.66944885 96.97500610]
[167.79093933 98.88027191]
[152.91242981 100.78553772]
[138.03392029 102.69081116]
[123.15541840 104.59607697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[18 66]
[19 65]
[20 64]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[37 46]
[38 45]
[39 44]
[69 147]
[70 146]
[71 145]
[72 144]
[73 143]
[74 142]
[78 139]
[79 138]
[80 137]
[81 136]
[82 135]
[84 134]
[85 133]
[86 132]
[88 119]
[89 118]
[90 117]
[91 116]
[92 115]
[94 113]
[95 112]
[97 111]
[98 110]
[99 109]
[100 108]
[120 131]
[121 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
