%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACGGUUGCCAUGGCAGCGGCUGGGCGUGCUGCUUAGCAGGGGAAAGAUGGCGGUGACGGGCUGGUUGGAGAGUCUGCGGACAGCCCAGAAGACUGCGCUGCUGCAGGACGGGAGAAGGAAGGUUCACUAUUUAUUCCCAGACGGCA\
) } def
/len { sequence length } bind def

/coor [
[109.33010864 206.82817078]
[104.67312622 221.53585815]
[92.78926849 231.37339783]
[77.47061920 233.20169067]
[63.60531616 226.43730164]
[55.61771774 213.23875427]
[56.05664444 197.81764221]
[64.78202820 185.09477234]
[79.00964355 179.12998962]
[81.51116943 164.34005737]
[84.01270294 149.55010986]
[86.51423645 134.76017761]
[68.28880310 119.60956573]
[62.87680054 96.53539276]
[72.46504974 74.86115265]
[63.64826965 62.72589493]
[54.83148956 50.59064102]
[46.01470947 38.45538712]
[37.19793320 26.32013130]
[28.38115311 14.18487644]
[21.50987244 19.95376205]
[11.25206089 22.46071053]
[-3.19537759 26.49450874]
[-17.64281654 30.52830696]
[-32.09025574 34.56210327]
[-46.53769302 38.59590149]
[-60.98513031 42.62969971]
[-75.43257141 46.66349411]
[-84.52915955 59.87831879]
[-100.54203796 60.86184692]
[-111.18749237 48.85960007]
[-108.29924011 33.07867813]
[-94.09290314 25.62484932]
[-79.46636963 32.21605682]
[-65.01892853 28.18225861]
[-50.57149124 24.14846230]
[-36.12405014 20.11466408]
[-21.67661285 16.08086777]
[-7.22917509 12.04707050]
[7.21826363 8.01327324]
[-7.39446211 4.62679195]
[-22.33185387 5.99584341]
[-36.28899384 0.50054580]
[-46.28337860 -10.68481159]
[-50.17931747 -25.17003441]
[-47.14428711 -39.85977936]
[-37.82683945 -51.61499786]
[-24.21801758 -57.92372131]
[-9.22588921 -57.43784332]
[3.94588399 -50.26118851]
[12.48262978 -37.92733383]
[14.56025410 -23.07316589]
[21.19408798 -9.61983013]
[21.82222366 -24.60667229]
[22.45035744 -39.59351349]
[23.07849312 -54.58035660]
[23.70662880 -69.56719971]
[9.19287491 -80.34301758]
[4.04863882 -97.50910187]
[10.13696480 -114.19709778]
[24.86518288 -123.84618378]
[24.86518288 -138.84619141]
[24.86518288 -153.84619141]
[24.86518288 -168.84619141]
[24.86518288 -183.84619141]
[24.86518288 -198.84619141]
[13.97063065 -209.97930908]
[14.18431091 -225.19143677]
[24.86518288 -235.50912476]
[24.86518288 -250.50912476]
[17.12788391 -264.30929565]
[24.86518288 -277.03656006]
[24.86518288 -292.03656006]
[18.81884384 -307.87570190]
[32.36518478 -318.07046509]
[45.91152191 -307.87570190]
[39.86518478 -292.03656006]
[39.86518478 -277.03656006]
[47.60248566 -264.30929565]
[39.86518478 -250.50912476]
[39.86518478 -235.50912476]
[50.54605484 -225.19143677]
[50.75973511 -209.97930908]
[39.86518478 -198.84619141]
[39.86518478 -183.84619141]
[39.86518478 -168.84619141]
[39.86518478 -153.84619141]
[39.86518478 -138.84619141]
[39.86518478 -123.84618378]
[50.69718933 -118.20263672]
[58.12493134 -108.41564178]
[60.67601395 -96.32292938]
[57.80114746 -84.22861481]
[49.99094391 -74.46418762]
[38.69347000 -68.93906403]
[38.06533432 -53.95222092]
[37.43720245 -38.96538162]
[36.80906677 -23.97853661]
[36.18093109 -8.99169540]
[40.51640701 5.36809731]
[49.33318710 17.50335312]
[58.14996719 29.63860703]
[66.96674347 41.77386093]
[75.78352356 53.90911865]
[84.60030365 66.04437256]
[95.32921600 63.00920105]
[106.47585297 63.28217316]
[117.04333496 66.83887482]
[126.08660889 73.36122894]
[132.79692078 82.26593018]
[136.57415771 92.75660706]
[137.08050537 103.89508057]
[134.27069092 114.68521118]
[146.58792114 123.24591064]
[158.90516663 131.80661011]
[171.22239685 140.36732483]
[183.53964233 148.92802429]
[199.28742981 150.45048523]
[205.32263184 164.06759644]
[217.63986206 172.62829590]
[229.95710754 181.18899536]
[245.70489502 182.71147156]
[251.74009705 196.32856750]
[264.05734253 204.88928223]
[280.03790283 203.47488403]
[291.00271606 215.18608093]
[288.54049683 231.03906250]
[274.54006958 238.87277222]
[259.74133301 232.67784119]
[255.49662781 217.20651245]
[243.17939758 208.64581299]
[228.31262207 207.73565674]
[221.39640808 193.50624084]
[209.07916260 184.94554138]
[196.76193237 176.38482666]
[181.89515686 175.47468567]
[174.97894287 161.24525452]
[162.66169739 152.68455505]
[150.34446716 144.12385559]
[138.02722168 135.56315613]
[125.70998383 127.00244904]
[121.53306580 130.43785095]
[116.90309143 133.23283386]
[111.91747284 135.32858276]
[106.68111420 136.68103027]
[101.30417633 137.26170349]
[98.80264282 152.05163574]
[96.30111694 166.84158325]
[93.79958344 181.63153076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 149]
[10 148]
[11 147]
[12 146]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[53 99]
[54 98]
[55 97]
[56 96]
[57 95]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[69 81]
[70 80]
[72 78]
[73 77]
[113 141]
[114 140]
[115 139]
[116 138]
[117 137]
[119 135]
[120 134]
[121 133]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
