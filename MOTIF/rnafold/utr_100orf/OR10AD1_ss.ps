%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUAAGGAAUGGCAGCAUAGUGACGGAAUUUAUCCUCGUGGGCUUUCAGCAGAGCUCCACUUCCACACGAGCAUUGCUCUUUGCCCUCUUCUUGGCCC\
) } def
/len { sequence length } bind def

/coor [
[89.06055450 364.78149414]
[85.70166779 349.09399414]
[95.98343658 336.77877808]
[95.98343658 321.77877808]
[95.98343658 306.77877808]
[95.98343658 291.77877808]
[95.98343658 276.77877808]
[95.98343658 261.77877808]
[95.98343658 246.77876282]
[95.98343658 231.77876282]
[83.61798096 220.49893188]
[83.14158630 203.43283081]
[95.32787323 191.00152588]
[94.86137390 176.00878906]
[94.39488220 161.01603699]
[93.92838287 146.02330017]
[93.46188354 131.03054810]
[82.27497101 128.09259033]
[72.41559601 121.08862305]
[65.36425781 110.62003326]
[62.33026886 97.82459259]
[64.05968475 84.25556183]
[70.69632721 71.69326019]
[81.71889496 61.91204834]
[67.83848572 56.22571945]
[58.53012466 55.84231949]
[53.61926651 50.14065933]
[39.92241669 44.02540588]
[26.22556686 37.91015244]
[10.78853989 42.27795792]
[-2.16671419 32.81534958]
[-2.70203257 16.78123093]
[9.59323502 6.47560310]
[25.28721237 9.80406380]
[32.34082031 24.21330261]
[46.03767014 30.32855606]
[59.73451996 36.44380951]
[73.52481842 42.34531403]
[87.40522003 48.03163910]
[99.98951721 39.86857605]
[100.45600891 24.87583351]
[100.92250824 9.88308907]
[101.38900757 -5.10965538]
[101.62228394 -20.10784149]
[101.62228394 -35.10784149]
[101.62228394 -50.10784149]
[101.62228394 -65.10784149]
[101.62228394 -80.10784149]
[92.95858002 -94.03164673]
[100.92271423 -108.36708069]
[117.32186127 -108.36708069]
[125.28598785 -94.03164673]
[116.62228394 -80.10784149]
[116.62228394 -65.10784149]
[116.62228394 -50.10784149]
[116.62228394 -35.10784149]
[116.62228394 -20.10784149]
[119.82653046 -13.29914665]
[116.38175201 -4.64315748]
[115.91525269 10.34958649]
[115.44875336 25.34233093]
[114.98226166 40.33507538]
[120.16040802 45.76063919]
[127.75770569 32.82691956]
[134.83186340 19.59981918]
[149.69445801 17.57416344]
[160.05035400 28.42568588]
[157.33258057 43.17742157]
[143.79069519 49.62597656]
[130.51670837 56.61177063]
[135.69485474 62.03733826]
[150.69303894 62.27061462]
[165.69122314 62.50389099]
[180.68942261 62.73716736]
[196.62066650 56.93788910]
[206.60351562 70.64113617]
[196.19932556 84.02729034]
[180.45614624 77.73535156]
[165.45794678 77.50207520]
[150.45976257 77.26879883]
[135.46157837 77.03552246]
[134.56852722 113.13511658]
[108.45462799 130.56405640]
[108.92112732 145.55679321]
[109.38762665 160.54954529]
[109.85411835 175.54228210]
[110.32061768 190.53503418]
[121.20525360 198.64672852]
[125.31575012 211.37875366]
[121.34692383 223.95060730]
[110.98343658 231.77876282]
[110.98343658 246.77876282]
[110.98343658 261.77877808]
[110.98343658 276.77877808]
[110.98343658 291.77877808]
[110.98343658 306.77877808]
[110.98343658 321.77877808]
[110.98343658 336.77877808]
[121.26520538 349.09399414]
[117.90632629 364.78149414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 98]
[4 97]
[5 96]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[24 39]
[25 38]
[27 37]
[28 36]
[29 35]
[40 62]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
