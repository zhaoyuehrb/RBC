%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGUGCGUGGAGCAGUCGGGGCUGGAGGCGAGGCCGCCGGGCGGGCAGGGGUUGUGGCGCGGCAAGCGGCGGGCCAGCGACGGCGCGAAUGGCGGACUCUCAGCUGUUCUGUGUGGCGGAGGAACGCAGCGGCCACUGCGCCGUGGUGGACGGAAACUUCCUCUACGUGUGGGGGGGCUACGUGUCUA\
) } def
/len { sequence length } bind def

/coor [
[220.26377869 179.91987610]
[207.35641479 172.27789307]
[194.44905090 164.63589478]
[181.54168701 156.99391174]
[167.96553040 163.06233215]
[153.24514771 159.93594360]
[143.06933594 148.60870361]
[141.49635315 133.28448486]
[128.58900452 125.64248657]
[115.68163300 118.00049591]
[102.17062378 123.77436066]
[87.83739471 120.54270172]
[78.11125183 109.52965546]
[76.67636871 94.90686035]
[63.76901245 87.26486969]
[50.86164856 79.62287903]
[37.95428848 71.98088837]
[25.73411369 78.37806702]
[12.05738163 77.90102386]
[0.49707422 70.78151703]
[-5.97969961 58.97260284]
[-5.77299309 45.61405563]
[-18.55291748 37.76080704]
[-31.33284187 29.90755653]
[-44.11276627 22.05430794]
[-56.89268875 14.20105743]
[-69.67261505 6.34780741]
[-74.05319977 6.38682413]
[-77.83254242 5.14548063]
[-80.68006897 2.97289824]
[-82.41371918 0.29001984]
[-83.01055145 -2.46549177]
[-95.24651337 -11.14196777]
[-107.48247528 -19.81844330]
[-123.21520233 -21.48934746]
[-129.12173462 -35.16275787]
[-141.35769653 -43.83923340]
[-153.59365845 -52.51570892]
[-165.82962036 -61.19218826]
[-178.06558228 -69.86865997]
[-190.30154419 -78.54513550]
[-205.68493652 -76.09786987]
[-217.97033691 -85.07135773]
[-220.20863342 -99.75214386]
[-232.44459534 -108.42861938]
[-248.17732239 -110.09952545]
[-254.08384705 -123.77293396]
[-266.31979370 -132.44941711]
[-275.35095215 -129.63557434]
[-284.52664185 -131.27859497]
[-291.80194092 -136.88337708]
[-295.61511230 -145.08656311]
[-295.22204590 -153.98628235]
[-307.01513672 -163.25573730]
[-318.80825806 -172.52517700]
[-330.60134888 -181.79461670]
[-342.47030640 -190.96676636]
[-354.41427612 -200.04100037]
[-366.35824585 -209.11521912]
[-378.30221558 -218.18945312]
[-393.97146606 -220.37690735]
[-399.42507935 -234.23718262]
[-411.36904907 -243.31141663]
[-426.18637085 -238.70423889]
[-440.87106323 -243.71823120]
[-449.77648926 -256.42541504]
[-449.47839355 -271.93963623]
[-440.09133911 -284.29534912]
[-425.22491455 -288.74151611]
[-410.59548950 -283.56851196]
[-401.82843018 -270.76544189]
[-402.29483032 -255.25538635]
[-390.35086060 -246.18115234]
[-375.53591919 -244.64274597]
[-369.22799683 -230.13342285]
[-357.28402710 -221.05918884]
[-345.34005737 -211.98497009]
[-333.39608765 -202.91073608]
[-326.15573120 -201.36511230]
[-321.33190918 -193.58772278]
[-309.53881836 -184.31828308]
[-297.74569702 -175.04884338]
[-285.95260620 -165.77938843]
[-265.35263062 -164.66810608]
[-257.64334106 -144.68537903]
[-245.40736389 -136.00889587]
[-230.54983521 -134.95860291]
[-223.76811218 -120.66458130]
[-211.53215027 -111.98810577]
[-196.93754578 -114.73274994]
[-184.40493774 -106.10787201]
[-181.62506104 -90.78109741]
[-169.38909912 -82.10462189]
[-157.15313721 -73.42814636]
[-144.91717529 -64.75167084]
[-132.68121338 -56.07519531]
[-120.44525909 -47.39871979]
[-105.58773041 -46.34841537]
[-98.80599976 -32.05440521]
[-86.57003784 -23.37792969]
[-74.33407593 -14.70145416]
[-61.81936646 -6.43211699]
[-49.03944016 1.42113304]
[-36.25951767 9.27438259]
[-23.47959137 17.12763214]
[-10.69966793 24.98088264]
[2.08025694 32.83413315]
[17.03717613 26.08785439]
[33.23151398 29.61532784]
[44.24619293 42.22127151]
[45.59627914 59.07352829]
[58.50364304 66.71552277]
[71.41100311 74.35751343]
[84.31836700 81.99950409]
[97.82937622 76.22563934]
[112.16260529 79.45729828]
[121.88874817 90.47034454]
[123.32363129 105.09313965]
[136.23098755 112.73513031]
[149.13835144 120.37712097]
[163.33078003 114.38703156]
[178.15571594 117.86185455]
[187.97573853 129.26496887]
[189.18368530 144.08654785]
[202.09104919 151.72853088]
[214.99841309 159.37052917]
[227.90576172 167.01251221]
[241.05749512 174.22584534]
[254.43934631 181.00271606]
[267.82119751 187.77957153]
[284.33325195 182.02743530]
[299.60006714 189.83567810]
[304.40744019 205.94374084]
[317.89895630 212.49958801]
[331.39047241 219.05543518]
[344.88195801 225.61128235]
[360.67596436 224.68354797]
[368.74166870 237.20527649]
[382.23315430 243.76112366]
[398.02716064 242.83338928]
[406.09286499 255.35511780]
[419.58435059 261.91098022]
[433.07586670 268.46682739]
[446.62084961 274.91149902]
[460.21835327 281.24456787]
[473.81585693 287.57760620]
[487.41339111 293.91067505]
[501.01089478 300.24374390]
[516.78747559 299.05636597]
[525.05804443 311.44372559]
[538.65557861 317.77679443]
[552.25305176 324.10986328]
[565.75531006 316.46337891]
[581.16949463 318.24710083]
[592.56860352 328.77517700]
[595.56939697 343.99932861]
[589.01806641 358.06555176]
[575.43365479 365.56512451]
[560.03967285 363.61428833]
[548.75549316 352.96319580]
[545.91998291 337.70736694]
[532.32250977 331.37429810]
[518.72497559 325.04125977]
[503.92098999 326.68161011]
[494.67782593 313.84124756]
[481.08032227 307.50817871]
[467.48281860 301.17514038]
[453.88528442 294.84207153]
[440.28778076 288.50900269]
[432.88433838 288.53497314]
[426.52001953 281.95834351]
[413.02850342 275.40249634]
[399.53701782 268.84661865]
[384.70803833 270.24328613]
[375.67730713 257.25262451]
[362.18582153 250.69679260]
[347.35684204 252.09344482]
[338.32611084 239.10279846]
[324.83462524 232.54695129]
[311.34310913 225.99110413]
[297.85159302 219.43524170]
[286.37384033 225.31278992]
[273.41384888 223.47370911]
[263.74078369 214.36819458]
[261.04434204 201.16142273]
[247.66249084 194.38456726]
[234.28062439 187.60771179]
[231.56481934 188.36494446]
[228.38304138 188.08270264]
[225.13313293 186.57716370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 127]
[2 126]
[3 125]
[4 124]
[8 120]
[9 119]
[10 118]
[14 114]
[15 113]
[16 112]
[17 111]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[27 102]
[32 101]
[33 100]
[34 99]
[36 97]
[37 96]
[38 95]
[39 94]
[40 93]
[41 92]
[44 89]
[45 88]
[47 86]
[48 85]
[53 83]
[54 82]
[55 81]
[56 80]
[57 78]
[58 77]
[59 76]
[60 75]
[62 73]
[63 72]
[128 187]
[129 186]
[130 185]
[133 181]
[134 180]
[135 179]
[136 178]
[138 176]
[139 175]
[141 173]
[142 172]
[143 171]
[144 169]
[145 168]
[146 167]
[147 166]
[148 165]
[150 163]
[151 162]
[152 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
