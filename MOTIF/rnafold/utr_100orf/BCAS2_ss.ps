%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACUGAGUUUACGCAGACGCAGAAAACGCAGGCAAACCUGAGGUCCUCAGAAUGGCGGGCACAGGUUUGGUGGCUGGAGAGGUUGUGGUGGAUGCGCUGCCGUAUUUUGAUCAAGGUUAUGAAGCCCCUGGUGUGCGGGAAGCGGCUGCAG\
) } def
/len { sequence length } bind def

/coor [
[74.66378784 253.17167664]
[69.80398560 267.51257324]
[60.54905319 279.49691772]
[47.90288925 287.82479858]
[33.23725510 291.59280396]
[18.14297295 290.39224243]
[4.25735378 284.35336304]
[-6.91339207 274.13116455]
[-14.15754604 260.83450317]
[-16.68931770 245.90571594]
[-14.23407745 230.96414185]
[-7.05815315 217.63055420]
[4.06006527 207.35125732]
[17.91455650 201.24127197]
[33.00249100 199.96339417]
[36.63791656 185.41059875]
[40.27334213 170.85781860]
[43.90876770 156.30502319]
[39.48675156 142.08197021]
[50.33800507 130.56846619]
[53.97343063 116.01567841]
[57.60885620 101.46289062]
[50.83239365 114.84495544]
[37.28230667 121.27885437]
[22.62908745 118.07212067]
[13.00487041 106.56671143]
[12.43723392 91.57746124]
[21.16372490 79.37711334]
[35.53244781 75.07133484]
[49.53129578 80.46282196]
[37.08054352 72.09748840]
[22.56973648 77.26882172]
[7.96697569 72.95457458]
[-1.18706203 61.01021576]
[-1.54815638 46.14389420]
[-13.99890995 37.77856064]
[-26.44966316 29.41323280]
[-38.90041733 21.04790306]
[-51.35116959 12.68257236]
[-63.80192184 4.31724215]
[-76.25267792 -4.04808760]
[-88.70343018 -12.41341782]
[-101.52731323 -10.70257568]
[-111.73767853 -17.97557259]
[-114.15074158 -29.86746979]
[-126.42826080 -38.48503494]
[-138.70578003 -47.10260391]
[-150.98330688 -55.72016907]
[-163.34808350 -64.21205902]
[-175.79884338 -72.57739258]
[-188.24958801 -80.94271851]
[-204.76884460 -84.75725555]
[-205.67636108 -101.68689728]
[-189.65956116 -107.24554443]
[-179.88426208 -93.39347076]
[-167.43351746 -85.02814484]
[-154.98275757 -76.66281128]
[-147.63247681 -75.53624725]
[-142.36573792 -67.99768829]
[-130.08822632 -59.38012314]
[-117.81069946 -50.76255798]
[-105.53317261 -42.14499283]
[-88.01933289 -41.56908798]
[-80.33809662 -24.86417007]
[-67.88734436 -16.49884033]
[-55.43659210 -8.13351059]
[-42.98583984 0.23181921]
[-30.53508568 8.59714890]
[-18.08433342 16.96247864]
[-5.63357973 25.32780838]
[6.81717348 33.69313812]
[20.71718407 28.40847206]
[35.23541641 32.36888885]
[44.74898911 44.25776291]
[45.44587326 59.64673615]
[57.89662552 68.01206970]
[72.81866455 66.48471832]
[83.31652832 55.77048492]
[93.81439209 45.05625153]
[97.95214081 27.14160347]
[114.98615265 23.02955437]
[125.26327515 12.10340786]
[135.54040527 1.17726076]
[145.81753540 -9.74888611]
[156.09465027 -20.67503357]
[159.75685120 -40.45772934]
[178.42564392 -45.35741806]
[188.24855042 -56.69366074]
[198.07145691 -68.02990723]
[207.89437866 -79.36614990]
[217.71728516 -90.70239258]
[227.54019165 -102.03863525]
[230.11076355 -118.23506165]
[245.51736450 -123.85366821]
[257.91101074 -113.11450958]
[254.54217529 -97.06511688]
[238.87643433 -92.21572113]
[229.05352783 -80.87947845]
[219.23062134 -69.54323578]
[209.40769958 -58.20699310]
[199.58479309 -46.87075043]
[189.76188660 -35.53450394]
[191.40634155 -25.37495995]
[187.06686401 -15.80034733]
[177.96968079 -10.10592270]
[167.02079773 -10.39790726]
[156.74368286 0.52823949]
[146.46655273 11.45438671]
[136.18942261 22.38053322]
[125.91230011 33.30667877]
[125.95841980 45.44084549]
[117.43319702 54.63152313]
[104.52863312 55.55411530]
[94.03076172 66.26834869]
[83.53289795 76.98258972]
[111.07594299 71.69354248]
[131.81838989 93.42240906]
[146.21078491 97.64839172]
[160.60317993 101.87438202]
[174.99557495 106.10037231]
[190.79621887 101.71039581]
[202.30720520 113.39068604]
[197.68704224 129.12554932]
[181.68853760 132.72831726]
[170.76959229 120.49276733]
[156.37719727 116.26677704]
[141.98480225 112.04078674]
[127.59240723 107.81480408]
[119.87266541 120.67581177]
[130.37052917 131.39004517]
[140.86839294 142.10427856]
[151.36625671 152.81851196]
[167.32925415 154.41929626]
[175.90907288 167.97532654]
[170.52401733 183.08760071]
[155.30503845 188.16326904]
[141.92683411 179.30870056]
[140.65202332 163.31637573]
[130.15415955 152.60214233]
[119.65629578 141.88790894]
[109.15842438 131.17367554]
[91.62453461 129.94532776]
[78.06105042 120.01626587]
[72.16164398 105.09832001]
[68.52622223 119.65110779]
[64.89079285 134.20390320]
[69.05278015 149.46784973]
[58.46155930 159.94044495]
[54.82612991 174.49324036]
[51.19070435 189.04603577]
[47.55527878 203.59881592]
[60.26975250 211.82200623]
[69.62329102 223.72956848]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 151]
[16 150]
[17 149]
[18 148]
[20 146]
[21 145]
[22 144]
[30 76]
[31 75]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[45 62]
[46 61]
[47 60]
[48 59]
[49 57]
[50 56]
[51 55]
[77 115]
[78 114]
[79 113]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[117 128]
[118 127]
[119 126]
[120 125]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
