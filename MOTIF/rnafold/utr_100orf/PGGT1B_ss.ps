%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGUCGCUUCCGGAGCAGCAUGGCGGCCACUGAGGAUGAGAGGCUAGCAGGGAGCGGUGAGGGAGAGCGGCUGGAUUUCUUACGGGAUCGGCACGUGCGAUUUUUCCAGCGCUGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[103.98007202 122.49165344]
[92.60607910 121.61123657]
[83.07651520 115.33985901]
[77.76853943 105.24192047]
[62.84804153 103.69960785]
[47.92754364 102.15729523]
[33.00704575 100.61497498]
[18.08654594 99.07266235]
[3.16604805 97.53034973]
[-11.75444984 95.98802948]
[-26.67494774 94.44571686]
[-41.59544754 92.90340424]
[-56.51594543 91.36108398]
[-64.66523743 98.78863525]
[-75.34898376 100.40434265]
[-84.92978668 95.90628052]
[-90.28263092 87.03269196]
[-105.10395050 84.72433472]
[-119.95375824 82.60698700]
[-134.82960510 80.68101501]
[-149.70544434 78.75503540]
[-159.07197571 90.84699249]
[-173.14051819 96.58918762]
[-188.09495544 94.53219604]
[-199.93270874 85.32766724]
[-205.53605652 71.52664948]
[-220.41189575 69.60066986]
[-235.09130859 75.50200653]
[-246.71977234 66.19458771]
[-261.59561157 64.26861572]
[-275.12905884 72.88402557]
[-290.25543213 67.53869629]
[-295.37106323 52.33311081]
[-286.55166626 38.93169022]
[-270.56277466 37.61485672]
[-259.66964722 49.39277649]
[-244.79379272 51.31875229]
[-231.17842102 45.27965546]
[-218.48593140 54.72483063]
[-203.61009216 56.65080643]
[-194.67677307 44.73184967]
[-180.88520813 38.84554672]
[-165.89999390 40.66484451]
[-153.75769043 49.80056000]
[-147.77946472 63.87919998]
[-132.90362549 65.80517578]
[-118.02778625 67.73114777]
[-110.90604401 65.44252014]
[-102.79559326 69.90301514]
[-87.97427368 72.21137238]
[-70.61645508 63.85123825]
[-54.97362900 76.44058990]
[-40.05313110 77.98290253]
[-25.13263321 79.52522278]
[-10.21213531 81.06753540]
[4.70836306 82.60984802]
[19.62886047 84.15216064]
[34.54935837 85.69448090]
[49.46985626 87.23679352]
[64.39035797 88.77910614]
[79.31085205 90.32142639]
[92.67975616 78.36369324]
[110.56266785 79.74794769]
[121.93213654 93.62058258]
[136.91224670 94.39276123]
[151.89236450 95.16493988]
[166.87246704 95.93712616]
[175.72383118 93.22994995]
[182.22685242 96.92695618]
[197.18211365 98.08459473]
[212.13737488 99.24222565]
[227.09263611 100.39985657]
[242.04789734 101.55748749]
[257.02801514 102.32966614]
[272.02304077 102.71588898]
[287.01806641 103.10210419]
[302.01309204 103.48832703]
[315.12112427 89.93995667]
[333.65533447 90.14703369]
[346.02789307 103.52093506]
[361.02291870 103.13471222]
[374.61929321 95.04465485]
[387.54156494 102.45169067]
[402.53659058 102.06546783]
[417.53161621 101.67925262]
[432.52664185 101.29302979]
[440.44229126 88.05120087]
[454.27059937 81.21146393]
[469.59896851 82.95635223]
[481.53619385 92.72907257]
[486.27313232 107.41120148]
[482.29827881 122.31771088]
[470.87997437 132.69198608]
[455.66174316 135.22364807]
[441.49969482 129.10484314]
[432.91287231 116.28805542]
[417.91784668 116.67427826]
[402.92282104 117.06049347]
[387.92779541 117.44671631]
[375.40396118 125.50914764]
[361.40914917 118.12973785]
[346.41412354 118.51596069]
[340.44937134 128.40327454]
[330.32098389 134.19583130]
[318.53326416 134.32615662]
[308.06723022 128.64384460]
[301.62686157 118.48335266]
[286.63183594 118.09712982]
[271.63681030 117.71091461]
[256.64178467 117.32469940]
[252.54867554 119.99014282]
[246.71537781 120.02965546]
[240.89027405 116.51274872]
[225.93501282 115.35511780]
[210.97973633 114.19748688]
[196.02447510 113.03985596]
[181.06921387 111.88222504]
[166.10029602 110.91723633]
[151.12017822 110.14505768]
[136.14006042 109.37287140]
[121.15995789 108.60069275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[17 50]
[18 49]
[19 47]
[20 46]
[21 45]
[26 40]
[27 39]
[29 37]
[30 36]
[64 121]
[65 120]
[66 119]
[67 118]
[69 117]
[70 116]
[71 115]
[72 114]
[73 113]
[74 110]
[75 109]
[76 108]
[77 107]
[80 102]
[81 101]
[83 99]
[84 98]
[85 97]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
