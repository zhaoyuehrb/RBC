%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCGCCGCCGCCGGCUCGGUCCCGCGCCCGCCAUGGCCCGCCUGACGGAGAGCGAGGCGCGCCGGCAGCAGCAGCAGCUCCUGCAGCCGCGGCCCUCGCCCGUGGGCAGCAGCGGGCCCGAGCCCCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[46.59863281 554.69610596]
[41.70841217 569.32794189]
[29.66965103 578.97528076]
[14.32387447 580.55981445]
[0.56786323 573.57586670]
[-7.20888853 560.25195312]
[-6.52484798 544.83978271]
[2.40171003 532.25726318]
[16.72235298 526.51940918]
[19.45870399 511.77111816]
[17.56942558 504.55734253]
[22.43059158 496.71771240]
[25.50439262 482.03601074]
[28.57819176 467.35433960]
[18.78430748 453.73141479]
[21.89273262 436.90136719]
[36.46877289 427.30520630]
[39.20512390 412.55691528]
[41.94147491 397.80859375]
[44.67782593 383.06030273]
[47.41417694 368.31201172]
[50.15052795 353.56369019]
[52.88687897 338.81539917]
[47.60116196 324.89022827]
[57.72610855 312.73309326]
[60.46245956 297.98477173]
[63.19881058 283.23648071]
[65.93515778 268.48818970]
[68.67150879 253.73988342]
[71.23858643 238.96118164]
[73.63604736 224.15400696]
[63.02670670 213.73384094]
[60.55833817 198.88894653]
[67.38430023 185.27792358]
[81.07422638 178.21449280]
[83.47168732 163.40733337]
[85.86915588 148.60015869]
[88.26661682 133.79299927]
[90.66407776 118.98583221]
[93.06154633 104.17866516]
[78.18603516 107.57765961]
[62.21912766 104.80883789]
[49.71136856 96.52898407]
[37.20360947 88.24913788]
[21.25911522 90.02471161]
[10.03215885 78.56456757]
[12.13509846 62.65993500]
[25.95474052 54.51149750]
[40.88983536 60.37003326]
[45.48345947 75.74137878]
[57.99122238 84.02122498]
[70.49897766 92.30107880]
[77.78262329 90.51263428]
[81.96829224 76.10845947]
[92.34991455 86.93574524]
[99.63355255 85.14730072]
[106.88396454 72.01598358]
[114.13436890 58.88465881]
[121.38477325 45.75333786]
[128.63517761 32.62201691]
[135.88558960 19.49069405]
[137.31715393 10.37798023]
[143.45578003 6.14417887]
[151.00537109 -6.81744337]
[147.19467163 -21.92096329]
[155.03567505 -34.95834351]
[169.45805359 -38.49818802]
[177.00764465 -51.45980835]
[184.55723572 -64.42143250]
[192.10682678 -77.38305664]
[192.36668396 -93.20212555]
[205.45825195 -100.30563354]
[213.00785828 -113.26725769]
[220.55744934 -126.22888184]
[228.10704041 -139.19050598]
[228.36688232 -155.00956726]
[241.45846558 -162.11308289]
[249.00805664 -175.07470703]
[251.75529480 -191.80458069]
[268.59188843 -193.79600525]
[275.16629028 -178.16867065]
[261.96966553 -167.52511597]
[254.42008972 -154.56349182]
[254.70024109 -139.67152405]
[241.06866455 -131.64091492]
[233.51907349 -118.67928314]
[225.96946716 -105.71766663]
[218.41987610 -92.75604248]
[218.70002747 -77.86407471]
[205.06845093 -69.83345795]
[197.51885986 -56.87183762]
[189.96926880 -43.91021729]
[182.41967773 -30.94859505]
[186.45614624 -16.65725327]
[178.98443604 -3.40477800]
[163.96699524 0.73214972]
[156.41740417 13.69377136]
[149.01690674 26.74110031]
[141.76651001 39.87242126]
[134.51609802 53.00374222]
[127.26569366 66.13506317]
[120.01528168 79.26638794]
[112.76487732 92.39770508]
[107.86870575 106.57612610]
[105.47124481 121.38329315]
[103.07378387 136.19046021]
[100.67632294 150.99761963]
[98.27885437 165.80479431]
[95.88139343 180.61195374]
[106.64299011 191.63439941]
[108.82521820 206.70394897]
[101.79861450 220.01148987]
[88.44321442 226.55146790]
[86.04575348 241.35864258]
[87.77110291 250.42031860]
[83.41981506 256.47622681]
[80.68346405 271.22454834]
[77.94711304 285.97283936]
[75.21076202 300.72113037]
[72.47441101 315.46945190]
[77.56439972 330.44949341]
[67.63517761 341.55175781]
[64.89882660 356.30004883]
[62.16247940 371.04833984]
[59.42612839 385.79666138]
[56.68977737 400.54495239]
[53.95342636 415.29324341]
[51.21707153 430.04156494]
[60.09798813 440.23773193]
[61.43699265 453.49673462]
[54.96619415 464.92300415]
[43.25987244 470.42813110]
[40.18607330 485.10983276]
[37.11227417 499.79150391]
[34.20700455 514.50744629]
[31.47065353 529.25573730]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 136]
[10 135]
[12 134]
[13 133]
[14 132]
[17 128]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 114]
[31 113]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[42 52]
[43 51]
[44 50]
[56 103]
[57 102]
[58 101]
[59 100]
[60 99]
[61 98]
[63 97]
[64 96]
[67 93]
[68 92]
[69 91]
[70 90]
[72 88]
[73 87]
[74 86]
[75 85]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
