%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCGGGCUGGCAGCAGGGCCCCAGCGGCACCAUGUCUGCCCUCGGAGUCACCGUGGCCCUGCUGGUGUGGGCGGCCUUCCUCCUGCUGGUGUCCAUGUGGAGGCAGGUGCACAGCAGCUGGAAUCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[105.26009369 131.76338196]
[93.26380920 131.48339844]
[82.20323181 126.83012390]
[73.61476898 118.44993591]
[59.65778732 123.94563293]
[45.70080948 129.44132996]
[31.74382782 134.93704224]
[17.78684807 140.43273926]
[13.27773762 145.47348022]
[7.72535801 147.15460205]
[3.04463625 145.84199524]
[-11.15459919 150.67745972]
[-25.35383415 155.51292419]
[-39.55307007 160.34838867]
[-53.75230408 165.18385315]
[-67.89388275 170.18542480]
[-81.97586060 175.35243225]
[-95.99629974 180.68415833]
[-109.95327759 186.17985535]
[-123.84487915 191.83877563]
[-137.66918945 197.66015625]
[-151.49349976 203.48153687]
[-158.85319519 217.73686218]
[-174.61466980 220.72944641]
[-186.68707275 210.16360474]
[-185.80947876 194.14457703]
[-172.65512085 184.96076965]
[-157.31488037 189.65722656]
[-143.49057007 183.83584595]
[-129.66625977 178.01446533]
[-124.67597198 172.46755981]
[-115.44898224 172.22286987]
[-101.49200439 166.72717285]
[-96.37304688 161.29876709]
[-87.14286041 161.27046204]
[-73.06088257 156.10345459]
[-67.81608582 150.79653931]
[-58.58776855 150.98461914]
[-44.38853455 146.14915466]
[-30.18929863 141.31369019]
[-15.99006367 136.47822571]
[-1.79082882 131.64276123]
[12.29114819 126.47575378]
[26.24812698 120.98005676]
[40.20510864 115.48435211]
[54.16208649 109.98865509]
[68.11906433 104.49295044]
[68.15060425 95.28867340]
[70.78519440 86.46945190]
[75.80751038 78.75608063]
[82.80708313 72.77897644]
[77.97161865 58.57974243]
[73.13615417 44.38050842]
[68.30068207 30.18127060]
[63.47682953 25.44084358]
[62.05780792 19.81576920]
[63.58837509 15.20171738]
[59.42377472 0.79144001]
[55.25917435 -13.61883736]
[45.05296707 -27.15655136]
[55.23626328 -40.71150589]
[71.08050537 -34.67856216]
[69.66944885 -17.78343773]
[73.83405304 -3.37316012]
[77.99864960 11.03711796]
[82.49992371 25.34580612]
[87.33538818 39.54504013]
[92.17085266 53.74427795]
[97.00631714 67.94351196]
[119.34921265 74.26697540]
[131.62736511 93.97582245]
[146.61087036 94.67890930]
[161.59439087 95.38199615]
[176.57789612 96.08507538]
[191.56141663 96.78816223]
[206.54492188 97.49124146]
[216.64614868 89.37297058]
[229.16731262 90.32249451]
[237.38435364 99.27936554]
[252.34727478 100.33351135]
[267.31018066 101.38765717]
[282.27310181 102.44179535]
[294.14431763 92.35657501]
[309.30383301 93.63877869]
[318.84539795 105.01832581]
[333.80831909 106.07247162]
[348.77120972 107.12661743]
[363.73413086 108.18075562]
[378.69705200 109.23490143]
[393.65997314 110.28904724]
[402.53512573 107.75357056]
[408.95996094 111.54733276]
[423.89407349 112.95195770]
[438.82815552 114.35658264]
[453.77767944 115.58604431]
[468.74060059 116.64019012]
[477.61575317 114.10472107]
[484.04058838 117.89848328]
[498.97470093 119.30310059]
[513.90875244 120.70772552]
[528.58270264 113.38593292]
[542.10937500 122.65746307]
[540.57373047 138.98455811]
[525.55548096 145.57128906]
[512.50415039 135.64181519]
[497.57006836 134.23719788]
[482.63598633 132.83256531]
[467.68646240 131.60310364]
[452.72354126 130.54896545]
[445.76519775 133.24206543]
[437.42352295 129.29066467]
[422.48944092 127.88604736]
[407.55535889 126.48142242]
[392.60580444 125.25196075]
[377.64291382 124.19781494]
[362.67999268 123.14366913]
[347.71707153 122.08953094]
[332.75415039 121.03538513]
[317.79125977 119.98123932]
[306.74847412 129.91061401]
[291.55892944 129.05471802]
[281.21896362 117.40470886]
[266.25604248 116.35057068]
[251.29313660 115.29642487]
[236.33021545 114.24228668]
[221.04661560 122.78500366]
[205.84184265 112.47475433]
[190.85832214 111.77167511]
[175.87481689 111.06858826]
[160.89129639 110.36550903]
[145.90779114 109.66242218]
[130.92427063 108.95933533]
[125.49577332 119.66077423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 36]
[17 35]
[18 33]
[19 32]
[20 30]
[21 29]
[22 28]
[51 69]
[52 68]
[53 67]
[54 66]
[57 65]
[58 64]
[59 63]
[71 132]
[72 131]
[73 130]
[74 129]
[75 128]
[76 127]
[79 125]
[80 124]
[81 123]
[82 122]
[85 119]
[86 118]
[87 117]
[88 116]
[89 115]
[90 114]
[92 113]
[93 112]
[94 111]
[95 109]
[96 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
