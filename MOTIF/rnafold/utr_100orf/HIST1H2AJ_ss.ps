%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCUGGGCGUGGUAAGCAGGGAGGCAAAGCUCGCGCCAAGGCCAAGACCCGCUCUUCUCGGGCCGGGCUUCAGUUUCCCGUAGGCCGAGUGCAUCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.16233063 345.93338013]
[73.71752930 335.77093506]
[68.31724548 321.44976807]
[70.20240021 306.26080322]
[78.93981934 293.69433594]
[92.52169800 286.63806152]
[92.52169800 271.63806152]
[84.78440094 258.91079712]
[92.52169800 245.11061096]
[92.52169800 230.11061096]
[84.78440094 217.38333130]
[92.52169800 203.58316040]
[92.52169800 188.58316040]
[92.52169800 173.58316040]
[92.52169800 158.58316040]
[81.84082794 148.26548767]
[81.62714386 133.05334473]
[92.52169800 121.92022705]
[92.52169800 106.92022705]
[89.32625580 99.35159302]
[92.76222992 91.45554352]
[93.22872925 76.46279907]
[93.69522858 61.47005463]
[94.16172791 46.47731018]
[94.62821960 31.48456573]
[95.09471893 16.49182129]
[95.56121826 1.49907768]
[86.45547485 -14.41106129]
[96.06412506 -29.00473976]
[96.06412506 -44.00473785]
[96.06412506 -59.00473785]
[96.06412506 -74.00473785]
[96.06412506 -89.00473785]
[96.06412506 -104.00473785]
[96.06412506 -119.00473785]
[92.89021301 -127.76367188]
[96.30465698 -134.46942139]
[96.77114868 -149.46217346]
[97.23764801 -164.45491028]
[86.69460297 -175.92146301]
[87.38127899 -191.11959839]
[98.37786102 -201.10011292]
[98.84436035 -216.09286499]
[95.93711853 -222.35122681]
[96.65555573 -228.21582031]
[99.83490753 -231.99504089]
[101.23259735 -246.92977905]
[102.63028717 -261.86450195]
[104.02797699 -276.79925537]
[94.93846130 -290.01895142]
[99.74448395 -305.32522583]
[114.75926208 -310.97640991]
[128.46475220 -302.63739014]
[130.34727478 -286.70516968]
[118.96271515 -275.40158081]
[117.56502533 -260.46682739]
[116.16733551 -245.53208923]
[114.76964569 -230.59735107]
[113.83710480 -215.62635803]
[113.37060547 -200.63362122]
[123.72543335 -189.98875427]
[123.46591949 -174.77732849]
[112.23039246 -163.98841858]
[111.76389313 -148.99566650]
[111.29740143 -134.00292969]
[111.06412506 -119.00473785]
[111.06412506 -104.00473785]
[111.06412506 -89.00473785]
[111.06412506 -74.00473785]
[111.06412506 -59.00473785]
[111.06412506 -44.00473785]
[111.06412506 -29.00473976]
[119.44651031 -20.13042068]
[119.46361542 -7.51993704]
[110.55396271 1.96557558]
[110.08746338 16.95832062]
[109.62096405 31.95106316]
[109.15446472 46.94380951]
[108.68797302 61.93655396]
[108.22147369 76.92929840]
[107.75497437 91.92204285]
[107.52169800 106.92022705]
[107.52169800 121.92022705]
[118.41625214 133.05334473]
[118.20256805 148.26548767]
[107.52169800 158.58316040]
[107.52169800 173.58316040]
[107.52169800 188.58316040]
[107.52169800 203.58316040]
[115.25899506 217.38333130]
[107.52169800 230.11061096]
[107.52169800 245.11061096]
[115.25899506 258.91079712]
[107.52169800 271.63806152]
[107.52169800 286.63806152]
[121.10357666 293.69433594]
[129.84098816 306.26080322]
[131.72615051 321.44976807]
[126.32585907 335.77093506]
[114.88106537 345.93338013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 95]
[7 94]
[9 92]
[10 91]
[12 89]
[13 88]
[14 87]
[15 86]
[18 83]
[19 82]
[21 81]
[22 80]
[23 79]
[24 78]
[25 77]
[26 76]
[27 75]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[37 65]
[38 64]
[39 63]
[42 60]
[43 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
