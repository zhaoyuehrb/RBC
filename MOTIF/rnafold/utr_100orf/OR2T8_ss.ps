%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:54:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAAUGGGAGCUAUACCUCUUAUUUCAUUCUCCUAGGACUCUUUAACCACACCAGAGCCCACCAAGUCCUCUUCAUGAUGGUUCUGAGUAUCGUUU\
) } def
/len { sequence length } bind def

/coor [
[5.96025085 150.82357788]
[-13.68111038 144.79087830]
[-27.81739426 129.97587585]
[-42.02446747 134.78825378]
[-56.23154068 139.60064697]
[-70.02183533 145.50215149]
[-83.31200409 152.45710754]
[-96.60218048 159.41204834]
[-109.89234924 166.36700439]
[-123.18251801 173.32196045]
[-136.47268677 180.27691650]
[-149.76286316 187.23187256]
[-163.05302429 194.18681335]
[-176.34320068 201.14176941]
[-180.82328796 216.29777527]
[-194.74780273 223.77328491]
[-209.85559082 219.13320923]
[-217.18347168 205.13043213]
[-212.38392639 190.07254028]
[-198.30445862 182.89312744]
[-183.29815674 187.85160828]
[-170.00798035 180.89665222]
[-156.71780396 173.94169617]
[-143.42764282 166.98674011]
[-130.13746643 160.03178406]
[-116.84729767 153.07684326]
[-103.55712891 146.12188721]
[-90.26696014 139.16693115]
[-76.97679138 132.21197510]
[-76.34320831 129.78817749]
[-74.75622559 127.45133972]
[-72.24085999 125.54355621]
[-68.93706512 124.39326477]
[-65.09247589 124.27850342]
[-61.04392624 125.39356995]
[-46.83685303 120.58118439]
[-32.62977982 115.76879883]
[-32.84343719 105.71086121]
[-30.56729698 95.89688110]
[-25.93505859 86.93444824]
[-19.22650528 79.38021851]
[-10.85062218 73.70533752]
[-1.32066739 70.26605225]
[8.77727890 69.28134918]
[18.82036018 70.81905365]
[28.18735504 74.79116058]
[36.29711151 80.95887756]
[42.64459610 88.94696045]
[46.83234406 98.26651764]
[61.74354172 96.63673401]
[76.65473938 95.00695038]
[84.00012970 82.28176880]
[97.40612030 76.26808929]
[111.79465485 79.24385071]
[121.71547699 90.08184814]
[136.62667847 88.45206451]
[151.51072693 86.59058380]
[166.36402893 84.49785614]
[181.21731567 82.40512848]
[196.07061768 80.31239319]
[210.92391968 78.21966553]
[225.77722168 76.12693787]
[240.63050842 74.03420258]
[255.41154480 71.48055267]
[270.10601807 68.46844482]
[278.82464600 55.56019592]
[293.76983643 52.71482086]
[306.02215576 61.10626984]
[320.71661377 58.09416199]
[335.41107178 55.08205795]
[347.31152344 43.79882812]
[362.95422363 48.72207642]
[366.24728394 64.78718567]
[353.80310059 75.46775055]
[338.42318726 69.77651978]
[323.72872925 72.78862762]
[309.03427124 75.80072784]
[301.07153320 88.33590698]
[286.21215820 91.59993744]
[273.11810303 83.16291046]
[258.42364502 86.17501068]
[255.01225281 89.74617004]
[249.26043701 91.09755707]
[242.72325134 88.88750458]
[227.86994934 90.98023224]
[213.01664734 93.07296753]
[198.16334534 95.16569519]
[183.31004333 97.25842285]
[168.45675659 99.35115814]
[153.60345459 101.44388580]
[147.30839539 105.56670380]
[138.25645447 103.36326599]
[123.34526062 104.99304962]
[115.99987030 117.71823120]
[102.59387970 123.73191071]
[88.20534515 120.75614929]
[78.28452301 109.91815186]
[63.37332535 111.54793549]
[48.46212769 113.17771149]
[41.61329651 132.77111816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 37]
[4 36]
[5 35]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[49 99]
[50 98]
[51 97]
[55 93]
[56 92]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 81]
[65 80]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
