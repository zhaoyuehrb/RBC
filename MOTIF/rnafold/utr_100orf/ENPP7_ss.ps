%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCACCCUGUGUGCCUGUCCAUCUGGAAGGCCCAGCAUGAGAGGCCUGGCCGUCCUCCUCACUGUGGCUCUGGCCACGCUCCUGGCUCCCGGGGCCGGAGCACCGGUACAAAGUCAGGGCUCCCAGAACAAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[121.03722382 117.87992859]
[113.16023254 126.24499512]
[101.96626282 131.04820251]
[96.62263489 145.06410217]
[91.27901459 159.08001709]
[85.93538666 173.09591675]
[85.94248962 190.04986572]
[69.65307617 194.75001526]
[60.62725449 180.39831543]
[71.91947937 167.75228882]
[77.26309967 153.73638916]
[82.60672760 139.72047424]
[87.95035553 125.70456696]
[76.53318024 115.97583771]
[63.54280472 123.47583771]
[50.55242157 130.97584534]
[37.56204224 138.47584534]
[31.63119698 145.53852844]
[24.18948746 145.99484253]
[11.03174877 153.19720459]
[-2.12599039 160.39955139]
[-10.17977142 174.68481445]
[-26.57859612 174.58207703]
[-34.45276260 160.19703674]
[-25.70199966 146.32777405]
[-9.32834435 147.24182129]
[3.82939458 140.03945923]
[16.98713303 132.83711243]
[30.06204033 125.48545837]
[43.05242157 117.98545837]
[56.04280472 110.48545837]
[69.03318024 102.98545837]
[84.02918243 78.56124115]
[108.42501068 79.29131317]
[118.41110992 68.09855652]
[128.39721680 56.90580368]
[138.38331604 45.71304703]
[140.91687012 22.67896652]
[162.27684021 15.78249264]
[170.92704773 3.52794456]
[172.56419373 -12.20832920]
[186.22489929 -18.14417839]
[194.87510681 -30.39872742]
[203.52531433 -42.65327454]
[205.16246033 -58.38954926]
[218.82316589 -64.32540131]
[227.47337341 -76.57994843]
[236.12358093 -88.83449554]
[244.77377319 -101.08904266]
[253.42398071 -113.34358978]
[262.07418823 -125.59814453]
[262.91064453 -145.68229675]
[280.67315674 -153.19447327]
[288.75665283 -165.83003235]
[296.69577026 -178.55679321]
[304.48953247 -191.37307739]
[297.84744263 -198.63990784]
[293.29849243 -207.53651428]
[291.23626709 -217.46377563]
[291.88375854 -227.72967529]
[295.27230835 -237.59747314]
[301.23382568 -246.33863831]
[309.40756226 -253.28643799]
[319.26141357 -257.88665771]
[330.12612915 -259.74121094]
[331.82983398 -274.64413452]
[333.53353882 -289.54708862]
[335.23724365 -304.45001221]
[336.94094849 -319.35293579]
[329.91479492 -334.17065430]
[339.45559692 -347.50875854]
[355.74862671 -345.64614868]
[362.03298950 -330.49890137]
[351.84387207 -317.64923096]
[350.14016724 -302.74630737]
[348.43646240 -287.84338379]
[346.73278809 -272.94042969]
[345.02908325 -258.03750610]
[357.84536743 -250.24374390]
[370.29364014 -258.61276245]
[382.74191284 -266.98178101]
[395.19018555 -275.35076904]
[407.63848877 -283.71978760]
[413.07351685 -291.17074585]
[420.46673584 -292.13385010]
[433.10229492 -300.21734619]
[445.73785400 -308.30081177]
[458.37341309 -316.38427734]
[471.00897217 -324.46777344]
[481.09304810 -338.09671021]
[496.98089600 -332.17962646]
[495.69323730 -315.27462769]
[479.09246826 -311.83221436]
[466.45690918 -303.74871826]
[453.82135010 -295.66525269]
[441.18579102 -287.58178711]
[428.55023193 -279.49829102]
[416.00747681 -271.27151489]
[403.55920410 -262.90249634]
[391.11093140 -254.53349304]
[378.66265869 -246.16448975]
[366.21438599 -237.79547119]
[369.67459106 -213.74841309]
[359.22732544 -192.63267517]
[339.29626465 -181.51315308]
[317.30581665 -183.57931519]
[309.51205444 -170.76303101]
[308.71749878 -163.34979248]
[301.39221191 -157.74655151]
[293.30871582 -145.11099243]
[296.40786743 -135.26387024]
[293.46920776 -125.13770294]
[285.24307251 -118.19452667]
[274.32873535 -116.94793701]
[265.67852783 -104.69338989]
[257.02832031 -92.43884277]
[248.37812805 -80.18428802]
[239.72792053 -67.92974091]
[231.07771301 -55.67519379]
[230.05929565 -40.81544876]
[215.77986145 -34.00307083]
[207.12965393 -21.74852180]
[198.47944641 -9.49397373]
[197.46102905 5.36577272]
[183.18159485 12.17814922]
[174.53138733 24.43269730]
[177.54255676 31.11064148]
[178.00665283 38.49011230]
[175.81561279 45.62387466]
[171.20527649 51.57910919]
[164.73103333 55.55934525]
[157.20117188 57.01083755]
[149.57606506 55.69915009]
[139.58996582 66.89190674]
[129.60386658 78.08466339]
[119.61775970 89.27741241]
[123.99036407 97.62545776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[5 11]
[6 10]
[14 32]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[21 26]
[34 136]
[35 135]
[36 134]
[37 133]
[39 126]
[40 125]
[42 123]
[43 122]
[44 121]
[46 119]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[53 110]
[54 109]
[55 107]
[56 106]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[85 97]
[86 96]
[87 95]
[88 94]
[89 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
