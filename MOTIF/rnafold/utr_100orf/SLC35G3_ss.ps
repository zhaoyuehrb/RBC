%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:16:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUCCAAUGAGGUCACAAUGGCUGGAGCUCUGAGGGGCCCAGGCUCCCUGAGCCAGGAGGAGAGGAGAAAGUCCAAGGAAAGAUGGCUGGCAGUCACCCCUAUUUCAACCAGCCUGACUCCACACACCCAUCGCCGCCCUCCGCUCCACCCAGCCUCCGCUGGUACCAGCGCUGCCAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[63.86878586 341.16302490]
[58.62768555 355.25320435]
[49.30076218 367.01754761]
[36.81129074 375.31170654]
[22.38936806 379.33392334]
[7.45075512 378.70239258]
[2.26786613 392.77853394]
[-2.91502261 406.85467529]
[0.40404058 422.91442871]
[-12.02283573 433.61514282]
[-27.41194725 427.94879150]
[-29.93229485 411.74447632]
[-16.99116135 401.67178345]
[-11.80827141 387.59564209]
[-6.62538290 373.51953125]
[-18.40654373 364.31271362]
[-26.77648926 351.89843750]
[-30.90508842 337.48544312]
[-30.37592125 322.48175049]
[-25.22822952 308.35714722]
[-15.95432472 296.49926758]
[-3.45251322 288.07708740]
[11.05989265 283.92587280]
[26.16510963 284.46426392]
[31.34799957 270.38812256]
[36.53088760 256.31198120]
[41.71377563 242.23583984]
[46.89666748 228.15971375]
[52.07955551 214.08357239]
[57.14402390 199.96440125]
[62.08971405 185.80317688]
[67.03540039 171.64195251]
[63.92710495 157.07528687]
[75.78183746 146.59788513]
[80.72753143 132.43667603]
[85.67321777 118.27545166]
[76.63369751 106.30519104]
[61.65962219 107.18668365]
[46.68554306 108.06816864]
[31.71146774 108.94966125]
[16.74532318 109.95690155]
[1.78816855 111.08982086]
[-11.44151306 120.78041077]
[-26.33751488 113.92175293]
[-27.57610703 97.56944275]
[-13.88313198 88.54534149]
[0.65525109 96.13265991]
[15.61240673 94.99974060]
[22.05815887 91.35186768]
[30.82997894 93.97558594]
[45.80405426 93.09409332]
[60.77813339 92.21260071]
[75.75220490 91.33111572]
[87.49089813 81.99284363]
[91.71688080 67.60045624]
[95.94287109 53.20805740]
[100.16886139 38.81566238]
[98.97764587 32.27809906]
[100.98004150 26.93143082]
[104.78612518 24.01518631]
[109.49321747 9.77288055]
[114.20030975 -4.46942425]
[118.90740967 -18.71172905]
[123.61450195 -32.95403290]
[116.21064758 -44.22054672]
[116.64787292 -57.50014877]
[124.54206848 -67.94448853]
[136.82760620 -71.86970520]
[141.77330017 -86.03092957]
[139.01875305 -101.61049652]
[150.51972961 -111.07499695]
[155.46542358 -125.23621368]
[147.57786560 -140.83932495]
[153.29293823 -157.00473022]
[168.61927795 -163.90586853]
[173.32637024 -178.14817810]
[163.22608948 -189.63432312]
[160.25083923 -204.53549194]
[165.10145569 -218.83016968]
[176.38041687 -228.71151733]
[190.99259949 -231.60107422]
[195.69970703 -245.84338379]
[200.40679932 -260.08569336]
[190.56352234 -270.04010010]
[185.99557495 -283.20312500]
[187.54176331 -296.98352051]
[194.84317017 -308.69454956]
[206.42440796 -316.07766724]
[219.99145508 -317.73809814]
[224.93713379 -331.89932251]
[229.88282776 -346.06054688]
[234.82852173 -360.22177124]
[239.77421570 -374.38296509]
[244.71989441 -388.54418945]
[232.66719055 -397.68679810]
[224.03126526 -410.10760498]
[219.65820312 -424.58972168]
[219.97640991 -439.71432495]
[224.95471191 -453.99969482]
[234.10540771 -466.04626465]
[246.53198242 -474.67385864]
[261.01699829 -479.03723145]
[276.14141846 -478.70889282]
[290.42343140 -473.72100830]
[302.46386719 -464.56225586]
[311.08316040 -452.12988281]
[315.43679810 -437.64193726]
[315.09832764 -422.51776123]
[310.10089111 -408.23907471]
[300.93405151 -396.20477295]
[288.49594116 -387.59384155]
[274.00506592 -383.24990845]
[258.88113403 -383.59851074]
[253.93542480 -369.43728638]
[248.98974609 -355.27606201]
[244.04405212 -341.11483765]
[239.09835815 -326.95361328]
[234.15266418 -312.79241943]
[244.99256897 -300.82165527]
[248.34158325 -284.92742920]
[243.19438171 -269.42245483]
[230.86415100 -258.56250000]
[214.64910889 -255.37858582]
[209.94200134 -241.13627625]
[205.23490906 -226.89398193]
[215.24732971 -215.86596680]
[218.41651917 -201.20948792]
[213.79347229 -186.83959961]
[202.52442932 -176.64619446]
[187.56867981 -173.44108582]
[182.86158752 -159.19877625]
[190.21141052 -148.60057068]
[190.10702515 -135.50891113]
[182.36222839 -124.71275330]
[169.62664795 -120.29051971]
[164.68095398 -106.12930298]
[167.78924561 -91.56263733]
[155.93452454 -81.08523560]
[150.98883057 -66.92401886]
[158.93650818 -52.11331940]
[153.61828613 -35.81304550]
[137.85681152 -28.24693871]
[133.14971924 -14.00463390]
[128.44261169 0.23767111]
[123.73551941 14.47997570]
[119.02842712 28.72228050]
[114.56125641 43.04165268]
[110.33526611 57.43404770]
[106.10927582 71.82643890]
[101.88329315 86.21883392]
[109.87651825 82.60863495]
[120.39141083 83.72328949]
[130.81048584 90.70547485]
[138.12574768 103.35141754]
[149.78558350 112.78795624]
[161.44541931 122.22450256]
[173.10523987 131.66104126]
[184.76507568 141.09757996]
[201.03871155 143.12260437]
[207.17170715 158.33175659]
[196.85496521 171.07917786]
[180.70146179 168.25140381]
[175.32853699 152.75741577]
[163.66870117 143.32087708]
[152.00886536 133.88433838]
[140.34904480 124.44779205]
[128.68920898 115.01125336]
[121.47551727 117.06372070]
[117.81710815 131.61074829]
[107.04813385 121.16867065]
[99.83443451 123.22113800]
[94.88874817 137.38235474]
[89.94305420 151.54357910]
[92.69760895 167.12315369]
[81.19662476 176.58764648]
[76.25093079 190.74887085]
[71.30524445 204.91007996]
[71.42827606 214.06506348]
[66.15569305 219.26646423]
[60.97280502 233.34260559]
[55.78991318 247.41873169]
[50.60702515 261.49487305]
[45.42413712 275.57101440]
[40.24124908 289.64715576]
[52.08884048 299.03289795]
[60.44400787 311.60403442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 15]
[7 14]
[8 13]
[24 184]
[25 183]
[26 182]
[27 181]
[28 180]
[29 179]
[30 177]
[31 176]
[32 175]
[34 173]
[35 172]
[36 171]
[37 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
[54 150]
[55 149]
[56 148]
[57 147]
[60 146]
[61 145]
[62 144]
[63 143]
[64 142]
[68 139]
[69 138]
[71 136]
[72 135]
[75 131]
[76 130]
[81 125]
[82 124]
[83 123]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
[94 113]
[154 167]
[155 166]
[156 165]
[157 164]
[158 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
