%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACAUUUCAGAUGUCAUCUCCUUUGAUAUUUUGGUUUCAGCCAUGAAAACAGGAAAUCAAAGUUUUGGGACAGAUUUUCUACUUGUUGGUCUUUUCC\
) } def
/len { sequence length } bind def

/coor [
[142.95994568 339.04626465]
[139.71968079 324.40042114]
[129.41574097 313.64505005]
[133.98927307 298.49929810]
[130.74900818 283.85345459]
[127.50874329 269.20761108]
[124.26847076 254.56176758]
[111.49940491 250.34188843]
[102.44389343 240.25262451]
[99.57785797 226.89057922]
[103.76517487 213.76765442]
[114.00125122 204.38801575]
[111.21803284 189.64849854]
[108.43481445 174.90896606]
[96.28520203 162.35156250]
[102.28073120 145.02815247]
[99.04046631 130.38230896]
[95.80019379 115.73646545]
[84.15393829 103.76522827]
[89.17038727 87.83471680]
[85.47620392 73.29673004]
[81.78202057 58.75874710]
[78.08782959 44.22076035]
[73.49697113 29.94056320]
[68.02719879 15.97340298]
[62.55743027 2.00624180]
[57.08765411 -11.96091938]
[51.61788177 -25.92807961]
[46.14810944 -39.89524078]
[40.67833710 -53.86240005]
[28.44154167 -63.89093018]
[31.00506401 -78.56327057]
[25.53529167 -92.53043365]
[20.06551743 -106.49759674]
[14.59574509 -120.46475983]
[9.12597275 -134.43191528]
[-5.07813692 -140.82574463]
[-10.42629719 -155.06834412]
[-4.24322462 -168.57038879]
[-9.71299744 -182.53755188]
[-15.18276978 -196.50471497]
[-20.65254402 -210.47187805]
[-33.79703522 -220.27770996]
[-31.60872078 -236.53019714]
[-16.33875275 -242.51017761]
[-3.69556308 -232.06594849]
[-6.68538237 -215.94165039]
[-1.21560931 -201.97448730]
[4.25416374 -188.00732422]
[9.72393608 -174.04017639]
[23.43172646 -168.32771301]
[29.17782021 -154.24095154]
[23.09313393 -139.90168762]
[28.56290627 -125.93453217]
[34.03268051 -111.96736908]
[39.50245285 -98.00020599]
[44.97222519 -84.03305054]
[56.81778336 -75.00354004]
[54.64549637 -59.33217621]
[60.11527252 -45.36501312]
[65.58504486 -31.39785194]
[71.05481720 -17.43069267]
[76.52458954 -3.46353102]
[81.99436188 10.50362968]
[87.46413422 24.47079086]
[90.17573547 25.69208527]
[92.51898193 28.15748024]
[93.97875977 31.71331215]
[94.11329651 36.00795746]
[92.62581635 40.52657700]
[96.31999969 55.06455994]
[100.01418304 69.60254669]
[103.70836639 84.14053345]
[113.41889954 90.76918793]
[116.13690186 102.20797729]
[110.44603729 112.49620056]
[113.68630981 127.14204407]
[116.92657471 141.78788757]
[127.44152832 149.45552063]
[129.76457214 161.85018921]
[123.17434692 172.12574768]
[125.95756531 186.86528015]
[128.74078369 201.60479736]
[144.06642151 208.55827332]
[152.20454407 223.10023499]
[150.15660095 239.47183228]
[138.91430664 251.32150269]
[142.15458679 265.96734619]
[145.39485168 280.61318970]
[148.63511658 295.25903320]
[159.17082214 307.06198120]
[154.36552429 321.16015625]
[157.60578918 335.80599976]
[171.88641357 341.87585449]
[179.84303284 355.19769287]
[178.41615295 370.64904785]
[168.15443420 382.28848267]
[153.00372314 385.64044189]
[138.78977966 379.41604614]
[130.97814941 366.00863647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[4 90]
[5 89]
[6 88]
[7 87]
[12 83]
[13 82]
[14 81]
[16 78]
[17 77]
[18 76]
[20 73]
[21 72]
[22 71]
[23 70]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
