%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGCGGCCGGGGAAGAGCUCGUACAGCGACCAAAAACCGCCCUACUCUUACAUCUCGCUGACCGCCAUGGCAAUCCAGCACUCGGCCGAGAAGAUGC\
) } def
/len { sequence length } bind def

/coor [
[85.57793427 304.66973877]
[76.81610870 292.30014038]
[72.81632996 277.67901611]
[74.06157684 262.57189941]
[80.40148926 248.80303955]
[91.07048798 238.03511047]
[104.78024292 231.56838989]
[103.38255310 216.63365173]
[101.98486328 201.69891357]
[100.58717346 186.76417542]
[99.18949127 171.82943726]
[97.79180145 156.89469910]
[96.39411163 141.95996094]
[94.99642181 127.02521515]
[76.71197510 114.59677887]
[73.49625397 92.72336578]
[60.66417694 84.95561981]
[47.83210373 77.18787384]
[35.00002670 69.42012787]
[30.24407959 69.52724457]
[26.17475510 68.14788055]
[23.19814873 65.71585846]
[21.52199936 62.75621796]
[21.14329529 59.80648804]
[9.37438107 50.50634384]
[-2.39453292 41.20619965]
[-17.88424492 42.85136032]
[-29.68711472 33.25204086]
[-31.16006470 18.47482872]
[-42.92897797 9.17468452]
[-54.69789124 -0.12545857]
[-69.25489044 4.98310995]
[-84.25759888 1.38838065]
[-94.91872406 -9.76258183]
[-97.83633423 -24.91154671]
[-92.07942963 -39.22453308]
[-79.48501587 -48.13431931]
[-64.07192230 -48.79782486]
[-50.75842285 -41.00332642]
[-43.79279327 -27.23802567]
[-45.39775085 -11.89437294]
[-33.62883759 -2.59422922]
[-21.85992241 6.70591402]
[-7.14248514 4.72282362]
[4.92535114 13.98683929]
[6.90561008 29.43728638]
[18.67452431 38.73743057]
[30.44343758 48.03757095]
[42.76777267 56.58805847]
[55.59984970 64.35580444]
[68.43192291 72.12354279]
[81.26399994 79.89128876]
[86.07127380 76.30635834]
[91.54164124 73.84939575]
[97.41468048 72.63735962]
[103.41078949 72.72795105]
[109.24452972 74.11686707]
[114.63817596 76.73797607]
[119.33495331 80.46649933]
[123.11126709 85.12493896]
[137.46113586 80.75672150]
[151.81100464 76.38849640]
[166.16085815 72.02027893]
[171.40800476 56.02986145]
[184.97964478 46.35989761]
[201.47683716 46.61691284]
[214.47785950 56.50514603]
[228.68493652 51.69276047]
[239.09315491 39.01992035]
[255.22589111 41.96387482]
[260.48715210 57.49613190]
[249.46463013 69.63844299]
[233.49731445 65.89983368]
[219.29025269 70.71221924]
[216.48272705 83.86419678]
[207.43708801 93.96231079]
[194.46556091 98.26319885]
[180.96536255 95.52650452]
[170.52908325 86.37014771]
[156.17921448 90.73836517]
[141.82934570 95.10658264]
[127.47948456 99.47480774]
[122.82279968 115.31397247]
[109.93115997 125.62752533]
[111.32884979 140.56227112]
[112.72653961 155.49700928]
[114.12422943 170.43174744]
[115.52191925 185.36648560]
[116.91960907 200.30122375]
[118.31729889 215.23596191]
[119.71498108 230.17070007]
[134.38655090 233.98132324]
[146.86825562 242.58265686]
[155.65286255 254.93606567]
[159.67958069 269.54980469]
[158.46217346 284.65917969]
[152.14764404 298.43969727]
[141.49850464 309.22726440]
[127.80068970 315.71923828]
[112.70828247 317.13168335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[12 86]
[13 85]
[14 84]
[16 52]
[17 51]
[18 50]
[19 49]
[24 48]
[25 47]
[26 46]
[29 43]
[30 42]
[31 41]
[60 82]
[61 81]
[62 80]
[63 79]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
