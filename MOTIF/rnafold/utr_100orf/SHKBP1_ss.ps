%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCACACCCGGAAGUGGGUGCGGGCCAGCCGGCUCGCCCGGGGGCCAUGGCAGCAGCGGCUACUGCAGCCGAGGGGGUCCCCAGUCGGGGGCCUCCCGGGGAAGUCAUUCAUCUGAAUGUGGGAGGCAAGAGAUUCAGUACCUCUC\
) } def
/len { sequence length } bind def

/coor [
[102.14036560 214.31689453]
[101.19850922 199.34649658]
[100.25665283 184.37608337]
[99.31478882 169.40568542]
[98.37293243 154.43528748]
[97.43107605 139.46488953]
[83.12046814 135.11442566]
[71.65280914 125.86375427]
[62.58382416 137.81170654]
[53.51483536 149.75964355]
[44.44585037 161.70759583]
[35.37686539 173.65554810]
[26.30787659 185.60350037]
[24.79045677 201.93228149]
[9.77959824 208.53578186]
[-3.28281355 198.62088013]
[-0.95928937 182.38716125]
[14.35992813 176.53451538]
[23.42891502 164.58656311]
[32.49790192 152.63861084]
[41.56688690 140.69065857]
[50.63587570 128.74272156]
[59.70486069 116.79476929]
[51.40398788 104.30094910]
[36.87524033 108.03129578]
[22.34649277 111.76164246]
[7.81774616 115.49198914]
[-6.71100140 119.22234344]
[-21.23974800 122.95269012]
[-32.57153320 134.80691528]
[-48.43719482 130.65806580]
[-52.51549530 114.77413177]
[-40.61103439 103.49513245]
[-24.97009659 108.42394257]
[-10.44134998 104.69359589]
[4.08739758 100.96324158]
[18.61614609 97.23289490]
[33.14489365 93.50254822]
[47.67364120 89.77220154]
[55.97451401 77.27838135]
[53.78326797 62.43929672]
[51.59202194 47.60021210]
[49.40077591 32.76112747]
[47.20952988 17.92204094]
[45.01828766 3.08295608]
[36.08348083 2.07111573]
[27.48477554 -3.67059278]
[21.68732834 -13.84259796]
[14.18732834 -26.83297920]
[0.58654398 -34.91563034]
[0.92360663 -49.80641937]
[-6.57639313 -62.79680252]
[-14.07639313 -75.78717804]
[-21.57639313 -88.77756500]
[-35.17717743 -96.86021423]
[-34.84011459 -111.75100708]
[-42.34011459 -124.74138641]
[-49.84011459 -137.73176575]
[-57.34011459 -150.72215271]
[-72.66883850 -154.56999207]
[-80.71524048 -168.17259216]
[-76.70555115 -183.45977783]
[-63.01863480 -191.36192322]
[-47.77470016 -187.19082642]
[-40.01770401 -173.42112732]
[-44.34973526 -158.22215271]
[-36.84973526 -145.23176575]
[-29.34973526 -132.24137878]
[-21.84973526 -119.25100708]
[-8.78539944 -112.09751129]
[-8.58601189 -96.27756500]
[-1.08601236 -83.28717804]
[6.41398764 -70.29679871]
[13.91398811 -57.30641937]
[26.97832298 -50.15292740]
[27.17770958 -34.33297729]
[34.67771149 -21.34259796]
[49.67771149 -21.34259796]
[57.17771149 -34.33297729]
[64.67771149 -47.32336044]
[72.17771149 -60.31373978]
[79.67771149 -73.30412292]
[87.17771149 -86.29450226]
[94.67771149 -99.28488159]
[102.17771149 -112.27526855]
[101.63662720 -128.66548157]
[115.70147705 -137.09826660]
[129.90356445 -128.89869690]
[129.63298035 -112.50177765]
[115.16809082 -104.77526855]
[107.66809082 -91.78488159]
[100.16809082 -78.79450226]
[92.66809082 -65.80412292]
[85.16809082 -52.81373978]
[77.66809082 -39.82336044]
[70.16809082 -26.83297920]
[62.66809082 -13.84259796]
[59.85737228 0.89171070]
[62.04861832 15.73079586]
[64.23986053 30.56988144]
[66.43110657 45.40896606]
[68.62235260 60.24805069]
[70.81359863 75.08713531]
[91.38826752 62.30423355]
[115.70967102 64.34683990]
[134.14099121 80.62693787]
[139.24722290 104.87155914]
[153.77597046 108.60191345]
[168.30471802 112.33226013]
[183.59552002 108.27000427]
[193.99874878 118.92936707]
[208.52749634 122.65971375]
[223.05624390 126.39006042]
[237.58499146 130.12040710]
[252.11373901 133.85075378]
[265.58786011 125.59100342]
[280.93634033 129.35931396]
[289.05316162 142.91999817]
[285.12280273 158.22776794]
[271.47705078 166.20079041]
[256.21170044 162.10879517]
[248.38339233 148.37950134]
[233.85464478 144.64915466]
[219.32589722 140.91880798]
[204.79714966 137.18846130]
[190.26840210 133.45811462]
[176.01679993 137.78718567]
[164.57437134 126.86100769]
[150.04562378 123.13066101]
[135.51687622 119.40030670]
[129.73802185 124.18099213]
[140.69978333 134.42013550]
[151.66152954 144.65927124]
[164.46032715 152.48170471]
[165.52890015 167.44360352]
[153.97167969 177.00552368]
[139.47465515 173.15374756]
[134.18782043 159.11477661]
[126.18407440 146.42855835]
[118.18032837 133.74235535]
[112.40147400 138.52302551]
[113.34333801 153.49342346]
[114.28519440 168.46383667]
[115.22705078 183.43423462]
[116.16890717 198.40463257]
[117.11076355 213.37503052]
[126.63165283 226.72735596]
[119.58337402 241.53457642]
[103.21658325 242.56428528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 98]
[48 77]
[49 76]
[51 74]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
[59 66]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
[107 130]
[108 129]
[109 128]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
