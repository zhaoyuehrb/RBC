%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:26:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCAGUCACGUCCCAGAGCCUGUUCAGCUGAGCCGGCAGCAUGUGGAACGCGACGCCCAGCGAAGAGCCGGGGUUCAACCUCACACUGGCCGACCUGGACUGGGAUGCUUCCCCCGGCAACGACUCGCUGGGCGACGAGC\
) } def
/len { sequence length } bind def

/coor [
[113.64522552 185.43959045]
[99.03159332 182.05705261]
[86.56739807 173.71176147]
[77.87294769 161.48857117]
[74.07848358 146.97642517]
[75.67727661 132.06187439]
[82.46147156 118.68373871]
[93.54900360 108.58122253]
[78.72357941 110.86306763]
[63.89815521 113.14492035]
[51.43562317 122.89150238]
[37.67945099 117.18036652]
[22.85402870 119.46221924]
[8.02860641 121.74406433]
[-6.77104378 124.18750000]
[-21.54315948 126.79222107]
[-36.28598404 129.55792236]
[-50.99776459 132.48428345]
[-60.84112930 148.60189819]
[-79.01292419 152.41900635]
[-93.98856354 141.98678589]
[-108.55869293 145.55207825]
[-123.12882996 149.11735535]
[-134.69447327 159.91302490]
[-148.89605713 155.42256165]
[-163.46618652 158.98785400]
[-178.03631592 162.55313110]
[-192.60644531 166.11842346]
[-204.07197571 177.84333801]
[-219.88955688 173.51477051]
[-223.78739929 157.58558655]
[-211.75575256 146.44236755]
[-196.17173767 151.54829407]
[-181.60159302 147.98300171]
[-167.03146362 144.41770935]
[-152.46133423 140.85243225]
[-141.93785095 130.31176758]
[-126.69411469 134.54722595]
[-112.12398529 130.98193359]
[-97.55385590 127.41664886]
[-93.85012817 116.53233337]
[-85.24005890 108.73268127]
[-73.80937195 106.06466675]
[-62.40456772 109.31262207]
[-53.92411804 117.77249908]
[-39.21234131 114.84614563]
[-33.22032166 110.42280579]
[-24.14788246 112.02010345]
[-9.37576675 109.41538239]
[-3.28868032 105.12380981]
[5.74675560 106.91864777]
[20.57217789 104.63679504]
[35.39760208 102.35494232]
[46.79972076 92.77157593]
[61.61630630 98.31949615]
[76.44172668 96.03765106]
[91.26715088 93.75579834]
[105.52285004 89.08943176]
[118.82801819 82.16320038]
[132.13317871 75.23696899]
[145.43833923 68.31074524]
[158.74349976 61.38451385]
[172.04866028 54.45828247]
[185.35382080 47.53205490]
[198.65899658 40.60582733]
[211.96415710 33.67959595]
[213.91871643 14.72136497]
[226.73683167 0.81859308]
[245.18199158 -2.61174297]
[261.87469482 5.62169123]
[274.69836426 -2.15990782]
[287.52203369 -9.94150639]
[300.34573364 -17.72310638]
[313.16940308 -25.50470352]
[325.99307251 -33.28630447]
[338.81677246 -41.06790161]
[340.81207275 -51.85720444]
[348.29382324 -59.57877731]
[358.58392334 -61.81925201]
[368.18774414 -58.06739807]
[381.33865356 -65.28222656]
[383.80267334 -75.97422791]
[391.61413574 -83.36210632]
[401.99215698 -85.15159607]
[411.42318726 -80.98440552]
[424.87628174 -87.61872864]
[430.04272461 -102.31381226]
[443.78057861 -108.85032654]
[457.75827026 -103.83433533]
[471.21136475 -110.46866608]
[484.66445923 -117.10299683]
[498.11755371 -123.73732758]
[511.49746704 -130.51800537]
[524.80261230 -137.44424438]
[530.97875977 -152.25082397]
[546.44470215 -156.51513672]
[559.33630371 -146.96595764]
[559.76422119 -130.92861938]
[547.40020752 -120.70557404]
[531.72888184 -124.13907623]
[518.42370605 -117.21284485]
[513.90881348 -111.28948212]
[504.75186157 -110.28423309]
[491.29876709 -103.64990234]
[477.84570312 -97.01557159]
[464.39260864 -90.38124084]
[459.86297607 -76.23846436]
[446.31414795 -69.31867218]
[431.51062012 -74.16564178]
[418.05752563 -67.53131104]
[408.61169434 -50.71008682]
[388.55346680 -52.13132858]
[375.40258789 -44.91649628]
[366.69946289 -27.69926262]
[346.59835815 -28.24422455]
[333.77468872 -20.46262550]
[320.95098877 -12.68102646]
[308.12731934 -4.89942741]
[295.30364990 2.88217139]
[282.47998047 10.66377068]
[269.65628052 18.44536972]
[270.85198975 29.66446114]
[267.72589111 40.55903625]
[260.69979858 49.51839447]
[250.77507019 55.20281601]
[239.38993835 56.74380875]
[228.21125793 53.87662506]
[218.89038086 46.98476028]
[205.58522034 53.91098785]
[192.28005981 60.83721924]
[178.97489929 67.76345062]
[165.66973877 74.68967438]
[152.36456299 81.61590576]
[139.05940247 88.54213715]
[125.75424194 95.46836090]
[112.44908142 102.39459229]
[127.36446381 103.98561096]
[140.74613953 110.76284027]
[150.85453796 121.84526825]
[156.37561035 135.79223633]
[156.59164429 150.79067993]
[151.47454834 164.89086914]
[141.68952942 176.25982666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 57]
[9 56]
[10 55]
[12 53]
[13 52]
[14 51]
[15 49]
[16 48]
[17 46]
[18 45]
[21 40]
[22 39]
[23 38]
[25 36]
[26 35]
[27 34]
[28 33]
[58 136]
[59 135]
[60 134]
[61 133]
[62 132]
[63 131]
[64 130]
[65 129]
[66 128]
[70 121]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[76 115]
[80 113]
[81 112]
[85 110]
[86 109]
[89 106]
[90 105]
[91 104]
[92 103]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
