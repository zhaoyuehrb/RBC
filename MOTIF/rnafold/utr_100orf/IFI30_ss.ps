%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUUAAAGGCGCUUAUUUCCCAGGCAGCCGCUGCAGUCGCCACACCUUUGCCCCUGCUGCGAUGACCCUGUCGCCACUUCUGCUGUUCCUGCCACCGCUGCUGCUGCUGCUGGACGUCCCCACGGCGGCGGUGCAGGCGUCCCCUCUGCAAGCGUUAGACU\
) } def
/len { sequence length } bind def

/coor [
[102.64931488 339.91549683]
[105.21089172 320.70382690]
[105.49997711 305.70663452]
[105.78906250 290.70941162]
[106.07814789 275.71218872]
[98.32089996 268.97149658]
[95.52066040 258.85498047]
[98.84398651 248.66616821]
[107.41551971 241.87255859]
[108.28234863 226.89762878]
[109.14917755 211.92269897]
[110.01599884 196.94776917]
[110.88282776 181.97283936]
[111.74965668 166.99789429]
[112.61648560 152.02296448]
[98.82952118 152.48918152]
[85.65060425 149.43293762]
[73.94626617 143.19580078]
[64.44951630 134.32356262]
[57.71417999 123.52104187]
[54.08341217 111.59739685]
[53.67398834 99.40612030]
[56.37705231 87.78416443]
[61.87463760 77.49449921]
[50.43575668 67.79130554]
[38.99687576 58.08811188]
[27.55799294 48.38491821]
[16.11911011 38.68172073]
[0.58161259 39.78803253]
[-10.88081455 29.78466225]
[-11.83975887 14.96521473]
[-23.27864075 5.26202059]
[-38.80764771 2.23537493]
[-43.50826263 -11.89804173]
[-54.94714355 -21.60123634]
[-66.38602448 -31.30443001]
[-77.82490540 -41.00762558]
[-85.99451447 -35.11362457]
[-95.12998199 -30.88544846]
[-104.89611053 -28.47516441]
[-114.93515778 -27.96818733]
[-124.87991333 -29.38027382]
[-134.36717224 -32.65702820]
[-143.05094910 -37.67601013]
[-150.61512756 -44.25128937]
[-156.78497314 -52.14035416]
[-161.33709717 -61.05303574]
[-164.10754395 -70.66218567]
[-164.99769592 -80.61569214]
[-163.97776794 -90.54936981]
[-161.08786011 -100.10031128]
[-174.02978516 -107.68360901]
[-190.42314148 -107.24783325]
[-198.76539612 -121.36657715]
[-190.47474670 -135.51568604]
[-174.07991028 -135.13977051]
[-166.44648743 -120.62554169]
[-153.50454712 -113.04223633]
[-149.81941223 -117.18139648]
[-145.71595764 -120.90625000]
[-153.42362976 -133.77450562]
[-161.13128662 -146.64274597]
[-168.83895874 -159.51100159]
[-176.54663086 -172.37925720]
[-191.93516541 -175.98040771]
[-200.19900513 -189.45202637]
[-196.43534851 -204.80163574]
[-182.87710571 -212.92259216]
[-167.56816101 -208.99685669]
[-159.59100342 -195.35351562]
[-163.67837524 -180.08691406]
[-155.97070312 -167.21867371]
[-148.26304626 -154.35041809]
[-140.55537415 -141.48216248]
[-132.84770203 -128.61392212]
[-111.40912628 -132.71078491]
[-90.13266754 -127.67668152]
[-72.74372864 -114.36164856]
[-62.29983521 -95.06841278]
[-60.65307617 -73.15419006]
[-68.12171173 -52.44650650]
[-56.68283081 -42.74331284]
[-45.24394989 -33.04011917]
[-33.80506897 -23.33692360]
[-19.09424782 -21.00431633]
[-13.57544708 -6.17686176]
[-2.13656521 3.52633238]
[12.64085579 2.05548096]
[24.37973595 11.73294830]
[25.82230377 27.24283981]
[37.26118469 36.94603348]
[48.70006943 46.64922714]
[60.13895035 56.35242081]
[71.57783508 66.05561829]
[84.22628021 57.22039795]
[99.55784607 53.08441544]
[115.83285522 54.43191910]
[131.09681702 61.40624237]
[143.41497803 73.45780182]
[151.11616516 89.37716675]
[153.01519775 107.41310120]
[167.70907593 104.39818573]
[182.40296936 101.38327789]
[197.09684753 98.36837006]
[211.79074097 95.35345459]
[226.48463440 92.33854675]
[241.17851257 89.32363892]
[255.87240601 86.30872345]
[270.56628418 83.29381561]
[285.26016235 80.27890778]
[293.08212280 75.46708679]
[300.26617432 77.35036469]
[315.01544189 74.61919403]
[329.76470947 71.88803101]
[338.51080322 58.72438812]
[354.01959229 55.68264008]
[367.09005737 64.56741333]
[369.96765137 80.10751343]
[360.94519043 93.08329010]
[345.37551880 95.79644012]
[332.49588013 86.63729858]
[317.74661255 89.36846161]
[302.99734497 92.09962463]
[288.27508545 94.97279358]
[273.58120728 97.98770142]
[258.88729858 101.00261688]
[244.19342041 104.01752472]
[229.49954224 107.03243256]
[214.80564880 110.04734802]
[200.11177063 113.06225586]
[185.41787720 116.07716370]
[170.72398376 119.09207153]
[156.03010559 122.10698700]
[151.89245605 136.52502441]
[162.75149536 146.87304688]
[173.61051941 157.22105408]
[184.46955872 167.56906128]
[195.32858276 177.91708374]
[210.84815979 175.99960327]
[223.94119263 184.54986572]
[228.42552185 199.53067017]
[222.18382263 213.86856079]
[208.16320801 220.79360962]
[192.98377991 217.03604126]
[183.81283569 204.37004089]
[184.98057556 188.77612305]
[174.12153625 178.42810059]
[163.26251221 168.08009338]
[152.40347290 157.73207092]
[141.54443359 147.38406372]
[127.59141541 152.88980103]
[126.72458649 167.86473083]
[125.85776520 182.83966064]
[124.99093628 197.81459045]
[124.12410736 212.78952026]
[123.25727844 227.76446533]
[122.39044952 242.73939514]
[132.27416992 260.27243042]
[121.07536316 276.00128174]
[120.78627777 290.99850464]
[120.49719238 305.99569702]
[120.20810699 320.99291992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 162]
[3 161]
[4 160]
[5 159]
[9 157]
[10 156]
[11 155]
[12 154]
[13 153]
[14 152]
[15 151]
[24 94]
[25 93]
[26 92]
[27 91]
[28 90]
[31 87]
[32 86]
[34 84]
[35 83]
[36 82]
[37 81]
[51 58]
[52 57]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
[112 123]
[113 122]
[114 121]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
