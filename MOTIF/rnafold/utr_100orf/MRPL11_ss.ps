%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGGACCCUUGACCUCUGGCCCAAGAUGGUGGCGCCCAGAGCUUCGCUCUUGCUGCUCCCCUGAGGUGAACUGAAGCCAGCAGCCCCGCAUCAUGUCAAAGCUCGGCCGGGCCGCCCGGGGCCUCAGGAAGCCCGAGGUCGGCGGUGUGAUCCGGGCGAUCGUGCGGGCAGGCCUGGCCAUGCCCGGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[40.04775620 391.41131592]
[33.62850571 396.18768311]
[25.93384171 398.00875854]
[20.95522308 412.15844727]
[15.97660637 426.30810547]
[10.99798775 440.45779419]
[19.92318726 453.15112305]
[19.64921379 468.66577148]
[10.28141880 481.03607178]
[-4.57809258 485.50537109]
[-19.21553230 480.35510254]
[-28.00250816 467.56573486]
[-27.56024742 452.05496216]
[-18.05880928 439.78701782]
[-3.15168905 435.47918701]
[1.82692885 421.32949829]
[6.80554676 407.17984009]
[11.78416443 393.03015137]
[5.69590330 372.26531982]
[22.84939957 357.85678101]
[26.90646744 343.41586304]
[30.96353531 328.97494507]
[35.02060318 314.53402710]
[39.07767105 300.09310913]
[28.49616432 287.55081177]
[27.46037674 271.00744629]
[36.57567215 256.96456909]
[52.41892242 251.05929565]
[56.24282074 236.55488586]
[60.06671906 222.05047607]
[63.89061737 207.54606628]
[67.71451569 193.04165649]
[58.16709137 181.64057922]
[57.15181732 166.62614441]
[65.26714325 153.74224854]
[79.57823181 148.04145813]
[83.40213013 133.53706360]
[87.22602844 119.03265381]
[82.48038483 114.78104401]
[79.08843231 109.38735962]
[64.14727783 110.71475220]
[49.20612717 112.04215240]
[34.26497650 113.36954498]
[19.32382393 114.69694519]
[4.08189058 122.12121582]
[-7.27162600 109.53018951]
[1.68437481 95.13482666]
[17.99642563 99.75579071]
[32.93757629 98.42839813]
[47.87873077 97.10099792]
[62.81988144 95.77360535]
[77.76103210 94.44620514]
[79.32134247 85.02900696]
[85.00098419 76.19489288]
[73.38191223 66.70821381]
[61.76283264 57.22153473]
[50.14376068 47.73485184]
[38.52468491 38.24817276]
[26.90561104 28.76149178]
[28.40109825 43.68675613]
[20.06547165 56.15741348]
[5.70258904 60.48263931]
[-8.13323116 54.68867111]
[-15.12818623 41.41950989]
[-12.09021664 26.73037529]
[-0.40566158 17.32446289]
[14.59234715 17.49366188]
[4.11467648 6.75967693]
[-6.36299419 -3.97430754]
[-21.69720268 -1.59909225]
[-35.48353577 -8.72065353]
[-42.42086792 -22.60060501]
[-39.84165192 -37.90182114]
[-28.73764801 -48.74067688]
[-13.37857533 -50.94940567]
[0.32969186 -43.67870712]
[7.11604404 -29.72431564]
[4.37099028 -14.45197773]
[14.84866047 -3.71799350]
[25.32633209 7.01599073]
[36.39229202 17.14241791]
[48.01136780 26.62909889]
[59.63043976 36.11577988]
[71.24951172 45.60245895]
[82.86859131 55.08914185]
[94.48766327 64.57582092]
[109.46382141 65.42118835]
[122.07668304 57.30233383]
[134.68954468 49.18348312]
[147.30239868 41.06463242]
[159.91526794 32.94578171]
[172.52812195 24.82693100]
[185.14099121 16.70808029]
[186.83099365 5.94618177]
[194.02252197 -1.94160378]
[204.15693665 -4.50793839]
[213.82075500 -1.13793290]
[226.68862915 -8.84623528]
[239.55650330 -16.55453682]
[242.10345459 -21.14135170]
[245.79039001 -23.99844742]
[249.76388550 -24.98143387]
[253.23756409 -24.30703926]
[266.46282959 -31.38465118]
[279.68807983 -38.46226120]
[292.91333008 -45.53987122]
[306.13858032 -52.61748123]
[319.36386108 -59.69509125]
[328.70620728 -75.55619812]
[346.20611572 -74.32249451]
[359.31561279 -81.61225128]
[367.61633301 -95.08105469]
[382.49975586 -94.50414276]
[395.60928345 -101.79389954]
[408.71881104 -109.08364868]
[421.82830811 -116.37339783]
[434.93783569 -123.66314697]
[448.04736328 -130.95289612]
[450.74078369 -135.45527649]
[454.51782227 -138.19212341]
[458.52093506 -139.04658508]
[461.97106934 -138.26063538]
[475.41748047 -144.90850830]
[488.86389160 -151.55638123]
[502.31030273 -158.20425415]
[515.75671387 -164.85212708]
[529.20312500 -171.50000000]
[535.51940918 -178.11750793]
[542.92010498 -178.14469910]
[556.47186279 -184.57508850]
[565.33728027 -198.37133789]
[581.70275879 -197.32164001]
[588.73297119 -182.50581360]
[579.19580078 -169.16513062]
[562.90222168 -171.02333069]
[549.35046387 -164.59294128]
[535.85095215 -158.05358887]
[522.40454102 -151.40571594]
[508.95816040 -144.75784302]
[495.51174927 -138.10997009]
[482.06536865 -131.46209717]
[468.61895752 -124.81423187]
[455.33712769 -117.84338379]
[442.22760010 -110.55362701]
[429.11807251 -103.26387787]
[416.00854492 -95.97412872]
[402.89901733 -88.68437958]
[389.78952026 -81.39462280]
[382.42648315 -68.44722748]
[366.60537720 -68.50272369]
[353.49584961 -61.21297455]
[349.87203979 -49.66321182]
[338.99856567 -43.48542404]
[326.44146729 -46.46983337]
[313.21618652 -39.39222336]
[299.99093628 -32.31461334]
[286.76568604 -25.23700333]
[273.54043579 -18.15939331]
[260.31518555 -11.08178234]
[247.26480103 -3.68666720]
[234.39692688 4.02163506]
[221.52905273 11.72993755]
[213.40950012 29.27021980]
[193.25984192 29.32094193]
[180.64697266 37.43979263]
[168.03411865 45.55864334]
[155.42124939 53.67749405]
[142.80839539 61.79634476]
[130.19554138 69.91519928]
[117.58267212 78.03404999]
[126.26953888 97.39672089]
[118.88919830 115.85301971]
[101.73043060 122.85655212]
[97.90653229 137.36096191]
[94.08263397 151.86535645]
[103.72311401 163.88066101]
[104.43178558 179.09089661]
[96.14624023 191.65328979]
[82.21891785 196.86555481]
[78.39501953 211.36996460]
[74.57112885 225.87437439]
[70.74723053 240.37878418]
[66.92333221 254.88319397]
[76.41526794 264.88830566]
[79.69463348 278.17248535]
[76.00795746 291.23696899]
[66.42213440 300.69506836]
[53.51859283 304.15017700]
[49.46152496 318.59109497]
[45.40445709 333.03201294]
[41.34738922 347.47293091]
[37.29032135 361.91384888]
[42.67446899 368.33193970]
[45.04904175 376.26766968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[20 192]
[21 191]
[22 190]
[23 189]
[24 188]
[28 183]
[29 182]
[30 181]
[31 180]
[32 179]
[36 175]
[37 174]
[38 173]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[67 80]
[68 79]
[69 78]
[87 170]
[88 169]
[89 168]
[90 167]
[91 166]
[92 165]
[93 164]
[97 162]
[98 161]
[99 160]
[103 159]
[104 158]
[105 157]
[106 156]
[107 155]
[108 154]
[110 151]
[111 150]
[113 148]
[114 147]
[115 146]
[116 145]
[117 144]
[118 143]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[127 137]
[129 136]
[130 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
