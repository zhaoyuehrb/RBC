%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAACCCCAGUUUGUUGGGAUCUUGCUCAGCUCCCUGCUAGGGGCUGCCUUGGGAAACCGAAUGCGGUGCUACAACUGUGGUGGAAGCCCCAGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[118.10056305 132.36610413]
[106.51226044 137.37132263]
[93.63472748 138.25946045]
[80.91923523 134.74122620]
[72.56145477 147.19705200]
[64.20366669 159.65286255]
[55.84588623 172.10868835]
[55.28197861 188.49813843]
[40.68116379 195.96461487]
[27.06350708 186.82723999]
[28.43768883 170.48576355]
[43.39006424 163.75090027]
[51.74784851 151.29507446]
[60.10563278 138.83926392]
[68.46341705 126.38343811]
[61.09850693 113.31599426]
[46.11483002 114.01560211]
[31.13115311 114.71520996]
[16.14747810 115.41481781]
[1.16380155 116.11441803]
[-13.81987476 116.81402588]
[-24.27517700 128.66569519]
[-40.05358887 129.56968689]
[-51.79406357 118.98966980]
[-52.53118134 103.20258331]
[-41.82762527 91.57462311]
[-26.03362465 91.00445557]
[-14.51948071 101.83035278]
[0.46419573 101.13074493]
[15.44787216 100.43113708]
[30.43154716 99.73153687]
[45.41522598 99.03192902]
[60.39889908 98.33232117]
[69.23262024 77.44834137]
[87.50389862 65.53740692]
[108.44767761 65.86045074]
[124.92175293 77.34472656]
[137.98919678 69.97981262]
[151.05664062 62.61490631]
[164.12408447 55.24999237]
[177.19152832 47.88508224]
[183.26361084 40.81950760]
[190.78189087 40.50155640]
[204.07205200 33.54660416]
[217.36222839 26.59165192]
[230.65240479 19.63669968]
[243.94256592 12.68174553]
[257.23272705 5.72679281]
[265.87234497 -7.52717972]
[280.73635864 -6.57301569]
[294.02651978 -13.52796841]
[279.59622192 -9.43330002]
[265.43765259 -14.38656425]
[256.70697021 -26.58391762]
[256.58367920 -41.58341217]
[265.11267090 -53.92263412]
[279.18789673 -59.10797119]
[293.68356323 -55.25106430]
[303.32092285 -43.75606537]
[314.79489136 -53.41772079]
[326.26889038 -63.07937622]
[337.74288940 -72.74103546]
[342.81326294 -88.33664703]
[358.90869141 -91.47823334]
[369.47155762 -78.93399048]
[363.63568115 -63.60836411]
[347.40454102 -61.26704788]
[335.93054199 -51.60538864]
[324.45654297 -41.94373322]
[312.98257446 -32.28207779]
[317.35079956 -17.93221092]
[332.26199341 -16.30242920]
[347.17318726 -14.67264748]
[362.08438110 -13.04286480]
[376.99557495 -11.41308308]
[391.77828979 -18.51264381]
[405.16351318 -9.03808784]
[403.38171387 7.26397371]
[388.26583862 13.62337780]
[375.36578369 3.49811459]
[360.45458984 1.86833239]
[345.54339600 0.23855011]
[330.63220215 -1.39123213]
[315.72100830 -3.02101445]
[300.98147583 -0.23779808]
[287.69131470 6.71715498]
[280.00231934 19.47366333]
[264.18768311 19.01696396]
[250.89752197 25.97191620]
[237.60734558 32.92686844]
[224.31718445 39.88182068]
[211.02700806 46.83677673]
[197.73683167 53.79172897]
[184.55644226 60.95252609]
[171.48899841 68.31743622]
[158.42155457 75.68235016]
[145.35411072 83.04725647]
[132.28666687 90.41217041]
[134.49006653 101.68176270]
[132.77713013 113.32436371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[50 86]
[51 85]
[59 70]
[60 69]
[61 68]
[62 67]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
