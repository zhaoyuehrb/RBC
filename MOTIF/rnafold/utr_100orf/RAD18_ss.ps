%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUAAUGCGGUAGCGCGGGGAAUUUCGAGUGGUGUUGGAGCGCCGGAGGCUAGUGGGUGGCUGACCCCCAGCAUCCUCGGGAGCGACCAUGGACUCCCUGGCCGAGUCUCGGUGGCCUCCGGGCCUGGCAGUCAUGAAGACAAUAGAUGAUUUGCUGCGGUGUGGAAUUUGCUUCGAGUAUUUCAACA\
) } def
/len { sequence length } bind def

/coor [
[328.14001465 847.46594238]
[324.95700073 832.80755615]
[314.69519043 822.01202393]
[319.32788086 806.88427734]
[316.14489746 792.22589111]
[312.96188354 777.56744385]
[309.77886963 762.90905762]
[294.17706299 759.49096680]
[281.57937622 749.57836914]
[274.53652954 735.11364746]
[274.50244141 718.96734619]
[281.53469849 704.36828613]
[294.27261353 694.25799561]
[290.84893799 679.65393066]
[280.41094971 669.02856445]
[284.79421997 653.82666016]
[281.37054443 639.22259521]
[277.94689941 624.61859131]
[274.52322388 610.01452637]
[271.09957886 595.41046143]
[260.66159058 584.78509521]
[265.04483032 569.58325195]
[261.62118530 554.97918701]
[258.19750977 540.37512207]
[254.77384949 525.77105713]
[251.35018921 511.16699219]
[246.97380066 496.81961060]
[241.66358948 482.79101562]
[226.05570984 476.54806519]
[219.65861511 460.63827515]
[226.87895203 444.71340942]
[221.33874512 430.77404785]
[215.79852295 416.83465576]
[210.25830078 402.89529419]
[204.60363770 389.00195312]
[198.83491516 375.15560913]
[193.06617737 361.30923462]
[187.29743958 347.46289062]
[181.52871704 333.61651611]
[175.75997925 319.77014160]
[170.27607727 314.79635620]
[170.01231384 305.64831543]
[164.47209167 291.70892334]
[159.07073975 286.64562988]
[158.95747375 277.49444580]
[153.64726257 263.46585083]
[148.33706665 249.43724060]
[143.02687073 235.40864563]
[137.71667480 221.38003540]
[132.40646362 207.35142517]
[127.09626770 193.32283020]
[121.78607178 179.29421997]
[116.47586823 165.26560974]
[111.16567230 151.23699951]
[99.42381287 142.07305908]
[101.77460480 126.42746735]
[96.46440125 112.39886475]
[54.23175049 106.01993561]
[44.48534012 94.61785126]
[34.73892975 83.21577454]
[19.89069939 77.75312042]
[17.50244141 63.05123138]
[7.75603056 51.64914703]
[-1.99037945 40.24706650]
[-6.94480896 38.49865723]
[-10.37992287 35.33434677]
[-12.01026344 31.57459450]
[-11.91939449 28.03374863]
[-21.09154129 16.16480827]
[-30.26368713 4.29586935]
[-44.82440567 -1.89251494]
[-46.48459244 -16.69430733]
[-55.65674210 -28.56324577]
[-71.02608490 -34.28298187]
[-73.49014282 -50.49595261]
[-60.51411057 -60.52364349]
[-45.44661331 -54.05042648]
[-43.78779984 -37.73539352]
[-34.61565399 -25.86645317]
[-20.71099091 -20.52701569]
[-18.39474678 -4.87627745]
[-9.22260094 6.99266243]
[-0.05045477 18.86160278]
[9.41170311 30.50065613]
[19.15811348 41.90273666]
[28.90452385 53.30482101]
[43.05562592 57.95191956]
[46.14101410 73.46936035]
[55.88742447 84.87144470]
[65.63383484 96.27352905]
[72.90672302 94.44182587]
[87.45249176 90.77843475]
[94.72537994 88.94673157]
[97.90837860 74.28833771]
[101.09137726 59.62994385]
[104.27438354 44.97154999]
[107.45738220 30.31315804]
[110.64038086 15.65476322]
[100.92464447 3.40166426]
[101.40976715 -12.22839260]
[111.86669922 -23.85537148]
[127.35798645 -25.98936844]
[140.56912231 -17.62277603]
[145.26220703 -2.70604372]
[139.22132874 11.71760464]
[125.29877472 18.83776283]
[122.11577606 33.49615860]
[118.93277740 48.15455246]
[115.74977112 62.81294632]
[112.56677246 77.47133636]
[109.38377380 92.12973022]
[110.49301147 107.08866119]
[115.80320740 121.11727142]
[127.92488861 131.28463745]
[125.19427490 145.92680359]
[130.50447083 159.95541382]
[135.81468201 173.98402405]
[141.12487793 188.01261902]
[146.43507385 202.04122925]
[151.74526978 216.06983948]
[157.05548096 230.09843445]
[162.36567688 244.12704468]
[167.67587280 258.15563965]
[172.98606873 272.18426514]
[178.41146851 286.16873169]
[183.95167542 300.10809326]
[189.60633850 314.00143433]
[195.37507629 327.84777832]
[201.14381409 341.69415283]
[206.91253662 355.54049683]
[212.68127441 369.38687134]
[218.44999695 383.23324585]
[224.64956665 389.96539307]
[224.19767761 397.35507202]
[229.73789978 411.29446411]
[235.27810669 425.23382568]
[240.81832886 439.17318726]
[253.72747803 443.05172729]
[261.92187500 453.50784302]
[262.58264160 466.58096313]
[255.69219971 477.48080444]
[261.00241089 491.50939941]
[266.37304688 477.50384521]
[278.88040161 469.22335815]
[293.87118530 469.74871826]
[305.76818848 478.88442993]
[310.14520264 493.23162842]
[305.37377930 507.45251465]
[293.22909546 516.25628662]
[278.22949219 516.36761475]
[265.95425415 507.74331665]
[269.37789917 522.34741211]
[272.80157471 536.95141602]
[276.22525024 551.55548096]
[279.64889526 566.15954590]
[290.33178711 577.82946777]
[285.70364380 591.98675537]
[289.12728882 606.59082031]
[292.55096436 621.19488525]
[295.97460938 635.79895020]
[299.39828491 650.40301514]
[310.08114624 662.07293701]
[305.45300293 676.23022461]
[308.87667847 690.83428955]
[322.78927612 693.37213135]
[334.64614868 701.00042725]
[342.67297363 712.53851318]
[345.68362427 726.22338867]
[343.25534058 739.97955322]
[335.78765869 751.73339844]
[324.43728638 759.72607422]
[327.62026978 774.38446045]
[330.80328369 789.04284668]
[333.98626709 803.70123291]
[344.47576904 815.54528809]
[339.61538696 829.62457275]
[342.79840088 844.28295898]
[357.76300049 846.95306396]
[370.56396484 855.15087891]
[379.24923706 867.62622070]
[382.49441528 882.47668457]
[379.80462646 897.43774414]
[371.58999634 910.22796631]
[359.10324097 918.89685059]
[344.24850464 922.12243652]
[329.29098511 919.41296387]
[316.51162720 911.18151855]
[307.85919189 898.68341064]
[304.65310669 883.82440186]
[307.38226318 868.87048340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 177]
[2 176]
[4 174]
[5 173]
[6 172]
[7 171]
[13 164]
[14 163]
[16 161]
[17 160]
[18 159]
[19 158]
[20 157]
[22 155]
[23 154]
[24 153]
[25 152]
[26 151]
[27 142]
[28 141]
[31 137]
[32 136]
[33 135]
[34 134]
[35 132]
[36 131]
[37 130]
[38 129]
[39 128]
[40 127]
[42 126]
[43 125]
[45 124]
[46 123]
[47 122]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[54 115]
[56 113]
[57 112]
[58 90]
[59 89]
[60 88]
[62 86]
[63 85]
[64 84]
[68 83]
[69 82]
[70 81]
[72 79]
[73 78]
[93 111]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
