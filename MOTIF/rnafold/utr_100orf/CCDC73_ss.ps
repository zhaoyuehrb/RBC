%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGAACCGGAAGGGCCAACAGGAGCUAGAGGCGCGCUUCGCUGAGGAAAUAAAUAUUAAUAUGGAAAGCAACUUCAAUACUGAGUCAUCAUCUACUUUUACUCUUCAAAGUUCUUCAGAGACAUUGUUUUCUAUUCAGCUAUUAGAUUUCAAAACAAGUU\
) } def
/len { sequence length } bind def

/coor [
[98.92498016 111.56886292]
[88.63135529 122.47946167]
[78.33773041 133.39007568]
[68.04410553 144.30067444]
[68.32849884 159.87490845]
[57.73387527 170.79318237]
[42.88446808 170.96832275]
[32.59084320 181.87893677]
[35.31288910 197.04127502]
[28.66266060 210.73901367]
[15.37900352 217.81066895]
[0.65467507 215.72929382]
[-9.63894939 226.63989258]
[-9.35455227 242.21414185]
[-19.94917679 253.13240051]
[-34.79858398 253.30755615]
[-45.09220886 264.21817017]
[-48.34555435 280.29135132]
[-63.97602463 285.25326538]
[-75.90433502 273.99948120]
[-71.85965729 258.10696411]
[-56.00281525 253.92453003]
[-45.70919037 243.01393127]
[-46.39775085 228.17945862]
[-36.11397934 216.96792603]
[-20.54955482 216.34626770]
[-10.25592995 205.43566895]
[-13.18993092 190.85726929]
[-6.90260506 177.18490601]
[6.38527441 169.74948120]
[21.68023872 171.58531189]
[31.97386360 160.67471313]
[31.28530121 145.84024048]
[41.56907272 134.62869263]
[57.13349915 134.00704956]
[67.42712402 123.09644318]
[77.72074890 112.18584442]
[88.01437378 101.27523804]
[88.41865540 95.44339752]
[91.58226013 90.30731964]
[96.92881775 87.13150024]
[102.33148956 73.13824463]
[107.73415375 59.14498901]
[113.13681793 45.15173340]
[118.53948212 31.15847778]
[106.60092926 40.23982620]
[92.30323029 44.77587891]
[77.31287384 44.23793030]
[63.37710190 38.68868256]
[52.12020874 28.77493477]
[44.85426712 15.65220451]
[42.42616653 0.85003144]
[45.11892319 -13.90629196]
[52.61867142 -26.89681625]
[64.05127716 -36.60741043]
[78.08418274 -41.90623856]
[93.08175659 -42.17568588]
[107.29594421 -37.38434601]
[119.06997681 -28.09068489]
[127.03151703 -15.37794018]
[130.25259399 -0.72786504]
[128.35726929 14.15358067]
[137.77444458 2.47810721]
[147.19163513 -9.19736671]
[156.60881042 -20.87284088]
[166.02600098 -32.54831314]
[175.44317627 -44.22378922]
[184.86035156 -55.89926147]
[194.27754211 -67.57473755]
[203.69471741 -79.25020599]
[213.11190796 -90.92568207]
[222.52908325 -102.60115814]
[221.03865051 -118.10652161]
[230.75534058 -129.81295776]
[245.54652405 -131.13830566]
[254.96369934 -142.81378174]
[252.70150757 -152.05760193]
[254.94261169 -161.16444397]
[261.05377197 -168.09555054]
[269.55050659 -171.36039734]
[278.45614624 -170.33631897]
[288.53628540 -181.44447327]
[298.61639404 -192.55262756]
[308.69650269 -203.66079712]
[318.77664185 -214.76895142]
[315.53942871 -221.97656250]
[314.38027954 -229.76495361]
[315.37145996 -237.54924011]
[318.42422485 -244.74884033]
[323.29672241 -250.83082581]
[329.61291504 -255.34928894]
[336.89172363 -257.97805786]
[344.58358765 -258.53427124]
[352.11187744 -256.99087524]
[358.91632080 -253.47772217]
[370.40698242 -263.11953735]
[381.89764404 -272.76135254]
[393.38833618 -282.40316772]
[404.87899780 -292.04498291]
[403.66226196 -307.51428223]
[411.79925537 -320.72674561]
[426.16107178 -326.60192871]
[441.22534180 -322.88067627]
[451.19952393 -310.99389648]
[452.24835205 -295.51232910]
[443.96853638 -282.38891602]
[429.54382324 -276.66986084]
[414.52081299 -280.55432129]
[403.03015137 -270.91250610]
[391.53945923 -261.27069092]
[380.04879761 -251.62887573]
[368.55813599 -241.98706055]
[369.18557739 -219.47805786]
[352.90203857 -203.54531860]
[329.88479614 -204.68884277]
[319.80465698 -193.58067322]
[309.72454834 -182.47251892]
[299.64443970 -171.36434937]
[289.56433105 -160.25619507]
[287.05673218 -139.79679871]
[266.63919067 -133.39659119]
[257.22198486 -121.72112274]
[259.05804443 -106.98461914]
[249.67401123 -95.00987244]
[234.20455933 -93.18397522]
[224.78738403 -81.50849915]
[215.37019348 -69.83302307]
[205.95301819 -58.15755463]
[196.53582764 -46.48207855]
[187.11865234 -34.80660629]
[177.70146179 -23.13113213]
[168.28428650 -11.45565796]
[158.86711121 0.21981539]
[149.44992065 11.89528942]
[140.03274536 23.57076263]
[132.53274536 36.56114197]
[127.13007355 50.55439758]
[121.72740936 64.54765320]
[116.32474518 78.54090881]
[110.92207336 92.53416443]
[122.51709747 83.01809692]
[136.14636230 76.75367737]
[150.91876221 74.15049744]
[165.86837769 75.37875366]
[180.01779175 80.35814667]
[192.44181824 88.76310730]
[202.32815552 100.04407501]
[209.03039551 113.46347046]
[212.11030579 128.14387512]
[211.36651611 143.12541199]
[206.84765625 157.42855835]
[198.84918213 170.11810303]
[187.89408875 180.36436462]
[174.69863892 187.49737549]
[160.12559509 191.05079651]
[145.12782288 190.79225159]
[130.68592834 186.73866272]
[117.74417114 179.15505981]
[107.14874268 168.53730774]
[99.59239960 155.57962036]
[95.56921387 141.12921143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[7 32]
[8 31]
[12 27]
[13 26]
[16 23]
[17 22]
[41 140]
[42 139]
[43 138]
[44 137]
[45 136]
[62 135]
[63 134]
[64 133]
[65 132]
[66 131]
[67 130]
[68 129]
[69 128]
[70 127]
[71 126]
[72 125]
[75 122]
[76 121]
[81 119]
[82 118]
[83 117]
[84 116]
[85 115]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
