%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGAGAGCGCCUCCCCGCCCUCCUCAUCUGCAGCAGCCCCAGCCGCUGAGCCAGGAGUCACCACGGAGCAGCCCGGACCCCGGAGCCCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[77.43946075 193.19831848]
[84.19191742 179.51010132]
[96.22005463 170.11399841]
[92.97978973 155.46815491]
[89.73951721 140.82231140]
[86.49925232 126.17647552]
[81.57297516 117.04550171]
[80.87374115 108.04864502]
[83.62097168 100.82246399]
[88.48239136 96.46269226]
[93.85418701 95.36537170]
[87.52666473 81.76528168]
[72.95252991 76.26689148]
[66.72925568 62.38432693]
[72.06095123 48.52400208]
[65.73342133 34.92391205]
[59.40589905 21.32382202]
[53.07837296 7.72373343]
[36.06178665 7.86798429]
[20.70523643 0.66339004]
[10.00821781 -12.43067265]
[6.03752279 -28.80965424]
[9.52802563 -45.24183655]
[19.74720764 -58.50596619]
[12.58640957 -71.68637085]
[5.42561150 -84.86676788]
[-1.73518634 -98.04717255]
[-8.89598465 -111.22756958]
[-22.26609039 -113.57603455]
[-31.66446304 -123.09818268]
[-33.77501678 -136.11157227]
[-28.04056358 -147.76481628]
[-34.78799057 -161.16154480]
[-41.56267166 -167.55656433]
[-41.52962112 -175.08148193]
[-47.85714340 -188.68157959]
[-54.18466949 -202.28166199]
[-60.51219559 -215.88174438]
[-73.34879303 -225.13012695]
[-71.70240021 -239.93345642]
[-78.02993011 -253.53355408]
[-91.75861359 -262.50323486]
[-90.58494568 -278.86032104]
[-75.71629333 -285.77804565]
[-62.44824219 -276.14004517]
[-64.42984009 -259.86108398]
[-58.10231018 -246.26098633]
[-45.71830368 -237.98538208]
[-46.91210556 -222.20927429]
[-40.58457947 -208.60919189]
[-34.25705719 -195.00909424]
[-27.92953110 -181.40901184]
[-21.39126396 -167.90896606]
[-14.64383793 -154.51223755]
[1.47393179 -150.00038147]
[9.57622337 -134.97268677]
[4.28441668 -118.38836670]
[11.44521427 -105.20796967]
[18.60601234 -92.02756500]
[25.76681137 -78.84716797]
[32.92760849 -65.66676331]
[45.99577332 -67.36006927]
[58.88109207 -64.45085907]
[70.00821686 -57.27208710]
[78.00895691 -46.68008041]
[81.89050293 -33.95243835]
[81.15856934 -20.63393211]
[75.88023376 -8.34904099]
[66.67845917 1.39620769]
[73.00598907 14.99629688]
[79.33351135 28.59638596]
[85.66104126 42.19647598]
[99.69744873 47.04566956]
[106.30820465 60.74795532]
[101.12674713 75.43775940]
[107.45427704 89.03784943]
[118.30540466 99.39414978]
[132.18580627 105.08047485]
[146.06622314 110.76679993]
[159.94662476 116.45312500]
[176.89562988 116.86251068]
[181.19419861 133.26246643]
[166.62510681 141.93301392]
[154.26029968 130.33352661]
[140.37989807 124.64720917]
[126.49948883 118.96087646]
[112.61907959 113.27455139]
[101.14509583 122.93621063]
[104.38536072 137.58204651]
[107.62562561 152.22789001]
[110.86589813 166.87373352]
[125.73507690 170.31903076]
[137.63151550 179.88133240]
[144.19316101 193.66203308]
[144.11718750 208.92495728]
[137.41868591 222.63964844]
[125.42764282 232.08305359]
[110.52489471 235.38015747]
[95.66938782 231.87632751]
[83.81069946 222.26725769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[5 89]
[6 88]
[11 76]
[12 75]
[15 72]
[16 71]
[17 70]
[18 69]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[32 54]
[33 53]
[35 52]
[36 51]
[37 50]
[38 49]
[40 47]
[41 46]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
