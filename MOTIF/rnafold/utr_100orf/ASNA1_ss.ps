%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCUUCGUAUGGUGCGCUCCGCUGGAUCACGUGAGCCAGUUCCAAAAUGGCGGCAGGGGUGGCCGGGUGGGGGGUUGAGGCAGAGGAGUUCGAAGAUGCUCCUGAUGUGGAGCCGCUGGAGCCUACACUUAGCAACAUCAUCGAGC\
) } def
/len { sequence length } bind def

/coor [
[168.86544800 137.45211792]
[164.63354492 135.28044128]
[161.24459839 131.12899780]
[147.21067810 125.83282471]
[133.17677307 120.53665924]
[119.14286041 115.24049377]
[105.10894775 109.94432831]
[91.01962280 104.79740906]
[76.87645721 99.80031586]
[66.70103455 109.45312500]
[53.41800690 113.74517822]
[39.64957428 111.88934326]
[28.08787346 104.30626678]
[20.96858215 92.53076172]
[19.63869667 78.90145111]
[5.60478592 73.60528564]
[-10.03844070 75.97172546]
[-19.21413231 64.23904419]
[-33.24804306 58.94287491]
[-47.28195190 53.64670944]
[-61.31586075 48.35054398]
[-75.34976959 43.05437851]
[-89.38368225 37.75821686]
[-103.41759491 32.46205139]
[-117.50691986 27.31512833]
[-131.65008545 22.31803131]
[-140.85505676 22.40317917]
[-146.03848267 17.06185913]
[-160.07238770 11.76569462]
[-174.10630798 6.46952915]
[-188.14021301 1.17336392]
[-207.80551147 5.39244032]
[-219.51004028 -9.94797993]
[-233.75608826 -14.64375687]
[-251.65405273 -10.45280361]
[-262.86312866 -23.91710091]
[-277.20562744 -28.30944252]
[-291.54812622 -32.70178604]
[-305.89062500 -37.09412766]
[-317.59933472 -27.04875565]
[-332.88342285 -24.95089722]
[-346.86572266 -31.46997261]
[-355.08459473 -44.52576828]
[-354.91738892 -59.95222473]
[-346.41748047 -72.82682037]
[-332.29718018 -79.04131317]
[-317.06216431 -76.61268616]
[-305.57391357 -66.31590271]
[-301.49829102 -51.43662643]
[-287.15579224 -47.04428482]
[-272.81329346 -42.65194321]
[-258.47079468 -38.25960159]
[-247.59976196 -43.66312408]
[-235.58418274 -40.06882477]
[-229.06030273 -28.88979721]
[-214.81427002 -24.19401932]
[-206.06288147 -29.63102722]
[-195.54455566 -29.30944824]
[-186.78189087 -23.09313583]
[-182.84403992 -12.86054611]
[-168.81013489 -7.56438112]
[-154.77622986 -2.26821589]
[-140.74230957 3.02794933]
[-126.65298462 8.17487049]
[-112.50982666 13.17196751]
[-105.10398865 12.42958355]
[-98.12142944 18.42813873]
[-84.08751678 23.72430420]
[-70.05360413 29.02046967]
[-56.01969528 34.31663513]
[-41.98578644 39.61280060]
[-27.95187759 44.90896606]
[-13.91796684 50.20513153]
[0.72146076 47.45987320]
[10.90095139 59.57138062]
[24.93486214 64.86754608]
[37.14920425 54.33697891]
[53.09561920 51.36638641]
[68.45886230 56.85549927]
[79.03317261 69.40173340]
[81.87355804 85.65715027]
[96.01671600 90.65425110]
[104.12252808 90.15903473]
[110.40511322 95.91042328]
[124.43902588 101.20658875]
[138.47293091 106.50275421]
[152.50685120 111.79891968]
[166.54075623 117.09508514]
[180.73616028 121.94179535]
[195.07865906 126.33413696]
[209.42115784 130.72647095]
[223.76365662 135.11882019]
[238.10615540 139.51115417]
[252.44866943 143.90350342]
[267.90957642 140.54635620]
[277.81332397 151.67134094]
[292.15582275 156.06367493]
[306.49832153 160.45602417]
[320.84082031 164.84835815]
[333.22659302 155.68872070]
[348.45294189 155.57981873]
[360.67916870 164.35383606]
[365.33871460 178.47569275]
[379.68121338 182.86802673]
[394.02371216 187.26037598]
[408.36621094 191.65270996]
[422.75451660 195.89257812]
[437.18701172 199.97950745]
[451.61950684 204.06643677]
[466.05203247 208.15336609]
[480.48452759 212.24029541]
[489.66540527 211.56953430]
[495.17825317 216.57015991]
[509.52075195 220.96250916]
[522.54022217 212.30064392]
[538.07562256 214.08537292]
[548.79162598 225.47399902]
[549.62847900 241.08917236]
[540.19104004 253.55787659]
[524.93536377 256.99276733]
[511.06472778 249.77201843]
[505.12841797 235.30500793]
[490.78588867 230.91265869]
[476.39758301 226.67279053]
[461.96508789 222.58586121]
[447.53259277 218.49893188]
[433.10009766 214.41201782]
[418.66760254 210.32508850]
[411.32400513 211.53726196]
[403.97387695 205.99520874]
[389.63137817 201.60287476]
[375.28887939 197.21052551]
[360.94638062 192.81819153]
[349.17800903 201.90904236]
[334.13522339 202.33203125]
[321.58105469 193.71543884]
[316.44848633 179.19087219]
[302.10598755 174.79852295]
[287.76348877 170.40618896]
[273.42098999 166.01383972]
[258.98593140 169.68515015]
[248.05632019 158.24600220]
[233.71382141 153.85365295]
[219.37132263 149.46131897]
[205.02882385 145.06896973]
[190.68630981 140.67663574]
[176.34381104 136.28428650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 82]
[9 81]
[15 76]
[16 75]
[18 73]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 67]
[25 65]
[26 64]
[28 63]
[29 62]
[30 61]
[31 60]
[33 56]
[34 55]
[36 52]
[37 51]
[38 50]
[39 49]
[89 147]
[90 146]
[91 145]
[92 144]
[93 143]
[94 142]
[96 140]
[97 139]
[98 138]
[99 137]
[103 133]
[104 132]
[105 131]
[106 130]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
