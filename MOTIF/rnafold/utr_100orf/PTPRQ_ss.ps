%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUUUUCUUAUCAUUUUUCUUUUACUUUUUAUUGGGACUUCAGAGACACAGGUUGAUGUUUCCAAUGUCGUUCCUGGUACUAGGUACGAUAUAACCA\
) } def
/len { sequence length } bind def

/coor [
[88.44958496 159.61711121]
[81.01148987 146.59118652]
[81.40660858 131.59638977]
[89.51856232 118.98189545]
[81.16078186 131.43771362]
[72.80299377 143.89353943]
[76.10164642 159.34974670]
[67.43496704 172.56581116]
[51.94474792 175.70085144]
[38.82105637 166.89494324]
[35.84994888 151.37243652]
[44.79412842 138.34257507]
[60.34717560 135.53575134]
[68.70496368 123.07993317]
[77.06274414 110.62410736]
[63.75646210 117.54818726]
[50.40947342 124.39347076]
[35.69631195 127.31285858]
[20.74688339 126.08214569]
[6.70925236 120.79585266]
[-5.33854961 111.85994720]
[-14.47129631 99.96066284]
[-19.98763084 86.01182556]
[-21.46391678 71.08464813]
[-18.78678322 56.32548523]
[-12.16182423 42.86777496]
[-2.09780931 31.74502563]
[10.63238335 23.81141472]
[25.05112648 19.67621422]
[40.05111313 19.65699196]
[54.48040771 23.75522423]
[67.23088837 31.65618324]
[77.32337952 42.75310516]
[83.98281097 56.19379044]
[86.69762421 70.94287109]
[93.05670929 84.52823639]
[93.98925018 69.55725098]
[94.92179871 54.58626556]
[95.85433960 39.61528015]
[96.78688812 24.64429665]
[88.98598480 16.74798203]
[86.96084595 6.06015491]
[91.15787506 -3.73470092]
[99.92082214 -9.39923954]
[101.78230286 -24.28328705]
[92.35356903 -36.68235397]
[94.45340729 -51.75037766]
[106.33213043 -60.66281891]
[108.19361115 -75.54686737]
[110.05509186 -90.43091583]
[103.18628693 -105.32224274]
[112.86785889 -118.55851746]
[129.14024353 -116.52340698]
[135.26379395 -101.31044769]
[124.93914032 -88.56943512]
[123.07765961 -73.68538666]
[121.21617889 -58.80133820]
[130.53407288 -47.23793030]
[128.85829163 -32.11687088]
[116.66635132 -22.42180634]
[114.80487061 -7.53775835]
[123.72177887 9.50047970]
[111.75787354 25.57684135]
[110.82532501 40.54782486]
[109.89278412 55.51881027]
[108.96023560 70.48979187]
[108.02769470 85.46077728]
[116.19075775 98.04506683]
[130.24128723 103.29696655]
[144.29182434 108.54886627]
[158.34236145 113.80075836]
[172.39289856 119.05265808]
[186.44343567 124.30455017]
[200.49397278 129.55645752]
[216.12966919 127.14070892]
[225.34230042 138.84440613]
[239.39283752 144.09631348]
[253.44337463 149.34820557]
[267.49389648 154.60009766]
[283.56976318 151.35987854]
[294.20935059 163.83911133]
[288.46755981 179.20024109]
[272.25106812 181.64103699]
[262.24200439 168.65063477]
[248.19146729 163.39874268]
[234.14093018 158.14685059]
[220.09040833 152.89494324]
[205.45970154 155.68634033]
[195.24208069 143.60697937]
[181.19154358 138.35508728]
[167.14100647 133.10319519]
[153.09046936 127.85129547]
[139.03993225 122.59940338]
[124.98939514 117.34750366]
[110.93885803 112.09560394]
[124.88403320 117.62119293]
[133.94216919 129.57737732]
[135.48696899 144.49760437]
[129.07054138 158.05598450]
[116.55326080 166.32142639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[36 67]
[37 66]
[38 65]
[39 64]
[40 63]
[44 61]
[45 60]
[48 57]
[49 56]
[50 55]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[73 90]
[74 89]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
