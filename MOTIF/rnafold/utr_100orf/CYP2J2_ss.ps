%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGGGACCGCCGCCUGCUUGGACCGCAGAAGAGCAGGAGGACGUCUGAGCCAUGCUCGCGGCGAUGGGCUCUCUGGCGGCUGCCCUCUGGGCAGUGGUCCAUCCUCGGACUCUCCUACUGGGCACUGUCGCCUUUCUGCUCGCUGCUGACU\
) } def
/len { sequence length } bind def

/coor [
[-51.38844681 188.85922241]
[-64.53008270 196.09092712]
[-77.67171478 203.32263184]
[-86.03190613 216.75459290]
[-100.91263580 216.11187744]
[-114.05426788 223.34356689]
[-127.19589996 230.57527161]
[-140.33753967 237.80697632]
[-144.83894348 252.71922302]
[-158.26945496 259.86599731]
[-172.45825195 255.48268127]
[-185.59988403 262.71438599]
[-193.96008301 276.14633179]
[-208.84082031 275.50363159]
[-221.98243713 282.73532104]
[-235.12406921 289.96701050]
[-248.26570129 297.19873047]
[-261.40734863 304.43041992]
[-274.54898071 311.66213989]
[-287.69061279 318.89382935]
[-287.32467651 334.19497681]
[-294.12182617 347.90835571]
[-306.52017212 356.88278198]
[-321.67059326 359.05593872]
[-336.09170532 353.92852783]
[-346.46957397 342.67871094]
[-350.41949463 327.89166260]
[-347.03378296 312.96533203]
[-337.09045410 301.32968140]
[-322.87442017 295.65847778]
[-307.65237427 297.25494385]
[-294.92230225 305.75219727]
[-281.78067017 298.52050781]
[-268.63903809 291.28878784]
[-255.49740601 284.05709839]
[-242.35577393 276.82537842]
[-229.21414185 269.59368896]
[-216.07250977 262.36199951]
[-208.65229797 249.44728088]
[-192.83158875 249.57275391]
[-179.68995667 242.34104919]
[-175.79994202 228.00914001]
[-162.57546997 220.48796082]
[-147.56922913 224.66534424]
[-134.42759705 217.43363953]
[-121.28597260 210.20193481]
[-108.14434052 202.97024536]
[-100.72412109 190.05552673]
[-84.90341187 190.18099976]
[-71.76177979 182.94929504]
[-58.62015152 175.71759033]
[-60.69575882 161.80668640]
[-57.88251495 147.99548340]
[-50.49967194 135.95379639]
[-39.42021942 127.14469910]
[-25.96770668 122.64664459]
[-11.75814152 123.02156830]
[1.49412966 128.24470520]
[12.18325615 137.70513916]
[25.47059822 130.74478149]
[38.75793839 123.78443146]
[52.04528046 116.82407379]
[65.33261871 109.86371613]
[78.61996460 102.90335846]
[91.90730286 95.94300079]
[93.58287811 92.39299011]
[96.84068298 89.61838531]
[101.28917694 88.31972504]
[106.23387146 88.99185181]
[119.92449951 82.86267090]
[120.43021393 67.64736938]
[127.46328735 54.21520615]
[139.58128357 45.20553970]
[154.34873962 42.36239624]
[168.82646179 46.19710159]
[180.15660095 55.89728928]
[193.84721375 49.76811600]
[207.53784180 43.63893890]
[221.22846985 37.50976562]
[234.91909790 31.38059235]
[248.60972595 25.25141907]
[262.17163086 18.84244347]
[275.59906006 12.15636826]
[289.02651978 5.47029257]
[302.45397949 -1.21578252]
[315.88140869 -7.90185785]
[320.99127197 -22.61672211]
[334.70385742 -29.20607567]
[348.70074463 -24.24393654]
[362.12817383 -30.93001175]
[375.55563354 -37.61608505]
[388.98309326 -44.30216217]
[395.31835938 -50.96999741]
[402.75555420 -50.98447800]
[416.31747437 -57.39345551]
[422.78829956 -63.92980957]
[430.22424316 -63.79159164]
[443.91485596 -69.92076111]
[457.60549927 -76.04993439]
[471.29611206 -82.17911530]
[484.98675537 -88.30828857]
[490.38531494 -103.16194153]
[504.74093628 -109.77190399]
[519.53668213 -104.21659851]
[525.99450684 -89.79189301]
[520.28308105 -75.05570221]
[505.79089355 -68.75075531]
[491.11590576 -74.61766052]
[477.42529297 -68.48848724]
[463.73468018 -62.35931396]
[450.04403687 -56.23013687]
[436.35342407 -50.10096359]
[422.72644043 -43.83155823]
[409.16455078 -37.42258453]
[395.66915894 -30.87471199]
[382.24169922 -24.18863678]
[368.81427002 -17.50256157]
[355.38681030 -10.81648731]
[350.91168213 3.34362435]
[337.38958740 10.31553459]
[322.56750488 5.52559137]
[309.14004517 12.21166706]
[295.71258545 18.89774132]
[282.28515625 25.58381653]
[268.85769653 32.26989365]
[266.50363159 36.48979950]
[261.44351196 39.24351120]
[254.73889160 38.94204330]
[241.04826355 45.07122040]
[227.35765076 51.20039368]
[213.66702271 57.32956696]
[199.97639465 63.45874023]
[186.28576660 69.58791351]
[185.97430420 84.49993896]
[179.19134521 97.85286713]
[167.23448181 106.97396851]
[152.44281006 110.01152802]
[137.73941040 106.31060028]
[126.05367279 96.55329895]
[112.36304474 102.68247223]
[98.86766052 109.23034668]
[85.58032227 116.19070435]
[72.29297638 123.15105438]
[59.00563812 130.11141968]
[45.71829605 137.07176208]
[32.43095398 144.03211975]
[19.14361191 150.99247742]
[20.69302940 166.96684265]
[16.01712036 182.27972412]
[5.85720158 194.60426331]
[-8.21445751 202.07952881]
[-24.03790092 203.59144592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[5 47]
[6 46]
[7 45]
[8 44]
[11 41]
[12 40]
[14 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[59 147]
[60 146]
[61 145]
[62 144]
[63 143]
[64 142]
[65 141]
[69 140]
[70 139]
[76 133]
[77 132]
[78 131]
[79 130]
[80 129]
[81 128]
[82 125]
[83 124]
[84 123]
[85 122]
[86 121]
[89 118]
[90 117]
[91 116]
[92 115]
[94 114]
[95 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
