%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCCGGUGGGAGGGAACAUCUGGAACAUUAGACAGGAUGCUGAUCUUCUGGACAAUCACACUUUUCCUGCUGGGAGCAGCCAAAGGAAAAGAAGUUUGCUAUGAGGACCUCGGGUGCUUUUCUGACACUGAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[80.15602875 457.41754150]
[74.10951233 443.35702515]
[75.30139923 428.09799194]
[83.45780945 415.14688110]
[96.70444489 407.47973633]
[96.02172852 392.49526978]
[95.33900452 377.51080322]
[94.65628815 362.52636719]
[93.97357178 347.54190063]
[82.83415985 337.72103882]
[81.92832947 322.53442383]
[92.30487061 310.91696167]
[91.62215424 295.93249512]
[90.93943024 280.94805908]
[90.25671387 265.96359253]
[89.57399750 250.97914124]
[88.89127350 235.99468994]
[88.03804016 221.01896667]
[87.01440430 206.05393982]
[85.99076843 191.08891296]
[84.96713257 176.12388611]
[83.94349670 161.15884399]
[82.91986084 146.19381714]
[81.89622498 131.22879028]
[82.49874878 146.21667480]
[75.24156189 159.34425354]
[62.22879410 166.80534363]
[47.23332596 166.43670654]
[34.60289001 158.34523010]
[27.99951744 144.87690735]
[29.33776665 129.93672180]
[38.22962952 117.85638428]
[52.09703064 112.13841248]
[66.91706848 114.43965149]
[52.16514587 111.72290802]
[37.41321945 109.00616455]
[22.15055656 115.00476074]
[9.49463844 104.57596588]
[12.46479034 88.44802856]
[28.00557327 83.21199036]
[40.12996292 94.25424194]
[54.88188934 96.97098541]
[69.63381195 99.68772888]
[81.43018341 81.22196960]
[100.01945496 77.54914856]
[105.04264832 63.41523743]
[110.06584167 49.28132248]
[115.08903503 35.14740753]
[120.11222839 21.01349449]
[124.97422028 6.82332087]
[129.67437744 -7.42127466]
[134.37454224 -21.66587067]
[134.09812927 -30.88433838]
[139.34721375 -36.17907715]
[144.37040710 -50.31299210]
[149.39360046 -64.44690704]
[139.75440979 -74.64777374]
[135.48901367 -87.94891357]
[137.38017273 -101.72166443]
[144.99984741 -113.27007294]
[156.80436707 -120.35860443]
[170.44683838 -121.64484406]
[175.79046631 -135.66075134]
[181.13409424 -149.67666626]
[186.47772217 -163.69256592]
[191.82133484 -177.70848083]
[197.16496277 -191.72438049]
[202.50859070 -205.74029541]
[207.85221863 -219.75619507]
[212.71420288 -233.94636536]
[217.08889771 -248.29426575]
[221.46359253 -262.64215088]
[225.83827209 -276.99005127]
[221.61203003 -292.83526611]
[233.41081238 -304.22479248]
[249.09703064 -299.44204712]
[252.53405762 -283.40710449]
[240.18617249 -272.61535645]
[235.81147766 -258.26748657]
[231.43679810 -243.91957092]
[227.06210327 -229.57168579]
[228.45397949 -226.24346924]
[228.24948120 -222.06106567]
[226.05871582 -217.80754089]
[221.86811829 -214.41256714]
[216.52450562 -200.39666748]
[211.18087769 -186.38075256]
[205.83724976 -172.36485291]
[200.49362183 -158.34893799]
[195.14999390 -144.33303833]
[189.80636597 -130.31712341]
[184.46273804 -116.30121613]
[194.94898987 -104.05903625]
[197.87176514 -88.11174011]
[192.34526062 -72.77029419]
[179.78071594 -62.23007965]
[163.52751160 -59.42371368]
[158.50431824 -45.28979874]
[153.48112488 -31.15588379]
[148.61914062 -16.96571159]
[143.91897583 -2.72111535]
[139.21882629 11.52348042]
[140.11785889 18.92476273]
[134.24613953 26.03668785]
[129.22294617 40.17060089]
[124.19976044 54.30451584]
[119.17656708 68.43843079]
[114.15336609 82.57234192]
[125.07502747 99.13810730]
[118.91738892 120.27361298]
[96.86125946 130.20515442]
[97.88489532 145.17018127]
[98.90853119 160.13520813]
[99.93216705 175.10025024]
[100.95580292 190.06527710]
[101.97943878 205.03030396]
[103.00307465 219.99533081]
[106.73827362 228.42770386]
[103.87573242 235.31196594]
[104.55844879 250.29641724]
[105.24116516 265.28088379]
[105.92388916 280.26531982]
[106.60660553 295.24978638]
[107.28932190 310.23425293]
[118.67930603 320.85995483]
[119.15821838 336.06607056]
[108.95802307 346.85919189]
[109.64073944 361.84365845]
[110.32346344 376.82809448]
[111.00617981 391.81256104]
[111.68889618 406.79699707]
[125.57786560 413.22781372]
[134.87818909 425.38357544]
[137.45271301 440.47100830]
[132.70983887 455.02310181]
[121.73944855 465.69592285]
[107.06244659 470.03692627]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[12 124]
[13 123]
[14 122]
[15 121]
[16 120]
[17 119]
[18 117]
[19 116]
[20 115]
[21 114]
[22 113]
[23 112]
[24 111]
[34 43]
[35 42]
[36 41]
[45 108]
[46 107]
[47 106]
[48 105]
[49 104]
[50 102]
[51 101]
[52 100]
[54 99]
[55 98]
[56 97]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
