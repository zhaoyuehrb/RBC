%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGACCCCCAUCUCAUGUAGGAAUGCCGUGUCCCCAGGGUGAGCCCUCAGGUAAGGGUACCAGUUUCUUCCUGAGCCAUGACCAGAGCCAUUCCCAGAUAAAUGAGGUUUCCUGGAAGGAUG\
) } def
/len { sequence length } bind def

/coor [
[-41.14485550 269.01797485]
[-51.75145721 279.62457275]
[-62.35805893 290.23117065]
[-72.96466064 300.83776855]
[-69.10520935 315.63818359]
[-73.14544678 330.28649902]
[-83.90380096 340.87536621]
[-98.42070770 344.63238525]
[-112.77237701 340.64547729]
[-123.37897491 351.25207520]
[-119.32635498 366.06668091]
[-123.23948669 380.91870117]
[-134.06576538 391.81307983]
[-148.89297485 395.81924438]
[-163.73268127 391.85955811]
[-174.59304810 380.99917603]
[-178.55271912 366.15948486]
[-174.54655457 351.33227539]
[-163.65219116 340.50601196]
[-148.80015564 336.59286499]
[-133.98558044 340.64547729]
[-123.37897491 330.03887939]
[-127.36587524 315.68722534]
[-123.60885620 301.17031860]
[-113.01998138 290.41195679]
[-98.37166595 286.37170410]
[-83.57126617 290.23117065]
[-72.96466064 279.62457275]
[-62.35805893 269.01797485]
[-51.75145721 258.41137695]
[-41.41695404 247.53947449]
[-31.36118126 236.40927124]
[-21.30540848 225.27906799]
[-11.24963570 214.14886475]
[-1.47904849 202.76748657]
[8.00008202 191.14225769]
[17.47921181 179.51701355]
[26.95834351 167.89178467]
[36.43747330 156.26655579]
[36.83393860 151.40237427]
[40.36642838 146.76741028]
[46.70309067 144.30853271]
[56.75886536 133.17832947]
[66.81463623 122.04812622]
[76.87040710 110.91792297]
[86.92618561 99.78771973]
[92.13576508 85.72144318]
[91.75576782 70.72624969]
[91.37577820 55.73106766]
[90.99578857 40.73588181]
[90.61579895 25.74069595]
[90.23580933 10.74550915]
[86.85843658 2.13258052]
[90.04098511 -4.63327837]
[90.04098511 -19.63327789]
[90.04098511 -34.63327789]
[90.04098511 -49.63327789]
[90.04098511 -64.63327789]
[77.94640350 -74.54564667]
[75.10378265 -89.92269135]
[82.85532379 -103.50384521]
[97.54098511 -108.87649536]
[112.22664642 -103.50384521]
[119.97818756 -89.92269135]
[117.13556671 -74.54564667]
[105.04098511 -64.63327789]
[105.04098511 -49.63327789]
[105.04098511 -34.63327789]
[105.04098511 -19.63327789]
[105.04098511 -4.63327837]
[105.23099518 10.36551857]
[105.61098480 25.36070442]
[105.99097443 40.35589218]
[106.37096405 55.35107803]
[106.75095367 70.34626007]
[107.13095093 85.34144592]
[113.98654938 71.99975586]
[114.82597351 57.02326584]
[121.92016602 43.80689240]
[133.93792725 34.83062363]
[148.62419128 31.77880859]
[163.22315979 35.22410583]
[174.99542236 44.52001953]
[181.73194885 57.92222214]
[182.16870117 72.91586304]
[176.22369385 86.68746185]
[165.01249695 96.65285492]
[150.63882446 100.94207764]
[135.79824829 98.74969482]
[121.34963989 102.77930450]
[135.96138000 106.17002106]
[150.57313538 109.56074524]
[165.18487549 112.95146179]
[176.81854248 102.68318939]
[192.26905823 101.24759674]
[205.59539795 109.19670105]
[211.67330933 123.47390747]
[208.16571045 138.58934021]
[196.42132568 148.73080444]
[180.95614624 149.99870300]
[167.71681213 141.90550232]
[161.79414368 127.56320953]
[147.18240356 124.17248535]
[132.57066345 120.78176117]
[117.95892334 117.39104462]
[105.23097992 116.71717834]
[98.05638885 109.84349060]
[88.00061035 120.97370148]
[77.94483948 132.10389709]
[67.88906860 143.23410034]
[57.83329773 154.36430359]
[48.06270981 165.74568176]
[38.58357620 177.37091064]
[29.10444832 188.99615479]
[19.62531662 200.62138367]
[10.14618587 212.24662781]
[8.67520714 218.88255310]
[4.62861776 223.07617188]
[-0.11943195 224.20463562]
[-10.17520428 235.33483887]
[-20.23097801 246.46504211]
[-30.28675079 257.59524536]
[-32.09194565 264.14816284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[9 22]
[10 21]
[31 122]
[32 121]
[33 120]
[34 119]
[35 116]
[36 115]
[37 114]
[38 113]
[39 112]
[42 111]
[43 110]
[44 109]
[45 108]
[46 107]
[47 76]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
