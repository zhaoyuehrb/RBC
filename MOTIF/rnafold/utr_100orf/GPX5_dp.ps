%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:45:55 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (GPX5)
} def

/sequence { (\
UCAUGACUACACAGUUAAGGGUCGUCCAUCUGCUUCCCCUUCUCCUAGCCUGCUUUGUGCAAACAAGUCCCAAGCAGGAGAAGAUGAAGAUGGAUUGCCACA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 20 0.044800187 ubox
1 21 0.006600001 ubox
2 19 0.668087084 ubox
2 20 0.020880070 ubox
3 15 0.008007378 ubox
3 25 0.007103916 ubox
4 11 0.026655429 ubox
4 13 0.036949941 ubox
4 14 0.007409465 ubox
4 17 0.921323644 ubox
4 24 0.008858224 ubox
4 102 0.006273622 ubox
5 10 0.030456138 ubox
5 12 0.040905774 ubox
5 16 0.977044742 ubox
5 23 0.018175388 ubox
5 101 0.007475054 ubox
6 15 0.982156706 ubox
6 22 0.018190188 ubox
7 14 0.982608087 ubox
7 19 0.032795352 ubox
7 21 0.018169757 ubox
8 13 0.919237469 ubox
8 17 0.013794762 ubox
8 18 0.031156729 ubox
8 20 0.017737176 ubox
9 15 0.018394987 ubox
9 16 0.014817917 ubox
10 14 0.019614956 ubox
14 101 0.040810438 ubox
15 100 0.040519507 ubox
19 99 0.081291301 ubox
20 98 0.072640077 ubox
20 99 0.993911627 ubox
21 98 0.996872631 ubox
21 101 0.008262855 ubox
22 97 0.985254500 ubox
22 100 0.007921606 ubox
23 97 0.088992581 ubox
24 95 0.978656568 ubox
24 96 0.063297360 ubox
24 98 0.004097460 ubox
25 94 0.999463891 ubox
25 97 0.003397733 ubox
26 93 0.999977946 ubox
27 92 0.999971300 ubox
28 91 0.998740864 ubox
28 95 0.004690477 ubox
29 90 0.996331071 ubox
29 94 0.005091907 ubox
30 89 0.938659142 ubox
30 93 0.005138054 ubox
31 88 0.827634954 ubox
31 92 0.005117790 ubox
32 85 0.004587456 ubox
32 91 0.007957201 ubox
33 89 0.344143891 ubox
34 84 0.028987182 ubox
34 87 0.094337485 ubox
34 88 0.547857519 ubox
35 83 0.010047714 ubox
35 84 0.151548062 ubox
35 86 0.080714993 ubox
35 87 0.936017772 ubox
35 88 0.007650372 ubox
36 83 0.121566729 ubox
36 86 0.940885186 ubox
39 83 0.990819694 ubox
40 81 0.004849732 ubox
40 82 0.998720841 ubox
41 81 0.999588435 ubox
42 80 0.999972581 ubox
43 79 0.999832199 ubox
44 78 0.999273722 ubox
45 77 0.998883846 ubox
46 76 0.991480598 ubox
48 75 0.994288465 ubox
49 74 0.990146520 ubox
49 78 0.037747612 ubox
50 67 0.009221634 ubox
50 74 0.092356982 ubox
50 77 0.046446709 ubox
51 61 0.029111025 ubox
51 66 0.007621765 ubox
51 72 0.937478033 ubox
51 73 0.115821937 ubox
51 76 0.066527501 ubox
52 60 0.031185095 ubox
52 68 0.279931807 ubox
52 71 0.938486407 ubox
52 75 0.081991507 ubox
53 59 0.031269602 ubox
53 67 0.347462857 ubox
53 74 0.081968903 ubox
54 63 0.003249237 ubox
54 66 0.283523037 ubox
54 67 0.885048457 ubox
54 73 0.078046393 ubox
55 62 0.003838614 ubox
55 63 0.006238718 ubox
55 65 0.199686035 ubox
55 66 0.945050889 ubox
55 67 0.031407987 ubox
55 72 0.064040292 ubox
55 73 0.021248671 ubox
56 61 0.003826551 ubox
56 62 0.008870456 ubox
56 65 0.973571775 ubox
56 66 0.025064053 ubox
56 72 0.028182495 ubox
57 64 0.995242005 ubox
57 71 0.033557095 ubox
58 63 0.985314420 ubox
58 65 0.055071139 ubox
58 67 0.003218262 ubox
59 64 0.055563696 ubox
59 68 0.061510563 ubox
60 67 0.062504768 ubox
67 75 0.004969496 ubox
68 74 0.004866962 ubox
4 17 0.9500000 lbox
5 16 0.9500000 lbox
6 15 0.9500000 lbox
7 14 0.9500000 lbox
8 13 0.9500000 lbox
20 99 0.9500000 lbox
21 98 0.9500000 lbox
22 97 0.9500000 lbox
24 95 0.9500000 lbox
25 94 0.9500000 lbox
26 93 0.9500000 lbox
27 92 0.9500000 lbox
28 91 0.9500000 lbox
29 90 0.9500000 lbox
30 89 0.9500000 lbox
31 88 0.9500000 lbox
35 87 0.9500000 lbox
36 86 0.9500000 lbox
39 83 0.9500000 lbox
40 82 0.9500000 lbox
41 81 0.9500000 lbox
42 80 0.9500000 lbox
43 79 0.9500000 lbox
44 78 0.9500000 lbox
45 77 0.9500000 lbox
46 76 0.9500000 lbox
48 75 0.9500000 lbox
49 74 0.9500000 lbox
51 72 0.9500000 lbox
52 71 0.9500000 lbox
54 67 0.9500000 lbox
55 66 0.9500000 lbox
56 65 0.9500000 lbox
57 64 0.9500000 lbox
58 63 0.9500000 lbox
showpage
end
%%EOF
