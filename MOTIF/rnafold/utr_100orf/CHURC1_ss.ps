%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:19:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCGGCUCGGUUCCCGAGACGGAAUACCCAGGAGUCGAGUACUUGGGCGCAUGCGGCAACCGUAUCUCAGUUCUCGCGAGGUUUCGUCUUCCCGGAAGCGUUGGAGGACAUUCCCUGUUGACUGCGUCGCGAUGUGUGGCGACUGUGUGG\
) } def
/len { sequence length } bind def

/coor [
[148.58963013 114.15402985]
[148.64938354 129.15391541]
[140.10324097 141.48126221]
[126.03556061 146.68705750]
[111.52387238 142.89274597]
[102.46295929 154.84681702]
[93.40204620 166.80090332]
[84.34113312 178.75497437]
[82.17114258 194.42665100]
[68.31694794 199.89570618]
[59.25603485 211.84977722]
[50.19512177 223.80384827]
[41.13420868 235.75791931]
[32.07329559 247.71199036]
[27.32405663 263.98715210]
[10.37020874 263.92892456]
[5.73286486 247.62153625]
[20.11922264 238.65107727]
[29.18013573 226.69700623]
[38.24104691 214.74293518]
[47.30195999 202.78886414]
[56.36287308 190.83479309]
[57.88476944 176.01814270]
[72.38706207 169.69406128]
[81.44797516 157.73999023]
[90.50888824 145.78590393]
[99.56980133 133.83183289]
[96.54243469 126.96997833]
[81.62995911 125.35198212]
[90.48771667 113.24626923]
[87.46035004 106.38441467]
[72.52269745 105.01819611]
[57.58504868 103.65197754]
[42.64739609 102.28575897]
[27.70974159 100.91954041]
[12.77208996 99.55332947]
[3.36530805 111.78099823]
[-11.16664791 116.96036530]
[-26.18668175 113.43870544]
[-36.90195847 102.33976746]
[-39.89326859 87.20518494]
[-34.20609665 72.86434174]
[-21.65520096 63.89336014]
[-6.24552488 63.15483856]
[7.10576010 70.88443756]
[14.13830757 84.61567688]
[29.07596016 85.98189545]
[44.01361084 87.34810638]
[58.95126343 88.71432495]
[73.88891602 90.08054352]
[88.82656860 91.44676208]
[103.42094421 87.98204041]
[116.15060425 80.04758453]
[128.88026428 72.11312103]
[141.60993958 64.17866516]
[154.33959961 56.24420166]
[165.31565857 46.02040482]
[174.13244629 33.88515091]
[182.94921875 21.74989510]
[191.76599121 9.61464024]
[200.45935059 -2.60934043]
[209.02836609 -14.92079163]
[217.59739685 -27.23224449]
[226.16641235 -39.54369354]
[217.79997253 -50.36730576]
[212.84059143 -63.09881210]
[211.68394470 -76.69618225]
[214.41490173 -90.04938507]
[220.80133057 -102.07105255]
[230.31384277 -111.78496552]
[242.16963196 -118.40538788]
[255.39691162 -121.40057373]
[268.91455078 -120.53549957]
[281.62045288 -115.89023590]
[290.68136597 -127.84430695]
[299.74227905 -139.79838562]
[308.80319214 -151.75245667]
[317.86410522 -163.70652771]
[326.92501831 -175.66059875]
[329.63854980 -184.44569397]
[336.29269409 -187.76264954]
[345.59402466 -199.53062439]
[354.89532471 -211.29861450]
[357.38250732 -226.92309570]
[371.34469604 -232.11024475]
[380.64602661 -243.87821960]
[389.94732666 -255.64619446]
[399.24865723 -267.41418457]
[408.54998779 -279.18215942]
[403.44287109 -293.73965454]
[407.03912354 -308.74203491]
[418.19113159 -319.40203857]
[433.34039307 -322.31811523]
[447.65280151 -316.55978394]
[456.56134033 -303.96447754]
[457.22329712 -288.55130005]
[449.42745972 -275.23858643]
[435.66146851 -268.27435303]
[420.31796265 -269.88082886]
[411.01663208 -258.11285400]
[401.71533203 -246.34487915]
[392.41400146 -234.57688904]
[383.11267090 -222.80891418]
[381.29080200 -208.02615356]
[366.66333008 -201.99728394]
[357.36199951 -190.22930908]
[348.06066895 -178.46131897]
[338.87908936 -166.59968567]
[329.81817627 -154.64561462]
[320.75726318 -142.69154358]
[311.69635010 -130.73747253]
[302.63543701 -118.78339386]
[293.57452393 -106.82932281]
[302.75064087 -93.22712708]
[306.74261475 -77.28584290]
[305.05462646 -60.91354370]
[297.87182617 -46.07606125]
[286.04016113 -34.56091690]
[270.96679688 -27.76196861]
[254.45278931 -26.51072311]
[238.47785950 -30.97467232]
[229.90884399 -18.66321945]
[221.33981323 -6.35176897]
[212.77079773 5.95968294]
[211.52362061 13.28935909]
[203.90124512 18.43141937]
[195.08447266 30.56667519]
[186.26770020 42.70193100]
[177.45091248 54.83718491]
[177.75491333 69.83410645]
[187.05624390 81.60208130]
[196.35757446 93.37006378]
[205.65888977 105.13804626]
[214.96022034 116.90602875]
[230.45849609 116.14265442]
[243.42712402 124.66290283]
[248.87937927 139.19055176]
[244.71876526 154.13941956]
[232.54512024 163.76138306]
[217.03945923 164.35658264]
[204.16403198 155.69615173]
[198.86968994 141.11021423]
[203.19223022 126.20735168]
[193.89091492 114.43936920]
[184.58958435 102.67138672]
[175.28826904 90.90340424]
[165.98693848 79.13542938]
[163.34513855 74.09030151]
[162.27406311 68.97386932]
[149.54438782 76.90832520]
[136.81472778 84.84278870]
[124.08506775 92.77724457]
[111.35540009 100.71170807]
[125.83681488 96.80162811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 27]
[6 26]
[7 25]
[8 24]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[52 153]
[53 152]
[54 151]
[55 150]
[56 149]
[57 129]
[58 128]
[59 127]
[60 126]
[61 124]
[62 123]
[63 122]
[64 121]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[79 108]
[81 107]
[82 106]
[83 105]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
[130 147]
[131 146]
[132 145]
[133 144]
[134 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
