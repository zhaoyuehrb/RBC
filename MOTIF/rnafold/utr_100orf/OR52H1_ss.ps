%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAUCUGCCUCUGCCAUGAUCAUUUUCAACCUGAGCAGUUACAAUCCAGGACCCUUCAUUCUGGUAGGGAUCCCAGGCCUGGAGCAAUUCCAUGUGU\
) } def
/len { sequence length } bind def

/coor [
[111.18180084 161.61938477]
[122.55882263 151.49598694]
[117.96796417 137.21578979]
[113.37710571 122.93559265]
[103.91236115 125.04975128]
[94.77232361 123.58278656]
[87.20424652 119.06033325]
[82.12178040 112.40238190]
[79.99684906 104.75576782]
[65.14354706 102.66303253]
[54.34453964 113.64882660]
[39.32300949 116.14021301]
[25.87389946 109.38851166]
[19.06090355 96.17030334]
[4.20760584 94.07756805]
[-10.64569283 91.98484039]
[-25.49899101 89.89211273]
[-40.38304138 88.03063202]
[-55.29423523 86.40084839]
[-70.26522064 85.46829987]
[-85.26340485 85.23502350]
[-100.26159668 85.00174713]
[-111.43348694 96.18049622]
[-127.23757935 96.10179901]
[-138.29757690 84.81233978]
[-138.05180359 69.00996399]
[-126.64604187 58.06993103]
[-110.84714508 58.48277664]
[-100.02831268 70.00356293]
[-85.03012848 70.23683929]
[-70.03194427 70.47011566]
[-67.17716980 68.12377167]
[-62.98261261 67.14381409]
[-58.15283966 68.17276764]
[-53.66445541 71.48964691]
[-38.75325775 73.11943054]
[-31.63672447 70.67393494]
[-23.40626144 75.03881073]
[-8.55296230 77.13153839]
[6.30033588 79.22427368]
[21.15363503 81.31700134]
[31.35362053 70.49580383]
[46.14467621 67.72295380]
[59.89305878 74.26782990]
[67.23627472 87.80973816]
[82.08957672 89.90246582]
[102.18740845 76.54560852]
[125.14145660 91.46212006]
[137.97352600 83.69437408]
[150.80560303 75.92662811]
[163.63768005 68.15888214]
[176.46975708 60.39113998]
[189.30183411 52.62339783]
[195.15124512 45.37239456]
[202.65599060 44.82078552]
[215.72343445 37.45587540]
[215.98468018 22.16277122]
[223.81396484 9.13974762]
[237.02281189 1.83270228]
[252.01531982 2.11641550]
[264.76693726 9.81457329]
[277.83438110 2.44966173]
[290.90182495 -4.91524982]
[303.96926880 -12.28016090]
[317.03671265 -19.64507294]
[324.91281128 -34.02907181]
[341.31164551 -34.12963486]
[349.36352539 -19.84330368]
[340.78536987 -5.86663675]
[324.40164185 -6.57762861]
[311.33419800 0.78728282]
[298.26675415 8.15219402]
[285.19931030 15.51710510]
[272.13186646 22.88201714]
[272.11398315 37.77716064]
[264.59283447 50.74975204]
[251.50166321 58.26558685]
[236.30645752 58.21934891]
[223.08834839 50.52331924]
[210.02090454 57.88822937]
[197.06958008 65.45547485]
[184.23750305 73.22321320]
[171.40542603 80.99095917]
[158.57334900 88.75870514]
[145.74127197 96.52645111]
[132.90919495 104.29419708]
[127.65730286 118.34472656]
[132.24816895 132.62492371]
[136.83901978 146.90512085]
[151.98397827 148.50212097]
[165.16676331 156.12667847]
[174.10340881 168.45779419]
[177.24555969 183.35902405]
[174.04884338 198.24864197]
[165.06709290 210.54693604]
[151.85646057 218.12315369]
[136.70576477 219.66465759]
[122.23994446 214.90438843]
[110.96530914 204.66708374]
[104.83525085 190.72640991]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[9 46]
[10 45]
[14 41]
[15 40]
[16 39]
[17 38]
[18 36]
[19 35]
[20 31]
[21 30]
[22 29]
[48 86]
[49 85]
[50 84]
[51 83]
[52 82]
[53 81]
[55 80]
[56 79]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
