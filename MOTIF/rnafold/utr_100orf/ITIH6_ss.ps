%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAACAGAUCCAGGCCAGAGGUGGCAUCAUGUCUGGGUGGAGGUACCUCAUCUGUGUCAGCUUUUUGCUGACCAUUCUUCUUGAACUGACAUACCAGGGACCCCCUGUCCCCGCUUCAUCAAGCACAA\
) } def
/len { sequence length } bind def

/coor [
[85.32905579 200.65136719]
[70.69475555 203.94337463]
[55.96482468 201.10980225]
[43.59632874 192.62332153]
[35.65243912 179.89955139]
[33.45825195 165.06089783]
[37.37978363 150.58258057]
[46.76288223 138.87969971]
[60.04187775 131.90452576]
[70.74991608 121.40034485]
[81.45794678 110.89615631]
[67.02478790 114.98074341]
[52.59162521 119.06533051]
[38.15846252 123.14991760]
[31.15019989 134.05517578]
[18.96973228 137.12298584]
[8.33593845 131.22749329]
[-6.19101858 134.96481323]
[-20.71797562 138.70213318]
[-35.24493027 142.43943787]
[-49.77188873 146.17675781]
[-61.20907211 157.10842896]
[-75.46275330 152.78619385]
[-89.98971558 156.52351379]
[-104.51667023 160.26081848]
[-115.84276581 172.12048340]
[-131.71041870 167.97924805]
[-135.79634094 152.09727478]
[-123.89728546 140.81256104]
[-108.25398254 145.73387146]
[-93.72702789 141.99655151]
[-79.20007324 138.25923157]
[-68.80195618 127.59487915]
[-53.50920486 131.64981079]
[-38.98224640 127.91248322]
[-24.45529175 124.17517090]
[-9.92833519 120.43785095]
[4.59862185 116.70053864]
[16.38768005 103.75849915]
[34.07387543 108.71675873]
[48.50703812 104.63217163]
[62.94019699 100.54757690]
[77.37335968 96.46298981]
[87.78748322 85.66734314]
[91.35034180 71.09661865]
[94.91320801 56.52589417]
[98.47606659 41.95516968]
[90.53768158 28.55293655]
[94.35849762 13.82690430]
[107.18440247 6.34146309]
[110.74726105 -8.22926140]
[114.31012726 -22.79998589]
[102.83255005 -34.59471893]
[102.07164764 -52.82342148]
[114.75867462 -68.32928467]
[114.75867462 -83.32928467]
[111.60428619 -92.01019287]
[114.94284821 -98.68789673]
[115.30253601 -113.68357849]
[115.66222382 -128.67926025]
[116.02191162 -143.67495728]
[116.38160706 -158.67063904]
[116.74129486 -173.66632080]
[106.75778961 -186.22456360]
[110.49188232 -201.82699585]
[125.07909393 -208.50479126]
[139.32936096 -201.13529968]
[142.31111145 -185.37176514]
[131.73698425 -173.30664062]
[131.37728882 -158.31094360]
[131.01760864 -143.31526184]
[130.65791321 -128.31958008]
[130.29821777 -113.32389069]
[129.93853760 -98.32820129]
[129.75866699 -83.32928467]
[129.75866699 -68.32928467]
[143.59959412 -62.54751205]
[154.26959229 -73.09033203]
[164.93960571 -83.63315582]
[166.47323608 -99.60273743]
[179.99308777 -108.23947906]
[195.12786865 -102.91801453]
[200.26747131 -87.72051239]
[191.46923828 -74.30519867]
[175.48242188 -72.96315002]
[164.81242371 -62.42033386]
[154.14241028 -51.87751007]
[148.58265686 -27.68687630]
[128.88084412 -19.23712349]
[125.31798553 -4.66639996]
[121.75512695 9.90432453]
[129.67962646 22.46369553]
[126.27394867 37.29123688]
[113.04679108 45.51803207]
[109.48393250 60.08875656]
[105.92106628 74.65947723]
[102.35820770 89.23020172]
[117.02857971 76.35722351]
[140.57431030 75.78923035]
[154.54989624 81.23744202]
[168.52548218 86.68565369]
[182.50106812 92.13386536]
[196.47665405 97.58207703]
[211.68530273 92.47555542]
[225.08143616 101.30296326]
[226.38868713 117.29266357]
[214.60424805 128.17872620]
[198.76812744 125.61030579]
[191.02844238 111.55766296]
[177.05285645 106.10945129]
[163.07727051 100.66123962]
[149.10168457 95.21302795]
[135.12609863 89.76482391]
[125.24111176 101.04786682]
[115.35699463 112.32989502]
[122.59590912 125.46755981]
[129.83482361 138.60522461]
[137.07373047 151.74287415]
[151.38133240 159.75691223]
[151.32418823 176.15596008]
[136.96109009 184.07008362]
[123.06755829 175.35792542]
[123.93606567 158.98179626]
[116.69715118 145.84413147]
[109.45824432 132.70646667]
[102.21932983 119.56880188]
[102.27354431 134.56871033]
[102.32775116 149.56860352]
[106.69933319 163.91744995]
[104.96942902 178.81736755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 43]
[12 42]
[13 41]
[14 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[23 32]
[24 31]
[25 30]
[44 97]
[45 96]
[46 95]
[47 94]
[50 91]
[51 90]
[52 89]
[55 76]
[56 75]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[77 87]
[78 86]
[79 85]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
