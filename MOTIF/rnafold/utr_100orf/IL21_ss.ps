%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAAGUGAAAACGAGACCAAGGUCUAGCUCUACUGUUGGUACUUAUGAGAUCCAGUCCUGGCAACAUGGAGAGGAUUGUCAUCUGUCUGAUGGUCAUCUUCUUGGGGACACUGGUCCACAAAUCAAGCUCCCAAGGUCAAGAUC\
) } def
/len { sequence length } bind def

/coor [
[81.46887207 405.19403076]
[69.61146545 414.51351929]
[55.80859375 420.59063721]
[40.92790985 423.04339600]
[25.90482330 421.71759033]
[11.68370438 416.69659424]
[-0.84149903 408.29598999]
[-10.88344097 397.04385376]
[-17.81087685 383.64755249]
[-21.18834305 368.94912720]
[-20.80352592 353.87255859]
[-16.68062019 339.36557007]
[-9.07879162 326.34008789]
[1.52410161 315.61492920]
[14.46155167 307.86422729]
[28.92030144 303.57525635]
[43.99145889 303.01757812]
[47.17282104 288.35882568]
[50.35417938 273.70007324]
[53.53553772 259.04132080]
[45.28593826 246.69305420]
[48.30347061 231.78167725]
[61.31140518 223.21246338]
[64.49276733 208.55372620]
[58.17004013 200.41673279]
[57.39169312 189.92036438]
[62.66102982 180.55535889]
[72.42922211 175.57154846]
[76.23403931 161.06213379]
[80.03886414 146.55270386]
[83.84368134 132.04327393]
[66.99670410 114.09186554]
[65.68199158 89.50843048]
[80.51830292 69.86261749]
[75.18769836 55.84175110]
[69.85710144 41.82088470]
[64.52649689 27.80001640]
[59.19589996 13.77915001]
[53.86529922 -0.24171685]
[48.53469849 -14.26258373]
[43.20410156 -28.28345108]
[37.18748856 -35.25259781]
[37.91291046 -42.66131592]
[32.88315201 -56.79289627]
[18.88620567 -63.62833786]
[13.98662376 -78.03141785]
[20.58943176 -91.33324432]
[15.55967236 -105.46482086]
[10.52991199 -119.59639740]
[5.50015163 -133.72798157]
[0.31967592 -147.80500793]
[-5.01092386 -161.82586670]
[-10.34152412 -175.84674072]
[-15.67212391 -189.86759949]
[-21.00272369 -203.88847351]
[-35.14254379 -210.42324829]
[-40.34879684 -224.71833801]
[-34.03175354 -238.15821838]
[-39.36235428 -252.17907715]
[-44.69295502 -266.19995117]
[-50.17306900 -280.16305542]
[-55.80207443 -294.06680298]
[-69.05774689 -303.72180176]
[-67.05528259 -319.99822998]
[-51.85463715 -326.15231323]
[-39.09293747 -315.85321045]
[-41.89832306 -299.69580078]
[-36.26931763 -285.79205322]
[-30.80512428 -280.73657227]
[-30.67208862 -271.53054810]
[-25.34148788 -257.50967407]
[-20.01088715 -243.48881531]
[-6.36058617 -237.64031982]
[-0.75486743 -223.49711609]
[-6.98185682 -209.21907043]
[-1.65125704 -195.19821167]
[3.67934275 -181.17733765]
[9.00994301 -167.15646362]
[14.34054279 -153.13560486]
[19.69545364 -147.96450806]
[19.63173103 -138.75773621]
[24.66149139 -124.62615967]
[29.69124985 -110.49458313]
[34.72101212 -96.36299896]
[48.24321365 -90.22414398]
[53.54541779 -75.96436310]
[47.01472855 -61.82265472]
[52.04449081 -47.69107819]
[57.22496796 -33.61405182]
[62.55556488 -19.59318352]
[67.88616943 -5.57231665]
[73.21676636 8.44855022]
[78.54736328 22.46941757]
[83.87796783 36.49028397]
[89.20856476 50.51115036]
[94.53916931 64.53202057]
[101.92705536 64.16587067]
[109.23307800 65.32221222]
[116.14680481 67.95191956]
[122.37449646 71.94326782]
[127.65156555 77.12666321]
[131.75378418 83.28188324]
[134.50688171 90.14741516]
[135.79386902 97.43154907]
[150.64938354 99.50856781]
[165.50488281 101.58557892]
[180.24348450 95.83368683]
[191.77679443 105.25877380]
[206.63229370 107.33578491]
[221.48779297 109.41280365]
[236.34330750 111.48981476]
[251.33262634 104.83756256]
[264.42718506 114.70996857]
[262.15643311 130.95114136]
[246.85632324 136.85356140]
[234.26628113 126.34532166]
[219.41078186 124.26830292]
[204.55528259 122.19129181]
[189.69976807 120.11427307]
[176.02374268 126.01472473]
[163.42787170 116.44108582]
[148.57237244 114.36406708]
[133.71685791 112.28705597]
[129.55882263 120.34882355]
[123.51217651 127.11044312]
[115.96326447 132.13989258]
[107.39440918 135.11582947]
[98.35310364 135.84809875]
[94.54828644 150.35752869]
[90.74346924 164.86694336]
[86.93864441 179.37637329]
[93.18529510 198.49342346]
[79.15151215 211.73507690]
[75.97015381 226.39382935]
[84.25562286 239.58430481]
[80.82045746 254.40504456]
[68.19429016 262.22268677]
[65.01293182 276.88143921]
[61.83156967 291.54019165]
[58.65021133 306.19894409]
[72.13432312 312.95388794]
[83.51437378 322.85061646]
[92.07500458 335.26699829]
[97.27808380 349.42251587]
[98.79655457 364.42736816]
[96.53495026 379.33828735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 140]
[18 139]
[19 138]
[20 137]
[23 134]
[24 133]
[28 131]
[29 130]
[30 129]
[31 128]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[43 88]
[44 87]
[47 84]
[48 83]
[49 82]
[50 81]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[58 72]
[59 71]
[60 70]
[61 68]
[62 67]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
