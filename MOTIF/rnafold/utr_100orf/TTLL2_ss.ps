%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUCCCUCCAGCCUCCGCGCAUUUCAGCUGGCGCUGCAGCUGCUGCACAGAGACCCACAGAGGCCACCCUCGGAACCAGCGCCCAAUGAGAGGGCGGGACCUGUGUUCCUCCACACAAAGCCAGGCGCUGGGAUCUUUGAGAACCACCACCCCAGCCUUUACCCUUAACAUUCCAUCCGAGGCAA\
) } def
/len { sequence length } bind def

/coor [
[-12.68874073 177.28993225]
[-9.28088474 162.68060303]
[-23.24399185 168.16072083]
[-37.20709610 173.64083862]
[-40.98332214 183.86668396]
[-49.59329605 190.18746948]
[-60.04170990 190.70451355]
[-68.85518646 185.48832703]
[-82.99272919 190.50131226]
[-97.13027191 195.51428223]
[-111.26780701 200.52726746]
[-113.99026489 218.76519775]
[-125.52655029 233.04187012]
[-142.62738037 239.47308350]
[-160.54512024 236.36532593]
[-174.35176086 224.66069031]
[-188.22184753 230.37213135]
[-202.09194946 236.08357239]
[-205.84686279 251.02368164]
[-217.54228210 260.77407837]
[-232.55889893 261.75656128]
[-245.12416077 253.80343628]
[-258.99426270 259.51489258]
[-272.86434937 265.22631836]
[-276.47009277 275.51354980]
[-284.97381592 281.97656250]
[-295.41217041 282.66720581]
[-304.31112671 277.59823608]
[-318.36340332 282.84548950]
[-332.41567993 288.09277344]
[-346.46792603 293.34005737]
[-360.52020264 298.58731079]
[-374.57244873 303.83459473]
[-380.90353394 318.31536865]
[-395.64999390 324.00021362]
[-410.06301880 317.51641846]
[-415.59164429 302.71069336]
[-408.95581055 288.36700439]
[-394.09246826 282.99520874]
[-379.81973267 289.78231812]
[-365.76745605 284.53506470]
[-351.71520996 279.28778076]
[-337.66293335 274.04049683]
[-323.61068726 268.79324341]
[-309.55841064 263.54595947]
[-298.39971924 247.76791382]
[-278.57577515 251.35624695]
[-264.70568848 245.64479065]
[-250.83560181 239.93334961]
[-247.51406860 225.43833923]
[-236.15986633 215.56179810]
[-220.98977661 214.24949646]
[-207.80339050 222.21348572]
[-193.93330383 216.50204468]
[-180.06320190 210.79058838]
[-180.14413452 198.98336792]
[-176.21984863 187.81034851]
[-168.72972107 178.59317017]
[-158.53639221 172.43048096]
[-146.82641602 170.06703186]
[-134.97218323 171.80368042]
[-124.37110138 177.45938110]
[-116.28078461 186.38972473]
[-102.14324951 181.37673950]
[-88.00570679 176.36376953]
[-73.86816406 171.35078430]
[-62.44874954 155.76039124]
[-42.68721390 159.67771912]
[-28.72410583 154.19761658]
[-14.76100063 148.71749878]
[-1.03761160 142.66203308]
[12.42236423 136.04168701]
[25.88234138 129.42132568]
[39.34231567 122.80097961]
[52.80229187 116.18063354]
[66.26226807 109.56027985]
[79.72224426 102.93993378]
[64.72260284 103.04329681]
[54.52943420 92.03878784]
[55.77904892 77.09092712]
[67.65788269 67.93159485]
[82.43215942 70.52401733]
[90.48296356 83.17994690]
[88.74156952 68.28137207]
[87.00017548 53.38279343]
[85.25878143 38.48421860]
[83.51738739 23.58564377]
[70.35382843 15.14439201]
[65.74526215 0.20132907]
[71.86771393 -14.18788910]
[85.83035278 -21.22911263]
[101.04043579 -17.59769058]
[110.31623840 -5.00827122]
[109.27800751 10.59480762]
[98.41596222 21.84424973]
[100.15735626 36.74282455]
[101.89875031 51.64139938]
[103.64014435 66.53997803]
[105.38153839 81.43855286]
[119.94795227 85.01897430]
[128.39775085 72.62539673]
[123.32521820 58.07975769]
[127.73866272 43.50666809]
[139.74499512 34.43406296]
[154.61341858 34.17406845]
[163.06323242 21.78048706]
[171.51303101 9.38690472]
[179.96282959 -3.00667644]
[188.41262817 -15.40025806]
[185.22853088 -30.88047409]
[193.99284363 -44.03198624]
[209.50585938 -47.05223846]
[222.56398010 -38.14936447]
[225.42004395 -22.60528564]
[216.37962341 -9.64202499]
[200.80621338 -6.95045710]
[192.35641479 5.44312429]
[183.90660095 17.83670616]
[175.45680237 30.23028755]
[167.00700378 42.62387085]
[172.19703674 56.55949402]
[168.13798523 71.05046082]
[156.18469238 80.48297119]
[140.79133606 81.07519531]
[132.34153748 93.46877289]
[138.84979248 106.98330688]
[153.80784607 108.10426331]
[168.76589966 109.22521210]
[177.57661438 106.74251556]
[183.96260071 110.49114227]
[198.89996338 111.86055756]
[213.83731079 113.22998047]
[228.77467346 114.59940338]
[243.71203613 115.96881866]
[258.64938354 117.33824158]
[264.60140991 103.43037415]
[274.56140137 92.04381561]
[287.55358887 84.29409790]
[302.30514526 80.94046783]
[317.37084961 82.31147766]
[331.27471924 88.27281189]
[342.65460205 98.24042511]
[350.39562988 111.23781586]
[353.73934937 125.99160767]
[352.35824585 141.05639648]
[346.38760376 154.95626831]
[336.41238403 166.32946777]
[323.40979004 174.06176758]
[308.65377808 177.39562988]
[293.58990479 176.00442505]
[279.69403076 170.02447510]
[268.32751465 160.04161072]
[260.60394287 147.03385925]
[257.27996826 132.27560425]
[242.34262085 130.90617371]
[227.40525818 129.53675842]
[212.46789551 128.16734314]
[197.53053284 126.79792023]
[182.59318542 125.42849731]
[167.64495850 124.18326569]
[152.68690491 123.06231689]
[137.72883606 121.94136810]
[148.06744385 132.80935669]
[154.66763306 146.27923584]
[156.92083740 161.10903931]
[154.61932373 175.93141174]
[147.97526550 189.37971497]
[137.60128784 200.21394348]
[124.45390320 207.43518066]
[109.74533081 210.37757874]
[94.83173370 208.76986694]
[81.08820343 202.76026917]
[69.78191376 192.90289307]
[61.95535660 180.10661316]
[58.33014679 165.55126953]
[59.24054718 150.57891846]
[64.60261536 136.57005310]
[73.92195129 124.81633759]
[86.34259796 116.39990997]
[72.88262177 123.02025604]
[59.42264557 129.64060974]
[45.96266937 136.26095581]
[32.50269318 142.88130188]
[19.04271507 149.50166321]
[5.58273888 156.12200928]
[18.67045784 163.45083618]
[21.26905251 178.22402954]
[11.46779919 189.57899475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[8 66]
[9 65]
[10 64]
[11 63]
[16 55]
[17 54]
[18 53]
[22 49]
[23 48]
[24 47]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[71 185]
[72 184]
[73 183]
[74 182]
[75 181]
[76 180]
[77 179]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[100 125]
[101 124]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[126 162]
[127 161]
[128 160]
[130 159]
[131 158]
[132 157]
[133 156]
[134 155]
[135 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
