%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:09:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGGGUUCCCGCUCGCCCGGCGCCAUGGAUCCGCUGUCGCCGCCGCUCUGCACGCUGCCGCCGGGCCCCGAGCCGCCCCGCUUCGUGUGCUACUGCGAAGGGGAGGAAAGCGGGGAGGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[96.20388794 274.76367188]
[83.78675079 284.54067993]
[68.10319519 282.59091187]
[58.45799255 270.07110596]
[60.57347107 254.40904236]
[73.19454956 244.89674377]
[75.04509735 230.01133728]
[76.89564514 215.12593079]
[78.74618530 200.24050903]
[80.59673309 185.35510254]
[82.44727325 170.46969604]
[84.29782104 155.58427429]
[81.97596741 148.48214722]
[86.38265228 140.35528564]
[88.60081482 125.52019501]
[90.81897736 110.68510437]
[84.35852051 97.14765930]
[71.43041992 89.54080200]
[58.50232315 81.93394470]
[45.57422638 74.32708740]
[32.64612579 66.72023010]
[19.71802902 59.11336899]
[6.78993177 51.50651169]
[-6.13816595 43.89965439]
[-21.95593452 43.56982803]
[-29.00145912 30.44695282]
[-41.92955780 22.84009552]
[-38.86463165 37.52363205]
[-45.77127075 50.83897400]
[-59.53982544 56.79101944]
[-73.97114563 52.69992065]
[-82.56765747 40.40764999]
[-81.45887756 25.44868469]
[-71.14402008 14.55815411]
[-56.26514053 12.63986778]
[-67.68928528 2.91932535]
[-79.23278046 -6.65917826]
[-90.89385986 -16.09417725]
[-102.55493927 -25.52917671]
[-122.52893829 -27.65759277]
[-128.90638733 -45.84469223]
[-141.01980591 -54.69146347]
[-157.37384033 -55.90704727]
[-164.25344849 -70.79338074]
[-154.58148193 -84.03668976]
[-138.30761719 -82.01338196]
[-132.17303467 -66.80487061]
[-120.05962372 -57.95810318]
[-110.01383209 -60.44727325]
[-100.06831360 -56.86645889]
[-93.65188599 -48.18978119]
[-93.11994171 -37.19025803]
[-81.45886230 -27.75525665]
[-69.79778290 -18.32025909]
[-62.54100037 -16.53970718]
[-57.96874237 -8.50481796]
[-46.54459763 1.21572447]
[-34.32270050 9.91199780]
[-21.39460182 17.51885605]
[-6.50153685 17.30458832]
[1.46869195 30.97155571]
[14.39678955 38.57841492]
[27.32488823 46.18527222]
[40.25298691 53.79212952]
[53.18108368 61.39898682]
[66.10918427 69.00584412]
[79.03727722 76.61270142]
[91.96537781 84.21955872]
[114.29154205 87.50107574]
[129.15292358 85.46656799]
[144.01431274 83.43206024]
[158.87570190 81.39755249]
[163.51101685 68.13810730]
[173.37675476 58.23324585]
[186.49259949 53.58979034]
[200.26081848 55.06654739]
[211.98065186 62.31611633]
[219.37812805 73.86439514]
[234.28529358 72.19809723]
[249.17070007 70.34755707]
[264.03207397 68.31304932]
[276.65530396 58.77547455]
[290.31439209 64.71502686]
[305.17578125 62.68051910]
[320.03717041 60.64601135]
[334.89855957 58.61150360]
[349.75991821 56.57699585]
[364.62130737 54.54248810]
[371.83609009 40.80470657]
[385.76272583 33.96155548]
[401.04611206 36.64435577]
[411.80950928 47.82152176]
[413.91415405 63.19520569]
[406.55075073 76.85391235]
[392.55072021 83.54558563]
[377.29733276 80.69714355]
[366.65582275 69.40386963]
[351.79443359 71.43837738]
[336.93304443 73.47288513]
[322.07165527 75.50739288]
[307.21029663 77.54190063]
[292.34890747 79.57641602]
[280.78866577 88.96846008]
[266.06658936 83.17443085]
[251.20520020 85.20893860]
[244.93762207 89.27693176]
[235.95158386 87.10526276]
[221.04441833 88.77156067]
[214.96873474 103.69125366]
[202.14311218 113.59260559]
[185.98591614 115.71792603]
[170.86346436 109.39804840]
[160.91020203 96.25893402]
[146.04882812 98.29344940]
[131.18743896 100.32795715]
[116.32604980 102.36246490]
[105.65406036 112.90326691]
[103.43589783 127.73834991]
[101.21774292 142.57344055]
[99.18323517 157.43482971]
[97.33268738 172.32023621]
[95.48213959 187.20564270]
[93.63159943 202.09106445]
[91.78105164 216.97647095]
[89.93051147 231.86187744]
[88.07996368 246.74729919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[12 120]
[14 119]
[15 118]
[16 117]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[26 59]
[27 58]
[35 57]
[36 56]
[37 54]
[38 53]
[39 52]
[41 48]
[42 47]
[69 116]
[70 115]
[71 114]
[72 113]
[78 108]
[79 107]
[80 105]
[81 104]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
