%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUGAGCAGCGCUCACUUGGAGAGCGGCAAGCAAGCUAGACAAGCCUGAUUCCAUGUCACCCGCUGCCACCCUGCCAGGAGCGCGAAGAUGAUGGCCAUGAACUCCAAGCAGCCUUUCGGCAUGCACCCGGUGCUGCAAGAACCCAAAUUCUCCAGUCUGCACUCUGGCUCCGAGGCCAUGCGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[-125.62113190 174.18948364]
[-137.75582886 178.59582520]
[-150.53833008 180.35510254]
[-163.39836121 179.39175415]
[-175.76277161 175.75163269]
[-187.08116150 169.59983826]
[-196.85028076 161.21321106]
[-204.63650513 150.96784973]
[-210.09501648 139.32231140]
[-212.98509216 126.79701233]
[-227.98509216 126.79701233]
[-242.98509216 126.79701233]
[-257.98507690 126.79701233]
[-272.98507690 126.79701233]
[-287.98507690 126.79701233]
[-296.58465576 129.93093872]
[-303.23257446 126.67095184]
[-318.23052979 126.42294312]
[-326.88076782 129.41426086]
[-333.47387695 126.04479980]
[-348.46566772 125.54884338]
[-363.46105957 125.17685699]
[-378.45898438 124.92884827]
[-387.82321167 137.16065979]
[-402.42370605 141.48260498]
[-416.60177612 136.43818665]
[-424.99041748 124.15939331]
[-439.98837280 123.91138458]
[-454.98632812 123.66337585]
[-469.98428345 123.41536713]
[-478.63449097 126.40668488]
[-485.22760010 123.03722382]
[-500.21939087 122.54126740]
[-507.52526855 138.80563354]
[-525.71972656 148.21112061]
[-548.46264648 143.89831543]
[-563.11743164 147.09780884]
[-577.77221680 150.29730225]
[-587.61096191 162.96928406]
[-603.65386963 163.03384399]
[-613.59423828 150.44143677]
[-609.80664062 134.85189819]
[-595.19665527 128.22418213]
[-580.97174072 135.64250183]
[-566.31689453 132.44300842]
[-551.66210938 129.24351501]
[-551.66210938 121.74350739]
[-551.66210938 99.24350739]
[-566.31689453 96.04401398]
[-580.97174072 92.84452057]
[-595.62652588 89.64502716]
[-609.85144043 97.06334686]
[-624.46142578 90.43562317]
[-628.24902344 74.84608459]
[-618.30865479 62.25368500]
[-602.26574707 62.31823730]
[-592.42700195 74.99022675]
[-577.77221680 78.18972015]
[-563.11743164 81.38921356]
[-548.46264648 84.58870697]
[-530.77136230 79.78446198]
[-514.51885986 83.90674591]
[-503.55154419 94.44184113]
[-499.72344971 107.54946899]
[-484.73165894 108.04542542]
[-469.73626709 108.41741180]
[-454.73831177 108.66542053]
[-439.74035645 108.91342926]
[-424.74240112 109.16144562]
[-415.95239258 97.16671753]
[-401.61526489 92.59383392]
[-387.16567993 97.39614868]
[-378.21099854 109.93089294]
[-363.21304321 110.17890167]
[-356.46096802 107.14049530]
[-347.96969604 110.55704498]
[-332.97790527 111.05300140]
[-317.98251343 111.42498779]
[-302.98458862 111.67299652]
[-287.98507690 111.79701233]
[-272.98507690 111.79701233]
[-257.98507690 111.79701233]
[-242.98509216 111.79701233]
[-227.98509216 111.79701233]
[-212.98509216 111.79701233]
[-208.53225708 95.21556091]
[-199.62065125 80.52538300]
[-186.95269775 68.89836121]
[-171.53083801 61.26440811]
[-154.57817078 58.23703766]
[-137.44146729 60.06412506]
[-121.48414612 66.60758972]
[-107.97787476 77.35381317]
[-98.00114441 91.45395660]
[-92.35320282 107.79098511]
[-77.38600159 106.79962921]
[-62.41879654 105.80826569]
[-47.46029663 104.69320679]
[-32.51153183 103.45451355]
[-17.56276321 102.21582794]
[-2.61399603 100.97713470]
[6.78642607 89.48071289]
[21.92895699 88.01155853]
[33.92372131 97.94953156]
[48.87248993 96.71084595]
[63.82125473 95.47215271]
[71.51271820 77.24308014]
[87.59257507 65.71503448]
[107.32594299 64.28258514]
[124.90210724 73.36753845]
[137.18147278 64.75260925]
[149.46084595 56.13768005]
[161.74021912 47.52274704]
[174.01959229 38.90781784]
[175.28062439 28.08139229]
[182.15823364 19.91089058]
[192.18939209 16.94649506]
[201.98291016 19.93799782]
[214.54042053 11.73377609]
[227.09791565 3.52955389]
[239.65541077 -4.67466831]
[241.33860779 -20.22139931]
[252.65698242 -31.01159286]
[268.26635742 -31.95044708]
[280.79644775 -22.59466553]
[284.33096313 -7.36176109]
[277.20095825 6.55575418]
[262.77304077 12.58645535]
[247.85963440 7.88282871]
[235.30213928 16.08705139]
[222.74464417 24.29127312]
[210.18713379 32.49549484]
[202.76333618 50.33847809]
[182.63452148 51.18719101]
[170.35514832 59.80212021]
[158.07577515 68.41705322]
[145.79640198 77.03198242]
[133.51704407 85.64691162]
[137.94932556 88.92222595]
[142.03755188 93.06795502]
[156.90650940 95.04633331]
[171.77546692 97.02471924]
[186.64442444 99.00309753]
[199.04217529 89.20149994]
[214.72956848 91.12021637]
[224.39953613 103.62090302]
[222.31507874 119.28712463]
[209.71286011 128.82438660]
[194.06954956 126.57441711]
[184.66604614 113.87206268]
[169.79708862 111.89367676]
[154.92813110 109.91529846]
[140.05917358 107.93691254]
[134.49121094 121.86522675]
[146.62646484 130.68200684]
[158.76171875 139.49877930]
[170.89697266 148.31556702]
[185.61241150 143.39262390]
[200.40092468 148.09150696]
[209.57603455 160.60539246]
[209.60969543 176.12242126]
[200.48898315 188.67601013]
[185.72100830 193.43901062]
[170.98432922 188.57998657]
[161.94552612 175.96730042]
[162.08020020 160.45082092]
[149.94493103 151.63403320]
[137.80967712 142.81726074]
[125.67443085 134.00047302]
[110.68611908 139.97267151]
[95.02185822 139.83772278]
[81.00556946 133.96875000]
[70.58457947 123.56388855]
[65.05994415 110.42092133]
[50.11117935 111.65960693]
[35.16241074 112.89830017]
[24.96697617 124.67501068]
[9.78915501 125.71826935]
[-1.37530589 115.92590332]
[-16.32407379 117.16458893]
[-31.27284050 118.40328217]
[-46.22160721 119.64197540]
[-54.53302002 123.47534943]
[-61.42743683 120.77547455]
[-76.39463806 121.76683044]
[-91.36184692 122.75818634]
[-93.48508453 135.52752686]
[-98.23960114 147.55995178]
[-105.41070557 158.32006836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[17 79]
[18 78]
[20 77]
[21 76]
[22 74]
[23 73]
[27 69]
[28 68]
[29 67]
[30 66]
[32 65]
[33 64]
[36 46]
[37 45]
[38 44]
[48 60]
[49 59]
[50 58]
[51 57]
[95 186]
[96 185]
[97 184]
[98 182]
[99 181]
[100 180]
[101 179]
[104 176]
[105 175]
[106 174]
[110 138]
[111 137]
[112 136]
[113 135]
[114 134]
[118 132]
[119 131]
[120 130]
[121 129]
[140 153]
[141 152]
[142 151]
[143 150]
[154 169]
[155 168]
[156 167]
[157 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
