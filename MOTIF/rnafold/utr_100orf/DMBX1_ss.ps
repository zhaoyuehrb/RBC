%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGGCGGAUGCCGCCAUGCAGCACUACGGGGUGAACGGCUACUCACUGCACGCCAUGAACUCACUCAGCGCCAUGUACAACCUGCACCAGCAGGCAGCCCAGCAGGCCCAGCAUG\
) } def
/len { sequence length } bind def

/coor [
[61.26318741 357.37457275]
[58.70272827 359.52474976]
[55.91907120 360.44244385]
[48.89294434 373.69512939]
[41.86681747 386.94781494]
[34.84069061 400.20050049]
[27.81456375 413.45315552]
[25.73739433 430.27938843]
[8.99373150 432.94134521]
[1.80068624 417.58895874]
[14.56188297 406.42703247]
[21.58801079 393.17434692]
[28.61413574 379.92169189]
[35.64026260 366.66900635]
[42.66638947 353.41632080]
[48.96472549 339.80267334]
[54.51679993 325.86804199]
[60.06887054 311.93338013]
[65.62094116 297.99874878]
[61.32458115 279.22674561]
[77.05038452 266.75708008]
[81.83990479 252.54228210]
[80.98222351 245.10003662]
[86.95638275 238.01048279]
[92.12907410 223.93058777]
[84.41423798 209.05465698]
[89.89201355 192.86270142]
[105.66162872 185.43951416]
[110.45114899 171.22471619]
[115.24066925 157.00991821]
[111.97223663 142.47834778]
[123.71092987 131.87110901]
[128.50044250 117.65630341]
[112.46945190 129.31297302]
[93.65622711 129.50930786]
[79.04291534 119.33222198]
[73.38992310 103.50968933]
[77.70800018 88.31460571]
[67.10140228 77.70800018]
[51.79700851 80.26832581]
[37.92563248 73.31385803]
[30.82110023 59.51874161]
[33.21524811 44.18747711]
[44.18747711 33.21524811]
[59.51874161 30.82110023]
[73.31385803 37.92563248]
[80.26832581 51.79700851]
[77.70800018 67.10140228]
[88.31460571 77.70800018]
[102.92025757 70.79791260]
[121.13737488 73.97631836]
[123.16237640 59.11363220]
[125.18737793 44.25094986]
[122.97134399 37.79222870]
[124.25482941 32.08267593]
[127.74553680 28.64687157]
[130.57221985 13.91561699]
[133.39889526 -0.81563807]
[124.32340240 -13.75437737]
[127.13738251 -29.30613136]
[140.17135620 -38.24431992]
[155.69248962 -35.26607895]
[164.49237061 -22.13833809]
[161.35018921 -6.64955950]
[148.13015747 2.01104188]
[145.30346680 16.74229622]
[142.47679138 31.47355270]
[140.05006409 46.27595139]
[138.02505493 61.13863373]
[136.00006104 76.00131989]
[140.85545349 81.71753693]
[149.75811768 69.64514160]
[153.03392029 55.00720596]
[165.31535339 46.39521027]
[180.19351196 48.30320358]
[189.90443420 59.73552322]
[189.38061523 74.72637939]
[178.89540100 85.45298767]
[163.91990662 86.31768799]
[150.56625366 93.14996338]
[155.42164612 98.86618042]
[170.41615295 99.27236938]
[185.41064453 99.67855835]
[200.40515137 100.08475494]
[215.39964294 100.49094391]
[229.55294800 92.20746613]
[243.66746521 100.55686951]
[243.22338867 116.95000458]
[228.67755127 124.52301788]
[214.99345398 115.48544312]
[199.99896240 115.07925415]
[185.00445557 114.67305756]
[170.00996399 114.26686859]
[155.01545715 113.86067963]
[142.71524048 122.44583130]
[137.92572021 136.66062927]
[140.85157776 152.20893860]
[129.45547485 161.79943848]
[124.66594696 176.01423645]
[119.87642670 190.22903442]
[127.24042511 201.60166931]
[126.67472076 214.94288635]
[118.61376190 225.34233093]
[106.20896149 229.10328674]
[101.03627014 243.18316650]
[96.05470276 257.33181763]
[91.26518250 271.54660034]
[96.72392273 281.14791870]
[95.93670654 291.94259644]
[89.41471100 300.30130005]
[79.55559540 303.55081177]
[74.00352478 317.48544312]
[68.45144653 331.42010498]
[62.89937592 345.35476685]
[63.75839233 349.92620850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[7 11]
[16 114]
[17 113]
[18 112]
[19 111]
[21 107]
[22 106]
[24 105]
[25 104]
[28 100]
[29 99]
[30 98]
[32 96]
[33 95]
[38 49]
[39 48]
[51 70]
[52 69]
[53 68]
[56 67]
[57 66]
[58 65]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
