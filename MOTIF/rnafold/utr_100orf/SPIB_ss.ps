%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAACAGCCCGCCCGGCACCACCAUGCUCGCCCUGGAGGCUGCACAGCUCGACGGGCCACACUUCAGCUGUCUGUACCCAGAUGGCGUCUUCUAUGACCUGGACAGCUGCAAGCAUUCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[101.10419464 121.86512756]
[96.68286896 136.19871521]
[92.26154327 150.53231812]
[98.45654297 165.33100891]
[90.62291718 179.33151245]
[74.76995087 181.79380798]
[63.05868149 170.82907104]
[64.47299194 154.84848022]
[77.92794800 146.11097717]
[82.34927368 131.77738953]
[86.77060699 117.44380188]
[85.51371765 116.41495514]
[84.33657074 115.29575348]
[70.66397858 121.46505737]
[65.33726501 133.29054260]
[53.73438263 138.11912537]
[42.34449005 133.84562683]
[28.52234650 139.67214966]
[14.70020390 145.49867249]
[0.87806070 151.32519531]
[-4.84595060 166.05648804]
[-19.34350777 172.34906006]
[-34.01346970 166.46961975]
[-40.15240479 151.90634155]
[-34.11819458 137.29936218]
[-19.49082756 131.31474304]
[-4.94846106 137.50305176]
[8.87368202 131.67652893]
[22.69582558 125.85000610]
[36.51796722 120.02348328]
[46.27587509 105.49404144]
[64.49467468 107.79247284]
[78.16726685 101.62316132]
[87.66723633 81.91116333]
[109.48735809 80.26948547]
[120.22535706 69.79593658]
[130.96336365 59.32238388]
[141.70137024 48.84883118]
[152.43936157 38.37527847]
[163.17736816 27.90172577]
[173.78396606 17.29512405]
[184.25752258 6.55712080]
[194.73107910 -4.18088150]
[193.01823425 -17.60667610]
[199.29075623 -29.37925720]
[211.04042053 -35.27097321]
[223.84060669 -33.31460190]
[234.57861328 -43.78815460]
[245.31661987 -54.26170731]
[256.05462646 -64.73526001]
[266.79263306 -75.20880890]
[264.70281982 -90.47114563]
[271.91635132 -103.88077545]
[285.48233032 -110.39449310]
[300.10748291 -107.70320892]
[310.84548950 -118.17675781]
[321.58349609 -128.65031433]
[332.32147217 -139.12387085]
[336.79809570 -154.29852295]
[351.31161499 -157.64630127]
[362.04962158 -168.11985779]
[355.43218994 -182.55665588]
[354.14077759 -198.35841370]
[358.31225586 -213.62652588]
[367.42819214 -226.53274536]
[380.37927246 -235.53810120]
[395.60015869 -239.57644653]
[411.25885010 -238.18054199]
[425.47695923 -231.53617859]
[435.95053101 -242.27418518]
[446.42407227 -253.01219177]
[456.89761353 -263.75018311]
[467.37118530 -274.48818970]
[477.84472656 -285.22619629]
[488.31829834 -295.96420288]
[498.79183960 -306.70220947]
[502.31188965 -322.71911621]
[518.02264404 -327.42053223]
[529.76226807 -315.97003174]
[525.45397949 -300.14691162]
[509.52984619 -296.22863770]
[499.05627441 -285.49066162]
[488.58273315 -274.75265503]
[478.10919189 -264.01464844]
[467.63562012 -253.27664185]
[457.16207886 -242.53863525]
[446.68853760 -231.80062866]
[436.21496582 -221.06263733]
[442.75988770 -208.44775391]
[445.07662964 -194.40440369]
[442.92388916 -180.31320190]
[436.50051880 -167.56367493]
[426.42700195 -157.41725159]
[413.68588257 -150.88241577]
[399.52557373 -148.61447144]
[385.33831787 -150.84992981]
[372.52316284 -157.38185120]
[361.78515625 -146.90829468]
[358.07659912 -132.48277283]
[342.79504395 -128.38586426]
[332.05703735 -117.91230774]
[321.31903076 -107.43875885]
[310.58102417 -96.96520233]
[312.90686035 -82.27750397]
[306.05697632 -68.87814331]
[292.47164917 -62.00115585]
[277.26617432 -64.47080994]
[266.52816772 -53.99725723]
[255.79016113 -43.52370453]
[245.05216980 -33.05015182]
[234.31416321 -22.57659912]
[234.85433960 -5.81715345]
[222.90931702 6.42533779]
[205.46907043 6.29267073]
[194.99552917 17.03067398]
[184.52197266 27.76867676]
[182.07708740 34.83111954]
[173.65092468 38.63972855]
[162.91291809 49.11328125]
[152.17491150 59.58683395]
[141.43690491 70.06038666]
[130.69891357 80.53393555]
[119.96090698 91.00749207]
[121.85006714 101.37023163]
[118.68109131 111.41577911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[13 33]
[14 32]
[17 30]
[18 29]
[19 28]
[20 27]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[41 116]
[42 115]
[43 114]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[55 103]
[56 102]
[57 101]
[58 100]
[60 98]
[61 97]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
