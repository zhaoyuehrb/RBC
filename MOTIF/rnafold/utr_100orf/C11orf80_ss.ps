%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGGGAUGGGCUCGCGCUGCCGGGCGUGGGCGUGGACUCGGGCGUGGGCACUGGCGGAGUUCCAAGCCCGGGCUGAGGAGGGGGCGGCGGCGGCGGCGGCGGCGG\
) } def
/len { sequence length } bind def

/coor [
[116.26412201 175.15226746]
[107.15544891 187.06999207]
[94.10230255 194.46022034]
[79.19650269 196.13862610]
[64.82675934 191.83624268]
[53.29588318 182.24255371]
[46.45174789 168.89497375]
[45.39114761 153.93252563]
[50.28405380 139.75297546]
[60.34635544 128.62867737]
[73.96385193 122.34272766]
[84.81777954 111.98935699]
[70.32889557 115.87164307]
[55.84000778 119.75392914]
[41.35112000 123.63621521]
[26.86223221 127.51850128]
[12.37334347 131.40078735]
[-2.11554337 135.28306580]
[-16.60443115 139.16535950]
[-31.09331894 143.04763794]
[-42.30034637 155.01988220]
[-58.20858383 151.03741455]
[-62.45299530 135.19705200]
[-50.66729736 123.79400635]
[-34.97560501 128.55876160]
[-20.48671722 124.67646790]
[-5.99782896 120.79418182]
[8.49105835 116.91189575]
[22.97994614 113.02960968]
[37.46883392 109.14732361]
[51.95772171 105.26503754]
[66.44660950 101.38275146]
[80.93549347 97.50047302]
[84.45677185 91.09437561]
[89.81496429 86.89201355]
[95.91346741 85.27046967]
[97.65486145 70.37188721]
[95.52217865 61.32630920]
[99.66970062 55.06763458]
[101.84368134 40.22600937]
[104.01766205 25.38438416]
[106.19163513 10.54275990]
[108.36561584 -4.29886436]
[110.53958893 -19.14048958]
[112.71356964 -33.98211288]
[107.05804443 -48.75796127]
[116.55824280 -60.22947311]
[118.73221588 -75.07109833]
[120.90619659 -89.91271973]
[123.08017731 -104.75434875]
[121.21148682 -113.85813141]
[125.53928375 -119.99353027]
[128.14401245 -134.76564026]
[130.74873352 -149.53776550]
[122.76168060 -163.45129395]
[128.79364014 -178.31719971]
[144.21740723 -182.73161316]
[157.20118713 -173.30818176]
[157.78492737 -157.27575684]
[145.52084351 -146.93302917]
[142.91612244 -132.16091919]
[140.31140137 -117.38880157]
[137.92179871 -102.58036804]
[135.74781799 -87.73873901]
[133.57383728 -72.89711761]
[131.39987183 -58.05549240]
[137.21089172 -44.34122086]
[127.55519104 -31.80813599]
[125.38121796 -16.96651077]
[123.20723724 -2.12488651]
[121.03326416 12.71673775]
[118.85928345 27.55836296]
[116.68530273 42.39998627]
[114.51132965 57.24161148]
[112.55343628 72.11328125]
[110.81204224 87.01186371]
[116.41585541 73.09793854]
[128.42271423 64.10709381]
[143.35139465 62.64611053]
[156.87351990 69.13858032]
[165.06854248 81.70208740]
[165.56039429 96.69402313]
[158.20649719 109.76766205]
[145.13900757 117.13249207]
[130.14666748 116.65316010]
[117.57791901 108.47048950]
[127.54985809 119.67586517]
[142.50411987 124.84121704]
[145.18519592 139.49253845]
[155.15713501 150.69790649]
[170.11138916 155.86326599]
[172.79246521 170.51457214]
[182.76440430 181.71995544]
[198.49288940 186.36178589]
[202.07362366 202.36523438]
[189.82305908 213.26731873]
[174.34350586 207.85292053]
[171.55903625 191.69189453]
[161.58709717 180.48651123]
[147.34609985 176.12265015]
[143.95175171 160.66984558]
[133.97981262 149.46447754]
[119.73882294 145.10060120]
[116.34448242 129.64781189]
[106.37254333 118.44242859]
[109.75160217 133.05686951]
[117.67526245 145.79325867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 33]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[36 76]
[37 75]
[39 74]
[40 73]
[41 72]
[42 71]
[43 70]
[44 69]
[45 68]
[47 66]
[48 65]
[49 64]
[50 63]
[52 62]
[53 61]
[54 60]
[86 105]
[87 104]
[89 102]
[90 101]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
