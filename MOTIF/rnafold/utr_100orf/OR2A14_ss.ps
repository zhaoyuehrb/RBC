%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAGGCAACAAGACAUGGAUCACAGACAUCACCUUGCCGCGAUUCCAGGUUGGUCCAGCACUGGAGAUUCUCCUCUGUGGACUUUUCUCUGCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[88.80705261 249.96551514]
[75.92072296 238.94831848]
[82.94007874 223.51571655]
[83.87262726 208.54473877]
[84.80516815 193.57374573]
[85.73771667 178.60276794]
[86.67025757 163.63179016]
[87.60280609 148.66079712]
[88.53534698 133.68981934]
[89.46789551 118.71883392]
[86.81705475 113.90583801]
[85.78101349 109.03111267]
[86.20814514 104.56503296]
[87.82205963 100.89581299]
[90.25336456 98.29892731]
[77.66907501 90.13586426]
[65.08477783 81.97280121]
[49.29641724 80.95391846]
[42.82950592 67.53645325]
[30.24521446 59.37339401]
[17.66092300 51.21033096]
[5.07663059 43.04726791]
[-7.04282665 52.12163162]
[-21.50851059 56.49382019]
[-36.56892014 55.65460587]
[-50.40743637 49.72455597]
[-61.36144257 39.43712616]
[-68.12207031 26.04800987]
[-69.89058685 11.18189240]
[-66.47270966 -3.36470175]
[-79.05700684 -11.52776432]
[-94.46004486 -7.98913956]
[-107.80928802 -16.44923592]
[-111.18486786 -31.88882828]
[-102.58410645 -45.14788055]
[-87.10968781 -48.36003494]
[-73.94230652 -39.61957169]
[-70.89394379 -24.11205673]
[-58.30965042 -15.94899368]
[-46.42022705 -25.00034523]
[-32.12463379 -29.44614410]
[-17.14252663 -28.73137856]
[-3.28306484 -22.92303848]
[7.77353954 -12.70435047]
[14.67972565 0.70552689]
[16.58480263 15.69694710]
[13.23969364 30.46297455]
[25.82398605 38.62603760]
[38.40827560 46.78910065]
[50.99256897 54.95216370]
[65.88082123 55.38716888]
[73.24784088 69.38851166]
[85.83213806 77.55157471]
[98.41642761 85.71463776]
[113.30047607 87.57611847]
[127.50754547 82.76373291]
[141.71461487 77.95133972]
[155.92169189 73.13895416]
[170.12876892 68.32656860]
[184.33584595 63.51418304]
[191.61349487 57.69795990]
[199.06021118 58.78053284]
[213.41006470 54.41231155]
[220.88800049 40.74782181]
[235.50303650 36.52224731]
[248.48394775 43.73552322]
[262.83383179 39.36730194]
[277.18368530 34.99908447]
[291.53353882 30.63086319]
[304.92538452 20.23399734]
[318.62316895 30.22434425]
[312.81518555 46.15241623]
[295.90176392 44.98072815]
[281.55191040 49.34894943]
[267.20202637 53.71717072]
[252.85217285 58.08539200]
[246.09211731 71.30799103]
[231.60153198 75.94240570]
[217.77828979 68.76217651]
[203.42842102 73.13040161]
[189.14822388 77.72126007]
[174.94116211 82.53364563]
[160.73408508 87.34603119]
[146.52700806 92.15841675]
[132.31993103 96.97080231]
[118.11286163 101.78318787]
[133.11015320 102.06863403]
[144.04444885 112.33707428]
[145.27038574 127.28689575]
[136.15496826 139.19946289]
[121.40454102 141.92430115]
[108.63476562 134.05456543]
[104.43887329 119.65137482]
[103.50633240 134.62236023]
[102.57378387 149.59333801]
[101.64124298 164.56433105]
[100.70869446 179.53530884]
[99.77615356 194.50630188]
[98.84360504 209.47727966]
[97.91106415 224.44825745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[15 54]
[16 53]
[17 52]
[19 50]
[20 49]
[21 48]
[22 47]
[30 39]
[31 38]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[62 80]
[63 79]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
