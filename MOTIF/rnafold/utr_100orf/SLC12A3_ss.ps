%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCCCCUCCCUGGACACCCAGGCGACAAUGGCAGAACUGCCCACAACAGAGACGCCUGGGGACGCCACUUUGUGCAGCGGGCGCUUCACCAUCAGCACACUGCUGAGCAGUGAUGAGCCCUCUCCAC\
) } def
/len { sequence length } bind def

/coor [
[180.40928650 133.35217285]
[169.77690125 117.76845551]
[154.93431091 115.60112000]
[140.09170532 113.43378448]
[125.24911499 111.26644897]
[111.95330048 124.93128967]
[92.97354126 126.74096680]
[85.36914062 139.67051697]
[87.98838806 155.49830627]
[77.14020538 167.31762695]
[61.14638519 166.06172180]
[52.27602386 152.69398499]
[57.33369827 137.46902466]
[72.43959808 132.06611633]
[80.04399109 119.13657379]
[76.36173248 114.34165192]
[73.80967712 108.86101532]
[72.50984955 102.95671844]
[72.52439117 96.91104889]
[58.63177490 91.25462341]
[44.73915482 85.59820557]
[30.84653473 79.94178009]
[16.95391464 74.28535461]
[3.06129551 68.62893677]
[-10.83132458 62.97251129]
[-24.72394371 57.31608963]
[-38.57088470 71.26905060]
[-57.01836395 77.92451477]
[-76.49195862 76.03511047]
[-93.23648834 66.00505829]
[-104.04011536 49.80451202]
[-106.85041809 30.58272362]
[-121.41454315 26.99298859]
[-135.97866821 23.40325356]
[-150.54280090 19.81351852]
[-166.13536072 24.89328575]
[-178.14828491 13.72988510]
[-174.22372437 -2.19273305]
[-158.39891052 -6.49474478]
[-146.95306396 5.24939060]
[-132.38893127 8.83912563]
[-117.82480621 12.42886066]
[-103.26068115 16.01859474]
[-97.78407288 6.67804098]
[-90.19133759 -1.05948901]
[-80.93386841 -6.72503090]
[-70.56420898 -9.97306633]
[-59.70308685 -10.60258865]
[-49.00224304 -8.56953335]
[-39.10533524 -3.98979688]
[-30.60921288 2.86735058]
[-24.02793312 11.59508896]
[-19.76165390 21.67317963]
[-18.07230568 32.49898148]
[-19.06752205 43.42346954]
[-5.17490149 49.07989120]
[8.71771812 54.73631668]
[22.61033821 60.39273834]
[36.50295639 66.04916382]
[50.39557648 71.70558167]
[64.28820038 77.36200714]
[78.18081665 83.01842499]
[91.25529480 73.77061462]
[107.26351929 73.32244873]
[120.83491516 81.82427979]
[127.41645050 96.42385101]
[142.25904846 98.59118652]
[157.10163879 100.75852203]
[171.94424438 102.92585754]
[180.00204468 94.02128601]
[191.25871277 90.19681549]
[202.83616638 92.30654907]
[211.83398438 99.70286560]
[216.05606079 110.42887115]
[230.77661133 113.31077576]
[245.49716187 116.19267273]
[260.52679443 111.25090027]
[271.53039551 121.28930664]
[286.25094604 124.17121124]
[301.28057861 119.22943115]
[312.28421021 129.26783752]
[327.00476074 132.14973450]
[341.72531128 135.03164673]
[356.44586182 137.91354370]
[367.81536865 127.51931000]
[382.94839478 125.83259583]
[396.01828003 133.29194641]
[402.11663818 146.85469055]
[416.83718872 149.73658752]
[431.55773926 152.61849976]
[446.27828979 155.50039673]
[460.55679321 145.47814941]
[477.34576416 148.76860046]
[486.42037964 162.87356567]
[501.20626831 165.39891052]
[515.99218750 167.92427063]
[530.77807617 170.44963074]
[545.56396484 172.97497559]
[560.34985352 175.50033569]
[576.98083496 172.20693970]
[584.74945068 187.27627563]
[572.41961670 198.91288757]
[557.82446289 190.28622437]
[543.03857422 187.76087952]
[528.25268555 185.23551941]
[513.46679688 182.71015930]
[498.68093872 180.18479919]
[483.89501953 177.65945435]
[474.47296143 186.53474426]
[461.46096802 188.35865784]
[449.61492920 182.23678589]
[443.39639282 170.22094727]
[428.67584229 167.33905029]
[413.95529175 164.45715332]
[399.23474121 161.57524109]
[388.47216797 171.83706665]
[373.55429077 173.81713867]
[360.17449951 166.54835510]
[353.56396484 152.63409424]
[338.84341431 149.75219727]
[324.12286377 146.87028503]
[309.40228271 143.98838806]
[295.42559814 149.13629150]
[283.36904907 138.89175415]
[268.64849854 136.00985718]
[254.67179871 141.15776062]
[242.61526489 130.91322327]
[227.89471436 128.03132629]
[213.17416382 125.14942932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 66]
[7 15]
[8 14]
[19 62]
[20 61]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[32 43]
[33 42]
[34 41]
[35 40]
[74 129]
[75 128]
[76 127]
[78 125]
[79 124]
[81 122]
[82 121]
[83 120]
[84 119]
[88 115]
[89 114]
[90 113]
[91 112]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
