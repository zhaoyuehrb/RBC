%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCCUGGUACCUAAGCACCGAUCUGCCUUGGAGAACCUGAUUCUGAGACUCCAGCAGGAUGUCUUAUCAACAGCAGCAGUGCAAGCAGCCCUGCCAGCCACCUCCUGUGUGCCCCGCGCCAAAGUGCCCAGAGCCAUGUCCACCCCCGAAGUGCCCUG\
) } def
/len { sequence length } bind def

/coor [
[124.37438965 528.19934082]
[110.04923248 533.46740723]
[94.85780334 531.98980713]
[81.81639099 524.05981445]
[73.51435852 511.25207520]
[71.60009003 496.10946655]
[76.45366669 481.63861084]
[87.11139679 470.71270752]
[101.45719147 465.50109863]
[102.90935516 450.57156372]
[104.36151886 435.64199829]
[105.81368256 420.71246338]
[107.26584625 405.78292847]
[92.76517487 400.10183716]
[80.43433380 390.56527710]
[71.27244568 377.93563843]
[66.02477264 363.22634888]
[65.12206268 347.62063599]
[68.64523315 332.37612915]
[76.31818390 318.72378540]
[87.52940369 307.76821899]
[101.38069916 300.39855957]
[116.75918579 297.21618652]
[117.92157745 282.26129150]
[119.08396149 267.30639648]
[107.61770630 255.03375244]
[108.57025909 237.92752075]
[121.84014893 226.56503296]
[122.71232605 211.59040833]
[115.72814178 198.43478394]
[124.25476074 185.10784912]
[125.12693024 170.13322449]
[125.99909973 155.15859985]
[126.87127686 140.18397522]
[107.00113678 145.53103638]
[87.71829987 142.03416443]
[72.58948517 131.18240356]
[64.05427551 115.74473572]
[63.04239655 99.11284637]
[68.92553711 84.57160187]
[57.25006485 75.15441895]
[45.57458878 65.73723602]
[31.26916122 71.15036774]
[16.27397156 68.69249725]
[4.59996796 59.12254333]
[-0.68112457 45.08808517]
[1.75528574 30.39354515]
[-9.92018795 20.97636223]
[-21.59566116 11.55918026]
[-33.27113342 2.14199853]
[-44.94660950 -7.27518320]
[-56.62208176 -16.69236565]
[-68.38832092 -25.99589729]
[-80.24420929 -35.18490601]
[-92.10009766 -44.37391281]
[-108.41275787 -46.05591583]
[-114.86454773 -61.13259888]
[-104.81842804 -74.09436798]
[-88.60897064 -71.60726166]
[-82.91108704 -56.22980499]
[-71.05519867 -47.04079437]
[-59.19931030 -37.85178757]
[-51.95033264 -36.23179626]
[-47.20490265 -28.36783791]
[-35.52942657 -18.95065689]
[-23.85395432 -9.53347492]
[-12.17848015 -0.11629318]
[-0.50300610 9.30088902]
[11.17246723 18.71807098]
[25.01814079 13.22599316]
[39.85251999 15.41623497]
[51.67699051 24.79963684]
[57.25368881 38.93460464]
[54.99177170 54.06176376]
[66.66724396 63.47894669]
[78.34272003 72.89612579]
[85.48756409 68.48735046]
[93.48226166 65.92395782]
[101.85863495 65.35604858]
[105.88122559 50.90548706]
[109.90381622 36.45492554]
[113.92640686 22.00436211]
[110.17334747 6.63474512]
[121.04033661 -3.55140615]
[125.06292725 -18.00196838]
[118.46038055 -32.62338638]
[125.90318298 -46.83550262]
[141.68186951 -49.73599625]
[153.69236755 -39.09985733]
[152.72125244 -23.08622169]
[139.51348877 -13.97937965]
[135.49090576 0.47118309]
[139.53169250 14.80719852]
[128.37696838 26.02695084]
[124.35437775 40.47751236]
[120.33179474 54.92807770]
[116.30920410 69.37863922]
[124.16710663 69.08168030]
[132.53605652 70.68930054]
[140.97634888 74.35324097]
[153.81884766 66.60275269]
[166.58560181 58.72810364]
[179.27540588 50.73003769]
[191.96519470 42.73196793]
[196.90142822 27.46719933]
[211.96380615 21.94412804]
[225.59776306 30.39958191]
[227.34449768 46.34725952]
[215.86405945 57.55347061]
[199.96325684 55.42176437]
[187.27346802 63.41983414]
[174.58366394 71.41790009]
[170.58207703 77.67564392]
[161.56935120 79.44525146]
[148.72683716 87.19574738]
[150.31462097 94.52574921]
[164.59834290 99.10561371]
[153.49017334 109.18576050]
[155.07795715 116.51576233]
[169.97653198 118.25715637]
[184.87510681 119.99855042]
[199.77368164 121.73994446]
[214.60913086 114.75127411]
[227.92306519 124.32579803]
[226.01922607 140.61405945]
[210.85615540 146.86009216]
[198.03228760 136.63851929]
[183.13371277 134.89712524]
[168.23513794 133.15573120]
[153.33656311 131.41433716]
[141.84590149 141.05615234]
[140.97372437 156.03077698]
[140.10154724 171.00540161]
[139.22938538 185.98001099]
[146.15118408 200.20672607]
[137.68695068 212.46258545]
[136.81477356 227.43721008]
[146.88581848 236.42510986]
[149.88224792 249.38684082]
[144.92503357 261.52206421]
[134.03884888 268.46878052]
[132.87646484 283.42367554]
[131.71408081 298.37857056]
[145.32531738 303.31576538]
[157.17889404 311.60928345]
[166.46615601 322.68563843]
[172.55551147 335.78170776]
[175.03538513 349.99740601]
[173.74206543 364.35754395]
[168.77044678 377.87857056]
[160.46714783 389.63616943]
[149.40632629 398.82824707]
[136.34994507 404.82971191]
[122.19538879 407.23507690]
[120.74322510 422.16464233]
[119.29106140 437.09417725]
[117.83889771 452.02371216]
[116.38673401 466.95324707]
[129.45927429 474.83178711]
[137.81167603 487.60678101]
[139.78556824 502.74172974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 158]
[10 157]
[11 156]
[12 155]
[13 154]
[23 143]
[24 142]
[25 141]
[28 137]
[29 136]
[31 134]
[32 133]
[33 132]
[34 131]
[40 76]
[41 75]
[42 74]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[53 62]
[54 61]
[55 60]
[79 97]
[80 96]
[81 95]
[82 94]
[84 92]
[85 91]
[100 115]
[101 114]
[102 112]
[103 111]
[104 110]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
