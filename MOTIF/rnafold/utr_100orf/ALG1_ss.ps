%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGGAAGCGCGGUCACGUGACUGCUGCGGGCCAGCCAAGAUGGCGGCCUCAUGCUUGGUCCUGCUGGCGCUGUGUCUGCUGCUGCCGCUGCUGCUGCUGGGAGGAUGGAAGCGCUGGCGCCGGGGGCGGGCGGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[208.69052124 103.22775269]
[205.07012939 103.89573669]
[201.02403259 103.23829651]
[197.04586792 101.08474731]
[182.07888794 102.07958984]
[167.11190796 103.07443237]
[152.14494324 104.06928253]
[137.21922302 105.56018066]
[122.35118103 107.54548645]
[107.48314667 109.53079224]
[93.92774200 115.95349121]
[82.97505188 126.20233154]
[72.02236938 136.45117188]
[61.06968307 146.70001221]
[50.11699677 156.94883728]
[39.16431046 167.19767761]
[34.91696548 183.03724670]
[19.00799370 187.01678467]
[7.80318117 175.04246521]
[12.82907772 159.43246460]
[28.91547203 156.24499512]
[39.86816025 145.99615479]
[50.82084656 135.74731445]
[61.77353287 125.49848175]
[72.72621918 115.24964142]
[83.67890167 105.00080872]
[81.71105957 97.76357269]
[67.20794678 93.93476105]
[77.77537537 83.28909302]
[75.80753326 76.05185699]
[61.17314148 72.76028442]
[46.53874588 69.46870422]
[31.90435028 66.17712402]
[17.26995468 62.88554764]
[8.12937069 64.05760956]
[2.34992790 59.35589218]
[-12.20806885 55.74137878]
[-26.76606560 52.12686157]
[-41.32406235 48.51234436]
[-58.15343857 50.56380081]
[-64.78355408 34.96002197]
[-51.62497711 24.26945686]
[-37.70954895 33.95434952]
[-23.15155029 37.56886292]
[-8.59355354 41.18338013]
[5.96444368 44.79789734]
[20.56153297 48.25115204]
[35.19592667 51.54273224]
[49.83032227 54.83430862]
[64.46471405 58.12588501]
[79.09911346 61.41746521]
[94.02943420 65.68997955]
[103.89904022 74.52542877]
[107.66082001 85.14187622]
[105.49783325 94.66275787]
[120.36587524 92.67744446]
[135.23391724 90.69213867]
[139.48898315 87.40160370]
[144.11943054 86.24435425]
[148.22953796 86.99601746]
[151.15010071 89.10231018]
[166.11706543 88.10746002]
[181.08404541 87.11261749]
[196.05101013 86.11777496]
[210.95933533 84.46186066]
[225.77981567 82.14813232]
[240.60029602 79.83439636]
[255.42077637 77.52066040]
[270.24127197 75.20693207]
[278.31243896 70.75943756]
[285.41485596 73.00971985]
[300.28289795 71.02441406]
[315.15093994 69.03910065]
[320.71865845 65.24124908]
[326.49337769 64.93319702]
[330.71884155 67.30992889]
[345.66015625 65.98423004]
[360.60147095 64.65852356]
[375.54275513 63.33282471]
[390.48406982 62.00712204]
[405.42535400 60.68141937]
[420.36666870 59.35572052]
[433.42901611 50.42903519]
[446.79031372 57.01121902]
[461.73159790 55.68552017]
[476.67291260 54.35981750]
[489.73526001 45.43313217]
[503.09655762 52.01531982]
[518.03784180 50.68961716]
[532.97912598 49.36391449]
[547.92047119 48.03821564]
[562.84619141 46.54731750]
[577.75451660 44.89140701]
[586.01452637 40.80529022]
[593.01043701 43.36752701]
[607.95172119 42.04182434]
[622.89300537 40.71612549]
[635.95538330 31.78944016]
[649.31665039 38.37162399]
[664.25799561 37.04592514]
[679.19927979 35.72022247]
[689.14971924 23.44161415]
[704.87652588 21.87846947]
[717.04925537 31.95817184]
[718.44604492 47.70061493]
[708.23815918 59.76608658]
[692.48187256 60.99635696]
[680.52496338 50.66152573]
[665.58367920 51.98722458]
[650.64239502 53.31292725]
[638.64874268 62.14478683]
[624.21875000 55.65742493]
[609.27740479 56.98312759]
[594.33612061 58.30883026]
[579.41040039 59.79972458]
[564.50207520 61.45563507]
[558.15118408 65.35105896]
[549.24615479 62.97951508]
[534.30487061 64.30522156]
[519.36352539 65.63092041]
[504.42224121 66.95661926]
[492.42858887 75.78848267]
[477.99859619 69.30111694]
[463.05731201 70.62682343]
[448.11599731 71.95252228]
[436.12234497 80.78438568]
[421.69235229 74.29701996]
[406.75106812 75.62272644]
[391.80975342 76.94842529]
[376.86846924 78.27412415]
[361.92715454 79.59983063]
[346.98587036 80.92552948]
[332.04455566 82.25122833]
[317.13623047 83.90714264]
[302.26818848 85.89244843]
[287.40014648 87.87775421]
[272.55499268 90.02740479]
[257.73449707 92.34114075]
[242.91403198 94.65487671]
[228.09355164 96.96861267]
[213.27307129 99.28234100]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 57]
[9 56]
[10 55]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[36 46]
[37 45]
[38 44]
[39 43]
[65 141]
[66 140]
[67 139]
[68 138]
[69 137]
[71 136]
[72 135]
[73 134]
[76 133]
[77 132]
[78 131]
[79 130]
[80 129]
[81 128]
[82 127]
[84 125]
[85 124]
[86 123]
[88 121]
[89 120]
[90 119]
[91 118]
[92 116]
[93 115]
[95 114]
[96 113]
[97 112]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
