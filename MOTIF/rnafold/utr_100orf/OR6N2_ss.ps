%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUCAAUACAACCAUUCAAGCCUGGCUGAAUUUGUGUUCCUUGGCUUUGCCAGUGUGGGCUAUGUCAGGGGCUGGCUUUUUGUCCUGCUGCUAUUGG\
) } def
/len { sequence length } bind def

/coor [
[47.32898331 187.77688599]
[40.78913116 174.27761841]
[38.88444138 159.39903259]
[41.81289291 144.68766785]
[49.27009201 131.67266846]
[60.48091125 121.70685577]
[74.28246307 115.82551575]
[87.09646606 108.02799988]
[72.11278534 108.72760773]
[57.12911224 109.42720795]
[42.14543533 110.12681580]
[27.16176033 110.82642365]
[12.17808342 111.52603149]
[-2.80559301 112.22563171]
[-8.81919384 115.61026764]
[-14.72188663 115.34958649]
[-18.73666191 112.47341919]
[-33.73484802 112.24014282]
[-48.73303223 112.00686646]
[-63.73122025 111.77359009]
[-78.72940826 111.54031372]
[-87.53664398 114.57762146]
[-94.18847656 111.05930328]
[-109.17215729 110.35969543]
[-125.27605438 115.66071320]
[-134.82791138 101.65363312]
[-124.01244354 88.59751892]
[-108.47254944 95.37602234]
[-93.48887634 96.07563019]
[-78.49613190 96.54212952]
[-63.49794388 96.77540588]
[-48.49975586 97.00868225]
[-33.50157166 97.24195862]
[-18.50338554 97.47523499]
[-3.50519872 97.24195862]
[11.47847748 96.54235077]
[26.46215439 95.84274292]
[41.44583130 95.14314270]
[56.42950439 94.44353485]
[71.41318512 93.74392700]
[86.39685822 93.04431915]
[98.85267639 84.68653870]
[105.18020630 71.08644867]
[111.50772858 57.48635864]
[117.83525085 43.88627243]
[124.16278076 30.28618240]
[130.49031067 16.68609238]
[136.81782532 3.08600426]
[129.45301819 -10.44417381]
[131.44410706 -25.54016495]
[141.81974792 -36.44016647]
[156.44909668 -39.10853195]
[162.77662659 -52.70862198]
[169.10415649 -66.30870819]
[163.45117188 -81.06741333]
[169.96611023 -95.46641541]
[184.78375244 -100.96304321]
[199.11306763 -94.29623413]
[204.45272827 -79.42130280]
[197.63479614 -65.16327667]
[182.70423889 -59.98118591]
[176.37670898 -46.38109589]
[170.04919434 -32.78100586]
[177.43098450 -19.87182045]
[175.77627563 -4.91434860]
[165.51135254 6.33218622]
[150.41792297 9.41352940]
[144.09039307 23.01361847]
[137.76286316 36.61370850]
[131.43534851 50.21379852]
[125.10781860 63.81388474]
[118.78028870 77.41397858]
[112.45276642 91.01406097]
[117.70466614 105.06459808]
[131.40151978 111.17985535]
[149.57600403 108.78511047]
[159.43789673 123.20886230]
[173.31829834 128.89518738]
[187.19871521 134.58151245]
[202.49243164 129.73573303]
[215.73570251 138.79086304]
[216.76942444 154.80056763]
[204.80059814 165.48359680]
[189.01071167 162.64482117]
[181.51237488 148.46192932]
[167.63197327 142.77560425]
[153.75157166 137.08927917]
[142.36195374 141.48185730]
[130.68623352 136.71719360]
[125.28625488 124.87670135]
[111.58940887 118.76145172]
[120.67771912 130.69470215]
[128.48854065 143.50061035]
[131.81878662 158.12625122]
[130.32226562 173.05140686]
[124.15455627 186.72471619]
[113.95674133 197.72492981]
[100.78881836 204.90864563]
[86.01949310 207.52915955]
[71.18394470 205.31408691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[23 29]
[24 28]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[52 63]
[53 62]
[54 61]
[74 91]
[75 90]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
