%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCCCGGGCUGCCGCGGCGGGCGAGCCAGAGCCGCCGGCGGCGUCCUCCUCCUUCCAGGCCCGGCUCUGGAAGAACCUGCAGCUGGGGGUGGGCA\
) } def
/len { sequence length } bind def

/coor [
[88.63188934 351.10452271]
[91.42058563 331.92449951]
[91.88707733 316.93176270]
[79.87840271 305.27279663]
[79.93299103 288.20013428]
[92.50000000 276.15383911]
[92.50000000 261.15383911]
[92.50000000 246.15385437]
[92.50000000 231.15385437]
[92.50000000 216.15385437]
[84.76270294 203.42657471]
[92.50000000 189.62640381]
[92.50000000 174.62640381]
[92.50000000 159.62640381]
[92.50000000 144.62640381]
[92.50000000 129.62640381]
[92.50000000 114.62640381]
[84.73225403 101.79432678]
[71.44208527 94.83937836]
[58.15191650 87.88442230]
[42.33730316 88.34112549]
[34.64829636 75.58461761]
[21.35812759 68.62966156]
[5.54351425 69.08636475]
[-2.14548945 56.32985306]
[-15.43565941 49.37490082]
[-28.72583008 42.41994858]
[-42.01599884 35.46499252]
[-51.24814224 34.21591568]
[-55.60636139 28.08146858]
[-68.67380524 20.71655846]
[-85.05753326 21.42754936]
[-93.63568878 7.45088243]
[-85.58380890 -6.83544636]
[-69.18496704 -6.73488665]
[-61.30889130 7.64911461]
[-48.24144745 15.01402569]
[-35.06104660 22.17482376]
[-21.77087784 29.12977600]
[-8.48070717 36.08472824]
[4.80946350 43.03968430]
[19.67347527 42.08551788]
[28.31307983 55.33949280]
[41.60325241 62.29444504]
[56.46726227 61.34027863]
[65.10686493 74.59425354]
[78.39704132 81.54920959]
[91.68721008 88.50415802]
[83.35836792 76.02896881]
[75.58726501 63.19892502]
[77.08459473 48.27384567]
[87.24948120 37.24320221]
[102.00272369 34.53361893]
[115.42380524 41.23245621]
[122.12681580 54.65145874]
[119.42279053 69.40378571]
[111.48595428 82.13197327]
[124.55339813 74.76705933]
[137.62083435 67.40215302]
[150.68827820 60.03723907]
[163.75572205 52.67232895]
[176.82316589 45.30741501]
[189.89060974 37.94250488]
[202.84193420 30.37526131]
[215.67401123 22.60751724]
[226.09284973 9.23275661]
[241.82914734 15.54191685]
[240.12278748 32.40977478]
[223.44175720 35.43959427]
[210.60968018 43.20733643]
[206.44435120 49.47435760]
[197.25552368 51.00994873]
[184.18807983 58.37485886]
[171.12063599 65.73976898]
[158.05319214 73.10468292]
[144.98574829 80.46959686]
[131.91830444 87.83450317]
[118.85086823 95.19941711]
[133.84681702 95.54777527]
[143.70397949 106.85424042]
[142.00482178 121.75769043]
[129.85556030 130.55516052]
[115.16603851 127.51902008]
[107.50000000 114.62640381]
[107.50000000 129.62640381]
[107.50000000 144.62640381]
[107.50000000 159.62640381]
[107.50000000 174.62640381]
[107.50000000 189.62640381]
[115.23729706 203.42657471]
[107.50000000 216.15385437]
[107.50000000 231.15385437]
[107.50000000 246.15385437]
[107.50000000 261.15383911]
[107.50000000 276.15383911]
[118.12709808 284.60012817]
[121.83964539 297.45382690]
[117.48175049 309.89617920]
[106.87982178 317.39825439]
[106.41333008 332.39099121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 100]
[3 99]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[18 48]
[19 47]
[20 46]
[22 44]
[23 43]
[25 41]
[26 40]
[27 39]
[28 38]
[30 37]
[31 36]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
