%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGUGACGGGCGCCCGCGGAAGGCGACAUGGGCUCCGCUCCCUGGGCCCCGGUCCUGCUGCUGGCGCUCGGGCUGCGCGGCCUCCAGGCGGGGGCCCGCAGGGCCCCGGACCCCGGCUUCCAGGAGC\
) } def
/len { sequence length } bind def

/coor [
[139.49296570 149.65641785]
[131.81665039 162.54339600]
[119.44253540 171.02168274]
[104.65328979 173.52729797]
[90.17707062 169.59802246]
[78.68431854 159.95869446]
[72.29508972 146.38748169]
[72.18801117 131.38787842]
[78.38282776 117.72682190]
[89.73410797 107.92585754]
[74.74380493 108.46532440]
[59.75351334 109.00479889]
[44.76321793 109.54426575]
[36.20137024 113.00881958]
[29.40791702 109.91258240]
[14.40899563 110.09243774]
[-0.58992565 110.27230072]
[-15.58884716 110.45215607]
[-30.55004311 111.53039551]
[-45.41975403 113.50315094]
[-60.28946304 115.47590637]
[-75.15917206 117.44865417]
[-90.02887726 119.42140961]
[-95.62712860 123.23331451]
[-101.42860413 123.52425385]
[-105.65681458 121.11450958]
[-120.60400391 122.37207031]
[-129.46749878 135.25509644]
[-144.55209351 139.37687683]
[-158.73530579 132.79122925]
[-165.32023621 118.60769653]
[-161.19770813 103.52330780]
[-148.31423950 94.66045380]
[-132.75300598 96.20389557]
[-121.86156464 107.42487335]
[-106.91436768 106.16732025]
[-92.00163269 104.55169678]
[-77.13191986 102.57894897]
[-62.26221466 100.60619354]
[-47.39250565 98.63344574]
[-32.52279663 96.66069031]
[-42.23422241 85.22879791]
[-39.59279633 70.46320343]
[-26.52037239 63.10712814]
[-12.52825928 68.51275635]
[-7.79691029 82.74701691]
[-15.76870537 95.45323181]
[-0.76978350 95.27337646]
[14.22913837 95.09352112]
[29.22805977 94.91365814]
[44.22374725 94.55397034]
[59.21404266 94.01450348]
[74.20433807 93.47502899]
[89.19463348 92.93556213]
[97.73419952 87.43521118]
[107.48830414 89.83540344]
[121.81936646 85.40589142]
[136.15043640 80.97637939]
[150.48150635 76.54686737]
[164.81256104 72.11735535]
[172.64688110 56.52960205]
[188.99470520 51.48208618]
[203.66456604 59.61379242]
[217.88528442 54.84190369]
[232.10601807 50.07001877]
[246.32675171 45.29813004]
[260.54748535 40.52624512]
[265.29229736 25.87042809]
[277.61309814 16.92329597]
[292.66180420 16.94642639]
[304.66754150 25.72137260]
[318.88827515 20.94948578]
[333.10900879 16.17759895]
[347.32974243 11.40571308]
[361.55047607 6.63382626]
[375.59036255 1.35358262]
[389.43130493 -4.42818594]
[403.27221680 -10.20995426]
[417.11315918 -15.99172211]
[430.95407104 -21.77349091]
[437.74832153 -28.03020096]
[445.19686890 -27.52354622]
[459.17245483 -32.97175598]
[473.14804077 -38.41996765]
[487.12362671 -43.86817551]
[501.09921265 -49.31638718]
[515.07482910 -54.76459503]
[529.05041504 -60.21280670]
[538.87652588 -73.34214783]
[555.12561035 -71.12875366]
[561.08197021 -55.84957504]
[550.61828613 -43.22251892]
[534.49859619 -46.23722076]
[520.52301025 -40.78900909]
[506.54742432 -35.34080124]
[492.57183838 -29.89258957]
[478.59625244 -24.44437981]
[464.62066650 -18.99617004]
[450.64508057 -13.54796028]
[436.73583984 -7.93256760]
[422.89489746 -2.15079927]
[409.05398560 3.63096905]
[395.21307373 9.41273785]
[381.37213135 15.19450569]
[379.69589233 18.40330505]
[376.32949829 20.92272186]
[371.63229370 21.94298553]
[366.32235718 20.85455322]
[352.10162354 25.62644005]
[337.88088989 30.39832687]
[323.66015625 35.17021561]
[309.43945312 39.94210052]
[305.15676880 54.18277359]
[293.16799927 63.27856064]
[277.94412231 63.57427216]
[265.31936646 54.74697113]
[251.09863281 59.51885986]
[236.87789917 64.29074860]
[222.65718079 69.06262970]
[208.43644714 73.83451843]
[204.33639526 86.11074829]
[193.73794556 93.87479401]
[180.40644836 94.08874512]
[169.24208069 86.44842529]
[154.91101074 90.87792969]
[140.57994080 95.30744171]
[126.24887848 99.73695374]
[111.91781616 104.16646576]
[125.86696625 109.68200684]
[136.21586609 120.54019165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 54]
[11 53]
[12 52]
[13 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[26 36]
[27 35]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[63 120]
[64 119]
[65 118]
[66 117]
[67 116]
[71 112]
[72 111]
[73 110]
[74 109]
[75 108]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
