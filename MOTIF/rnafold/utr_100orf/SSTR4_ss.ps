%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGCUCUCUGGCGCAGCGCUAGCUCCGCCGCGCUCAGCUGCCCUGCGCCGGCACCCCUGGUCAUGAGCGCCCCCUCGACGCUGCCCCCCGGGGGCGAGGAAGGGCUGGGGACGGCCUGGCCCUCUGCAGCCAAUGCCAGUAGCGCUCCGGCGGAGGCGGAGG\
) } def
/len { sequence length } bind def

/coor [
[109.29762268 464.79510498]
[109.29762268 449.79510498]
[96.91429901 438.44589233]
[96.54141998 421.31542969]
[108.89580536 408.96105957]
[108.61022186 393.96377563]
[105.32388306 387.30581665]
[108.46470642 378.67889404]
[108.46470642 363.67889404]
[108.46470642 348.67889404]
[108.46470642 333.67889404]
[108.46470642 318.67889404]
[100.72740173 305.95162964]
[108.46470642 292.15145874]
[108.46470642 277.15145874]
[100.72740173 264.42416382]
[108.46470642 250.62399292]
[108.46470642 235.62399292]
[108.46470642 220.62399292]
[108.46470642 205.62399292]
[108.46470642 190.62399292]
[108.46470642 175.62399292]
[108.46470642 160.62399292]
[105.30572510 153.90464783]
[108.61022186 145.33909607]
[108.89580536 130.34181213]
[92.84340668 129.07575989]
[80.36481476 120.33581543]
[74.41662598 107.25678253]
[59.41730881 107.11398315]
[44.41798782 106.97118378]
[29.41866684 106.82838440]
[20.76224327 109.88694000]
[14.13584328 106.53736877]
[-0.85803974 106.10902405]
[-14.87353134 113.44909668]
[-27.37466621 105.35150909]
[-42.36854935 104.92316437]
[-57.36243057 104.49482727]
[-69.96623993 114.42073059]
[-85.55142212 110.61524200]
[-92.16235352 95.99761200]
[-84.72769928 81.78123474]
[-68.95069122 78.87169647]
[-56.93408966 89.50094604]
[-41.94020844 89.92928314]
[-26.94632530 90.35762787]
[-14.00329685 82.98692322]
[-0.42969897 91.11514282]
[14.56418419 91.54348755]
[29.56146431 91.82906342]
[44.56078720 91.97186279]
[59.56010437 92.11466217]
[74.55942535 92.25746155]
[79.09675598 83.56150818]
[86.47786713 77.10192871]
[82.80287170 62.55908203]
[79.12787628 48.01623535]
[75.45288086 33.47338867]
[71.77788544 18.93054008]
[68.10289001 4.38769293]
[64.42788696 -10.15515423]
[49.52804565 -13.27861309]
[37.51086807 -22.52385139]
[30.72723579 -36.01468277]
[30.47478485 -51.05121231]
[36.75003815 -64.65013123]
[48.25969315 -74.13661194]
[44.58469772 -88.67945862]
[40.90970230 -103.22230530]
[37.23470688 -117.76515198]
[22.57608032 -122.57433319]
[12.86224079 -134.55952454]
[11.19283867 -149.89630127]
[18.10057449 -163.69075012]
[31.38121414 -171.54110718]
[46.79695511 -170.94236755]
[59.42868805 -162.08557129]
[65.24567413 -147.79689026]
[62.39173508 -132.63580322]
[51.77755356 -121.44014740]
[55.45254898 -106.89730072]
[59.12754440 -92.35445404]
[62.80253983 -77.81160736]
[77.43717194 -74.93182373]
[89.41946411 -65.94660950]
[96.34066010 -52.59527969]
[96.78043365 -37.50134659]
[90.59801483 -23.65704536]
[78.97073364 -13.83014965]
[82.64573669 0.71269709]
[86.32073212 15.25554466]
[89.99572754 29.79839134]
[93.67072296 44.34123993]
[97.34571838 58.88408661]
[101.02071381 73.42693329]
[112.29100800 75.00976562]
[122.35475159 81.36094666]
[129.21076965 91.71704865]
[131.29898071 104.48716736]
[146.10296631 102.07015228]
[153.48605347 86.87626648]
[168.31561279 79.13869476]
[184.67372131 81.72250366]
[196.16390991 93.41743469]
[210.91918945 90.71901703]
[225.67448425 88.02059174]
[240.42976379 85.32216644]
[255.18505859 82.62374115]
[267.36819458 72.53009033]
[281.27972412 77.85159302]
[296.03500366 75.15316772]
[310.79031372 72.45475006]
[322.97341919 62.36109543]
[336.88497925 67.68259430]
[351.64025879 64.98417664]
[366.39553833 62.28575134]
[380.88858032 53.48867416]
[393.35391235 64.98003387]
[385.76242065 80.13935852]
[369.09396362 77.04103851]
[354.33868408 79.73946381]
[339.58340454 82.43788147]
[328.45565796 92.33853149]
[313.48870850 87.21003723]
[298.73342896 89.90845490]
[283.97814941 92.60688019]
[272.85040283 102.50752258]
[257.88348389 97.37903595]
[243.12818909 100.07745361]
[228.37289429 102.77587891]
[213.61761475 105.47430420]
[198.86231995 108.17272186]
[194.21426392 120.71492767]
[183.88557434 129.38331604]
[170.51394653 131.82415771]
[157.58419800 127.29232025]
[148.51998901 116.87414551]
[133.71598816 119.29115295]
[123.89308167 130.62739563]
[123.60750580 145.62467957]
[123.46470642 160.62399292]
[123.46470642 175.62399292]
[123.46470642 190.62399292]
[123.46470642 205.62399292]
[123.46470642 220.62399292]
[123.46470642 235.62399292]
[123.46470642 250.62399292]
[131.20201111 264.42416382]
[123.46470642 277.15145874]
[123.46470642 292.15145874]
[131.20201111 305.95162964]
[123.46470642 318.67889404]
[123.46470642 333.67889404]
[123.46470642 348.67889404]
[123.46470642 363.67889404]
[123.46470642 378.67889404]
[123.60750580 393.67822266]
[123.89308167 408.67547607]
[134.62590027 416.85797119]
[138.61418152 429.54727173]
[134.61128235 442.02743530]
[124.29762268 449.79510498]
[124.29762268 464.79510498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 164]
[2 163]
[5 159]
[6 158]
[8 157]
[9 156]
[10 155]
[11 154]
[12 153]
[14 151]
[15 150]
[17 148]
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[25 141]
[26 140]
[29 54]
[30 53]
[31 52]
[32 51]
[34 50]
[35 49]
[37 47]
[38 46]
[39 45]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[68 84]
[69 83]
[70 82]
[71 81]
[100 139]
[101 138]
[105 133]
[106 132]
[107 131]
[108 130]
[109 129]
[111 127]
[112 126]
[113 125]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
