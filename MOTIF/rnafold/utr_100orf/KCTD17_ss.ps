%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAUGCAGACGCCGCGGCCGGCGAUGAGGAUGGAGGCCGGGGAGGCAGCGCCGCCGGCGGGGGCGGGCGGCCGCGCCGCAGGCGGCUGGGGCAAGUGGGUGC\
) } def
/len { sequence length } bind def

/coor [
[69.65222931 502.85101318]
[55.31416321 496.60971069]
[48.38870621 482.58929443]
[52.14585114 467.40975952]
[64.81158447 458.23843384]
[65.70864868 443.26528931]
[58.74633789 430.09808350]
[67.29509735 416.78533936]
[68.19216156 401.81216431]
[56.58921814 392.51110840]
[52.64129639 377.98947144]
[58.06465530 363.76132202]
[70.97531128 355.35769653]
[71.87237549 340.38452148]
[72.76943970 325.41137695]
[65.80712891 312.24417114]
[74.35588837 298.93142700]
[75.25295258 283.95825195]
[76.15001678 268.98510742]
[77.04707336 254.01196289]
[77.94413757 239.03880310]
[78.84120178 224.06565857]
[69.46157074 217.24043274]
[64.55974579 206.59368896]
[65.49182129 194.78852844]
[72.13804626 184.84184265]
[82.90338135 179.35328674]
[84.69429779 164.46057129]
[78.53190613 150.90055847]
[87.86151886 138.12287903]
[89.65243530 123.23017883]
[83.93032074 119.70986176]
[79.32973480 114.81395721]
[76.17176056 108.88416290]
[74.67680359 102.33432770]
[74.94919586 95.62157440]
[76.96992493 89.21440125]
[80.59796906 83.55997467]
[72.52270508 70.91915894]
[64.44744873 58.27834320]
[49.15287781 53.43524170]
[43.53810501 38.40680313]
[51.91030502 24.72156334]
[67.84704590 22.87766457]
[79.12301636 34.28958893]
[77.08826447 50.20308304]
[85.16352081 62.84389877]
[93.23878479 75.48471069]
[100.76076508 74.58081818]
[108.21523285 75.93293762]
[117.03201294 63.79768372]
[125.84879303 51.66242981]
[134.48304749 39.39664078]
[142.93284607 27.00305748]
[151.38264465 14.60947609]
[159.83244324 2.21589470]
[168.28225708 -10.17768669]
[169.66329956 -25.93850136]
[183.22569275 -32.09569168]
[191.67549133 -44.48927307]
[192.36076355 -60.87409592]
[207.01647949 -68.23223114]
[220.56608582 -58.99426651]
[219.07092285 -42.66341782]
[204.06907654 -36.03947067]
[195.61927795 -23.64588928]
[194.84260559 -8.77154732]
[180.67582703 -1.72788596]
[172.22602844 10.66569614]
[163.77622986 23.05927658]
[155.32643127 35.45285797]
[146.87663269 47.84643936]
[145.68989563 55.26726532]
[137.98403931 60.47920990]
[129.16726685 72.61446381]
[120.35048676 84.74971771]
[123.67263794 109.29082489]
[104.54513550 125.02109528]
[102.75422668 139.91380310]
[108.78852081 154.53904724]
[99.58699799 166.25149536]
[97.79608917 181.14419556]
[110.05391693 195.41810608]
[108.18881226 213.82383728]
[93.81435394 224.96272278]
[92.91728973 239.93586731]
[92.02022552 254.90902710]
[91.12316895 269.88217163]
[90.22610474 284.85531616]
[89.32904053 299.82849121]
[96.22718811 314.06668091]
[87.74259186 326.30844116]
[86.84552765 341.28158569]
[85.94846344 356.25473022]
[97.76342773 366.13973999]
[101.44923401 380.91363525]
[95.79575348 394.86004639]
[83.16531372 402.70922852]
[82.26824951 417.68240356]
[89.16639709 431.92059326]
[80.68180084 444.16235352]
[79.78473663 459.13549805]
[91.26486969 469.75344849]
[93.18279266 485.27294922]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 102]
[6 101]
[8 99]
[9 98]
[13 94]
[14 93]
[15 92]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[27 82]
[28 81]
[30 79]
[31 78]
[38 48]
[39 47]
[40 46]
[50 76]
[51 75]
[52 74]
[53 72]
[54 71]
[55 70]
[56 69]
[57 68]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
