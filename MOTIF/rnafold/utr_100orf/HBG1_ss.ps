%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCGCUUCUGGAACGUCUGAGGUUAUCAAUAAGCUCCUAGUCCAGACGCCAUGGGUCAUUUCACAGAGGAGGACAAGGCUACUAUCACAAGCCUGUGGGGCAAGGUGAAUGUGGAAGAUGCUGGAGGAGAAACCCUGGGAAGGCUCCUGG\
) } def
/len { sequence length } bind def

/coor [
[36.65573883 190.67689514]
[29.40962219 203.81059265]
[15.89520073 210.31907654]
[1.10890329 207.79609680]
[-9.48261166 197.17442322]
[-11.96354294 182.38102722]
[-5.41608667 168.88455200]
[-19.41613388 174.26959229]
[-29.51862717 186.44538879]
[-44.17516708 183.79301453]
[-58.17521286 189.17805481]
[-72.17526245 194.56309509]
[-86.17530823 199.94813538]
[-100.17536163 205.33317566]
[-107.11212921 211.37051392]
[-114.51630402 210.68206787]
[-128.62329102 215.78041077]
[-131.46969604 229.30180359]
[-140.56523132 239.55929565]
[-153.44355774 243.93331909]
[-166.69178772 241.37806702]
[-176.85485840 232.66929626]
[-191.06291199 237.47882080]
[-205.27095032 242.28833008]
[-215.86167908 254.04193115]
[-230.39782715 250.79394531]
[-244.60588074 255.60346985]
[-258.81393433 260.41299438]
[-269.22470093 273.08370972]
[-285.35684204 270.13650513]
[-290.61499023 254.60317993]
[-279.58999634 242.46310425]
[-263.62344360 246.20494080]
[-249.41539001 241.39541626]
[-235.20735168 236.58590698]
[-225.63288879 225.17630005]
[-210.08047485 228.08029175]
[-195.87242126 223.27076721]
[-181.66438293 218.46125793]
[-177.30746460 202.66285706]
[-164.27534485 192.45510864]
[-147.56173706 192.00001526]
[-133.72161865 201.67343140]
[-119.61464691 196.57508850]
[-105.56040192 191.33312988]
[-91.56034851 185.94808960]
[-77.56030273 180.56304932]
[-63.56025696 175.17800903]
[-49.56020737 169.79296875]
[-40.45909119 158.00233459]
[-24.80117416 160.26954651]
[-10.80112648 154.88450623]
[2.71340609 148.37625122]
[15.65248775 140.78808594]
[22.71697617 127.67540741]
[38.53520584 127.36845398]
[51.47428513 119.78028870]
[64.41336823 112.19213104]
[77.35244751 104.60397339]
[90.29152679 97.01580811]
[95.13433075 90.50669861]
[103.57285309 89.40792847]
[116.66403198 82.08528137]
[129.75520325 74.76264191]
[142.84637451 67.43999481]
[148.85334778 60.47689438]
[156.28013611 60.10461426]
[169.51795959 53.05053329]
[182.75578308 45.99645615]
[188.90351868 39.15733719]
[196.33636475 38.93663025]
[209.71533203 32.15404892]
[207.30596924 15.12457561]
[210.82777405 -1.68502975]
[219.84440613 -16.27355957]
[233.26644897 -26.91002655]
[249.48287964 -32.33904266]
[266.55453491 -31.92897415]
[282.44592285 -25.74538612]
[295.26800537 -14.54123211]
[308.20709229 -22.12939262]
[321.14617920 -29.71755219]
[325.23834229 -44.74724960]
[338.46850586 -52.25839996]
[352.77182007 -48.26450348]
[365.71090698 -55.85266495]
[373.70086670 -69.50809479]
[388.59362793 -69.27229309]
[401.53268433 -76.86045837]
[414.47177124 -84.44861603]
[427.41085815 -92.03678131]
[440.34994507 -99.62493896]
[449.43722534 -117.57453156]
[468.73019409 -117.01614380]
[481.34899902 -125.12575531]
[493.96780396 -133.23536682]
[506.58660889 -141.34498596]
[507.33798218 -156.84385681]
[517.08209229 -168.91995239]
[532.07214355 -172.92976379]
[546.54412842 -167.33143616]
[554.93328857 -154.27763367]
[554.01379395 -138.78782654]
[544.13928223 -126.81814575]
[529.10662842 -122.97118378]
[514.69622803 -128.72618103]
[502.07742310 -120.61656952]
[489.45861816 -112.50695801]
[476.83981323 -104.39734650]
[475.55538940 -94.18603516]
[468.69421387 -86.22183228]
[458.36120605 -83.32104492]
[447.93811035 -86.68585968]
[434.99902344 -79.09769440]
[422.05993652 -71.50953674]
[409.12084961 -63.92137527]
[396.18176270 -56.33321381]
[389.11727905 -43.22053909]
[373.29907227 -42.91358185]
[360.35998535 -35.32542038]
[356.86309814 -20.89256287]
[343.84912109 -13.01276684]
[328.73431396 -16.77847099]
[315.79525757 -9.19031048]
[302.85617065 -1.60215056]
[306.05828857 10.95047665]
[305.87966919 23.91741943]
[302.32559204 36.40316391]
[295.63464355 47.54358292]
[286.26284790 56.56575394]
[274.85244751 62.84156799]
[262.18798828 65.93146515]
[249.14230347 65.61521912]
[236.61642456 61.90760803]
[225.47732544 55.05787659]
[216.49790955 45.53301239]
[203.11894226 52.31558990]
[189.80986023 59.23427963]
[176.57203674 66.28836060]
[163.33421326 73.34243774]
[150.16902161 80.53117371]
[137.07785034 87.85381317]
[123.98667145 95.17646027]
[110.89549255 102.49909973]
[97.87969208 109.95488739]
[84.94060516 117.54305267]
[72.00152588 125.13121033]
[59.06244659 132.71937561]
[46.12336349 140.30752563]
[38.13338470 153.96296692]
[23.24064827 153.72717285]
[10.30156612 161.31532288]
[24.93508339 164.61080933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 52]
[8 51]
[10 49]
[11 48]
[12 47]
[13 46]
[14 45]
[16 44]
[17 43]
[22 39]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[53 152]
[54 151]
[56 149]
[57 148]
[58 147]
[59 146]
[60 145]
[62 144]
[63 143]
[64 142]
[65 141]
[67 140]
[68 139]
[69 138]
[71 137]
[72 136]
[80 125]
[81 124]
[82 123]
[85 120]
[86 119]
[88 117]
[89 116]
[90 115]
[91 114]
[92 113]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
