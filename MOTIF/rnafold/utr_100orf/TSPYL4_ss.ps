%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGGUGGUGCUAGACGUUUCGGGCAGAGCUCGGCCGCUGCGGAGGACAAGGAACUCUCCCUCUCCCACUAGUCUGACUUCUUCCAAAAUGAGCGGCCUGGAUGGGGGCAACAAGCUCCCUCUCGCCCAAACCGGCGGCCUGGCUGCUCCCGACCAUGCCUCAGGAGAUCCGGACCGAGACCAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[254.87661743 636.59228516]
[258.75769043 631.55084229]
[252.76200867 617.80126953]
[246.76631165 604.05163574]
[240.77062988 590.30200195]
[228.59104919 581.72839355]
[230.16728210 565.98590088]
[224.17158508 552.23626709]
[218.17590332 538.48669434]
[212.18020630 524.73706055]
[209.20121765 539.43829346]
[199.81066895 551.13519287]
[186.10092163 557.22149658]
[171.12678528 556.34106445]
[158.22474670 548.69006348]
[150.26963806 535.97332764]
[149.03398132 521.02429199]
[154.79310608 507.17391968]
[166.26377869 497.50833130]
[180.89012146 494.18118286]
[195.41313171 497.93383789]
[206.59674072 507.92999268]
[203.17308044 493.32595825]
[199.74942017 478.72189331]
[196.32575989 464.11782837]
[192.90209961 449.51376343]
[188.30662537 443.70916748]
[189.54432678 434.64138794]
[186.36132812 419.98300171]
[183.05787659 405.35125732]
[179.63421631 390.74722290]
[176.21055603 376.14315796]
[172.78689575 361.53909302]
[162.34890747 350.91375732]
[166.73216248 335.71188354]
[163.30850220 321.10781860]
[159.88484192 306.50375366]
[156.46118164 291.89968872]
[153.03752136 277.29562378]
[149.61386108 262.69155884]
[146.19018555 248.08750916]
[141.93193054 233.70463562]
[136.85317993 219.59059143]
[131.77444458 205.47654724]
[126.57978821 191.40473938]
[121.26959229 177.37612915]
[115.95938873 163.34751892]
[110.64919281 149.31892395]
[91.04943085 149.65530396]
[72.80068970 142.49656677]
[58.65748215 128.92329407]
[50.75462341 110.98427582]
[50.28499603 91.38724518]
[36.04995346 86.65823364]
[21.81490898 81.92922211]
[5.86979675 85.76138306]
[-5.22374058 73.68389893]
[-0.05362215 58.12106323]
[16.06157684 55.08258057]
[26.54392242 67.69418335]
[40.77896500 72.42319489]
[55.01400757 77.15220642]
[61.39108658 67.51750183]
[69.79273987 59.58610916]
[79.77839661 53.77394485]
[75.87625885 39.29039383]
[71.97411346 24.80684090]
[68.07197571 10.32328892]
[64.16983032 -4.16026402]
[60.26769257 -18.64381599]
[56.24657059 -33.09478760]
[52.10673904 -47.51219940]
[47.96690750 -61.92961502]
[43.82707977 -76.34703064]
[32.58159637 -87.47580719]
[36.50580215 -101.84416962]
[32.36597443 -116.26158142]
[28.22614288 -130.67900085]
[22.84103012 -138.07881165]
[24.13888168 -145.36766052]
[20.23674011 -159.85121155]
[16.33459854 -174.33476257]
[5.27367735 -185.64698792]
[9.43367577 -199.94886780]
[5.53153419 -214.43241882]
[-6.45605564 -225.62303162]
[-2.49538994 -241.53671265]
[13.33913708 -245.80282593]
[24.75832176 -234.03277588]
[20.01508713 -218.33456421]
[23.91722870 -203.85101318]
[34.69904327 -193.57473755]
[30.81815147 -178.23690796]
[34.72029114 -163.75335693]
[38.62243271 -149.26979065]
[42.64355469 -134.81883240]
[46.78338623 -120.40141296]
[50.92321777 -105.98400116]
[61.87258911 -95.88645172]
[58.24449158 -80.48685455]
[62.38432312 -66.06944275]
[66.52415466 -51.65203094]
[70.66398621 -37.23461914]
[75.54017639 -31.66375542]
[74.75124359 -22.54595757]
[78.65338898 -8.06240559]
[82.55552673 6.42114687]
[86.45767212 20.90469933]
[90.35980988 35.38825226]
[94.26195526 49.87180328]
[106.81728363 50.00714111]
[118.95043182 53.23845291]
[129.91000366 59.36562347]
[139.01731873 68.00921631]
[145.70834351 78.63394165]
[149.56872559 90.58182526]
[150.35942078 103.11296844]
[148.03141785 115.45132446]
[142.72892761 126.83280945]
[134.78030396 136.55258179]
[124.67779541 144.00872803]
[129.98799133 158.03732300]
[135.29820251 172.06593323]
[140.60839844 186.09454346]
[146.58319092 193.02696228]
[145.88848877 200.39779663]
[150.96723938 214.51184082]
[156.04597473 228.62588501]
[162.47100830 215.07157898]
[176.04699707 208.69253540]
[190.58206177 212.39816284]
[199.44688416 224.49836731]
[198.59828186 239.47434998]
[188.42329407 250.49566650]
[173.56263733 252.53559875]
[160.79425049 244.66384888]
[164.21791077 259.26791382]
[167.64157104 273.87197876]
[171.06523132 288.47604370]
[174.48889160 303.08007812]
[177.91256714 317.68414307]
[181.33622742 332.28820801]
[192.01908875 343.95812988]
[187.39096069 358.11541748]
[190.81462097 372.71948242]
[194.23828125 387.32354736]
[197.66194153 401.92761230]
[202.67550659 409.58401489]
[201.01971436 416.79998779]
[204.20271301 431.45837402]
[207.50616455 446.09011841]
[210.92982483 460.69415283]
[214.35348511 475.29821777]
[217.77714539 489.90228271]
[221.20080566 504.50634766]
[225.92982483 518.74139404]
[231.92550659 532.49096680]
[237.92118835 546.24060059]
[243.91688538 559.99023438]
[256.52529907 569.54730225]
[254.52023315 584.30633545]
[260.51593018 598.05596924]
[266.51162720 611.80554199]
[272.50729370 625.55517578]
[293.55279541 637.93334961]
[290.60171509 661.45922852]
[298.13729858 674.42901611]
[311.47732544 676.36108398]
[321.12429810 685.49420166]
[323.70602417 698.32690430]
[318.49859619 710.12384033]
[325.81985474 723.21582031]
[341.09439087 727.27337646]
[348.95358276 740.98498535]
[344.73474121 756.21575928]
[330.94079590 763.92956543]
[315.75546265 759.54992676]
[308.18792725 745.67523193]
[312.72787476 730.53704834]
[305.40664673 717.44506836]
[289.04864502 713.57244873]
[280.37493896 698.78021240]
[285.16751099 681.96459961]
[277.63192749 668.99481201]
[271.59954834 669.27862549]
[265.69033813 667.84997559]
[260.38385010 664.80133057]
[256.11721802 660.35778809]
[253.24919128 654.86029053]
[252.02998352 648.73944092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 164]
[3 163]
[4 162]
[5 161]
[7 159]
[8 158]
[9 157]
[10 156]
[22 155]
[23 154]
[24 153]
[25 152]
[26 151]
[28 150]
[29 149]
[30 147]
[31 146]
[32 145]
[33 144]
[35 142]
[36 141]
[37 140]
[38 139]
[39 138]
[40 137]
[41 136]
[42 128]
[43 127]
[44 126]
[45 124]
[46 123]
[47 122]
[48 121]
[53 62]
[54 61]
[55 60]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[70 105]
[71 103]
[72 102]
[73 101]
[74 100]
[76 98]
[77 97]
[78 96]
[80 95]
[81 94]
[82 93]
[84 91]
[85 90]
[166 184]
[167 183]
[171 180]
[172 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
