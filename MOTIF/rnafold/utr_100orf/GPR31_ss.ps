%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:08:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCAUUCCCAAACUGCUCAGCCCCCAGCACUGUGGUGGCCACAGCUGUGGGUGUCUUGCUGGGGCUGGAGUGUGGGCUGGGUCUGCUGGGCAACGCGG\
) } def
/len { sequence length } bind def

/coor [
[139.53146362 347.54693604]
[150.61540222 336.68756104]
[148.29193115 321.86859131]
[145.96846008 307.04965210]
[143.64497375 292.23068237]
[125.78329468 284.78173828]
[115.72879028 268.08279419]
[117.52767181 248.53356934]
[130.64590454 233.74105835]
[126.50137329 219.32499695]
[122.35684967 204.90893555]
[118.21232605 190.49285889]
[105.09645844 183.52798462]
[100.68795776 168.96708679]
[108.08229065 155.25718689]
[103.93776703 140.84111023]
[99.79323578 126.42504883]
[95.64871216 112.00898743]
[90.83632660 97.80191803]
[85.36655426 83.83475494]
[79.89678192 69.86759186]
[74.42700958 55.90043259]
[68.95723724 41.93326950]
[63.48746109 27.96611023]
[58.01768875 13.99894905]
[52.54791641 0.03178827]
[46.39859009 -6.96667051]
[47.13266754 -14.45577145]
[42.09991455 -28.58628464]
[37.06716537 -42.71680069]
[32.03441620 -56.84731293]
[24.46717262 -69.79863739]
[14.62824345 -81.12097931]
[4.78931427 -92.44332886]
[-5.04961491 -103.76567078]
[-14.88854408 -115.08801270]
[-24.72747231 -126.41036224]
[-39.68072891 -134.40013123]
[-36.14267349 -150.98080444]
[-19.23055267 -152.17098999]
[-13.40512848 -136.24928284]
[-3.56619954 -124.92694092]
[6.27272940 -113.60459900]
[16.11165810 -102.28225708]
[25.95058823 -90.95991516]
[35.78951645 -79.63756561]
[35.66011047 -94.63700867]
[41.88973618 -108.28221893]
[53.30802155 -118.00964355]
[67.76978302 -121.99177551]
[82.55806732 -119.48047638]
[94.89456940 -110.94755554]
[102.46160889 -97.99610901]
[103.83753967 -83.05934906]
[98.76387024 -68.94347382]
[88.19380188 -58.30046844]
[74.11315155 -53.12984467]
[59.16728210 -54.40302658]
[46.16492844 -61.88006210]
[51.19768143 -47.74954987]
[56.23043060 -33.61903381]
[61.26317978 -19.48852158]
[66.51507568 -5.43798447]
[71.98484802 8.52917671]
[77.45462036 22.49633789]
[82.92439270 36.46349716]
[88.39416504 50.43066025]
[93.86394501 64.39781952]
[99.33371735 78.36498260]
[104.80348969 92.33214569]
[108.27810669 94.42675018]
[110.74596405 98.11180878]
[111.48909760 102.86856842]
[110.06477356 107.86446381]
[114.20930481 122.28052521]
[118.35382843 136.69659424]
[122.49835205 151.11265564]
[136.04489136 158.80220032]
[140.04267883 173.48117065]
[132.62838745 186.34834290]
[136.77291870 200.76440430]
[140.91743469 215.18046570]
[145.06196594 229.59652710]
[155.95518494 231.15190125]
[165.63098145 236.31024170]
[172.94204712 244.42993164]
[177.03170776 254.52003479]
[177.43424988 265.36120605]
[174.12785339 275.65298462]
[167.53399658 284.16989136]
[158.46394348 289.90722656]
[160.78741455 304.72616577]
[163.11088562 319.54513550]
[165.43435669 334.36407471]
[179.30999756 341.31002808]
[186.42300415 355.10076904]
[184.03828430 370.43350220]
[173.07279968 381.41247559]
[157.74301147 383.81604004]
[143.94352722 376.72000122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 94]
[3 93]
[4 92]
[5 91]
[9 83]
[10 82]
[11 81]
[12 80]
[15 77]
[16 76]
[17 75]
[18 74]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[25 64]
[26 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
