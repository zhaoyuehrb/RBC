%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUGGGCCAGGCCGCCAGCCCCGCCAGCCCCGCCAGCCCCGCCAGCCCCGCGAUGGCUUGGGCCGCGCUCCUCGGCCUCCUGGCCGCACUGUUGCUGCUGCUGCUACUGAGCCGCCGCCGCACGCGGCGACCUGGUGAGCCUCCCCUGGACC\
) } def
/len { sequence length } bind def

/coor [
[80.69935608 480.88739014]
[84.68643951 465.89132690]
[96.74775696 456.12890625]
[95.83624268 441.15664673]
[92.26964569 434.63290405]
[95.06110382 425.87225342]
[94.45322418 410.88458252]
[93.84533691 395.89691162]
[90.95991516 392.02420044]
[90.51641083 386.28405762]
[93.52900696 380.29211426]
[93.52900696 365.29211426]
[93.52900696 350.29211426]
[93.52900696 335.29211426]
[93.37699890 320.29287720]
[93.07299805 305.29595947]
[92.76898956 290.29904175]
[92.46498871 275.30212402]
[92.16098022 260.30520630]
[91.85697937 245.30827332]
[81.38278961 237.74517822]
[77.13101959 225.33927917]
[80.87362671 212.56709290]
[91.45402527 204.17555237]
[91.45402527 189.17555237]
[91.45402527 174.17555237]
[91.45402527 159.17555237]
[88.29045868 152.44714355]
[91.60911560 143.87231445]
[91.91312408 128.87539673]
[70.10980225 120.29548645]
[57.95939255 95.58032990]
[66.47713470 65.06791687]
[53.28883743 57.92167282]
[40.10054398 50.77542496]
[27.49779510 53.69527435]
[16.64382362 47.42500687]
[13.11230469 35.81696320]
[0.07154963 28.40489960]
[-12.96920586 20.99283409]
[-26.00996017 13.58076954]
[-44.38788986 14.15678406]
[-52.71435928 -1.26261401]
[-65.90265656 -8.40886021]
[-79.09095764 -15.55510616]
[-92.27925110 -22.70135307]
[-105.74574280 -15.17425632]
[-121.14250946 -16.14540100]
[-133.55650330 -25.30489922]
[-139.02645874 -39.72998428]
[-135.80693054 -54.81766891]
[-124.92527008 -65.75352478]
[-109.85375977 -69.04796600]
[-95.40167999 -63.64973450]
[-86.18062592 -51.28140259]
[-85.13300323 -35.88964844]
[-71.94470978 -28.74340248]
[-58.75641251 -21.59715652]
[-45.56811523 -14.45091057]
[-33.84897232 -17.59414291]
[-22.78638268 -11.69972992]
[-18.59789467 0.54001474]
[-5.55714035 7.95207977]
[7.48361444 15.36414433]
[20.52437019 22.77620888]
[38.01435852 21.68611336]
[47.24678802 37.58713150]
[60.43508530 44.73337555]
[73.62338257 51.87962341]
[80.35691833 48.57666779]
[69.91290283 37.80993271]
[76.92546082 24.55006790]
[91.70330811 27.12207031]
[93.82398224 41.97075272]
[100.55751801 38.66779709]
[102.97907257 23.86455345]
[105.40063477 9.06130791]
[107.82218933 -5.74193668]
[110.24374390 -20.54518127]
[103.94150543 -35.68498993]
[114.11544037 -48.54668045]
[130.29948425 -45.89925003]
[135.84486389 -30.46614647]
[125.04698944 -18.12362480]
[122.62543488 -3.32037973]
[120.20388031 11.48286533]
[117.78231812 26.28610992]
[115.36076355 41.08935547]
[120.95127106 46.08897781]
[124.02046967 31.40633583]
[138.27064514 26.72312355]
[149.45144653 36.72261429]
[146.38192749 51.40518951]
[132.13227844 56.08822632]
[137.72279358 61.08784866]
[152.16476440 57.03453064]
[166.60673523 52.98121643]
[177.80274963 41.80266190]
[192.14732361 45.81294250]
[206.58929443 41.75962830]
[217.78529358 30.58107185]
[232.12986755 34.59135437]
[246.57185364 30.53804016]
[257.76785278 19.35948372]
[272.11242676 23.36976624]
[286.55441284 19.31645203]
[300.99636841 15.26313591]
[312.06106567 3.15923357]
[328.01528931 6.95334768]
[332.44668579 22.74242020]
[320.79663086 34.28400421]
[305.04968262 29.70511055]
[290.60772705 33.75842667]
[276.16574097 37.81174088]
[266.00271606 48.70037842]
[250.62516785 44.98001480]
[236.18318176 49.03332901]
[226.02017212 59.92196655]
[210.64260864 56.20160294]
[196.20063782 60.25491714]
[186.03761292 71.14355469]
[170.66004944 67.42319489]
[156.21807861 71.47650909]
[141.77610779 75.52982330]
[136.04194641 115.41693878]
[106.91004181 129.17939758]
[106.60604095 144.17631531]
[106.45402527 159.17555237]
[106.45402527 174.17555237]
[106.45402527 189.17555237]
[106.45402527 204.17555237]
[119.03935242 216.28527832]
[119.00302887 233.41351318]
[106.85389709 245.00427246]
[107.15790558 260.00119019]
[107.46190643 274.99810791]
[107.76590729 289.99502563]
[108.06991577 304.99194336]
[108.37391663 319.98886108]
[111.69258118 328.56369019]
[108.52900696 335.29211426]
[108.52900696 350.29211426]
[108.52900696 365.29211426]
[108.52900696 380.29211426]
[108.83301544 395.28903198]
[109.44089508 410.27670288]
[110.04878235 425.26437378]
[110.80851746 440.24511719]
[111.72003174 455.21740723]
[124.87654877 463.44454956]
[130.65336609 477.84619141]
[126.82920074 492.88467407]
[114.87449646 502.77731323]
[99.38610077 503.72027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 149]
[4 148]
[6 147]
[7 146]
[8 145]
[11 144]
[12 143]
[13 142]
[14 141]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[24 131]
[25 130]
[26 129]
[27 128]
[29 127]
[30 126]
[33 69]
[34 68]
[35 67]
[38 65]
[39 64]
[40 63]
[41 62]
[43 59]
[44 58]
[45 57]
[46 56]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[95 124]
[96 123]
[97 122]
[99 120]
[100 119]
[102 117]
[103 116]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
