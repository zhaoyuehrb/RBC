%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUUCCUAAGAACUCACAUGAACUGAGCAAAUGAGAUAGAAACAUGGCAUUCUUAAUUAUACUAAUUACCUGCUUUGUGAUUAUUCUUGCUACUUCACAGCCUUGCCAGACCCCUGAUGACUUUGUGGCUGCCACUUCUCCGG\
) } def
/len { sequence length } bind def

/coor [
[83.52602386 251.52540588]
[71.26046753 261.49194336]
[55.54882431 259.78320312]
[45.71253586 247.41294861]
[47.58729935 231.72024536]
[60.06084824 222.01528931]
[61.68263245 207.10322571]
[52.17990875 195.69122314]
[53.61220169 180.54515076]
[65.64659119 170.65519714]
[67.26837921 155.74313354]
[68.89016724 140.83106995]
[70.51194763 125.91899872]
[55.82180786 122.88587952]
[45.95809555 111.58512115]
[44.93855286 96.61981201]
[53.17846680 84.08570099]
[67.32151031 79.08826447]
[81.60684967 83.66308594]
[90.21588898 95.94731903]
[81.93306732 83.44152832]
[73.65025330 70.93572998]
[65.36743164 58.42993546]
[51.90369415 57.27355957]
[41.72814941 48.68086624]
[38.43129730 35.97852325]
[43.00563049 23.88666344]
[34.99568939 11.20436001]
[26.98574448 -1.47794330]
[18.97580147 -14.16024590]
[10.96585941 -26.84255028]
[5.19771099 -30.31270027]
[2.50743723 -35.42459488]
[2.89747524 -40.25230789]
[-4.55556726 -53.26968765]
[-12.00860977 -66.28706360]
[-19.04125404 -72.23445129]
[-19.47861099 -79.66818237]
[-26.64789009 -92.84397125]
[-33.81716919 -106.01976013]
[-48.70788956 -110.59187317]
[-55.79086304 -124.05612183]
[-51.34029007 -138.22396851]
[-58.50957108 -151.39976501]
[-65.67884827 -164.57556152]
[-79.07100677 -172.99937439]
[-78.35768890 -187.87689209]
[-85.52696991 -201.05267334]
[-92.69625092 -214.22846985]
[-99.86552429 -227.40426636]
[-111.79164124 -228.50366211]
[-121.58645630 -235.18453979]
[-126.85455322 -245.67170715]
[-126.37648773 -257.27752686]
[-120.38906097 -267.09039307]
[-126.98085022 -280.56439209]
[-133.57264709 -294.03836060]
[-140.16442871 -307.51235962]
[-146.75622559 -320.98632812]
[-153.34800720 -334.46032715]
[-165.73977661 -346.03100586]
[-158.05168152 -361.14157104]
[-141.40335083 -357.93695068]
[-139.87402344 -341.05212402]
[-133.28224182 -327.57812500]
[-126.69044495 -314.10415649]
[-120.09865570 -300.63015747]
[-113.50686646 -287.15615845]
[-106.91507721 -273.68218994]
[-89.31164551 -268.85885620]
[-80.60881042 -252.45483398]
[-86.68973541 -234.57353210]
[-79.52046204 -221.39775085]
[-72.35118103 -208.22195435]
[-65.18190002 -195.04617310]
[-52.30253983 -187.56477356]
[-52.50305939 -171.74482727]
[-45.33377838 -158.56904602]
[-38.16450119 -145.39324951]
[-23.85121536 -141.43528748]
[-16.39285469 -128.17529297]
[-20.64137840 -113.18904114]
[-13.47209930 -100.01325226]
[-6.30282068 -86.83746338]
[1.00876915 -73.74010468]
[8.46181202 -60.72272873]
[15.91485405 -47.70534897]
[23.64816284 -34.85249329]
[31.65810585 -22.17018890]
[39.66804886 -9.48788643]
[47.67798996 3.19441676]
[55.68793488 15.87671947]
[72.20703125 18.84897041]
[81.68158722 33.10963058]
[77.87322998 50.14711761]
[86.15604401 62.65291214]
[94.43886566 75.15870667]
[102.72167969 87.66450500]
[114.76071167 96.61222076]
[129.12364197 100.93733215]
[143.48655701 105.26243591]
[157.84947205 109.58753967]
[172.21238708 113.91264343]
[186.82591248 117.29570770]
[201.62831116 119.72243500]
[216.43070984 122.14916229]
[231.30084229 116.74641418]
[242.60868835 126.44082642]
[257.41110229 128.86755371]
[272.21350098 131.29428101]
[287.35549927 124.99733734]
[300.21362305 135.17576599]
[297.56054688 151.35888672]
[282.12551880 156.89888000]
[269.78677368 146.09667969]
[254.98435974 143.66995239]
[240.18196106 141.24322510]
[226.37059021 146.81954956]
[214.00398254 136.95156860]
[199.20158386 134.52482605]
[184.39918518 132.09809875]
[191.82450867 145.13131714]
[188.05270386 159.64935303]
[175.22245789 167.42013550]
[160.60885620 164.03742981]
[152.49816895 151.41932678]
[155.48934937 136.72058105]
[167.88728333 128.27555847]
[153.52436829 123.95046234]
[139.16145325 119.62535095]
[124.79853058 115.30024719]
[110.43560791 110.97514343]
[104.18270874 115.11655426]
[112.46533966 127.62247467]
[99.95928192 135.90490723]
[91.67691803 123.39936829]
[85.42401886 127.54077911]
[83.80223083 142.45285034]
[82.18045044 157.36491394]
[80.55866241 172.27699280]
[90.18564606 184.52276611]
[88.32849884 199.62261963]
[76.59470367 208.72500610]
[74.97291565 223.63708496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 144]
[7 143]
[10 140]
[11 139]
[12 138]
[13 137]
[20 98]
[21 97]
[22 96]
[23 95]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[34 87]
[35 86]
[36 85]
[38 84]
[39 83]
[40 82]
[43 79]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[50 72]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[99 132]
[100 131]
[101 130]
[102 129]
[103 128]
[104 121]
[105 120]
[106 119]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
