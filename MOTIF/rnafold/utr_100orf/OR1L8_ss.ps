%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGAAUCAACCACACCAGCAGUGUCUCCGAGUUUAUCCUCCUGGGACUCUCCUCCCGGCCUGAGGACCAAAAGACACUCUUUGUUCUCUUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[88.49523163 286.79278564]
[88.17076111 270.99185181]
[99.17441559 259.64746094]
[98.70791626 244.65470886]
[98.24141693 229.66195679]
[97.77491760 214.66921997]
[97.07530975 199.68554688]
[96.14276886 184.71455383]
[95.21022034 169.74357605]
[94.27767944 154.77258301]
[90.65634155 148.17626953]
[93.55631256 139.32286072]
[93.08981323 124.33012390]
[92.62331390 109.33737946]
[81.48728943 119.38670349]
[66.50865936 120.18707275]
[54.36514282 111.38168335]
[50.47051620 96.89610291]
[56.56107330 83.18825531]
[69.92153931 76.36931610]
[84.59560394 79.47927856]
[94.04179382 91.13299561]
[96.82500458 76.39346313]
[95.33141327 67.19771576]
[99.93080139 61.24195099]
[103.17106628 46.59610748]
[106.41133881 31.95026779]
[109.65160370 17.30442619]
[112.89186859 2.65858507]
[116.13213348 -11.98725605]
[119.37240601 -26.63309669]
[109.01665497 -32.95536804]
[100.91764832 -41.96341324]
[95.74517822 -52.89552689]
[93.92220306 -64.83159637]
[95.59029388 -76.77056122]
[100.59868622 -87.71434021]
[108.51788330 -96.75130463]
[118.67638397 -103.13217926]
[130.21771240 -106.33218384]
[142.17253113 -106.09419250]
[147.20527649 -120.22470093]
[152.23802185 -134.35522461]
[157.27078247 -148.48573303]
[162.30352783 -162.61624146]
[166.67175293 -176.96611023]
[170.36593628 -191.50410461]
[174.06011963 -206.04208374]
[177.75430298 -220.58006287]
[181.44848633 -235.11805725]
[185.14266968 -249.65603638]
[176.84941101 -263.10955811]
[180.57951355 -278.46734619]
[194.11996460 -286.61791992]
[209.43746948 -282.72564697]
[217.44441223 -269.09979248]
[213.39041138 -253.82429504]
[199.68064880 -245.96185303]
[195.98646545 -231.42387390]
[192.29228210 -216.88587952]
[188.59809875 -202.34790039]
[184.90391541 -187.80990601]
[181.20973206 -173.27192688]
[182.83256531 -169.95207214]
[182.81628418 -165.64459229]
[180.69868469 -161.18351746]
[176.43403625 -157.58349609]
[171.40129089 -143.45298767]
[166.36854553 -129.32246399]
[161.33578491 -115.19195557]
[156.30303955 -101.06143951]
[169.70347595 -88.82585907]
[176.59284973 -71.98503113]
[175.60496521 -53.76685715]
[166.88783264 -37.68285751]
[152.08335876 -26.85133171]
[134.01824951 -23.39282990]
[130.77798462 -8.74698925]
[127.53771210 5.89885235]
[124.29744720 20.54469299]
[121.05717468 35.19053650]
[117.81690979 49.83637619]
[114.57664490 64.48221588]
[111.56453705 79.17668152]
[108.78131866 93.91620636]
[107.61605835 108.87088013]
[108.08255768 123.86362457]
[108.54905701 138.85636902]
[109.24866486 153.84004211]
[110.18120575 168.81103516]
[111.11375427 183.78201294]
[112.04629517 198.75299072]
[115.75860596 207.29766846]
[112.76766205 214.20271301]
[113.23416138 229.19546509]
[113.70066071 244.18820190]
[114.16716003 259.18093872]
[125.85479736 269.81930542]
[126.51329803 285.60986328]
[115.75196838 297.18438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[6 94]
[7 92]
[8 91]
[9 90]
[10 89]
[12 88]
[13 87]
[14 86]
[22 85]
[23 84]
[25 83]
[26 82]
[27 81]
[28 80]
[29 79]
[30 78]
[31 77]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
