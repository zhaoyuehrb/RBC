%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:10:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAUACCUUGAGAGCUGUUCCCCUUUUUUCAAUAUCUGGCCUCUUCUCCUUUCCCUACAGGGUCUCCCAUGGGAUUGCUGGGAUCUUGCUGGGUGAGA\
) } def
/len { sequence length } bind def

/coor [
[13.43214130 144.39093018]
[-5.79617453 137.14880371]
[-18.98406982 121.48361969]
[-33.46284485 125.40344238]
[-47.94161987 129.32327271]
[-62.42039490 133.24310303]
[-76.89916992 137.16293335]
[-82.03964996 141.76669312]
[-87.85928345 142.78726196]
[-92.40057373 140.84626770]
[-107.09503174 143.85836792]
[-121.78949738 146.87048340]
[-136.48396301 149.88258362]
[-151.17842102 152.89468384]
[-165.87287903 155.90679932]
[-180.56735229 158.91889954]
[-184.75256348 173.64108276]
[-195.30853271 184.72395325]
[-209.80955505 189.62077332]
[-224.92341614 187.20626831]
[-237.17704773 178.03527832]
[-243.75466919 164.21524048]
[-243.14479065 148.92189026]
[-235.48754883 135.66952515]
[-222.54251099 127.50344849]
[-207.28437805 126.30015564]
[-193.21934509 132.33616638]
[-183.57945251 144.22444153]
[-168.88499451 141.21232605]
[-154.19052124 138.20022583]
[-139.49606323 135.18812561]
[-124.80160522 132.17601013]
[-110.10713959 129.16390991]
[-95.41268158 126.15180206]
[-80.81900024 122.68415833]
[-66.34022522 118.76432800]
[-51.86145020 114.84449768]
[-37.38267517 110.92466736]
[-22.90389824 107.00484467]
[-22.49184227 96.95307922]
[-19.60997581 87.29959106]
[-14.42950630 78.64247894]
[-7.26428556 71.51992798]
[1.44820035 66.37674713]
[11.17353916 63.53659058]
[21.31317139 63.18158340]
[31.24122429 65.34068298]
[40.34315491 69.88745117]
[48.05377960 76.54742432]
[53.89237213 84.91466522]
[57.49262619 94.47654724]
[72.47630310 93.77694702]
[87.45997620 93.07733917]
[99.33192444 85.69164276]
[111.84041595 91.93898773]
[126.82408905 91.23937988]
[141.80776978 90.53977203]
[152.42065430 79.13782501]
[167.62619019 78.64176941]
[178.43081665 88.82980347]
[193.41448975 88.13019562]
[208.39816284 87.43058777]
[223.38183594 86.73097992]
[238.36550903 86.03137970]
[253.34919739 85.33177185]
[268.33285522 84.63216400]
[283.31652832 83.93255615]
[298.30023193 83.23295593]
[313.45489502 72.91876984]
[328.75091553 81.36468506]
[343.70559692 80.19942474]
[353.78726196 68.02832794]
[369.52990723 66.63407135]
[381.59375000 76.84384155]
[382.82150269 92.60037231]
[372.48474121 104.55558777]
[356.71609497 105.61666870]
[344.87084961 95.15409851]
[329.91616821 96.31935120]
[321.71984863 105.36579895]
[309.14880371 106.36248779]
[298.99981689 98.21662903]
[284.01614380 98.91623688]
[269.03247070 99.61584473]
[254.04879761 100.31544495]
[239.06512451 101.01505280]
[224.08143616 101.71466064]
[209.09776306 102.41426849]
[194.11408997 103.11386871]
[179.13041687 103.81347656]
[169.32212830 114.96394348]
[154.13650513 115.88689423]
[142.50737000 105.52345276]
[127.52369690 106.22305298]
[112.54002380 106.92266083]
[100.66807556 114.30835724]
[88.15958405 108.06101227]
[73.17591095 108.76062012]
[58.19223022 109.46022797]
[50.13853455 128.58993530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 36]
[7 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[51 99]
[52 98]
[53 97]
[55 95]
[56 94]
[57 93]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[70 79]
[71 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
