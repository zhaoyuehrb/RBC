%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:44:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACUCCAGUCAUGGCGGCCCGACAGGCCGUGGGCAGCGGGGCUCAGGAGACAUGCGGUCUGGAUCGGAUUUUGGAGGCAUUGAAGCUGCUGCUGAGCCCGGGAGGCUCGG\
) } def
/len { sequence length } bind def

/coor [
[80.37036896 220.64599609]
[74.18253326 206.64709473]
[75.22065735 191.37683105]
[83.24619293 178.34420776]
[96.41492462 170.54400635]
[95.58130646 155.56719971]
[94.74768066 140.59037781]
[93.91406250 125.61355591]
[84.88299561 121.55387115]
[77.99030304 114.44528961]
[63.62490082 118.76213074]
[49.25949478 123.07897186]
[44.58102798 133.09461975]
[35.30962753 138.69796753]
[24.70938110 138.20387268]
[16.35553551 132.02539062]
[1.77242458 135.53720093]
[-12.81068707 139.04902649]
[-27.39379883 142.56083679]
[-41.97690964 146.07266235]
[-56.56002045 149.58447266]
[-66.12579346 162.46374512]
[-82.16368103 162.87098694]
[-92.37078094 150.49380493]
[-88.91708374 134.82690430]
[-74.45197296 127.88861084]
[-60.07183838 135.00135803]
[-45.48872757 131.48954773]
[-30.90561485 127.97772980]
[-16.32250404 124.46591187]
[-1.73939264 120.95409393]
[12.84371853 117.44227600]
[25.68121338 103.09439850]
[44.94264984 108.71356964]
[59.30805588 104.39672089]
[73.67346191 100.07987976]
[75.91022491 89.38041687]
[82.29979706 80.51165009]
[91.74069214 75.00246429]
[102.60540009 73.80258179]
[113.02096558 77.11884308]
[123.84640503 66.73568726]
[134.67184448 56.35253906]
[145.49728394 45.96938705]
[156.32272339 35.58623886]
[167.14817810 25.20308685]
[177.97361755 14.81993580]
[188.79905701 4.43678474]
[193.40274048 -10.69981289]
[207.94380188 -13.92577934]
[218.76924133 -24.30892944]
[222.87365723 -32.63095856]
[230.04290771 -34.82504654]
[241.15280151 -44.90325928]
[245.48695374 -53.10797501]
[252.71443176 -55.10192871]
[264.10018921 -64.86740875]
[260.87673950 -81.01627350]
[266.16751099 -96.51197052]
[278.45312500 -107.19478607]
[294.35000610 -110.24687195]
[309.54199219 -104.93504333]
[320.65185547 -115.01325989]
[321.57788086 -130.56254578]
[332.98846436 -140.62501526]
[347.80661011 -139.64637756]
[358.91650391 -149.72459412]
[357.10351562 -165.13539124]
[364.72436523 -178.65213013]
[378.84869385 -185.07734680]
[394.04537964 -181.94041443]
[404.47100830 -170.44755554]
[406.11669922 -155.01799011]
[398.34967041 -141.58471680]
[384.15649414 -135.31309509]
[368.99472046 -138.61470032]
[357.88482666 -128.53648376]
[357.41921997 -113.69335175]
[346.29577637 -103.31434631]
[330.73007202 -103.90336609]
[319.62017822 -93.82515717]
[323.39013672 -80.62057495]
[321.06198120 -67.01975250]
[313.03784180 -55.71249390]
[300.85198975 -48.96024704]
[286.87783813 -48.14387131]
[273.86566162 -53.48165894]
[262.47991943 -43.71617508]
[251.23101807 -33.79336929]
[240.12112427 -23.71515846]
[229.15240479 -13.48348904]
[218.32695007 -3.10033774]
[214.49757385 11.29358673]
[199.18220520 15.26222610]
[188.35676575 25.64537621]
[177.53132629 36.02852631]
[166.70588684 46.41167831]
[155.88043213 56.79483032]
[145.05499268 67.17797852]
[134.22955322 77.56113434]
[123.40411377 87.94428253]
[124.49404144 109.65064240]
[108.89087677 124.77993774]
[109.72450256 139.75675964]
[110.55812073 154.73356628]
[111.39174652 169.71038818]
[125.34477997 176.00096130]
[134.76707458 188.06242371]
[137.49343872 203.12315369]
[132.89739990 217.72229004]
[122.03506470 228.50508118]
[107.40253448 232.99368286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 106]
[6 105]
[7 104]
[8 103]
[10 36]
[11 35]
[12 34]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[41 101]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[50 92]
[51 91]
[53 90]
[54 89]
[56 88]
[57 87]
[62 81]
[63 80]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
