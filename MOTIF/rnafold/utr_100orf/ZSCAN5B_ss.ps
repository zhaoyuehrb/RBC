%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUGCAAAUUGGACACUCUCAUGGGGUCAGGGAGGACCCUGCAACAGCCCUGGGUCAGACACUCCACGGUCUGUGGCGUCCCCAGAAACUCAACUUG\
) } def
/len { sequence length } bind def

/coor [
[173.87718201 140.52059937]
[183.23330688 128.79614258]
[196.11328125 121.11579132]
[181.25997925 119.02306366]
[166.40667725 116.93032837]
[151.55339050 114.83760071]
[136.70008850 112.74487305]
[131.16497803 124.29219818]
[122.04692841 133.58898926]
[110.22267914 139.54220581]
[96.89535522 141.39002991]
[83.47229004 138.79658508]
[71.41647339 131.90249634]
[62.08713913 121.32446289]
[56.58700562 108.10196686]
[41.73370743 110.19469452]
[26.88040924 112.28742981]
[18.64994812 116.65229797]
[11.53341389 114.20681000]
[-3.37778354 115.83658600]
[-18.28898048 117.46636963]
[-31.18902206 127.59163666]
[-46.30490875 121.23223114]
[-48.08671188 104.93016815]
[-34.70146561 95.45561218]
[-19.91876411 102.55517578]
[-5.00756550 100.92539215]
[9.90363216 99.29560852]
[24.78767967 97.43412781]
[39.64097977 95.34140015]
[54.49427795 93.24866486]
[59.08513641 78.96846771]
[48.23400497 68.61216736]
[37.38287354 58.25587082]
[26.53174210 47.89957047]
[10.47754860 44.55369568]
[5.60576391 28.89490509]
[16.92806435 17.03161812]
[32.79703522 21.16776848]
[36.88804245 37.04843903]
[47.73917389 47.40473938]
[58.59030533 57.76103973]
[69.44143677 68.11734009]
[86.93173981 58.92890930]
[106.20227814 58.42251205]
[123.27879333 66.27978516]
[134.82496643 80.50038910]
[138.79281616 97.89157104]
[153.64611816 99.98429871]
[168.49942017 102.07703400]
[183.35270691 104.16976166]
[198.20600891 106.26248932]
[213.14074707 104.86480713]
[227.34782410 100.05241394]
[241.55490112 95.24002838]
[255.76197815 90.42764282]
[269.96905518 85.61525726]
[273.63494873 81.40711212]
[278.12841797 79.35914612]
[282.43563843 79.40986633]
[285.72985840 81.08412933]
[300.32351685 77.61648560]
[314.91720581 74.14883423]
[320.19955444 64.38652039]
[329.83438110 59.33670044]
[340.42694092 60.49941635]
[348.39785767 67.23296356]
[363.17889404 64.67930603]
[377.95993042 62.12565231]
[392.74096680 59.57199860]
[403.12600708 47.34373856]
[419.15631104 47.98289108]
[428.53482056 60.99916077]
[424.06713867 76.40757751]
[409.18045044 82.38812256]
[395.29461670 74.35302734]
[380.51358032 76.90668488]
[365.73254395 79.46033478]
[350.95150757 82.01399231]
[337.24850464 95.50621033]
[318.38485718 88.74251556]
[303.79116821 92.21015930]
[289.19750977 95.67780304]
[274.78143311 99.82233429]
[260.57437134 104.63471985]
[246.36727905 109.44710541]
[232.16021729 114.25949097]
[217.95314026 119.07187653]
[232.03799438 124.23103333]
[243.40615845 134.01698303]
[250.60314941 147.17765808]
[252.70814514 162.02922058]
[249.45182800 176.67149353]
[241.25080872 189.23109436]
[229.15438843 198.10107422]
[214.71022034 202.14656067]
[199.76635742 200.84997559]
[186.23480225 194.37718201]
[175.84683228 183.55638123]
[169.93153381 169.77198792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[21 26]
[32 43]
[33 42]
[34 41]
[35 40]
[53 88]
[54 87]
[55 86]
[56 85]
[57 84]
[61 83]
[62 82]
[63 81]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
