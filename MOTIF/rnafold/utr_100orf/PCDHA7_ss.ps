%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUGUGCCCGAAUGGAUACGACCCAGGGGGCCGACAUCUACUGCUGUUUAUUAUAAUUCUAGCAGCUUGGGAGGCAGGGAGAGGCCAGCUCCACUACU\
) } def
/len { sequence length } bind def

/coor [
[66.02088928 136.11384583]
[59.08827972 128.01821899]
[54.04586029 118.62811279]
[39.45218277 122.09575653]
[24.85850334 125.56340027]
[10.26482582 129.03105164]
[-4.32885265 132.49868774]
[-18.80762863 136.41851807]
[-33.15749359 140.78674316]
[-47.50735855 145.15495300]
[-61.85722733 149.52317810]
[-66.84265900 162.14935303]
[-78.05811310 169.44418335]
[-91.23025513 168.89855957]
[-101.49460602 160.94085693]
[-115.97338104 164.86068726]
[-130.45216370 168.78051758]
[-136.85951233 183.04515076]
[-150.95939636 189.80735779]
[-166.09426880 185.87422180]
[-175.11790466 173.10285950]
[-173.76963806 157.52349854]
[-162.68605042 146.49226379]
[-147.10049438 145.21774292]
[-134.37197876 154.30174255]
[-119.89321136 150.38191223]
[-105.41443634 146.46208191]
[-97.75791931 131.57862854]
[-81.40933228 126.65904999]
[-66.22544861 135.17330933]
[-51.87557983 130.80509949]
[-37.52571487 126.43687439]
[-23.17584801 122.06864929]
[-20.11205292 118.19516754]
[-14.51117516 116.31370544]
[-7.79649734 117.90501404]
[6.79718065 114.43736267]
[21.39085770 110.96971893]
[35.98453522 107.50207520]
[50.57821655 104.03443146]
[52.53114319 85.66483307]
[61.07228851 69.28481293]
[75.01622009 57.16776657]
[92.42766571 50.99541473]
[110.89006805 51.62442780]
[116.35984802 37.65726852]
[121.82962036 23.69010735]
[127.29939270 9.72294617]
[132.76916504 -4.24421453]
[138.23893738 -18.21137619]
[127.81141663 -29.35720634]
[123.26073456 -43.92614746]
[125.49043274 -59.02552414]
[134.05780029 -71.65734863]
[147.26179504 -79.31355286]
[162.48072815 -80.47399902]
[176.69288635 -74.90827942]
[187.07644653 -63.72147369]
[191.56971741 -49.13472366]
[189.28056335 -34.04424667]
[180.66352844 -21.44626045]
[167.42948914 -13.84210968]
[152.20610046 -12.74160194]
[146.73632812 1.22555852]
[141.26655579 15.19271946]
[135.79678345 29.15987968]
[130.32701111 43.12704086]
[124.85723114 57.09420395]
[137.62104797 67.69757843]
[146.17187500 81.91831970]
[149.55218506 98.16394043]
[147.38339233 114.61516571]
[160.88343811 121.15342712]
[174.38348389 127.69169617]
[183.64999390 128.65304565]
[188.19688416 134.64898682]
[201.48706055 141.60394287]
[217.30168152 141.14724731]
[224.99067688 153.90374756]
[238.28085327 160.85870361]
[253.28715515 155.90023804]
[267.36660767 163.07965088]
[272.16616821 178.13754272]
[264.83828735 192.14031982]
[249.73049927 196.78038025]
[235.80598450 189.30487061]
[231.32589722 174.14888000]
[218.03572083 167.19392395]
[203.17170715 168.14808655]
[194.53210449 154.89411926]
[181.24194336 147.93916321]
[167.84521484 141.19174194]
[154.34516907 134.65347290]
[140.84513855 128.11520386]
[133.89334106 136.19435120]
[125.37561798 142.60125732]
[115.68549347 147.03993225]
[105.27068329 149.30526733]
[94.61235809 149.29261780]
[84.20294189 147.00257874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[7 36]
[8 33]
[9 32]
[10 31]
[11 30]
[15 27]
[16 26]
[17 25]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[72 94]
[73 93]
[74 92]
[76 91]
[77 90]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
