%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUUGUUCAGUUAAUUUGUACUGUUUGUUUCUUGGCAGUAAAUACAUUUCAUGUUAGAUCUUCUUUUGAUUUCCUGAAAGCAGAUGACAUGGGUGAGA\
) } def
/len { sequence length } bind def

/coor [
[91.28159332 142.08592224]
[76.28881836 137.47447205]
[70.38731384 151.26477051]
[64.48580933 165.05506897]
[66.97271729 181.26454163]
[54.01083374 191.31051636]
[38.93422699 184.85853577]
[37.25242233 168.54585266]
[50.69551468 159.15356445]
[56.59701920 145.36326599]
[62.49852371 131.57296753]
[59.65536118 124.63276672]
[47.86488342 133.90554810]
[38.29135132 145.45317078]
[23.31349373 146.26794434]
[12.54382038 135.82695007]
[12.89410210 120.83104706]
[24.13953400 110.90430450]
[39.06166077 112.41675568]
[53.96903229 110.75235748]
[51.12586975 103.81215668]
[37.24546432 98.12582397]
[23.36505699 92.43949890]
[9.48464966 86.75317383]
[-4.39575672 81.06684875]
[-18.27616310 75.38052368]
[-32.15657043 69.69419861]
[-45.28412247 77.96746826]
[-60.76518631 76.91091156]
[-72.64697266 66.93079376]
[-76.36070251 51.86467361]
[-70.47835541 37.50578690]
[-57.26182556 29.37541389]
[-41.79313660 30.59984779]
[-30.02031136 40.70827103]
[-26.47024536 55.81378937]
[-12.58983803 61.50011444]
[1.29056919 67.18643951]
[15.17097569 72.87276459]
[29.05138206 78.55909729]
[42.93178940 84.24542236]
[56.81219864 89.93174744]
[67.98040771 71.74110413]
[85.77756500 61.47491074]
[105.51741028 60.96109772]
[122.39792633 69.56638336]
[132.66921997 84.52855682]
[147.26290894 81.06091309]
[161.85658264 77.59326935]
[176.45025635 74.12562561]
[184.23818970 69.01283264]
[191.55163574 70.78456879]
[206.24609375 67.77246094]
[220.94056702 64.76036072]
[235.63502502 61.74825287]
[250.32948303 58.73614502]
[265.02395630 55.72404099]
[270.44070435 51.44876099]
[276.31253052 50.79198074]
[280.72436523 53.01155090]
[295.57766724 50.91881943]
[310.43093872 48.82609177]
[325.28424072 46.73336029]
[337.86999512 37.14639664]
[351.55224609 43.03237534]
[366.40554810 40.93964386]
[381.25885010 38.84691620]
[396.11215210 36.75418472]
[410.96545410 34.66145325]
[425.81875610 32.56872559]
[435.12423706 19.79439354]
[450.74975586 17.42411804]
[463.42498779 26.86413956]
[465.62994385 42.51386261]
[456.05642700 55.08858109]
[440.38427734 57.12794113]
[427.91146851 47.42202377]
[413.05816650 49.51475143]
[398.20489502 51.60748291]
[383.35159302 53.70021439]
[368.49829102 55.79294205]
[353.64498901 57.88567352]
[342.12164307 67.32295227]
[327.37698364 61.58665848]
[312.52368164 63.67938995]
[297.67037964 65.77211761]
[282.81707764 67.86484528]
[268.03604126 70.41850281]
[253.34159851 73.43061066]
[238.64712524 76.44271088]
[223.95266724 79.45481873]
[209.25820923 82.46692657]
[194.56375122 85.47903442]
[179.91790771 88.71929932]
[165.32421875 92.18694305]
[150.73054504 95.65458679]
[136.13687134 99.12223816]
[135.42131042 112.35413361]
[129.85084534 124.91195679]
[119.83942413 135.01704407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[47 97]
[48 96]
[49 95]
[50 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[60 87]
[61 86]
[62 85]
[63 84]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
