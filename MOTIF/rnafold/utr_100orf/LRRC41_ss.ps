%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGUCCGCGGGCGACACUCUCGGGCUCGCGCACCUCCCCAAGAUGGCGGCGCCCGAGGCCUGGCGCGCCCGGAGUUGCUGGUUCUGUGAGGUAGCGGCGGCAACGACCAUGGAGGCCACGUCCCGGGAGGCGGCGCCAGCGA\
) } def
/len { sequence length } bind def

/coor [
[-83.09970856 262.38070679]
[-94.53214264 272.09149170]
[-100.04108429 286.92260742]
[-114.75035095 289.26501465]
[-126.18278503 298.97579956]
[-137.61521912 308.68658447]
[-143.12416077 323.51770020]
[-157.83341980 325.86010742]
[-169.26585388 335.57089233]
[-180.69828796 345.28167725]
[-192.13072205 354.99249268]
[-203.56315613 364.70327759]
[-214.99557495 374.41406250]
[-226.42800903 384.12487793]
[-223.01332092 399.04458618]
[-226.93452454 413.83929443]
[-237.29055786 425.10922241]
[-251.70167542 430.26464844]
[-266.85629272 428.12088013]
[-279.27203369 419.17056274]
[-286.09579468 405.47036743]
[-285.75958252 390.16854858]
[-278.34060669 376.78134155]
[-265.54373169 368.38500977]
[-250.30955505 366.90899658]
[-236.13880920 372.69244385]
[-224.70637512 362.98162842]
[-213.27394104 353.27084351]
[-201.84150696 343.56005859]
[-190.40908813 333.84924316]
[-178.97665405 324.13845825]
[-167.54421997 314.42767334]
[-162.85299683 300.29113770]
[-147.32600403 297.25415039]
[-135.89358521 287.54336548]
[-124.46115112 277.83258057]
[-119.76992798 263.69604492]
[-104.24293518 260.65905762]
[-92.81050873 250.94827271]
[-96.97618103 237.67485046]
[-95.75066376 223.77362061]
[-89.28687286 211.35673523]
[-78.53613281 202.32353210]
[-65.10833740 198.07003784]
[-51.03087234 199.27325439]
[-38.44255066 205.78366089]
[-26.80242348 196.32281494]
[-15.16229630 186.86198425]
[-3.52216935 177.40115356]
[8.11795712 167.94030762]
[13.11433887 153.90872192]
[28.70347786 151.20884705]
[40.34360504 141.74801636]
[51.98373032 132.28717041]
[63.62385941 122.82633972]
[74.95042419 112.99227142]
[85.95146179 102.79534912]
[90.26266479 89.49478149]
[103.85162354 86.20360565]
[114.85266113 76.00669098]
[125.85369873 65.80977631]
[130.71501160 50.75393677]
[145.30899048 47.77656174]
[156.31004333 37.57964706]
[167.31108093 27.38272858]
[178.31211853 17.18581009]
[177.27507019 3.71235466]
[184.10835266 -7.71928501]
[196.10998535 -13.02771568]
[208.78259277 -10.46988678]
[220.00196838 -20.42607880]
[225.37121582 -38.00419617]
[242.64201355 -40.93300629]
[253.64306641 -51.12992477]
[258.63021851 -68.82023621]
[275.83352661 -72.12252045]
[286.61108398 -82.55538177]
[297.38861084 -92.98823547]
[308.16616821 -103.42108917]
[318.94372559 -113.85395050]
[329.72125244 -124.28680420]
[340.49880981 -134.71966553]
[341.96307373 -139.88493347]
[344.99191284 -143.56283569]
[348.73596191 -145.40283203]
[352.33172607 -145.45169067]
[363.76416016 -155.16247559]
[375.19659424 -164.87327576]
[386.62902832 -174.58407593]
[387.66171265 -190.35458374]
[399.59829712 -200.71284485]
[415.35699463 -199.51347351]
[425.58850098 -187.46804810]
[424.22256470 -171.72290039]
[412.06964111 -161.61933899]
[396.33981323 -163.15164185]
[384.90737915 -153.44084167]
[373.47494507 -143.73005676]
[362.04251099 -134.01925659]
[350.93167114 -123.94210815]
[340.15411377 -113.50925446]
[329.37658691 -103.07640076]
[318.59902954 -92.64354706]
[307.82147217 -82.21068573]
[297.04394531 -71.77783203]
[286.26638794 -61.34497833]
[285.74136353 -49.21342850]
[276.78295898 -40.43181992]
[263.83996582 -40.12888336]
[252.83894348 -29.93196678]
[252.05122375 -17.81463814]
[242.90467834 -9.22917175]
[229.95816040 -9.20671082]
[218.73878479 0.74948168]
[218.47817993 17.53182030]
[205.93820190 29.18868446]
[188.50903320 28.18684959]
[177.50799561 38.38376617]
[166.50695801 48.58068466]
[155.50592041 58.77760315]
[151.43147278 73.10408783]
[136.05061340 76.81081390]
[125.04957581 87.00772858]
[114.04853821 97.20465088]
[109.73733521 110.50521851]
[96.14837646 113.79639435]
[85.14733887 123.99330902]
[83.57153320 129.12564087]
[80.46370697 132.73707581]
[76.68066406 134.49551392]
[73.08469391 134.46646118]
[61.44456863 143.92730713]
[49.80444336 153.38813782]
[38.16431427 162.84898376]
[32.33535385 177.55726624]
[17.57879448 179.58042908]
[5.93866825 189.04127502]
[-5.70145845 198.50210571]
[-17.34158516 207.96295166]
[-28.98171234 217.42378235]
[-25.08589363 233.18521118]
[-28.42397881 249.01478577]
[-38.28149033 261.76916504]
[-52.65450668 268.93804932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[4 36]
[5 35]
[6 34]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[46 140]
[47 139]
[48 138]
[49 137]
[50 136]
[52 134]
[53 133]
[54 132]
[55 131]
[56 127]
[57 126]
[59 124]
[60 123]
[61 122]
[63 120]
[64 119]
[65 118]
[66 117]
[70 114]
[71 113]
[73 110]
[74 109]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[82 100]
[86 99]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
