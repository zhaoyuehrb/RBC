%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCAGGUGCCAGGCAGGUGGCUCCGGCCAGCCCAGCCCCAGCAUGAGCUCCUUCGACCUGCCGGCGCCCUCCCCACCUCGCUGCAGCCCCCAGUUCCCCAGCAUCGGCCAGGAGCCCCCCGAGAUGAACCUCUACUAUGAGA\
) } def
/len { sequence length } bind def

/coor [
[135.80538940 180.42689514]
[128.39875793 167.38305664]
[120.99211884 154.33921814]
[114.91017151 150.04464722]
[113.56990814 140.93406677]
[106.44564056 127.73388672]
[83.86426544 123.45960236]
[71.79546356 103.90118408]
[56.92030716 101.96996307]
[42.04514694 100.03874207]
[27.16998863 98.10752106]
[12.29482746 96.17629242]
[-2.58033180 94.24507141]
[-11.56753349 96.25231934]
[-17.75346184 92.10893250]
[-32.58362579 89.85810089]
[-47.41378784 87.60726929]
[-62.24395370 85.35643768]
[-77.07411957 83.10560608]
[-91.90428162 80.85477448]
[-106.73444366 78.60394287]
[-121.58796692 80.69509125]
[-135.22023010 86.95299530]
[-148.85249329 93.21089935]
[-157.89225769 106.89354706]
[-174.24313354 105.63626099]
[-181.08474731 90.73242188]
[-171.37904358 77.51383209]
[-155.11039734 79.57863617]
[-141.47813416 73.32073212]
[-127.84587097 67.06282806]
[-129.29605103 52.13309097]
[-143.87782288 48.61572266]
[-158.45959473 45.09835052]
[-173.68933105 49.38389969]
[-184.24740601 38.87789154]
[-198.82917786 35.36052322]
[-213.44795227 32.00023651]
[-228.10203552 28.79742241]
[-243.55461121 34.28830338]
[-255.85893250 23.44692421]
[-252.35737610 7.42596531]
[-236.65203857 2.70641637]
[-224.89921570 14.14334393]
[-210.24513245 17.34615707]
[-202.98640442 15.68960285]
[-195.31181335 20.77874947]
[-180.73004150 24.29611969]
[-166.54328918 19.75898552]
[-154.94223022 30.51657677]
[-140.36045837 34.03394699]
[-125.77867889 37.55131912]
[-119.76180267 39.33050919]
[-114.54512787 42.19995117]
[-110.30878448 45.91501999]
[-107.16835785 50.20557404]
[-105.17241669 54.79164886]
[-104.30368042 59.39900970]
[-104.48361206 63.77378082]
[-89.65345001 66.02461243]
[-74.82328796 68.27544403]
[-59.99312210 70.52627563]
[-45.16296005 72.77709961]
[-30.33279419 75.02793121]
[-15.50263023 77.27876282]
[-0.64910918 79.36991119]
[14.22605038 81.30113220]
[29.10120964 83.23236084]
[43.97637177 85.16358185]
[58.85152817 87.09480286]
[73.72669220 89.02602386]
[77.13365936 83.03398895]
[81.88071442 78.03624725]
[87.68964386 74.32569122]
[94.22002411 72.11977386]
[101.08914185 71.54778290]
[107.89443207 72.64322662]
[114.23706055 75.34191895]
[119.74533844 79.48569489]
[132.62680054 71.80012512]
[145.50825500 64.11455536]
[153.39497375 50.39922333]
[168.28906250 50.52264786]
[181.17053223 42.83707809]
[194.05198669 35.15150833]
[206.93344116 27.46593666]
[210.91210938 12.40579128]
[224.08523560 4.79503059]
[238.41825867 8.68089390]
[251.29971313 0.99532253]
[249.44886780 -14.12070465]
[253.91249084 -28.68078613]
[263.91723633 -40.16230011]
[277.72970581 -46.57600403]
[292.95681763 -46.81068802]
[306.96035767 -40.82568741]
[317.31417847 -29.65794373]
[322.22436523 -15.24233341]
[320.84024048 -0.07644820]
[313.40158081 13.21212959]
[301.19720459 22.32107353]
[286.34155273 25.67220497]
[271.40850830 22.68491936]
[258.98529053 13.87678146]
[246.10382080 21.56235313]
[242.71594238 36.02118683]
[229.76179504 43.99895096]
[214.61901855 40.34739685]
[201.73756409 48.03296661]
[188.85609436 55.71853638]
[175.97463989 63.40410995]
[169.00929260 76.56971741]
[153.19383240 76.99600983]
[140.31236267 84.68158722]
[127.43090820 92.36715698]
[127.44929504 107.56644440]
[119.64582062 120.60962677]
[126.77008820 133.80981445]
[134.03596497 146.93257141]
[141.44259644 159.97642517]
[148.84922791 173.02026367]
[155.95581055 172.02259827]
[163.08045959 172.71192932]
[169.82925415 175.04154968]
[175.83110046 178.87425232]
[180.75807190 183.99047852]
[184.34336853 190.10079956]
[186.39575195 196.86235046]
[186.80972290 203.89801025]
[185.57089233 210.81745911]
[182.75633240 217.23884583]
[178.52987671 222.80984497]
[173.13247681 227.22695923]
[177.89035034 241.45237732]
[182.64822388 255.67781067]
[196.90126038 262.50616455]
[202.07243347 277.44049072]
[195.09376526 291.62054443]
[180.10557556 296.63354492]
[166.00010681 289.50534058]
[161.14587402 274.46499634]
[168.42279053 260.43566895]
[163.66493225 246.21025085]
[158.90705872 231.98483276]
[136.59991455 224.37985229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[5 118]
[6 117]
[8 71]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 31]
[23 30]
[24 29]
[32 52]
[33 51]
[34 50]
[36 48]
[37 47]
[38 45]
[39 44]
[79 115]
[80 114]
[81 113]
[83 111]
[84 110]
[85 109]
[86 108]
[89 105]
[90 104]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
