%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCAGCCGCCUGCAGACCCGGAAGUGGAUGGCGUGGAGAUAUGGCGCAACUGCGGCGCGGACACUUGACAUUCAGGGACGUGGCCAUAGAAUUCUCUCAGGAGGAGUGGAAAUGCCUGGACCCUGUGCAGAAGGCUUUAU\
) } def
/len { sequence length } bind def

/coor [
[91.17298126 210.89859009]
[99.93124390 198.50273132]
[112.57814789 190.11105347]
[109.33155060 175.46661377]
[106.08496094 160.82217407]
[102.83836365 146.17773438]
[99.59177399 131.53329468]
[96.34517670 116.88885498]
[84.64691162 107.50000000]
[69.64691162 107.50000000]
[54.64690781 107.50000000]
[39.64690781 107.50000000]
[24.64780235 107.66362000]
[9.65137100 107.99084473]
[-5.34505892 108.31806946]
[-20.34148979 108.64529419]
[-35.33792114 108.97251129]
[-50.33435059 109.29973602]
[-56.24084091 125.11990356]
[-72.69033813 135.42366028]
[-94.55596924 133.51771545]
[-108.00906372 140.15205383]
[-121.46215820 146.78637695]
[-130.11817932 160.71496582]
[-146.49768066 159.91255188]
[-153.75083923 145.20460510]
[-144.41622925 131.72138977]
[-128.09648132 133.33328247]
[-114.64339447 126.69895935]
[-101.19029999 120.06462860]
[-101.92543030 112.60074615]
[-115.58851624 106.41042328]
[-103.39569092 97.67297363]
[-104.13082123 90.20908356]
[-118.61970520 86.32679749]
[-133.10859680 82.44451141]
[-147.59747314 78.56223297]
[-158.94355774 89.01546478]
[-174.14384460 91.65261841]
[-188.34800720 85.63218689]
[-197.02352905 72.87527466]
[-197.40208435 57.45255661]
[-189.36288452 44.28536987]
[-175.47120667 37.57531357]
[-160.15983582 39.46354675]
[-148.31457520 49.34753799]
[-143.71519470 64.07334137]
[-129.22630310 67.95562744]
[-114.73741913 71.83791351]
[-100.24853516 75.72019958]
[-77.50278473 69.36439514]
[-58.47294998 77.93398285]
[-50.66157532 94.30330658]
[-35.66514206 93.97608185]
[-20.66871262 93.64885712]
[-5.67228222 93.32164001]
[9.32414818 92.99441528]
[24.32057762 92.66719055]
[30.98966789 89.35155487]
[39.64690781 92.50000000]
[54.64690781 92.50000000]
[69.64691162 92.50000000]
[84.64691162 92.50000000]
[70.98300934 86.31147003]
[61.98053360 74.31333160]
[59.85929871 59.46407700]
[65.14236450 45.42522812]
[76.52703857 35.65848541]
[91.20608521 32.57212448]
[105.55995178 36.92717743]
[116.04927063 47.64978027]
[120.08758545 62.09595871]
[116.67913055 76.70357513]
[106.66538239 87.87001038]
[120.39505768 81.82881165]
[134.12472534 75.78761292]
[147.85440063 69.74641418]
[161.58407593 63.70521164]
[175.31375122 57.66401291]
[179.60240173 52.47200394]
[185.05899048 50.56967545]
[189.77656555 51.67331314]
[203.75668335 46.23674393]
[217.73680115 40.80017090]
[224.16436768 26.61129570]
[238.41963196 21.29699135]
[251.90695190 27.51212883]
[265.88705444 22.07555771]
[279.86718750 16.63898659]
[293.84732056 11.20241737]
[296.53512573 7.57358456]
[299.91592407 5.26726103]
[303.47250366 4.33774042]
[306.72555542 4.66026831]
[309.29040527 5.96019506]
[323.69113159 1.76275992]
[338.09188843 -2.43467522]
[352.49264526 -6.63211060]
[366.89337158 -10.82954597]
[377.83657837 -23.04341698]
[393.82791138 -19.40892601]
[398.41687012 -3.66492677]
[386.88272095 7.99250460]
[371.09082031 3.57120228]
[356.69006348 7.76863718]
[342.28933716 11.96607304]
[327.88858032 16.16350746]
[313.48782349 20.36094284]
[299.28387451 25.18253517]
[285.30377197 30.61910629]
[271.32363892 36.05567551]
[257.34353638 41.49224854]
[251.59851074 55.18642426]
[237.49813843 60.89903259]
[223.17337036 54.78028870]
[209.19325256 60.21686172]
[195.21313477 65.65343475]
[181.35494995 71.39368439]
[167.62527466 77.43488312]
[153.89559937 83.47608185]
[140.16592407 89.51728058]
[126.43625641 95.55848694]
[112.70658112 101.59968567]
[113.34606934 105.34683228]
[112.82138062 109.48369598]
[110.98961639 113.64225769]
[114.23621368 128.28669739]
[117.48280334 142.93113708]
[120.72940063 157.57557678]
[123.97599030 172.22001648]
[127.22258759 186.86445618]
[142.23104858 189.12509155]
[155.40745544 196.65815735]
[164.96978760 208.44485474]
[169.62483215 222.89112854]
[168.74302673 238.04325867]
[162.44361877 251.85202026]
[151.57858276 262.44992065]
[137.61729431 268.40362549]
[122.44791412 268.90802002]
[108.12197876 263.89483643]
[96.57695007 254.04208374]
[89.37419891 240.68226624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[9 63]
[10 62]
[11 61]
[12 60]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[21 30]
[22 29]
[23 28]
[34 50]
[35 49]
[36 48]
[37 47]
[74 123]
[75 122]
[76 121]
[77 120]
[78 119]
[79 118]
[82 117]
[83 116]
[84 115]
[87 112]
[88 111]
[89 110]
[90 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
