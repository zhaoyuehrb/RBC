%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCUUUAAUCUUUAGAACAGCAAUGCAAUCUGUUGGACUUUUACUAUCUCUCCUGGGAUGGAUUUUAUCCAUUAUUACAACUUAUUUGCCACACUGGA\
) } def
/len { sequence length } bind def

/coor [
[106.40324402 244.57562256]
[117.67903900 234.04661560]
[114.89582825 219.30709839]
[112.11260986 204.56756592]
[109.32939148 189.82803345]
[94.62586212 190.15116882]
[80.06484985 188.08349609]
[66.03251648 183.67988586]
[52.90098953 177.05709839]
[41.01852036 168.39077759]
[30.70022392 157.91075134]
[22.21974373 145.89494324]
[15.80197620 132.66200256]
[11.61712265 118.56288147]
[9.77616119 103.97147369]
[10.32791615 89.27474976]
[-4.36654568 86.26264191]
[-17.46060181 94.69966888]
[-32.31996536 91.43563843]
[-40.28269196 78.90045929]
[-54.97715378 75.88835907]
[-69.67161560 72.87625122]
[-84.36607361 69.86414337]
[-99.06053925 66.85203552]
[-110.42504883 77.41743469]
[-125.83332825 79.25170135]
[-139.36058044 71.64952087]
[-145.80529785 57.53409958]
[-142.68936157 42.33309174]
[-131.21090698 31.89160538]
[-115.78363800 30.22459793]
[-102.33964539 37.97306824]
[-96.04843140 52.15757751]
[-81.35397339 55.16968155]
[-66.65950775 58.18178940]
[-51.96504593 61.19389343]
[-37.27058411 64.20600128]
[-25.01827049 55.81455231]
[-10.07308865 58.65992737]
[-1.35443962 71.56817627]
[13.34002209 74.58028412]
[24.23892975 50.84337234]
[41.47495651 31.21822357]
[63.60637283 17.34639931]
[88.78197479 10.38822842]
[114.89591980 10.92573261]
[118.59010315 -3.61225247]
[122.28428650 -18.15023804]
[125.97846985 -32.68822098]
[129.67265320 -47.22620773]
[133.36683655 -61.76419067]
[137.06101990 -76.30217743]
[132.09330750 -91.93080139]
[143.34265137 -103.86328888]
[159.23669434 -99.82453156]
[163.42500305 -83.96924591]
[151.59901428 -72.60799408]
[147.90483093 -58.07000732]
[144.21064758 -43.53202438]
[140.51646423 -28.99403954]
[136.82228088 -14.45605373]
[133.12809753 0.08193117]
[129.43391418 14.61991596]
[137.32348633 17.76210594]
[144.88304138 21.63146782]
[152.04571533 26.19378853]
[158.74819946 31.40872383]
[164.93119812 37.23016357]
[170.54006958 43.60663605]
[175.52520752 50.48175049]
[179.84252930 57.79472351]
[183.45384216 65.48088837]
[186.32725525 73.47228241]
[188.43731689 81.69823456]
[189.76539612 90.08602905]
[190.29974365 98.56147766]
[190.03564453 107.04964447]
[188.97540283 115.47547913]
[187.12843323 123.76447296]
[184.51103210 131.84333801]
[181.14637756 139.64064026]
[177.06419373 147.08741760]
[172.30058289 154.11782837]
[166.89765930 160.66972351]
[160.90322876 166.68516541]
[154.37025452 172.11094666]
[147.35653687 176.89910889]
[139.92407227 181.00729370]
[132.13858032 184.39920044]
[124.06892395 187.04481506]
[126.85213470 201.78434753]
[129.63536072 216.52388000]
[132.41856384 231.26341248]
[146.75738525 236.95568848]
[155.72389221 249.50978088]
[156.45690918 264.91970825]
[148.72254944 278.26824951]
[134.98881531 285.29589844]
[119.63807678 283.76016235]
[107.56871033 274.15112305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[16 41]
[17 40]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
