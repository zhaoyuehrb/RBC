%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCCUCCGCAGAGGCAUCCGCAGCGCAGCGAGCAGGUCCUGCUCCUCACGCUCCUGGGGACGCUGUGGGGGGCCGCGGCAGCGCAGAUCCGCUACU\
) } def
/len { sequence length } bind def

/coor [
[172.35858154 273.04681396]
[184.73962402 264.57864380]
[199.69186401 265.79113770]
[190.95074463 253.60127258]
[182.20964050 241.41139221]
[175.63796997 237.74549866]
[173.39320374 228.70373535]
[165.03541565 216.24790955]
[156.67762756 203.79209900]
[148.31983948 191.33627319]
[139.96206665 178.88044739]
[131.60427856 166.42463684]
[123.24649048 153.96881104]
[114.88871002 141.51300049]
[111.33358765 140.50494385]
[108.13740540 137.61720276]
[106.22968292 133.06242371]
[106.39638519 127.48393250]
[99.23558807 114.30353546]
[87.41364288 106.83805847]
[87.58401489 92.85726166]
[80.42321777 79.67686462]
[73.26242065 66.49645996]
[59.87568665 58.06402588]
[60.59857178 43.18697357]
[53.43777466 30.00657082]
[46.27697754 16.82616997]
[30.38849068 7.68270111]
[31.32254028 -9.76519394]
[23.75529861 -22.71651840]
[15.59223461 -35.30081177]
[6.85111952 -47.49068069]
[-0.83237350 -52.75912857]
[-1.96531534 -60.19834518]
[-10.32309914 -72.65416718]
[-18.68088341 -85.10998535]
[-27.03866768 -97.56580353]
[-35.39645004 -110.02162170]
[-43.75423431 -122.47744751]
[-57.60037994 -132.26113892]
[-52.03203201 -148.27456665]
[-35.10294342 -147.35678101]
[-31.29841614 -130.83523560]
[-22.94063187 -118.37940979]
[-14.58284760 -105.92359161]
[-6.22506380 -93.46776581]
[2.13272023 -81.01194763]
[10.49050426 -68.55612946]
[19.04098892 -56.23179626]
[27.78210449 -44.04192734]
[31.36685371 -43.14492416]
[34.65130615 -40.35798645]
[36.69975281 -35.86473846]
[36.70662308 -30.28376198]
[44.27386475 -17.33243561]
[55.98834229 -13.89892769]
[62.36488724 -3.01939249]
[59.45737839 9.66537285]
[66.61817169 22.84577370]
[73.77897644 36.02617264]
[86.65351868 43.51586151]
[86.44281769 59.33566284]
[93.60361481 72.51606750]
[100.76441193 85.69646454]
[112.58635712 93.16194153]
[112.41598511 107.14273834]
[119.57678223 120.32313538]
[127.34452820 133.15521240]
[135.70231628 145.61103821]
[144.06010437 158.06684875]
[152.41787720 170.52267456]
[160.77566528 182.97848511]
[169.13345337 195.43431091]
[177.49122620 207.89013672]
[185.84901428 220.34594727]
[194.39950562 232.67028809]
[203.14060974 244.86015320]
[211.88172913 257.05001831]
[221.89555359 268.21798706]
[233.06352234 278.23181152]
[244.23147583 288.24563599]
[255.39944458 298.25946045]
[269.97158813 293.40682983]
[285.01452637 296.50610352]
[296.48178101 306.72363281]
[301.28869629 321.31091309]
[298.14227295 336.34405518]
[287.88885498 347.77923584]
[273.28659058 352.54040527]
[258.26336670 349.34689331]
[246.86039734 339.05767822]
[242.14500427 324.44055176]
[245.38562012 309.42739868]
[234.21765137 299.41357422]
[223.04969788 289.39978027]
[211.88172913 279.38595581]
[211.46296692 294.38009644]
[201.70040894 305.76837158]
[186.94639587 308.47366333]
[173.77847290 301.28994751]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 78]
[4 77]
[5 76]
[7 75]
[8 74]
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[14 68]
[18 67]
[19 66]
[21 64]
[22 63]
[23 62]
[25 60]
[26 59]
[27 58]
[29 55]
[30 54]
[31 50]
[32 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[79 96]
[80 95]
[81 94]
[82 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
