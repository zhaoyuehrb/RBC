%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGACCUCCACACUGAGCCAUGCCCACCCCCGACGCCACCACGCCACAGGCCAAGGGCUUCCGCAGGGCCGUGUCUGAGCUGGACGCCAAGCAGGCAGAGGCCAUCAUGGUAAGAGGGC\
) } def
/len { sequence length } bind def

/coor [
[98.25141907 458.18740845]
[83.86706543 452.05352783]
[76.83692932 438.08529663]
[80.48042297 422.87811279]
[93.07720947 413.61230469]
[93.86224365 398.63284302]
[94.64728546 383.65341187]
[95.43232727 368.67398071]
[86.61064911 353.56457520]
[96.60691833 338.16821289]
[96.99957275 323.17333984]
[86.59244537 312.57958984]
[86.77704620 297.36709595]
[97.95929718 286.52297974]
[98.35195160 271.52810669]
[98.74460602 256.53323364]
[98.74460602 241.53324890]
[98.35195160 226.53839111]
[97.95929718 211.54353333]
[87.97933960 197.17283630]
[96.73681641 181.03964233]
[95.95177460 166.06019592]
[95.16673279 151.08074951]
[94.38169861 136.10130310]
[83.79953766 132.74774170]
[74.71292114 126.37107849]
[67.96068573 117.55995941]
[64.16615295 107.12779236]
[63.67962646 96.03762817]
[66.54601288 85.31324768]
[72.50070190 75.94467926]
[80.99398804 68.79676819]
[75.98688507 54.65714645]
[70.97978210 40.51752472]
[65.97267914 26.37790298]
[60.96557999 12.23828125]
[46.97961044 5.38041210]
[42.10311890 -9.03050423]
[48.72723770 -22.32172775]
[43.72013474 -36.46134949]
[29.73416519 -43.31921768]
[24.85767555 -57.73013306]
[31.48179626 -71.02135468]
[26.47469330 -85.16098022]
[13.66598320 -89.55902100]
[5.87512350 -100.39669800]
[5.78966522 -113.54846191]
[13.21523285 -124.16622925]
[8.57997799 -138.43206787]
[3.94472289 -152.69792175]
[-0.69053203 -166.96377563]
[-5.32578707 -181.22961426]
[-15.97075844 -194.42510986]
[-6.23777676 -208.30694580]
[9.79591084 -202.79721069]
[8.94006062 -185.86486816]
[13.57531548 -171.59902954]
[18.21057129 -157.33317566]
[22.84582520 -143.06733704]
[27.48108101 -128.80148315]
[42.74279404 -121.87017822]
[48.43766022 -105.74838257]
[40.61431503 -90.16808319]
[45.62141800 -76.02845764]
[59.13376617 -69.86793518]
[64.41310120 -55.59967422]
[57.85976028 -41.46845245]
[62.86686325 -27.32883072]
[76.37921143 -21.16830444]
[81.65854645 -6.90004396]
[75.10520172 7.23117781]
[80.11230469 21.37080002]
[85.11940765 35.51042175]
[90.12651062 49.65004349]
[95.13361359 63.78966904]
[106.60977173 64.06699371]
[117.43341064 67.89164734]
[126.53601074 74.88606262]
[133.01896667 84.35973358]
[147.60450745 80.85805511]
[162.19006348 77.35637665]
[176.72853088 73.66407013]
[191.21740723 69.78179169]
[204.95193481 59.84200287]
[218.30535889 70.28816986]
[211.96403503 86.01152039]
[195.09970093 84.27067566]
[180.61080933 88.15296173]
[174.89396667 92.98287964]
[165.69174194 91.94192505]
[151.10618591 95.44360352]
[136.52064514 98.94528198]
[129.27450562 121.86031342]
[109.36113739 135.31626892]
[110.14617920 150.29571533]
[110.93122101 165.27516174]
[111.71625519 180.25459290]
[120.80622101 189.51844788]
[121.08605957 202.09152222]
[112.95415497 211.15087891]
[113.34680939 226.14573669]
[113.73946381 241.14059448]
[116.95806885 247.14440918]
[116.61731720 252.97387695]
[113.73946381 256.92590332]
[113.34680939 271.92074585]
[112.95415497 286.91561890]
[123.55354309 298.33010864]
[122.94172668 313.53143311]
[111.99443054 323.56600952]
[111.60177612 338.56085205]
[119.93688965 348.50933838]
[119.22938538 361.06561279]
[110.41176605 369.45901489]
[109.62672424 384.43844604]
[108.84169006 399.41790771]
[108.05664825 414.39733887]
[119.61588287 424.92910767]
[121.64983368 440.43383789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 117]
[6 116]
[7 115]
[8 114]
[10 111]
[11 110]
[14 107]
[15 106]
[16 105]
[17 102]
[18 101]
[19 100]
[21 97]
[22 96]
[23 95]
[24 94]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[39 68]
[40 67]
[43 64]
[44 63]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
[79 92]
[80 91]
[81 90]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
