%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGCGCCUGGAUCCAUCCGACAGCCGCGGGUGCGUGGUCGUGCGGCAAGUGAGCGAUUUGGUGAACAGACACUCCCUUCUGUAGCCAUGGAUUGUUACAGAACUUCACUAAGCAGUUCCUGGAUUUACCCCACUGUGAUCCUCUGCUUAUUUGGUUUUUUCUCCAUGAUGAGACCCUCAGAACCAU\
) } def
/len { sequence length } bind def

/coor [
[209.87382507 322.58374023]
[205.24105835 311.10675049]
[205.93875122 298.67730713]
[211.89558411 287.66378784]
[203.69136047 275.10629272]
[195.48713684 262.54879761]
[187.28291321 249.99130249]
[179.07868958 237.43380737]
[166.21151733 236.57684326]
[156.03901672 228.33802795]
[152.42127991 215.55500793]
[156.89671326 202.83984375]
[148.90124512 190.14842224]
[140.90576172 177.45700073]
[132.91029358 164.76556396]
[124.91481018 152.07414246]
[116.81468201 139.44923401]
[108.61045837 126.89174652]
[92.39163208 127.19225311]
[78.68384552 118.51830292]
[65.15397644 124.99461365]
[51.62410736 131.47093201]
[38.14824295 138.05888367]
[24.72730064 144.75801086]
[15.83542919 157.84408569]
[0.99241877 156.60540771]
[-12.42852116 163.30453491]
[-25.84946060 170.00366211]
[-39.27040100 176.70280457]
[-52.69134140 183.40193176]
[-66.11228180 190.10105896]
[-74.70102692 204.07122803]
[-91.08421326 203.34780884]
[-98.40821838 188.67501831]
[-89.13873291 175.14694214]
[-72.81141663 176.68011475]
[-59.39047241 169.98098755]
[-45.96953201 163.28186035]
[-32.54859161 156.58271790]
[-19.12765312 149.88359070]
[-5.70671320 143.18446350]
[2.22520375 130.57756042]
[18.02816963 131.33706665]
[31.44910812 124.63793945]
[36.03795242 118.82718658]
[45.14778900 117.94106293]
[58.67765808 111.46474457]
[72.20752716 104.98843384]
[71.66436768 89.62912750]
[79.52335358 75.26473999]
[94.47373199 66.40303802]
[90.55153656 51.92490768]
[85.27801514 44.44397354]
[86.68629456 37.17492676]
[83.00401306 22.63392258]
[79.32172394 8.09291840]
[75.63944244 -6.44808578]
[62.34524155 -14.56608582]
[58.81802750 -29.36518669]
[66.63922882 -41.98915100]
[62.95694351 -56.53015137]
[59.27466202 -71.07115936]
[55.59237671 -85.61215973]
[51.91009521 -100.15316772]
[48.22781372 -114.69416809]
[44.54553223 -129.23516846]
[40.86325073 -143.77618408]
[37.18096542 -158.31718445]
[31.06725121 -144.61964417]
[19.46221352 -135.11579895]
[4.82827139 -131.82220459]
[-9.72947598 -135.43772888]
[-21.12209320 -145.19520569]
[-26.93224144 -159.02423096]
[-25.92709351 -173.99052429]
[-18.31992722 -186.91844177]
[-5.72486687 -195.06488037]
[9.18560505 -196.70127869]
[23.24771118 -191.48045349]
[33.47758865 -180.51031494]
[32.23889923 -195.45907593]
[31.00020790 -210.40785217]
[29.76151848 -225.35661316]
[28.52282715 -240.30537415]
[27.28413773 -255.25415039]
[26.04544830 -270.20291138]
[24.80675697 -285.15167236]
[23.56806755 -300.10046387]
[10.23479652 -308.03793335]
[4.14443636 -322.30981445]
[7.63885355 -337.42831421]
[19.37437439 -347.58001709]
[34.83845139 -348.86141968]
[48.08483124 -340.77975464]
[54.02000809 -326.44262695]
[50.36178970 -311.36294556]
[38.51683426 -301.33914185]
[39.75552368 -286.39038086]
[40.99421692 -271.44161987]
[42.23290634 -256.49282837]
[43.47159576 -241.54406738]
[44.71028519 -226.59530640]
[45.94897461 -211.64653015]
[47.18766785 -196.69776917]
[48.42635727 -181.74900818]
[54.51510620 -173.34133911]
[51.72196960 -161.99946594]
[55.40425491 -147.45846558]
[59.08653641 -132.91744995]
[62.76881790 -118.37644958]
[66.45110321 -103.83544922]
[70.13338470 -89.29444122]
[73.81566620 -74.75344086]
[77.49794769 -60.21243668]
[81.18022919 -45.67143250]
[94.06710815 -38.29146576]
[98.00861359 -23.59727669]
[90.18045044 -10.13036823]
[93.86273193 4.41063547]
[97.54501343 18.95163918]
[101.22729492 33.49264526]
[105.02966309 48.00270844]
[108.95186615 62.48084259]
[122.58696747 68.73256683]
[136.11683655 62.25625610]
[139.83581543 47.06733704]
[152.47845459 37.86421204]
[168.07530212 38.99231720]
[179.26197815 49.91898727]
[180.75650024 65.48499298]
[171.85317993 78.34053040]
[156.75590515 82.41561890]
[142.59315491 75.78612518]
[129.06327820 82.26243591]
[131.86369324 96.02111816]
[128.83059692 108.90277100]
[121.16796112 118.68752289]
[129.37217712 131.24502563]
[136.69932556 136.73019409]
[137.60623169 144.07865906]
[145.60171509 156.77009583]
[153.59719849 169.46151733]
[161.59266663 182.15293884]
[169.58815002 194.84437561]
[186.70820618 198.39714050]
[195.79081726 212.94139099]
[191.63618469 229.22958374]
[199.84040833 241.78707886]
[208.04463196 254.34457397]
[216.24885559 266.90206909]
[224.45307922 279.45956421]
[242.56651306 279.80941772]
[256.72845459 290.85449219]
[261.39739990 308.03411865]
[254.88990784 324.43609619]
[263.50485229 336.71545410]
[272.11978149 348.99484253]
[280.73471069 361.27420044]
[289.34963989 373.55358887]
[297.96456909 385.83294678]
[306.57949829 398.11233521]
[327.54132080 406.00839233]
[328.70623779 427.61444092]
[338.11389160 439.29760742]
[347.52151489 450.98074341]
[356.92916870 462.66390991]
[372.66717529 464.10980225]
[382.70883179 476.31393433]
[381.09661865 492.03576660]
[368.78701782 501.94784546]
[353.08309937 500.16949463]
[343.30172729 487.75579834]
[345.24600220 472.07156372]
[335.83837891 460.38839722]
[326.43072510 448.70523071]
[317.02307129 437.02206421]
[309.15115356 437.86898804]
[301.49865723 435.49792480]
[295.34170532 430.22622681]
[291.73770142 422.86114502]
[291.34420776 414.57687378]
[294.30010986 406.72726440]
[285.68518066 394.44787598]
[277.07025146 382.16851807]
[268.45532227 369.88912964]
[259.84039307 357.60977173]
[251.22546387 345.33038330]
[242.61053467 333.05102539]
[230.55639648 334.65213013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[17 138]
[18 137]
[20 48]
[21 47]
[22 46]
[23 44]
[24 43]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[51 123]
[52 122]
[54 121]
[55 120]
[56 119]
[57 118]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[68 107]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[124 134]
[125 133]
[155 188]
[156 187]
[157 186]
[158 185]
[159 184]
[160 183]
[161 182]
[163 176]
[164 175]
[165 174]
[166 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
