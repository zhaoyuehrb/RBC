%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACAAUUCUUCUUAAUAGCAGCCUCCAAAGAGCCACUUUCUUCCUGACGGGCUUCCAAGGUCUAGAAGGUCUCCAUGGCUGGAUCUCUAUUCCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[69.66333008 409.73995972]
[55.65555573 415.32861328]
[40.69791031 417.25726318]
[25.73065376 415.40472412]
[11.69463348 409.88739014]
[-0.52783167 401.05209351]
[-10.16842747 389.45425415]
[-16.62113762 375.82293701]
[-19.48034096 361.01495361]
[-18.56630325 345.96121216]
[-13.93648338 331.60797119]
[-5.88191509 318.85748291]
[5.09108448 308.51129150]
[18.29274368 301.21969604]
[32.89319611 297.44113159]
[47.97463989 297.41308594]
[51.66882324 282.87509155]
[55.36300659 268.33709717]
[59.05719376 253.79911804]
[62.75137711 239.26113892]
[51.88305283 227.06755066]
[50.34524918 210.64018250]
[58.93169403 196.35836792]
[74.46617126 189.88487244]
[77.70643616 175.23902893]
[71.47715759 158.91429138]
[83.80477905 145.34680176]
[86.58799744 130.60726929]
[89.37120819 115.86773682]
[81.29145050 103.84011078]
[83.97994995 89.60220337]
[95.88925934 81.34904480]
[98.67247772 66.60951996]
[101.45569611 51.86998749]
[99.55294800 45.23683929]
[101.17112732 39.55430222]
[104.89750671 36.31317902]
[108.59169006 21.77519417]
[112.28587341 7.23720980]
[115.98005676 -7.30077505]
[119.67424011 -21.83876038]
[123.36842346 -36.37674332]
[127.06260681 -50.91473007]
[120.59309387 -69.88127899]
[134.29678345 -83.37281799]
[137.08000183 -98.11235046]
[139.86322021 -112.85187531]
[133.10253906 -121.65523529]
[132.41940308 -132.51176453]
[137.79951477 -141.71005249]
[147.19769287 -146.24333191]
[150.89187622 -160.78132629]
[145.92416382 -176.40994263]
[157.17350769 -188.34243774]
[173.06753540 -184.30366516]
[177.25584412 -168.44837952]
[165.42985535 -157.08714294]
[161.73567200 -142.54914856]
[168.46923828 -124.53604126]
[154.60275269 -110.06865692]
[151.81953430 -95.32913208]
[149.03631592 -80.58959961]
[155.64508057 -72.51492310]
[156.64292908 -61.90555954]
[151.44387817 -52.35041809]
[141.60058594 -47.22054672]
[137.90640259 -32.68255997]
[134.21221924 -18.14457703]
[130.51803589 -3.60659146]
[126.82386017 10.93139362]
[123.12966919 25.46937943]
[119.43548584 40.00736237]
[116.19522095 54.65320587]
[113.41200256 69.39273071]
[110.62879181 84.13226318]
[118.70854950 96.15988922]
[116.02005005 110.39779663]
[104.11074066 118.65095520]
[101.32752228 133.39048767]
[98.54430389 148.13000488]
[105.19455719 159.31620789]
[102.45376587 171.62525940]
[92.35227966 178.47930908]
[89.11201477 193.12513733]
[99.05143738 202.81858826]
[102.82860565 216.06538391]
[99.54839325 229.33181763]
[90.18349457 239.13459778]
[77.28936005 242.95532227]
[73.59517670 257.49331665]
[69.90099335 272.03128052]
[66.20681000 286.56927490]
[62.51262665 301.10726929]
[75.75119781 308.33160400]
[86.77667999 318.62185669]
[94.89598846 331.33120728]
[99.59874725 345.66073608]
[100.58934021 360.70962524]
[97.80548859 375.53195190]
[91.42218781 389.19592285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[24 84]
[25 83]
[27 80]
[28 79]
[29 78]
[32 75]
[33 74]
[34 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[45 62]
[46 61]
[47 60]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
