%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCCAGCUCGCUCGGCCAGCCCGACGGCGGCGGGGGCGGGGGCGGCGGCGGCGGCGGCGUGGGGGCGGCGGGGGAGGACCCCGGACCCGGACCUGCGC\
) } def
/len { sequence length } bind def

/coor [
[201.07225037 148.64178467]
[191.76998901 143.00273132]
[187.10479736 132.93090820]
[172.75492859 128.56268311]
[158.40505981 124.19445801]
[144.01312256 132.73912048]
[127.54796600 128.22497559]
[119.20429230 112.94667816]
[104.72551727 109.02684784]
[96.58483887 110.13340759]
[89.86106110 104.75341797]
[75.51119232 100.38519287]
[61.16132736 96.01697540]
[51.85773849 96.50258636]
[46.43696594 91.28332520]
[32.22989273 86.47093964]
[16.67689705 89.37178040]
[7.10473633 77.96025085]
[-7.10233688 73.14786530]
[-24.97461891 77.22566986]
[-36.13759613 63.78359604]
[-50.48746109 59.41537476]
[-64.83732605 55.04715347]
[-79.18719482 50.67893219]
[-91.02973175 56.07440948]
[-102.96811676 52.01243973]
[-108.68403625 41.22605133]
[-122.89110565 36.41366196]
[-138.85841370 40.15227127]
[-149.88095093 28.00996399]
[-144.61968994 12.47770500]
[-128.48695374 9.53375053]
[-118.07872009 22.20658875]
[-103.87165070 27.01897621]
[-86.96672058 22.60029030]
[-74.81896973 36.32906723]
[-60.46910858 40.69728851]
[-46.11923981 45.06550980]
[-31.76937485 49.43373108]
[-20.83861542 43.99898529]
[-8.76971722 47.65497971]
[-2.28995037 58.94078827]
[11.91712284 63.75317383]
[26.45393372 60.50811768]
[37.04227829 72.26386261]
[51.24935150 77.07624817]
[65.52954865 81.66710663]
[79.87941742 86.03533173]
[94.22927856 90.40354919]
[108.64534760 94.54807281]
[123.12412262 98.46790314]
[134.05400085 90.41727448]
[147.43122864 90.19269562]
[158.30241394 97.65061188]
[162.77328491 109.84459686]
[177.12315369 114.21281433]
[191.47302246 118.58103943]
[210.72067261 113.00317383]
[223.55838013 127.32120514]
[238.15205383 130.78884888]
[252.74572754 134.25650024]
[267.33941650 137.72413635]
[281.93310547 141.19178772]
[296.52676392 144.65942383]
[311.12045288 148.12707520]
[324.47055054 140.10134888]
[339.22122192 143.82592773]
[346.79025269 156.60267639]
[361.38394165 160.07032776]
[375.97760010 163.53796387]
[390.71713257 166.32118225]
[405.57043457 168.41390991]
[420.42373657 170.50663757]
[435.27703857 172.59936523]
[450.13034058 174.69210815]
[463.75958252 166.22904968]
[478.82504272 171.74372864]
[483.76977539 187.00575256]
[474.80059814 200.30738831]
[458.79791260 201.44477844]
[448.03759766 189.54539490]
[433.18429565 187.45266724]
[418.33099365 185.35993958]
[403.47772217 183.26721191]
[388.62442017 181.17448425]
[385.50051880 183.14840698]
[381.21676636 183.60025024]
[376.55203247 181.97988892]
[372.50997925 178.13163757]
[357.91629028 174.66400146]
[343.32260132 171.19635010]
[330.81524658 179.20269775]
[315.96578979 175.89390564]
[307.65280151 162.72074890]
[293.05911255 159.25311279]
[278.46545410 155.78546143]
[263.87176514 152.31781006]
[249.27809143 148.85017395]
[234.68441772 145.38252258]
[220.09072876 141.91488647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 57]
[4 56]
[5 55]
[8 51]
[9 50]
[11 49]
[12 48]
[13 47]
[15 46]
[16 45]
[18 43]
[19 42]
[21 39]
[22 38]
[23 37]
[24 36]
[27 34]
[28 33]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[68 91]
[69 90]
[70 89]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
