%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUGCCAGAUCAUUUCUCACCCCUCUCAGGAGACAUUAAACUCUCUGUCCUGGCCUUAGUUGUCCUUGUGGUCCUGGCUCAGACUGCCCCAGAUGGAU\
) } def
/len { sequence length } bind def

/coor [
[92.78307343 116.16436005]
[85.08382416 109.53302002]
[82.29933929 99.76062012]
[68.79930115 93.22235107]
[55.29925919 86.68408966]
[41.50896454 80.78258514]
[27.45842743 75.53068542]
[13.40789032 70.27879333]
[-0.64264655 65.02689362]
[-14.69318295 59.77499771]
[-6.47129679 72.32093811]
[-2.41631722 86.76244354]
[-2.90592217 101.75444794]
[-7.89450979 115.90061951]
[-16.91744804 127.88337708]
[-29.13434792 136.58666992]
[-43.40733719 141.19989014]
[-58.40704727 141.29335022]
[-72.73641205 136.85833740]
[-85.06081390 128.30795288]
[-94.23236847 116.43855286]
[-99.39684296 102.35565186]
[-100.07321930 87.37091064]
[-96.19850922 72.87998962]
[-88.13359070 60.23257828]
[-76.62963104 50.60662842]
[-62.75809479 44.89870071]
[-47.81096268 43.64042282]
[-33.17968369 46.94927216]
[-43.01861572 35.62692642]
[-52.85754395 24.30458260]
[-62.87136459 13.13662148]
[-73.05765533 2.12574315]
[-83.24394989 -8.88513470]
[-98.63629913 -6.92164993]
[-112.22686005 -14.41005611]
[-118.78978729 -28.47090912]
[-115.80150604 -43.69752502]
[-104.41106415 -54.23495483]
[-88.99832153 -56.03134537]
[-75.48979187 -48.39595032]
[-69.07978821 -34.26472855]
[-72.23307037 -19.07142830]
[-62.04677963 -8.06054974]
[-51.86048889 2.95032811]
[-44.88469696 5.77235126]
[-41.53519821 14.46565342]
[-31.69626999 25.78799820]
[-21.85734177 37.11034012]
[-17.03670692 37.89951324]
[-12.57590008 40.84053802]
[-9.44128609 45.72446060]
[4.60925007 50.97635651]
[18.65978622 56.22825241]
[32.71032333 61.48015213]
[46.76086044 66.73204803]
[50.23738861 65.47953796]
[54.51760101 65.96372986]
[58.72218323 68.55349731]
[61.83752441 73.18405151]
[75.33756256 79.72231293]
[88.83760834 86.26058197]
[107.21692657 83.83563995]
[117.68130493 99.13847351]
[131.56170654 104.82479858]
[145.44212341 110.51112366]
[159.32252502 116.19744873]
[172.49447632 108.20960236]
[187.66690063 109.49443817]
[199.03897095 119.35041046]
[202.38674927 133.83938599]
[216.26716614 139.52571106]
[230.14756775 145.21203613]
[234.82951355 144.36952209]
[239.06340027 145.10191345]
[242.38078308 147.04350281]
[244.49514771 149.70779419]
[245.32618713 152.56326294]
[258.39364624 159.92817688]
[271.46109009 167.29309082]
[286.03472900 161.62365723]
[300.82635498 166.69731140]
[308.85177612 180.11842346]
[306.32168579 195.54997253]
[294.43063354 205.70562744]
[278.79330444 205.79022217]
[266.79309082 195.76379395]
[264.09616089 180.36053467]
[251.02871704 172.99562073]
[237.96127319 165.63070679]
[224.46124268 159.09245300]
[210.58084106 153.40611267]
[196.70042419 147.71978760]
[184.14958191 155.69564819]
[169.13121033 154.74035645]
[157.41815186 145.01113892]
[153.63619995 130.07786560]
[139.75579834 124.39153290]
[125.87538147 118.70520782]
[111.99497986 113.01888275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 62]
[4 61]
[5 60]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[29 49]
[30 48]
[31 47]
[32 45]
[33 44]
[34 43]
[64 100]
[65 99]
[66 98]
[67 97]
[71 93]
[72 92]
[73 91]
[78 90]
[79 89]
[80 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
