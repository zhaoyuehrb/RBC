%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCAGGAGCCCCAGUGCCCUUUCCUCCUCCCACCGCGCACCAAAACAUGGGGUCCAAGAUCUUCUGUUGUUGCCGCAAGACCAGCGAGGGGUCUUCCACCACUGUUGGCUUCCACAAUCCAAGAAUGUUCGAACAGCAUCAUCCAC\
) } def
/len { sequence length } bind def

/coor [
[263.75949097 440.94934082]
[259.45336914 427.82562256]
[257.66894531 414.12478638]
[258.47048950 400.32702637]
[261.83151245 386.91629028]
[267.63580322 374.36328125]
[275.68130493 363.10888672]
[285.68725586 353.54876709]
[277.64984131 340.88385010]
[269.61245728 328.21893311]
[261.57504272 315.55401611]
[253.53764343 302.88909912]
[245.50024414 290.22418213]
[229.54553223 282.98367310]
[228.84559631 264.61349487]
[220.54472351 252.11967468]
[212.24385071 239.62585449]
[203.94297791 227.13203430]
[195.64210510 214.63821411]
[186.32487488 202.88281250]
[176.05667114 191.94828796]
[165.78846741 181.01374817]
[155.52026367 170.07922363]
[145.25205994 159.14469910]
[134.98385620 148.21015930]
[120.63117981 144.22892761]
[116.82456207 128.87249756]
[106.55635834 117.93795776]
[92.07765961 117.37793732]
[82.15890503 106.81553650]
[82.50910950 92.33024597]
[72.24090576 81.39571381]
[58.69437027 84.13690948]
[45.67097473 79.84417725]
[36.55493546 69.74608612]
[33.65895081 56.56476212]
[37.63814163 43.78256989]
[27.60118294 32.63539886]
[19.47676659 28.31402016]
[17.47375107 21.14808273]
[7.67244244 9.79315758]
[-2.12886667 -1.56176865]
[-14.00731277 -0.10623290]
[-24.98960876 -4.54926872]
[-32.36323929 -13.66766644]
[-34.36829758 -25.09957695]
[-30.61643791 -35.95566177]
[-39.93365479 -47.71106339]
[-49.25086975 -59.46646500]
[-58.56808853 -71.22186279]
[-73.20370483 -77.23096466]
[-75.04554749 -92.01125336]
[-84.36277008 -103.76665497]
[-93.67998505 -115.52205658]
[-102.99720001 -127.27745819]
[-112.31441498 -139.03285217]
[-121.63163757 -150.78825378]
[-136.20855713 -159.44561768]
[-131.92481995 -175.84945679]
[-114.97619629 -176.27416992]
[-109.87622833 -160.10548401]
[-100.55901337 -148.35006714]
[-91.24179840 -136.59466553]
[-81.92458344 -124.83927155]
[-72.60736847 -113.08386993]
[-63.29014969 -101.32846832]
[-49.32096100 -96.16019440]
[-46.81268692 -80.53908539]
[-37.49546814 -68.78368378]
[-28.17825127 -57.02827835]
[-18.86103439 -45.27287674]
[-0.62813890 -44.31456757]
[11.37067127 -30.13418961]
[9.22605896 -11.36307812]
[19.02736855 -0.00815187]
[28.82867813 11.34677410]
[38.74835587 22.59844017]
[48.78531265 33.74561310]
[65.01582336 31.49770737]
[79.54494476 39.42533493]
[86.57754517 54.59108734]
[83.17543793 71.12751007]
[93.44364166 82.06204224]
[107.92234039 82.62206268]
[117.84109497 93.18446350]
[117.49089050 107.66975403]
[127.75909424 118.60428619]
[142.84620667 123.36763000]
[145.91838074 137.94195557]
[156.18658447 148.87648010]
[166.45478821 159.81101990]
[176.72299194 170.74554443]
[186.99121094 181.68006897]
[197.25941467 192.61460876]
[197.27746582 177.61460876]
[205.97763062 165.39549255]
[220.14617920 160.47084045]
[234.54940796 164.65975952]
[243.86692810 176.41493225]
[244.65695190 191.39410400]
[236.62765503 204.06416321]
[222.74496460 209.74493408]
[208.13592529 206.33734131]
[216.43679810 218.83116150]
[224.73767090 231.32498169]
[233.03854370 243.81880188]
[241.33941650 256.31262207]
[253.84516907 259.64212036]
[260.49359131 270.27423096]
[258.16516113 282.18676758]
[266.20254517 294.85168457]
[274.23995972 307.51660156]
[282.27737427 320.18151855]
[290.31475830 332.84643555]
[298.35217285 345.51138306]
[313.66430664 339.89633179]
[329.82879639 337.77764893]
[346.05789185 339.25567627]
[361.56137085 344.25561523]
[375.58496094 352.53118896]
[387.44705200 363.67687988]
[396.57177734 377.14773560]
[402.51705933 392.28601074]
[404.99594116 408.35330200]
[403.89050293 424.56658936]
[399.25744629 440.13635254]
[391.32510376 454.30496216]
[380.48239136 466.38375854]
[389.29916382 478.51901245]
[398.11593628 490.65426636]
[406.93273926 502.78952026]
[415.74951172 514.92474365]
[431.30633545 518.84454346]
[437.80981445 533.51025391]
[430.27102661 547.67169189]
[414.47311401 550.46539307]
[402.53482056 539.74822998]
[403.61425781 523.74157715]
[394.79748535 511.60629272]
[385.98068237 499.47103882]
[377.16390991 487.33578491]
[368.34713745 475.20053101]
[355.85256958 480.99288940]
[342.49282837 484.35528564]
[328.73596191 485.16818237]
[315.06436157 483.40139771]
[301.95761108 479.11526489]
[289.87585449 472.45852661]
[279.24362183 463.66308594]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[27 87]
[28 86]
[31 83]
[32 82]
[37 78]
[38 77]
[40 76]
[41 75]
[42 74]
[47 71]
[48 70]
[49 69]
[50 68]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[128 142]
[129 141]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
