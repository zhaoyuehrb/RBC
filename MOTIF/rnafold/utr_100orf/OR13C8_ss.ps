%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAAGGACCAACGAUUCCACGUCGACAGAAUUUUUCCUGGUAGGGCUUUCUGCCCACCCAAAGCUCCAGACAGUUUUCUUCGUUCUAAUUUUGUGGA\
) } def
/len { sequence length } bind def

/coor [
[-26.16646576 344.88040161]
[-44.95962906 349.38485718]
[-51.70705414 362.78155518]
[-58.45447922 376.17828369]
[-53.26322937 391.10568237]
[-60.22281647 405.29510498]
[-75.20423889 410.32821655]
[-89.31929016 403.21902466]
[-94.19375610 388.18521118]
[-86.93569946 374.14611816]
[-71.85120392 369.43087769]
[-65.10377502 356.03414917]
[-58.35635376 342.63742065]
[-64.22963715 333.85101318]
[-65.84438324 323.32373047]
[-62.82868195 313.02401733]
[-55.68302155 304.90737915]
[-45.69869232 300.54528809]
[-34.72478485 300.82107544]
[-26.75841904 288.11135864]
[-18.79205132 275.40164185]
[-10.82568455 262.69192505]
[-2.85931778 249.98219299]
[5.10704899 237.27247620]
[-2.93031645 224.70799255]
[-4.72277021 209.83866882]
[0.13838896 195.60736084]
[10.73966312 184.85408020]
[25.01649284 179.74926758]
[40.15519333 181.35588074]
[48.12155914 168.64616394]
[56.08792496 155.93643188]
[64.05429077 143.22671509]
[72.02066040 130.51699829]
[64.57028198 121.42115021]
[59.97726822 110.59771729]
[58.61203766 98.91959381]
[60.58469772 87.32859802]
[65.73614502 76.75953674]
[73.65093994 68.06479645]
[83.69074249 61.94557953]
[95.04587555 58.89541245]
[95.97841644 43.92442703]
[96.91096497 28.95344353]
[94.28773499 20.01413155]
[98.11246490 13.53362846]
[99.51015472 -1.40111196]
[100.90784454 -16.33585167]
[102.30553436 -31.27059174]
[93.21601868 -44.49028778]
[98.02203369 -59.79655075]
[113.03681946 -65.44773102]
[126.74230957 -57.10872269]
[128.62483215 -41.17650223]
[117.24027252 -29.87290382]
[115.84258270 -14.93816280]
[114.44489288 -0.00342297]
[113.04720306 14.93131733]
[111.88195038 29.88598824]
[110.94940186 44.85697174]
[110.01686096 59.82795715]
[126.17175293 67.91931915]
[137.34231567 82.12034607]
[151.82109070 78.20051575]
[166.29986572 74.28068542]
[180.77864075 70.36086273]
[195.25741577 66.44103241]
[209.73619080 62.52120209]
[217.38446045 48.69081879]
[232.59506226 44.39975739]
[246.34381104 52.19382477]
[250.47381592 67.44894409]
[242.53482056 81.11451721]
[227.23689270 85.08300781]
[213.65602112 76.99997711]
[199.17724609 80.91980743]
[184.69847107 84.83963776]
[170.21969604 88.75946808]
[155.74092102 92.67929077]
[141.26214600 96.59912109]
[139.24897766 113.17755127]
[130.84982300 127.61193848]
[117.43125153 137.55372620]
[101.17652893 141.38534546]
[84.73037720 138.48336792]
[76.76401520 151.19308472]
[68.79764557 163.90280151]
[60.83127975 176.61251831]
[52.86491394 189.32225037]
[60.90958786 202.24681091]
[62.53829575 217.32110596]
[57.48123932 231.54946899]
[46.79192734 242.12773132]
[32.62820053 246.99583435]
[17.81677055 245.23884583]
[9.85040283 257.94854736]
[1.88403583 270.65829468]
[-6.08233118 283.36801147]
[-14.04869843 296.07772827]
[-22.01506424 308.78744507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[30 89]
[31 88]
[32 87]
[33 86]
[34 85]
[42 61]
[43 60]
[44 59]
[46 58]
[47 57]
[48 56]
[49 55]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
