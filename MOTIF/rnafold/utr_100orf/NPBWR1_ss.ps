%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAACGCCUCGUUCUCGGAGCCCUGGCCCGCCAACGCAUCGGGCCCGGACCCGGCGCUGAGCUGCUCCAACGCGUCGACUCUGGCGCCGCUGCCGG\
) } def
/len { sequence length } bind def

/coor [
[127.87306213 130.22352600]
[126.09806061 145.11813354]
[117.27799988 157.25100708]
[103.65748596 163.53445435]
[88.70279694 162.36940002]
[76.21974182 154.05236816]
[69.38510895 140.69992065]
[69.93824768 125.71011353]
[77.73838806 112.89770508]
[90.80130005 105.52308655]
[76.20761871 102.05544281]
[61.61394501 98.58779907]
[47.02026749 95.12015533]
[32.23923492 92.56649780]
[17.32803726 90.93672180]
[2.41684055 89.30693817]
[-12.49435711 87.67715454]
[-24.74528885 97.29756927]
[-39.84414673 95.43232727]
[-48.94024658 83.69364929]
[-63.85144424 82.06386566]
[-78.76264191 80.43408203]
[-87.81457520 82.63752747]
[-94.10963440 78.51470184]
[-108.96293640 76.42197418]
[-123.95928192 83.05835724]
[-137.04339600 73.17210388]
[-134.75546265 56.93334579]
[-119.44911194 51.04711914]
[-106.87020874 61.56867218]
[-92.01690674 63.66140366]
[-77.13285828 65.52288818]
[-62.22166061 67.15266418]
[-47.31046295 68.78244781]
[-35.89336395 59.28584671]
[-20.74807358 60.72626114]
[-10.86457443 72.76595306]
[4.04662275 74.39573669]
[18.95782089 76.02552032]
[33.86901855 77.65530396]
[36.20837021 75.81906891]
[39.47921371 74.88603210]
[43.30656815 75.24136353]
[47.17404938 77.11343384]
[50.48791122 80.52647400]
[65.08158875 83.99411774]
[79.67527008 87.46176910]
[94.26894379 90.92941284]
[109.22361755 92.09466553]
[124.17828369 90.92941284]
[139.13294983 89.76415253]
[154.08763123 88.59889221]
[162.25852966 75.53970337]
[176.38722229 69.86222839]
[190.97727966 73.54927063]
[200.48478699 84.98365784]
[215.43945312 83.81840515]
[230.39411926 82.65314484]
[245.34878540 81.48788452]
[260.30346680 80.32263184]
[275.25814819 79.15737152]
[290.21279907 77.99211121]
[305.14755249 76.59442902]
[320.05874634 74.96464539]
[334.96994019 73.33486176]
[351.16952515 59.49235153]
[369.89309692 67.93284607]
[384.58758545 64.92073822]
[399.28204346 61.90863419]
[407.77532959 48.58049393]
[423.22329712 45.24337006]
[436.46087646 53.87711716]
[439.63449097 69.35948181]
[430.86129761 82.50505829]
[415.34622192 85.51480865]
[402.29412842 76.60309601]
[387.59967041 79.61520386]
[372.90521240 82.62730408]
[369.14294434 91.00891113]
[361.77087402 96.72194672]
[352.44082642 98.32061005]
[343.32269287 95.30023193]
[336.59973145 88.24605560]
[321.68853760 89.87583923]
[306.77731323 91.50562286]
[300.35708618 95.43067169]
[291.37805176 92.94678497]
[276.42340088 94.11204529]
[261.46871948 95.27729797]
[246.51405334 96.44255829]
[231.55937195 97.60781860]
[216.60470581 98.77307129]
[201.65003967 99.93833160]
[194.02844238 112.70741272]
[180.18560791 118.60992432]
[165.34802246 115.18947601]
[155.25288391 103.55356598]
[140.29821777 104.71882629]
[125.34354401 105.88407898]
[110.38887024 107.04933929]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 48]
[11 47]
[12 46]
[13 45]
[14 40]
[15 39]
[16 38]
[17 37]
[20 34]
[21 33]
[22 32]
[24 31]
[25 30]
[49 100]
[50 99]
[51 98]
[52 97]
[56 93]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[63 85]
[64 84]
[65 83]
[67 78]
[68 77]
[69 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
