%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCAAGAAGAGCUCAGCGCGUCCUAUUCUUUUGCAUAAGACAUGCCUGUGGGGAAACUUGUCUUCAACCAGUCUGAGCCCACUGAGUUUGUGUUCCGUGCGUUCACCACAGCCACUGAAUUCCAGGUUCUUCUCUUCCUUC\
) } def
/len { sequence length } bind def

/coor [
[80.09664917 307.07739258]
[70.43792725 295.36956787]
[65.66451263 280.96197510]
[66.42196655 265.80310059]
[72.60784912 251.94313049]
[83.38557434 241.25643921]
[97.29753876 235.18836975]
[96.64324951 220.20263672]
[95.98896027 205.21691895]
[95.33467102 190.23120117]
[94.68037415 175.24546814]
[94.02608490 160.25975037]
[93.37179565 145.27401733]
[92.71750641 130.28829956]
[81.72199249 124.08995056]
[74.38523865 114.28128052]
[71.71478271 102.70957947]
[73.87309265 91.41114044]
[59.04766846 93.69298553]
[44.22224808 95.97483826]
[31.75971222 105.72142029]
[18.00354195 100.01028442]
[3.17811918 102.29213715]
[-11.64730358 104.57398224]
[-24.10983849 114.32056427]
[-37.86600876 108.60942841]
[-52.69143295 110.89128113]
[-67.51685333 113.17313385]
[-74.50173187 127.02922058]
[-88.31240082 134.10346985]
[-103.63837433 131.67570496]
[-114.58650970 120.67942810]
[-116.94702148 105.34294891]
[-109.81224060 91.56344604]
[-95.92564392 84.63942719]
[-80.62690735 87.23331451]
[-69.79870605 98.34770966]
[-54.97328186 96.06585693]
[-40.14785767 93.78401184]
[-28.74573708 84.20064545]
[-13.92915440 89.74856567]
[0.89626831 87.46671295]
[15.72169113 85.18486023]
[27.12381172 75.60149384]
[41.94039536 81.14941406]
[56.76581955 78.86756897]
[71.59123993 76.58571625]
[83.28950500 67.19686127]
[88.72608185 53.21674728]
[94.16265106 39.23662567]
[99.59922028 25.25650978]
[105.03578949 11.27639103]
[110.47235870 -2.70372677]
[99.58679199 -2.28935218]
[90.46251678 -7.54068851]
[85.69694519 -16.51559258]
[86.40618134 -26.28573608]
[91.98654938 -33.88746262]
[88.10427094 -48.37634659]
[84.22198486 -62.86523438]
[73.17657471 -74.19261932]
[77.35617065 -88.48877716]
[73.47388458 -102.97766876]
[60.35504532 -112.21214294]
[59.53925705 -128.23443604]
[71.65232086 -138.75363159]
[87.40213013 -135.70027161]
[94.70678711 -121.41666412]
[87.96277618 -106.85995483]
[91.84506226 -92.37106323]
[102.61277771 -82.08002472]
[98.71086884 -66.74752045]
[102.59315491 -52.25863266]
[106.47544098 -37.76974487]
[117.52410126 -32.80892181]
[123.16593933 -20.83203316]
[134.44354248 -30.72222137]
[145.72113037 -40.61240768]
[156.99873352 -50.50259399]
[168.27632141 -60.39278412]
[173.55029297 -75.30908203]
[188.22071838 -77.88354492]
[199.49830627 -87.77372742]
[210.77590942 -97.66391754]
[216.04986572 -112.58021545]
[230.72029114 -115.15467834]
[241.99789429 -125.04486084]
[253.27549744 -134.93504333]
[254.05891418 -150.71990967]
[265.83038330 -161.26544189]
[281.60607910 -160.31518555]
[292.02655029 -148.43289185]
[290.90954590 -132.66812134]
[278.91775513 -122.37384033]
[263.16567993 -123.65745544]
[251.88807678 -113.76726532]
[240.61048889 -103.87707520]
[236.14317322 -89.66819763]
[220.66609192 -86.38632202]
[209.38850403 -76.49613190]
[198.11090088 -66.60594177]
[193.64358521 -52.39706039]
[178.16651917 -49.11518478]
[166.88891602 -39.22499847]
[155.61131287 -29.33481216]
[144.33372498 -19.44462395]
[133.05612183 -9.55443668]
[124.45247650 2.73284388]
[119.01590729 16.71296120]
[113.57933807 30.69307899]
[108.14276886 44.67319870]
[102.70619965 58.65331650]
[97.26962280 72.63343048]
[111.08969879 73.83869934]
[122.99652863 81.80025482]
[129.80789185 94.91071320]
[129.45777893 110.13189697]
[141.74505615 118.73554230]
[154.03233337 127.33918762]
[170.01776123 125.98058319]
[180.94161987 137.72999573]
[178.42408752 153.57427979]
[164.39637756 161.35906982]
[149.61935425 155.11253357]
[145.42869568 139.62646484]
[133.14140320 131.02282715]
[120.85412598 122.41918182]
[107.70322418 129.63400269]
[108.35752106 144.61973572]
[109.01181030 159.60545349]
[109.66609955 174.59118652]
[110.32038879 189.57690430]
[110.97468567 204.56262207]
[111.62897491 219.54835510]
[112.28326416 234.53407288]
[126.67115784 239.36656189]
[138.33927917 249.07322693]
[145.70959473 262.34133911]
[147.78535461 277.37649536]
[144.28579712 292.14529419]
[135.68423462 304.65039062]
[123.14395905 313.20059204]
[108.36091614 316.63952637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 135]
[8 134]
[9 133]
[10 132]
[11 131]
[12 130]
[13 129]
[14 128]
[18 47]
[19 46]
[20 45]
[22 43]
[23 42]
[24 41]
[26 39]
[27 38]
[28 37]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[58 74]
[59 73]
[60 72]
[62 70]
[63 69]
[76 107]
[77 106]
[78 105]
[79 104]
[80 103]
[82 101]
[83 100]
[84 99]
[86 97]
[87 96]
[88 95]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
