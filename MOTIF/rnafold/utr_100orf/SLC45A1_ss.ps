%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCAGCGCCCCGCCCCGGGUGAUGCUGCAGCAGCCGGGACCGCGGCCGGGCAGGCAGCAGCCCAGCGGGGACAGGGAUGCCUGCCGUCUCCACCCACAGGGACGCCCACCAGCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[198.51858521 201.47467041]
[187.45588684 191.34468079]
[176.39318848 181.21469116]
[165.33049011 171.08470154]
[150.71871948 168.19590759]
[145.76615906 153.16984558]
[134.70346069 143.03985596]
[123.64076233 132.90985107]
[116.50319672 130.68827820]
[112.43142700 122.38359070]
[101.62679291 111.97879028]
[90.56409454 101.84880066]
[79.25032806 92.00000763]
[67.93655396 82.15122223]
[48.05443573 79.30963135]
[42.32660294 60.91032791]
[30.53227615 51.64243317]
[18.73794937 42.37453842]
[6.94362354 33.10664368]
[-5.19163132 24.28986549]
[-17.65056992 15.93673134]
[-30.10950851 7.58359671]
[-42.56844711 -0.76953757]
[-49.30907822 -1.61452365]
[-53.86067581 -5.24926376]
[-55.42897797 -9.86856174]
[-67.45248413 -18.83713722]
[-79.47598267 -27.80571175]
[-91.49948883 -36.77428436]
[-103.52299500 -45.74285889]
[-115.54650116 -54.71143723]
[-133.83192444 -56.38876724]
[-140.23442078 -72.67669678]
[-152.47950745 -81.34028625]
[-172.54643250 -82.17213440]
[-180.09193420 -99.90367889]
[-192.75685120 -107.94108582]
[-205.42176819 -115.97848511]
[-218.08668518 -124.01588440]
[-233.45373535 -120.32412720]
[-246.88653564 -128.65093994]
[-250.41561890 -144.05616760]
[-241.94725037 -157.40016174]
[-226.50556946 -160.76617432]
[-213.25184631 -152.15721130]
[-210.04928589 -136.68080139]
[-197.38436890 -128.64340210]
[-184.71945190 -120.60600281]
[-172.05451965 -112.56860352]
[-162.18734741 -115.70893097]
[-152.02510071 -112.78028870]
[-145.05696106 -104.53307343]
[-143.81591797 -93.58537292]
[-131.57083130 -84.92178345]
[-119.52687836 -86.64479065]
[-109.23402405 -79.43132019]
[-106.57792664 -66.73493958]
[-94.55442047 -57.76636505]
[-82.53091431 -48.79779053]
[-70.50740814 -39.82921600]
[-58.48390579 -30.86064148]
[-46.46039963 -21.89206696]
[-34.21531296 -13.22847557]
[-21.75637436 -4.87534189]
[-9.29743576 3.47779250]
[3.16150284 11.83092690]
[6.77392817 11.45149708]
[10.74769211 12.87564373]
[14.19859409 16.25188637]
[16.21151733 21.31231689]
[28.00584412 30.58021164]
[39.80017090 39.84810638]
[51.59449768 49.11600113]
[61.72702789 46.98180771]
[71.54404449 50.91556931]
[77.64929199 59.82047653]
[77.78533936 70.83745575]
[89.09911346 80.68624115]
[100.41287994 90.53502655]
[105.71358490 91.37528229]
[110.12852478 95.17945099]
[112.03159332 101.17415619]
[122.83622742 111.57895660]
[133.77075195 121.84716034]
[144.83345032 131.97715759]
[155.89614868 142.10714722]
[171.29920959 145.72048950]
[175.46049500 160.02200317]
[186.52317810 170.15199280]
[197.58587646 180.28198242]
[208.64857483 190.41197205]
[216.80786133 186.21136475]
[225.75804138 184.27201843]
[234.88586426 184.71664429]
[243.56857300 187.50492859]
[251.21633911 192.43699646]
[257.31237793 199.16770935]
[261.44781494 207.23081970]
[263.34915161 216.07119751]
[262.89627075 225.08314514]
[260.13006592 233.65179443]
[255.24890137 241.19514465]
[264.36785889 253.10499573]
[273.48681641 265.01486206]
[282.60577393 276.92471313]
[299.73901367 283.52938843]
[301.45257568 300.94641113]
[310.86795044 312.62335205]
[326.60690308 314.05883789]
[336.65664673 326.25631714]
[335.05484009 341.97921753]
[322.75180054 351.89944458]
[307.04669189 350.13146973]
[297.25711060 337.72424316]
[299.19100952 322.03872681]
[289.77563477 310.36178589]
[277.71871948 308.73193359]
[269.78564453 298.98291016]
[270.69592285 286.04367065]
[261.57696533 274.13381958]
[252.45800781 262.22396851]
[243.33905029 250.31410217]
[222.07525635 253.00715637]
[203.22483826 242.54417419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[6 86]
[7 85]
[8 84]
[10 83]
[11 82]
[12 79]
[13 78]
[14 77]
[16 73]
[17 72]
[18 71]
[19 70]
[20 66]
[21 65]
[22 64]
[23 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[33 54]
[34 53]
[36 49]
[37 48]
[38 47]
[39 46]
[102 122]
[103 121]
[104 120]
[105 119]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
