%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUCGCCUGCACUUUCCGUCUUUCUUCUCUGGGCGCCCACCAACAAUGGAUGGCAACUCCCUGCUCUCGGUACCAAGCAACUUGGAGUCAUCACGGAUGUAUGACGUUUUGGAACCGCAGCAGGGCAGAGGCUGUGGCAGCUCAG\
) } def
/len { sequence length } bind def

/coor [
[54.57691574 261.19259644]
[59.92004013 275.25842285]
[62.50437164 290.08129883]
[62.23648071 305.12539673]
[59.12605286 319.84686279]
[53.28553009 333.71356201]
[44.92604446 346.22415161]
[34.34978485 356.92645264]
[21.93907547 365.43356323]
[8.14255714 371.43795776]
[-6.54103470 374.72256470]
[-21.58089828 375.16864014]
[-36.43335342 372.76010132]
[-50.56148911 367.58395386]
[-63.45458603 359.82739258]
[-74.64656067 349.77072144]
[-83.73284149 337.77755737]
[-90.38495636 324.28143311]
[-94.36243439 309.77017212]
[-95.52149963 294.76840210]
[-93.82024384 279.81842041]
[-89.32017517 265.46063232]
[-82.18395996 252.21409607]
[-72.66957092 240.55764771]
[-61.12095261 230.91264343]
[-47.95557404 223.62777710]
[-33.64935684 218.96638489]
[-18.71946335 217.09695435]
[-3.70559835 218.08708191]
[10.84949589 221.90095520]
[24.41966248 228.40074158]
[33.33916092 216.34077454]
[42.25865936 204.28082275]
[51.17815399 192.22087097]
[60.09765244 180.16090393]
[69.01715088 168.10095215]
[77.80815125 155.94700623]
[86.46965790 143.70045471]
[95.13117218 131.45388794]
[93.08770752 124.23764038]
[89.00077820 109.80513763]
[86.95732117 102.58889008]
[73.16082764 96.70188141]
[59.36433792 90.81487274]
[43.15747833 93.31881714]
[33.09789276 80.36749268]
[39.53402328 65.28411102]
[55.84492874 63.58516693]
[65.25135040 77.01838684]
[79.04783630 82.90539551]
[92.84432983 88.79240417]
[107.67903900 86.57176208]
[119.14693451 76.90287018]
[130.61483765 67.23398590]
[142.08271790 57.56509781]
[153.55061340 47.89620590]
[155.03964233 32.39070511]
[166.80744934 22.74844170]
[181.58039856 24.26354790]
[193.04829407 14.59465981]
[204.41291809 4.80460405]
[215.67300415 -5.10551691]
[226.93309021 -15.01563740]
[238.19317627 -24.92575836]
[249.45326233 -34.83588028]
[260.71334839 -44.74600220]
[271.97341919 -54.65612030]
[273.58645630 -67.49861908]
[283.22732544 -75.52024841]
[295.34683228 -74.81679535]
[306.81472778 -84.48568726]
[318.28262329 -94.15457916]
[329.75051880 -103.82346344]
[335.31372070 -118.63432312]
[350.03146362 -120.92285919]
[361.49935913 -130.59175110]
[372.96725464 -140.26063538]
[384.43511963 -149.92951965]
[395.90301514 -159.59841919]
[393.63006592 -167.23983765]
[393.52484131 -175.18438721]
[395.58062744 -182.83100891]
[399.62762451 -189.60525513]
[405.34716797 -195.00239563]
[412.29653931 -198.62495422]
[419.94338989 -200.21206665]
[427.70635986 -199.65815735]
[434.99945068 -197.01982117]
[441.27606201 -192.51046753]
[454.04901123 -200.37507629]
[466.82196045 -208.23968506]
[479.59487915 -216.10429382]
[492.36782837 -223.96890259]
[498.08432007 -231.18418884]
[505.49639893 -231.86155701]
[518.43334961 -239.45329285]
[526.05737305 -253.97248840]
[542.45196533 -254.35906982]
[550.75177002 -240.21536255]
[542.41876221 -226.09120178]
[526.02508545 -226.51629639]
[513.08813477 -218.92457581]
[500.23242188 -211.19596863]
[487.45950317 -203.33135986]
[474.68655396 -195.46675110]
[461.91360474 -187.60214233]
[449.14068604 -179.73753357]
[446.54592896 -157.37757874]
[428.20916748 -143.87492371]
[405.57192993 -148.13052368]
[394.10403442 -138.46162415]
[382.63613892 -128.79273987]
[371.16824341 -119.12385559]
[359.70034790 -109.45496368]
[354.95742798 -95.33569336]
[339.41940308 -92.35556793]
[327.95150757 -82.68668365]
[316.48361206 -73.01779175]
[305.01571655 -63.34890366]
[299.99029541 -46.56570435]
[281.88354492 -43.39603806]
[270.62347412 -33.48591614]
[259.36337280 -23.57579422]
[248.10330200 -13.66567421]
[236.84321594 -3.75555325]
[225.58312988 6.15456772]
[214.32304382 16.06468773]
[211.35935974 22.89214516]
[202.71717834 26.06255341]
[191.24928284 35.73144150]
[190.24595642 50.54795074]
[178.75361633 60.51694489]
[163.21951294 59.36410141]
[151.75161743 69.03298950]
[140.28372192 78.70188141]
[128.81582642 88.37076569]
[117.34793091 98.03965759]
[107.37773132 140.11540222]
[98.71622467 152.36195374]
[90.05471039 164.60852051]
[87.62863159 173.48843384]
[81.07711029 177.02044678]
[72.15760803 189.08041382]
[63.23811340 201.14036560]
[54.31861496 213.20031738]
[45.39911652 225.26028442]
[36.47961807 237.32023621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 147]
[32 146]
[33 145]
[34 144]
[35 143]
[36 142]
[37 140]
[38 139]
[39 138]
[42 51]
[43 50]
[44 49]
[52 137]
[53 136]
[54 135]
[55 134]
[56 133]
[59 130]
[60 129]
[61 127]
[62 126]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
[70 119]
[71 118]
[72 117]
[73 116]
[75 114]
[76 113]
[77 112]
[78 111]
[79 110]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
