%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGAUUCAGAAAAAGCUGACUGGCUGCAGCAGGCUGAUGCUUCUGUGUCUUUCUCUGGAGCUGCUGUUGGAAGCUGGGGCUGGGAAUAUUCACUACU\
) } def
/len { sequence length } bind def

/coor [
[126.90801239 373.54003906]
[137.67898560 362.20336914]
[135.81750488 347.31930542]
[133.95602417 332.43527222]
[132.09454346 317.55120850]
[117.03443146 307.37588501]
[113.96517181 289.14251709]
[125.24105072 274.09396362]
[122.45783234 259.35443115]
[119.67461395 244.61491394]
[116.89140320 229.87538147]
[114.10818481 215.13586426]
[100.00615692 210.34019470]
[90.13230133 199.05467224]
[87.21374512 184.24424744]
[92.13256073 169.86711121]
[103.66247559 159.81683350]
[100.87925720 145.07730103]
[98.09604645 130.33776855]
[95.31282806 115.59824371]
[86.03318024 108.37870789]
[84.03158569 96.79306793]
[90.35105133 86.87854767]
[88.02758026 72.05959320]
[85.70410919 57.24063492]
[83.38063049 42.42167664]
[81.05715942 27.60272026]
[71.27562714 15.16760349]
[76.94810486 1.39545047]
[74.62463379 -13.42350578]
[72.30116272 -28.24246216]
[69.97769165 -43.06142044]
[67.65422058 -57.88037491]
[64.18656921 -72.47405243]
[59.59571457 -86.75424957]
[55.00485611 -101.03444672]
[41.22572327 -108.29897308]
[36.77336884 -122.84651947]
[43.78389740 -135.93804932]
[39.19303894 -150.21824646]
[34.60218048 -164.49844360]
[30.01132011 -178.77864075]
[25.42046165 -193.05883789]
[12.91102219 -203.66288757]
[16.10551262 -219.74789429]
[31.71771622 -224.76696777]
[43.68713379 -213.55693054]
[39.70065689 -197.64968872]
[44.29151535 -183.36949158]
[48.88237381 -169.08929443]
[53.47323608 -154.80909729]
[58.06409454 -140.52890015]
[71.39022827 -133.97529602]
[76.24943542 -119.55854034]
[69.28504944 -105.62530518]
[73.87590790 -91.34510803]
[78.46676636 -77.06491089]
[80.74732208 -76.02793884]
[82.77987671 -74.06629944]
[84.23158264 -71.26286316]
[84.80263519 -67.81147003]
[84.26119995 -64.00346375]
[82.47317505 -60.20384979]
[84.79664612 -45.38489151]
[87.12011719 -30.56593513]
[89.44359589 -15.74697876]
[91.76706696 -0.92802221]
[101.38240814 10.44714355]
[95.87612152 25.27924728]
[98.19959259 40.09820557]
[100.52306366 54.91716003]
[102.84653473 69.73611450]
[105.17000580 84.55507660]
[116.04949188 97.22719574]
[110.05235291 112.81502533]
[112.83557129 127.55455780]
[115.61878967 142.29408264]
[118.40200806 157.03361511]
[132.80287170 162.18746948]
[142.62564087 173.78100586]
[145.30868530 188.63589478]
[140.22998047 202.74485779]
[128.84771729 212.35264587]
[131.63093567 227.09217834]
[134.41415405 241.83169556]
[137.19735718 256.57122803]
[139.98057556 271.31076050]
[151.10244751 276.07434082]
[158.40237427 285.57095337]
[160.11071777 297.30429077]
[155.90838623 308.26220703]
[146.97859192 315.68972778]
[148.84007263 330.57379150]
[150.70155334 345.45782471]
[152.56303406 360.34188843]
[165.79423523 368.67669678]
[170.52316284 383.58212280]
[164.51693726 398.02023315]
[150.61154175 405.17382812]
[135.37266541 401.66519165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[8 87]
[9 86]
[10 85]
[11 84]
[12 83]
[17 78]
[18 77]
[19 76]
[20 75]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 57]
[35 56]
[36 55]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
