%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCGCGCCCACUCUGGGUAAAUUUCAGGAGGGCCUACGCGGGGCUGGAGAACUCCACCGGGCUAUGCGAACAGAAUCCUGCGAAGAGGAUGGCAUUCCCUGUGGAUAUGCUGGAAAAUUGCAGCCAUGAGGAAUUGGAAAAUUCUGCUGAAGAUUACAUGUCAGAUUUAAGGUGUGGGGACCCUGAAA\
) } def
/len { sequence length } bind def

/coor [
[128.38908386 556.47961426]
[129.31346130 541.34948730]
[135.35975647 527.44915771]
[145.79785156 516.45727539]
[159.36727905 509.70104980]
[157.65298462 494.79934692]
[155.93867493 479.89761353]
[154.22436523 464.99591064]
[152.51007080 450.09420776]
[150.79576111 435.19247437]
[149.08145142 420.29077148]
[133.32246399 412.34854126]
[125.40512848 396.40151978]
[128.66168213 378.73788452]
[141.97612000 366.44964600]
[139.77517700 351.61199951]
[137.57421875 336.77435303]
[135.37326050 321.93670654]
[133.17230225 307.09906006]
[130.60786438 292.31988525]
[127.68151855 277.60809326]
[124.75515747 262.89633179]
[121.82880402 248.18455505]
[111.75720978 237.21130371]
[116.65355682 222.16682434]
[113.72720337 207.45504761]
[110.80084991 192.74327087]
[107.87449646 178.03147888]
[104.94813538 163.31970215]
[102.02178192 148.60792542]
[87.23191833 146.94458008]
[73.63700104 140.88777161]
[62.50934982 131.00434875]
[54.89039230 118.21926117]
[40.28223801 121.62540436]
[25.67408371 125.03154755]
[11.06593037 128.43769836]
[-3.54222465 131.84384155]
[-13.20099354 144.65351868]
[-29.24140549 144.94462585]
[-39.35862732 132.49388123]
[-35.79159546 116.85239410]
[-21.27662849 110.01900482]
[-6.94836855 117.23568726]
[7.65978575 113.82953644]
[22.26794052 110.42339325]
[36.87609482 107.01725006]
[51.48424911 103.61110687]
[51.42287827 97.33892822]
[52.16901016 91.11098480]
[53.71024704 85.03080750]
[56.02096176 79.19946289]
[59.06274796 73.71389008]
[62.78504181 68.66527557]
[67.12596130 64.13754272]
[72.01335907 60.20595551]
[65.37902832 46.75286484]
[58.74469757 33.29977417]
[52.11036682 19.84668159]
[45.47603607 6.39359093]
[32.43300247 -2.56128716]
[33.74324799 -17.39815140]
[27.10891724 -30.85124207]
[20.47458839 -44.30433273]
[8.52523804 -49.18771362]
[3.28010988 -60.54245377]
[7.05917597 -72.04416656]
[0.64584953 -85.60400391]
[-5.76747704 -99.16384125]
[-12.18080330 -112.72367859]
[-19.04956245 -113.32062531]
[-25.34671974 -115.99885559]
[-30.46338654 -120.46463013]
[-33.91567230 -126.25312042]
[-35.39038086 -132.77670288]
[-34.77319336 -139.38452148]
[-32.15689087 -145.42742920]
[-27.82905197 -150.32174683]
[-32.88240051 -164.44491577]
[-37.93574524 -178.56806946]
[-42.98909378 -192.69123840]
[-48.04244232 -206.81439209]
[-62.43471146 -213.34417725]
[-67.91604614 -228.16749573]
[-61.23446274 -242.48991394]
[-46.35402679 -247.81422424]
[-32.10303879 -240.98158264]
[-26.93635750 -226.04570007]
[-33.91928101 -211.86773682]
[-28.86593437 -197.74458313]
[-23.81258583 -183.62141418]
[-18.75923729 -169.49826050]
[-13.70589066 -155.37509155]
[5.58415651 -142.61448669]
[1.37903607 -119.13700867]
[7.79236269 -105.57717133]
[14.20568848 -92.01732635]
[20.61901474 -78.45748901]
[35.56433105 -69.27249146]
[33.92767715 -50.93866348]
[40.56200790 -37.48557281]
[47.19633865 -24.03248024]
[59.76484299 -16.03985786]
[58.92912674 -0.24073954]
[65.56346130 13.21235180]
[72.19779205 26.66544342]
[78.83212280 40.11853409]
[85.46644592 53.57162476]
[95.73837280 49.51689911]
[107.08618164 47.80345154]
[118.96218872 48.70458603]
[130.75196838 52.36290741]
[141.18360901 41.58418274]
[151.61524963 30.80545807]
[162.04689026 20.02673340]
[159.23651123 4.76628256]
[165.96307373 -9.21702290]
[179.64010620 -16.54631615]
[195.00849915 -14.40333652]
[206.15878296 -3.61210036]
[208.80345154 11.67793941]
[201.92558289 25.58745193]
[188.16984558 32.76794434]
[172.82562256 30.45837212]
[162.39398193 41.23709869]
[151.96234131 52.01581955]
[141.53070068 62.79454422]
[144.84786987 69.52108765]
[155.59252930 59.05436707]
[168.86715698 66.03891754]
[166.32637024 80.82216644]
[151.48219299 82.97418213]
[154.79936218 89.70072937]
[169.70108032 87.98641968]
[184.60279846 86.27211761]
[199.50450134 84.55781555]
[214.40621948 82.84351349]
[229.30793762 81.12920380]
[242.15036011 70.93096161]
[257.30206299 77.20455170]
[259.17626953 93.49624634]
[245.84497070 103.04654694]
[231.02224731 96.03092194]
[216.12052917 97.74522400]
[201.21881104 99.45953369]
[186.31709290 101.17383575]
[171.41537476 102.88813782]
[156.51365662 104.60244751]
[141.91921997 131.89784241]
[116.73356628 145.68156433]
[119.65991974 160.39335632]
[122.58627319 175.10513306]
[125.51262665 189.81690979]
[128.43898010 204.52868652]
[131.36534119 219.24046326]
[141.64624023 231.26600647]
[136.54058838 245.25819397]
[139.46693420 259.96997070]
[142.39329529 274.68176270]
[145.31965637 289.39352417]
[148.78512573 293.33993530]
[150.23426819 297.77822876]
[149.81903076 301.85394287]
[148.00994873 304.89810181]
[150.21090698 319.73574829]
[152.41186523 334.57339478]
[154.61282349 349.41104126]
[156.81378174 364.24868774]
[168.57815552 368.52969360]
[177.35060120 377.35964966]
[181.50607300 389.01568604]
[180.31205750 401.25997925]
[174.05685425 411.76943970]
[163.98316956 418.57644653]
[165.69747925 433.47817993]
[167.41178894 448.37988281]
[169.12608337 463.28161621]
[170.84039307 478.18331909]
[172.55470276 493.08505249]
[174.26899719 507.98675537]
[189.01814270 511.48516846]
[201.67955017 519.81970215]
[210.72433472 531.98388672]
[215.06025696 546.50891113]
[214.16375732 561.64074707]
[208.14309692 575.55212402]
[197.72528076 586.56323242]
[184.16831970 593.34448242]
[169.10928345 595.07684326]
[154.36662292 591.55126953]
[141.72058105 583.19342041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 180]
[6 179]
[7 178]
[8 177]
[9 176]
[10 175]
[11 174]
[15 168]
[16 167]
[17 166]
[18 165]
[19 164]
[20 160]
[21 159]
[22 158]
[23 157]
[25 155]
[26 154]
[27 153]
[28 152]
[29 151]
[30 150]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[62 102]
[63 101]
[64 100]
[67 98]
[68 97]
[69 96]
[70 95]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[112 127]
[113 126]
[114 125]
[115 124]
[133 148]
[134 147]
[135 146]
[136 145]
[137 144]
[138 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
