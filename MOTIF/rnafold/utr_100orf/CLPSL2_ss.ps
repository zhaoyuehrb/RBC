%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCUGCUCUGCCGCCCAGGCCCAUGGCCGCAGCCCUGGCGCUCGUGGCGGGGGUCCUGUCGGGGGCGGUGCUGCCCCUCUGGAGCGCGCUUCCGCAAUAUAAAAAGAAAAUCACAGACAGGU\
) } def
/len { sequence length } bind def

/coor [
[11.00035763 138.99719238]
[4.62705564 143.19104004]
[-2.58226752 145.61904907]
[-10.14993191 146.13226318]
[-17.57752419 144.70814514]
[-24.37872887 141.45144653]
[-30.11116600 136.58647156]
[-34.40515900 130.44174194]
[-36.98757553 123.42780304]
[-51.98291397 123.05384064]
[-66.97824860 122.67988586]
[-81.97358704 122.30592346]
[-96.96892548 121.93196106]
[-111.96426392 121.55799866]
[-126.95960236 121.18404388]
[-141.95494080 120.81008148]
[-156.95027161 120.43611908]
[-164.48709106 128.46907043]
[-175.00010681 130.91638184]
[-184.89604187 127.19321442]
[-190.93081665 118.78193665]
[-205.88887024 117.66098785]
[-220.84692383 116.54003906]
[-235.81779480 115.60564423]
[-250.79914856 114.85795593]
[-265.78048706 114.11026764]
[-279.94918823 121.15007019]
[-292.27496338 112.78798676]
[-307.25631714 112.04029846]
[-322.23767090 111.29261017]
[-336.57601929 119.25149536]
[-350.49664307 110.58270264]
[-349.67922974 94.20394135]
[-334.96463013 86.96427917]
[-321.48999023 96.31125641]
[-306.50863647 97.05894470]
[-291.52728271 97.80663300]
[-278.43014526 90.71334839]
[-265.03280640 99.12891388]
[-250.05145264 99.87660217]
[-235.07009888 100.62429047]
[-228.15707397 97.78430939]
[-219.72596741 101.58197784]
[-204.76791382 102.70293427]
[-189.80986023 103.82388306]
[-173.16336060 94.11372375]
[-156.57630920 105.44078064]
[-141.58097839 105.81474304]
[-126.58563995 106.18870544]
[-111.59030151 106.56266022]
[-96.59496307 106.93662262]
[-81.59962463 107.31058502]
[-66.60428619 107.68454742]
[-51.60895157 108.05850220]
[-36.61361313 108.43246460]
[-22.15527534 90.47277832]
[1.07031739 88.53860474]
[18.67336464 104.19113922]
[33.44548035 101.58641815]
[48.21759796 98.98168945]
[62.98971176 96.37696838]
[77.76183319 93.77224731]
[92.53394318 91.16752625]
[106.04847717 84.65927124]
[117.29519653 74.73397827]
[128.54191589 64.80869293]
[139.78863525 54.88340378]
[151.03535461 44.95811844]
[162.28207397 35.03282928]
[173.52879333 25.10754204]
[177.95643616 16.98955917]
[185.18183899 15.07928276]
[196.67250061 5.43746853]
[208.16316223 -4.20434570]
[219.65383911 -13.84615993]
[224.28250122 -21.85123444]
[231.55326843 -23.58078384]
[243.28074646 -32.93313217]
[246.49859619 -48.65015793]
[260.85781860 -55.80507278]
[275.34320068 -48.90923309]
[278.84286499 -33.25253677]
[268.67208862 -20.84546661]
[252.63308716 -21.20565987]
[240.90562439 -11.85331154]
[229.29565430 -2.35549331]
[217.80497742 7.28632069]
[206.31431580 16.92813492]
[194.82365417 26.56994820]
[183.45407104 36.35425949]
[172.20735168 46.27954865]
[160.96063232 56.20483398]
[149.71391296 66.13011932]
[138.46720886 76.05541229]
[127.22048187 85.98069763]
[115.97377014 95.90598297]
[130.60212708 92.58769226]
[145.23048401 89.26939392]
[158.65670776 82.58084106]
[173.62525940 83.55156708]
[186.07513428 91.91821289]
[192.62861633 105.41087341]
[191.50772095 120.36893463]
[183.01655579 132.73422241]
[169.45881653 139.15196228]
[154.51275635 137.88102722]
[142.23315430 129.26602173]
[128.26274109 123.80455017]
[114.29233551 118.34307098]
[123.93415070 129.83374023]
[138.74711609 138.08070374]
[134.92308044 154.59776306]
[117.99291992 155.49554443]
[112.44348907 139.47555542]
[102.80167389 127.98488617]
[97.77959442 122.90506744]
[94.82903290 117.13693237]
[93.98767853 111.28620911]
[95.13867188 105.93963623]
[80.36655426 108.54436493]
[65.59443665 111.14908600]
[50.82231903 113.75380707]
[36.05020142 116.35852814]
[21.27808762 118.96325684]
[19.61843872 126.47801971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[21 45]
[22 44]
[23 43]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[72 89]
[73 88]
[74 87]
[75 86]
[77 85]
[78 84]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
