%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUAAAUACGCGGCGCCGGCGAGUGCGUCGAGCUCGCCGCGGACUCAAGAUGGCGGCGUGUGGACGUGUACGGAGGAUGUUCCGCUUGUCGGCGGCGCUGCAUCUGCUGCUGCUAUUCGCGGCCGGGGCCGAGAAACUCCCCGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[74.18480682 173.55809021]
[59.19676590 172.95932007]
[45.50320816 166.83670044]
[35.06315231 156.06613159]
[29.37017059 142.18846130]
[29.23870277 127.18903351]
[34.68756104 113.21369934]
[44.93722153 102.26177979]
[58.52135468 95.90007782]
[73.49660492 95.03869629]
[87.72212982 99.80174255]
[76.42312622 89.93601990]
[65.12412262 80.07029724]
[49.63996887 76.82197571]
[45.14187241 62.62280655]
[33.84286880 52.75708389]
[22.54386330 42.89135742]
[11.24485970 33.02563477]
[-0.05414549 23.15991211]
[-11.35315037 13.29419041]
[-22.65215492 3.42846680]
[-33.95116043 -6.43725634]
[-45.25016403 -16.30297852]
[-56.54916763 -26.16870308]
[-73.22640228 -15.64361382]
[-98.41630554 -24.26966095]
[-112.31886292 -29.90161705]
[-126.22142029 -35.53357315]
[-140.12397766 -41.16553116]
[-154.02653503 -46.79748917]
[-166.22924805 -42.49078369]
[-177.71653748 -47.51681900]
[-182.51612854 -58.66452026]
[-196.29852295 -64.58448029]
[-212.03210449 -62.92168808]
[-220.67260742 -75.05391693]
[-234.45498657 -80.97387695]
[-248.23736572 -86.89383698]
[-262.01974487 -92.81380463]
[-275.80212402 -98.73376465]
[-289.58450317 -104.65373230]
[-301.06274414 -94.59324646]
[-315.77160645 -90.51754761]
[-330.79071045 -93.23587036]
[-343.13800049 -102.20848846]
[-350.36184692 -115.65387726]
[-351.02801514 -130.90245056]
[-345.00421143 -144.92658997]
[-333.48648071 -154.94180298]
[-318.76162720 -158.95953369]
[-303.75335693 -156.18209839]
[-291.44152832 -147.16091919]
[-284.27066040 -133.68719482]
[-283.66455078 -118.43611145]
[-269.88217163 -112.51615143]
[-256.09979248 -106.59618378]
[-242.31741333 -100.67622375]
[-228.53501892 -94.75625610]
[-214.75263977 -88.83629608]
[-200.00486755 -90.92252350]
[-190.37855530 -78.36685944]
[-176.59617615 -72.44689941]
[-159.33795166 -75.47239685]
[-148.39457703 -60.70004272]
[-134.49201965 -55.06808853]
[-120.58946228 -49.43613052]
[-106.68690491 -43.80417252]
[-92.78434753 -38.17221832]
[-86.31532288 -41.96717072]
[-86.41966248 -56.96680832]
[-73.37726593 -49.55707932]
[-66.90824127 -53.35203171]
[-65.04062653 -68.23531342]
[-63.17301178 -83.11859131]
[-61.30540085 -98.00186920]
[-59.43778610 -112.88515472]
[-66.30045319 -127.77930450]
[-56.61342621 -141.01159668]
[-40.34188843 -138.96978760]
[-34.22460175 -123.75430298]
[-44.55450439 -111.01753998]
[-46.42211914 -96.13426208]
[-48.28973389 -81.25097656]
[-50.15734482 -66.36769867]
[-52.02495956 -51.48442078]
[-46.68344498 -37.46770859]
[-35.38444138 -27.60198402]
[-24.08543587 -17.73626137]
[-12.78643227 -7.87053776]
[-1.48742723 1.99518514]
[9.81157780 11.86090851]
[21.11058235 21.72663116]
[32.40958786 31.59235382]
[43.70859146 41.45807648]
[55.00759506 51.32379913]
[69.68357086 53.86646271]
[74.98984528 68.77129364]
[86.28884888 78.63701630]
[97.58785248 88.50273895]
[105.18314362 80.01203156]
[119.35716248 77.67207336]
[134.29147339 76.26976776]
[141.00665283 61.19379807]
[154.32101440 51.60092163]
[170.56097412 50.02173615]
[185.30380249 56.79158401]
[194.58213806 69.98491669]
[209.48403931 68.27222443]
[222.32757568 58.07537460]
[237.47859192 64.35060883]
[239.35104370 80.64250946]
[226.01869202 90.19136047]
[211.19673157 83.17412567]
[196.29483032 84.88681793]
[191.68159485 97.77780151]
[181.90759277 107.46015930]
[168.84848022 111.99524689]
[155.04534912 110.44001007]
[143.21035767 103.04244232]
[135.69377136 91.20407867]
[120.75946045 92.60638428]
[114.98319244 106.44960022]
[124.49154663 118.05094147]
[133.99990845 129.65228271]
[143.50827026 141.25361633]
[153.01663208 152.85496521]
[162.52497864 164.45629883]
[172.03334045 176.05764771]
[181.54170227 187.65898132]
[196.68385315 185.08781433]
[211.07733154 190.44721985]
[220.85037231 202.29556274]
[223.37408447 217.44569397]
[217.96957397 231.82229614]
[206.09066772 241.55815125]
[190.93269348 244.03436279]
[176.57308960 238.58482361]
[166.87452698 226.67544556]
[164.44584656 211.50979614]
[169.94035339 197.16734314]
[160.43200684 185.56600952]
[150.92364502 173.96466064]
[141.41528320 162.36332703]
[131.90692139 150.76197815]
[122.39856720 139.16064453]
[112.89020538 127.55930328]
[103.38185120 115.95796204]
[107.69852448 130.32341003]
[106.37096405 145.26455688]
[99.58908844 158.64387512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 99]
[12 98]
[13 97]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[33 62]
[34 61]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[101 121]
[102 120]
[107 114]
[108 113]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[128 141]
[129 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
