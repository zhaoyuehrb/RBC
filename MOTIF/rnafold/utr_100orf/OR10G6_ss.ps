%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUAGAGGGUGUUGAGCAUCUCCUUCUGCUACUUCUUUUGACAGAUGUGAACAGCAAGGAACUGCAAAGUGGAAACCAGACUUCUGUGUCUCACUUCA\
) } def
/len { sequence length } bind def

/coor [
[61.71636963 117.42021942]
[58.65538788 115.35009766]
[43.74419022 116.97987366]
[28.83299255 118.60965729]
[13.92179394 120.23944092]
[-0.98940331 121.86922455]
[-15.90060043 123.49900818]
[-30.81179810 125.12878418]
[-45.72299576 126.75856781]
[-60.63419342 128.38835144]
[-75.54538727 130.01812744]
[-88.42318726 139.20904541]
[-101.91578674 132.90040588]
[-116.82698822 134.53018188]
[-122.61853027 138.28213501]
[-128.52601624 138.38891602]
[-132.71183777 135.76791382]
[-147.69551086 136.46752930]
[-162.67918396 137.16712952]
[-177.66285706 137.86672974]
[-186.07530212 150.90554810]
[-200.55725098 156.47804260]
[-215.54010010 152.44149780]
[-225.26264954 140.34803772]
[-225.98637390 124.84785461]
[-217.43298340 111.90107727]
[-202.89143372 106.48600006]
[-187.95324707 110.68484497]
[-178.36247253 122.88305664]
[-163.37878418 122.18344879]
[-148.39511108 121.48384857]
[-133.41143799 120.78424072]
[-118.45676422 119.61898041]
[-103.54557037 117.98920441]
[-91.73432159 108.91486359]
[-77.17517090 115.10693359]
[-62.26397705 113.47715759]
[-47.35277939 111.84737396]
[-32.44158173 110.21759033]
[-17.53038216 108.58780670]
[-2.61918545 106.95802307]
[12.29201221 105.32824707]
[27.20320892 103.69846344]
[42.11440659 102.06867981]
[57.02560425 100.43889618]
[71.84455872 98.11542511]
[86.53902435 95.10331726]
[97.12364960 85.96781921]
[110.44886780 90.20221710]
[125.14333344 87.19011688]
[139.83779907 84.17800903]
[154.53225708 81.16590118]
[169.07023621 77.47171783]
[183.42010498 73.10350037]
[197.76997375 68.73527527]
[212.11984253 64.36705780]
[219.57485962 58.77997971]
[226.98429871 60.09362030]
[241.46307373 56.17378998]
[255.94184875 52.25396347]
[260.91802979 42.33208847]
[270.39114380 36.98506927]
[281.01473999 37.81779480]
[289.19122314 44.30018616]
[303.88568115 41.28808212]
[318.58013916 38.27597427]
[321.99856567 34.96764755]
[325.92239380 33.21676254]
[329.75894165 32.98063278]
[332.99917603 34.01493454]
[335.28030396 35.92303467]
[350.23498535 34.75777817]
[363.44366455 25.03860283]
[378.35446167 31.86503220]
[379.62841797 48.21462250]
[365.95498657 57.26831436]
[351.40023804 49.71244812]
[336.44555664 50.87770844]
[321.59225464 52.97043610]
[306.89779663 55.98254395]
[292.20333862 58.99464798]
[278.92654419 72.90650177]
[259.86166382 66.73273468]
[245.38290405 70.65256500]
[230.90412903 74.57239532]
[216.48806763 78.71691895]
[202.13819885 83.08514404]
[187.78833008 87.45336151]
[173.43846130 91.82158661]
[171.43879700 94.92905426]
[167.74543762 97.14575958]
[162.83251953 97.64437866]
[157.54435730 95.86036682]
[142.84989929 98.87246704]
[128.15544128 101.88457489]
[113.46097565 104.89668274]
[102.87635040 114.03218079]
[89.55113220 109.79778290]
[74.85666656 112.80988312]
[70.69687653 116.53056335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 45]
[3 44]
[4 43]
[5 42]
[6 41]
[7 40]
[8 39]
[9 38]
[10 37]
[11 36]
[13 34]
[14 33]
[17 32]
[18 31]
[19 30]
[20 29]
[46 99]
[47 98]
[49 96]
[50 95]
[51 94]
[52 93]
[53 89]
[54 88]
[55 87]
[56 86]
[58 85]
[59 84]
[60 83]
[64 81]
[65 80]
[66 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
