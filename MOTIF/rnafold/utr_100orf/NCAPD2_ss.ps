%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:36:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCGCGGGUGAGAUCCCCAGCCCUGUGAGCCUGUAGGAGUAGAAUGGCUCCCCAAAUGUAUGAGUUCCAUCUGCCAUUAUCCCCAGAGGAGUUGUUGAAAAGUGGAGGGGUGAAUCAGUAUGUUGUGCAAGAGGUACUGUCCA\
) } def
/len { sequence length } bind def

/coor [
[40.63016510 192.49526978]
[30.19492722 203.27050781]
[26.43642616 211.67539978]
[19.41968727 214.16151428]
[8.75656796 224.71128845]
[-1.79321373 235.37440491]
[-12.22845173 246.14964294]
[-22.66369057 256.92489624]
[-32.98319244 267.81103516]
[-43.18578339 278.80679321]
[-53.38837433 289.80258179]
[-63.59096909 300.79833984]
[-58.98724365 315.45104980]
[-62.34230804 330.43899536]
[-72.75366211 341.73056030]
[-87.42071533 346.28833008]
[-102.39808655 342.88632202]
[-113.65695190 332.43960571]
[-118.16873169 317.75836182]
[-114.71977234 302.79171753]
[-104.23783112 291.56564331]
[-89.54249573 287.09991455]
[-74.58674622 290.59576416]
[-64.38415527 279.59997559]
[-54.18156433 268.60421753]
[-43.97897339 257.60842896]
[-41.71904373 250.51560974]
[-33.43893051 246.48965454]
[-23.00369263 235.71441650]
[-12.56845379 224.93916321]
[-10.15746975 217.89627075]
[-1.79321373 214.04817200]
[8.86990547 203.49838257]
[19.41968727 192.83526611]
[29.85492516 182.06002808]
[27.85113144 169.28997803]
[33.67492294 157.53189087]
[45.39036179 151.20150757]
[58.80441284 152.82037354]
[69.46752930 142.27059937]
[80.13065338 131.72082520]
[72.02142334 124.03807831]
[66.64508820 114.43257141]
[64.40431976 103.82176208]
[65.40749359 93.18705750]
[69.46740723 83.48310852]
[76.12683868 75.55210876]
[84.70805359 70.05081940]
[94.38081360 67.39659882]
[104.24237823 67.73686981]
[109.57298279 53.71599960]
[114.90357971 39.69513321]
[120.23417664 25.67426682]
[125.56478119 11.65340042]
[130.74525452 -2.42362595]
[135.77500916 -16.55520439]
[140.80477905 -30.68678284]
[129.97090149 -43.13301468]
[126.88913727 -59.24829865]
[132.30412292 -74.63703918]
[144.65592957 -85.14997864]
[160.52792358 -88.00289917]
[165.25454712 -102.23873901]
[158.42314148 -116.23765564]
[163.41940308 -130.60748291]
[176.80734253 -137.03390503]
[181.53396606 -151.26974487]
[186.26058960 -165.50558472]
[190.98721313 -179.74142456]
[195.71383667 -193.97724915]
[200.44046021 -208.21308899]
[200.17999268 -217.41639709]
[205.42318726 -222.70074463]
[210.45294189 -236.83232117]
[215.48271179 -250.96389771]
[220.51246643 -265.09548950]
[210.49543762 -276.73828125]
[207.65759277 -291.83273315]
[212.76231384 -306.31848145]
[224.43646240 -316.29898071]
[239.53971863 -319.08947754]
[254.00941467 -313.93939209]
[263.95324707 -302.23400879]
[266.69641113 -287.12207031]
[261.50097656 -272.66860962]
[249.76451111 -262.76150513]
[234.64404297 -260.06573486]
[229.61428833 -245.93414307]
[224.58451843 -231.80256653]
[219.55476379 -217.67098999]
[214.67628479 -203.48646545]
[209.94967651 -189.25062561]
[205.22305298 -175.01480103]
[200.49642944 -160.77896118]
[195.76980591 -146.54312134]
[191.04318237 -132.30728149]
[197.92872620 -119.14959717]
[193.33805847 -104.64510345]
[179.49038696 -97.51211548]
[174.76376343 -83.27627563]
[184.51206970 -73.65753937]
[189.17314148 -60.70977783]
[187.77902222 -46.95275116]
[180.54617310 -35.09007263]
[168.84407043 -27.47789955]
[154.93635559 -25.65702248]
[149.90660095 -11.52544403]
[144.87683105 2.60613418]
[145.60226440 10.01485252]
[139.58564758 16.98400116]
[134.25505066 31.00486755]
[128.92445374 45.02573395]
[123.59384918 59.04660034]
[118.26324463 73.06746674]
[128.38832092 82.17852783]
[134.12812805 94.97211456]
[134.20750427 109.39537811]
[128.28981018 122.98793030]
[117.08842468 133.30145264]
[126.81185150 144.72314453]
[136.53527832 156.14483643]
[146.25869751 167.56652832]
[155.98213196 178.98822021]
[165.70555115 190.40991211]
[180.54275513 195.90245056]
[182.90139771 210.60911560]
[192.62481689 222.03080750]
[208.39646912 223.04606628]
[218.76791382 234.97119141]
[217.58596802 250.73121643]
[205.55186462 260.97601318]
[189.80520630 259.62750244]
[179.68821716 247.48574829]
[181.20312500 231.75424194]
[171.47970581 220.33255005]
[157.33799744 215.65695190]
[154.28385925 200.13333130]
[144.56044006 188.71163940]
[134.83700562 177.28994751]
[125.11358643 165.86825562]
[115.39015961 154.44657898]
[105.66673279 143.02488708]
[90.68043518 142.38394165]
[80.01731110 152.93371582]
[69.35419464 163.48350525]
[69.60048676 180.94125366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[4 33]
[5 32]
[6 30]
[7 29]
[8 28]
[9 26]
[10 25]
[11 24]
[12 23]
[39 145]
[40 144]
[41 143]
[50 114]
[51 113]
[52 112]
[53 111]
[54 110]
[55 108]
[56 107]
[57 106]
[62 100]
[63 99]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[73 90]
[74 89]
[75 88]
[76 87]
[119 142]
[120 141]
[121 140]
[122 139]
[123 138]
[124 137]
[126 135]
[127 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
