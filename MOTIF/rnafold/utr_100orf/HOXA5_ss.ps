%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGCUAUAGACGCACAAACGACCGCGAGCCACAAAUCAAGCACACAUAUCAAAAAACAAAUGAGCUCUUAUUUUGUAAACUCAUUUUGCGGUCGCUAUCCAAAUGGCCCGGACUACCAGUUGCAUAAUUAUGGAGAUCAUAGUUCCGUGAGCGAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[125.94757080 126.85076904]
[113.57744598 118.36666107]
[99.20760345 122.66870880]
[93.53460693 136.55456543]
[87.86161041 150.44042969]
[82.18861389 164.32629395]
[89.63600159 178.07658386]
[86.45188141 193.38655090]
[74.13970947 203.02731323]
[58.51290131 202.44679260]
[46.94997025 191.91909790]
[44.91057205 176.41506958]
[53.35764694 163.25524902]
[68.30274963 158.65328979]
[73.97574615 144.76742554]
[79.64875031 130.88157654]
[85.32174683 116.99571228]
[82.27015686 111.55762482]
[80.99793243 105.81457520]
[81.42314148 100.30110168]
[83.31452179 95.48017883]
[86.32511139 91.70445251]
[74.83444214 82.06263733]
[63.34377670 72.42082214]
[51.85311127 62.77901077]
[40.36244583 53.13719559]
[28.87177849 43.49538040]
[17.38111115 33.85356903]
[5.89044428 24.21175385]
[-8.56011868 20.18916512]
[-23.37996674 22.50694656]
[-28.83696938 36.86371231]
[-40.75138855 46.55608749]
[-55.91830444 48.97687912]
[-70.25789642 43.47489929]
[-79.91287994 31.53015900]
[-82.28611755 16.35573006]
[-76.73921967 2.03345752]
[-64.76427460 -7.58403873]
[-49.58247757 -9.90970039]
[-35.27766037 -4.31793547]
[-25.69774818 7.68709850]
[-10.87790108 5.36931658]
[-6.81753445 -0.93650836]
[-20.93437767 -6.00747681]
[-35.05122375 -11.07844543]
[-49.16806412 -16.14941406]
[-64.05722809 -14.32927990]
[-77.97837830 -19.91510963]
[-87.47998810 -31.52198029]
[-90.20626831 -46.27214813]
[-85.48128510 -60.50852585]
[-74.47652435 -70.70143127]
[-59.92044830 -74.32367706]
[-45.42201614 -70.47718811]
[-34.57589340 -60.11563873]
[-30.07117081 -45.80724716]
[-19.61304855 -35.05421829]
[-9.15492535 -24.30118752]
[1.30319786 -13.54815769]
[5.36356401 -19.85398293]
[1.34097481 -34.30454636]
[-2.68161440 -48.75510788]
[-6.70420361 -63.20567322]
[-10.72679234 -77.65623474]
[-14.74938202 -92.10679626]
[-24.56799316 -96.92913818]
[-29.97638512 -106.18334961]
[-29.38341141 -116.66511536]
[-23.22923088 -124.89739227]
[-26.68846893 -139.49307251]
[-30.14770699 -154.08874512]
[-33.60694504 -168.68441772]
[-43.14306259 -182.70222473]
[-32.31293869 -195.74617004]
[-16.78066826 -188.95022583]
[-19.01127243 -172.14364624]
[-15.55203438 -157.54797363]
[-12.09279633 -142.95230103]
[-8.63355827 -128.35662842]
[5.64318752 -115.35835266]
[-0.29881880 -96.12938690]
[3.72377038 -81.67882538]
[7.74635935 -67.22826385]
[11.76894855 -52.77769852]
[15.79153824 -38.32713699]
[19.81412697 -23.87657166]
[15.53225899 12.72108650]
[27.02292442 22.36290169]
[38.51359177 32.00471497]
[50.00425720 41.64653015]
[61.49492645 51.28834152]
[72.98558807 60.93015671]
[84.47625732 70.57196808]
[95.96692657 80.21378326]
[110.96410370 79.92291260]
[122.07226562 69.84279633]
[133.18041992 59.76268005]
[144.28858948 49.68256378]
[155.39674377 39.60244370]
[159.88586426 23.82968521]
[175.85383606 20.09394836]
[186.87419128 32.23823929]
[181.61012268 47.76955414]
[165.47686768 50.71060562]
[154.36869812 60.79072189]
[143.26054382 70.87084198]
[132.15238953 80.95095825]
[121.04421997 91.03107452]
[122.06154633 105.99653625]
[134.43167114 114.48064423]
[149.17784119 117.22846985]
[163.77351379 113.76923370]
[175.32400513 102.12801361]
[191.10968018 106.57148743]
[194.89158630 122.52859497]
[182.77922058 133.58403015]
[167.23275757 128.36491394]
[152.63708496 131.82414246]
[154.07791138 140.80059814]
[151.43040466 148.33067322]
[162.34100342 158.62429810]
[173.25161743 168.91792297]
[184.16221619 179.21154785]
[195.07283020 189.50517273]
[209.75471497 185.21688843]
[224.51434326 188.82937622]
[235.41163635 199.27519226]
[239.58929443 213.67669678]
[236.02148438 228.13824463]
[246.93209839 238.43186951]
[257.84271240 248.72549438]
[268.75329590 259.01913452]
[279.66390991 269.31274414]
[290.57452393 279.60638428]
[301.48510742 289.89999390]
[312.39572144 300.19363403]
[327.90551758 298.19860840]
[341.04110718 306.68334961]
[345.60025024 321.64157104]
[339.43026733 336.01046753]
[325.44442749 343.00549316]
[310.24642944 339.32379150]
[301.01229858 326.70379639]
[302.10211182 311.10421753]
[291.19149780 300.81060791]
[280.28088379 290.51696777]
[269.37030029 280.22335815]
[258.45968628 269.92971802]
[247.54907227 259.63610840]
[236.63847351 249.34248352]
[225.72785950 239.04885864]
[211.49822998 243.45147705]
[196.87818909 240.11827087]
[185.81642151 229.84678650]
[181.35183716 215.32217407]
[184.77920532 200.41577148]
[173.86859131 190.12214661]
[162.95799255 179.82852173]
[152.04737854 169.53489685]
[141.13677979 159.24127197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 111]
[2 110]
[3 17]
[4 16]
[5 15]
[6 14]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 88]
[30 43]
[31 42]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[70 80]
[71 79]
[72 78]
[73 77]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
[112 119]
[113 118]
[121 161]
[122 160]
[123 159]
[124 158]
[125 157]
[130 152]
[131 151]
[132 150]
[133 149]
[134 148]
[135 147]
[136 146]
[137 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
