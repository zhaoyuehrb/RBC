%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGAGGGGACUGGGAACGGUGGGAGCCGCCGUGUGUGGAGAAGCUGCUGCCGGUGUCAUGGCGGAGCUGAGUGAGGAGGCGCUGCUGUCAGUAUUACCGACGAUCCGGGUCCCUAAGGCUGGAGACCGGGUCCACAAAGACGAGUGCGCCUUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[193.34178162 321.03958130]
[181.63960266 314.54995728]
[172.50151062 304.74368286]
[166.83322144 292.57192993]
[165.20289612 279.22140503]
[167.78433228 265.99847412]
[174.33843994 254.20146179]
[164.37466431 242.98883057]
[154.41087341 231.77621460]
[144.44708252 220.56358337]
[134.48329163 209.35096741]
[124.51950836 198.13833618]
[114.55572510 186.92570496]
[100.31790924 182.55148315]
[96.93480682 167.09622192]
[86.97101593 155.88360596]
[77.00723267 144.67097473]
[62.16958237 142.47001648]
[49.37998199 150.30749512]
[36.59037781 158.14497375]
[23.80077744 165.98245239]
[11.01117420 173.81993103]
[-1.77842844 181.65740967]
[-14.56803131 189.49488831]
[-24.91390800 202.92616272]
[-40.68430710 196.70275879]
[-39.06979370 179.82586670]
[-22.40550995 176.70529175]
[-9.61590672 168.86781311]
[3.17369556 161.03033447]
[15.96329784 153.19285583]
[28.75290108 145.35537720]
[41.54250336 137.51789856]
[54.33210373 129.68041992]
[54.77363586 122.19342804]
[39.79221725 122.93979645]
[26.93099785 130.65919495]
[12.72844124 125.83348846]
[7.23229742 111.87667847]
[14.33086967 98.66266632]
[29.00219917 95.53982544]
[40.86685181 104.71736145]
[55.65670013 107.21944427]
[56.09822845 99.73244476]
[44.31847382 90.44603729]
[32.53872299 81.15962982]
[20.75896835 71.87322235]
[12.03352928 68.99615479]
[8.84145927 62.28701782]
[-2.75369787 52.77111816]
[-14.34885502 43.25521851]
[-25.94401169 33.73931885]
[-37.53916931 24.22341919]
[-49.13432312 14.70751953]
[-64.83596802 16.50584221]
[-77.15816498 6.60943222]
[-78.79038239 -9.11034584]
[-68.76424408 -21.32722664]
[-53.02809143 -22.79314995]
[-40.91789627 -12.63841248]
[-39.61842728 3.11236310]
[-28.02326965 12.62826252]
[-16.42811203 22.14416122]
[-4.83295536 31.66006088]
[6.76220131 41.17596054]
[18.35735893 50.69186020]
[30.04537773 60.09346771]
[41.82513046 69.37987518]
[53.60488510 78.66628265]
[65.38463593 87.95269775]
[70.44085693 76.46314240]
[79.30052185 67.04254913]
[78.41745758 52.06856918]
[77.53439331 37.09458542]
[76.65133667 22.12059975]
[64.67250061 11.81123257]
[63.57533646 -3.95492697]
[74.01077271 -15.82409573]
[89.78765106 -16.75450706]
[101.54582977 -6.19416428]
[102.30938721 9.59166908]
[91.62532043 21.23753738]
[92.50838470 36.21152115]
[93.39144135 51.18550491]
[94.27450562 66.15949249]
[101.47258759 68.26605988]
[115.86874390 72.47920227]
[123.06682587 74.58576965]
[131.88360596 62.45051956]
[140.70037842 50.31526184]
[149.51716614 38.18000793]
[151.36909485 22.46756363]
[165.10960388 16.71885490]
[173.92637634 4.58360004]
[178.34480286 -11.78447628]
[195.29634094 -12.06986713]
[200.26322937 4.14020061]
[186.06163025 13.40037918]
[177.24485779 25.53563309]
[176.02355957 40.38008499]
[161.65242004 46.99678802]
[152.83563232 59.13204193]
[144.01885986 71.26729584]
[135.20208740 83.40254974]
[128.18898010 125.16163635]
[88.21985626 134.70718384]
[98.18363953 145.91981506]
[108.14743042 157.13244629]
[123.09792328 162.30867004]
[125.76834869 176.96192932]
[135.73213196 188.17454529]
[145.69592285 199.38717651]
[155.65971375 210.59979248]
[165.62348938 221.81242371]
[175.58728027 233.02505493]
[185.55107117 244.23767090]
[201.35792542 238.46980286]
[218.13208008 239.19175720]
[233.31848145 246.26551819]
[244.61470032 258.58764648]
[250.31990051 274.26141357]
[249.59103394 290.88861084]
[242.56718445 305.93664551]
[252.96350098 316.74945068]
[263.35980225 327.56225586]
[273.75610352 338.37506104]
[284.15243530 349.18786621]
[290.46640015 351.41549683]
[294.12307739 355.85098267]
[294.73425293 360.63522339]
[304.69805908 371.84786987]
[314.66183472 383.06048584]
[324.62561035 394.27310181]
[339.57611084 399.44934082]
[342.24655151 414.10260010]
[352.21032715 425.31521606]
[362.17410278 436.52783203]
[377.60269165 434.87295532]
[391.04058838 442.63195801]
[397.32067871 456.82141113]
[394.02810669 471.98513794]
[382.42895508 482.29238892]
[366.98333740 483.77981567]
[353.63040161 475.87548828]
[347.50463867 461.61874390]
[350.96148682 446.49163818]
[340.99771118 435.27899170]
[331.03390503 424.06637573]
[316.79608154 419.69216919]
[313.41299438 404.23690796]
[303.44921875 393.02426147]
[293.48541260 381.81164551]
[283.52163696 370.59902954]
[273.33963013 359.58419800]
[262.94329834 348.77139282]
[252.54699707 337.95858765]
[242.15069580 327.14578247]
[231.75437927 316.33297729]
[219.69052124 321.96237183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[15 108]
[16 107]
[17 106]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[44 70]
[45 69]
[46 68]
[47 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[72 85]
[73 84]
[74 83]
[75 82]
[88 104]
[89 103]
[90 102]
[91 101]
[93 99]
[94 98]
[123 158]
[124 157]
[125 156]
[126 155]
[127 154]
[130 153]
[131 152]
[132 151]
[133 150]
[135 148]
[136 147]
[137 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
