%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUGGCAUUCACACUCAGGAUCUUGCCUGAACAACAAACCAACUCACCACUCCUGACACCAUGAGUCACUACGGCAGCUACUACGGAGGCCUGGGCUACAGCUGUGGAGGCUUCGGUGGCCUGGGCUAUGGCUAUGGCUGUGGAUGUGGCAGCUUCUGCA\
) } def
/len { sequence length } bind def

/coor [
[78.05522919 262.03582764]
[90.04250336 252.32456970]
[88.30110931 237.42599487]
[86.55971527 222.52742004]
[84.81832123 207.62884521]
[75.65579224 195.88586426]
[81.73867035 181.28076172]
[79.99728394 166.38218689]
[78.25588989 151.48361206]
[71.34078979 148.57992554]
[65.72624207 162.48953247]
[59.72715378 176.23765564]
[45.89696503 170.43025208]
[51.51150894 156.52069092]
[57.51058578 142.77255249]
[50.59548569 139.86886597]
[38.73959351 149.05787659]
[26.88370514 158.24688721]
[15.02781487 167.43589783]
[3.17192507 176.62490845]
[1.43393552 192.33334351]
[-10.95459938 202.14659119]
[-26.64378166 200.24261475]
[-36.32549667 187.75102234]
[-34.25575638 172.08283997]
[-21.66250038 162.53373718]
[-6.01708317 164.76901245]
[5.83880711 155.58000183]
[17.69469643 146.39100647]
[29.55058670 137.20199585]
[41.40647888 128.01298523]
[41.55191040 120.51439667]
[26.74194527 122.89449310]
[11.93197727 125.27458954]
[-2.87799048 127.65468597]
[-17.68795776 130.03477478]
[-30.26871681 138.20329285]
[-45.25986099 138.71868896]
[-58.37192154 131.43350220]
[-65.85310364 118.43227386]
[-65.56278992 103.43508911]
[-57.58404541 90.73313141]
[-44.19986343 83.96086121]
[-29.23989868 85.05605316]
[-16.98338127 93.70693970]
[-2.27683973 96.65950775]
[12.42970085 99.61207581]
[27.13624191 102.56464386]
[41.84278107 105.51721191]
[41.98821640 98.01862335]
[30.49755096 88.37680817]
[19.00688362 78.73499298]
[7.51621723 69.09317780]
[-8.02876854 66.14971924]
[-12.80498409 52.04166794]
[-24.29565048 42.39985657]
[-40.53082275 40.08658981]
[-46.39316177 24.77107239]
[-35.85198975 12.20859623]
[-19.75116730 15.32235909]
[-14.65383625 30.90918732]
[-3.16316986 40.55100250]
[11.55992699 42.80482101]
[17.15803146 57.60251617]
[28.64869881 67.24433136]
[40.13936615 76.88614655]
[51.63003159 86.52795410]
[74.65061188 63.44486618]
[103.34909821 61.38705826]
[123.21517181 76.50265503]
[135.90496826 68.50459290]
[148.59477234 60.50652313]
[161.28456116 52.50845718]
[173.97436523 44.51039124]
[186.66415405 36.51232529]
[199.35395813 28.51425743]
[211.80575562 20.15049553]
[224.00903320 11.42811394]
[236.21232605 2.70573306]
[248.41560364 -6.01664782]
[260.61889648 -14.73902893]
[259.96905518 -21.70133781]
[261.51879883 -28.46690750]
[265.08084106 -34.36354065]
[270.26977539 -38.81580353]
[276.54339600 -41.40114594]
[283.25933838 -41.88985825]
[289.74069214 -40.26516724]
[295.34445190 -36.72164917]
[308.47784424 -43.96833801]
[321.61120605 -51.21502686]
[334.74456787 -58.46171570]
[347.87796021 -65.70840454]
[361.01132202 -72.95509338]
[374.14468384 -80.20178223]
[387.27807617 -87.44847107]
[400.41143799 -94.69515991]
[413.54483032 -101.94184875]
[426.67819214 -109.18853760]
[439.81155396 -116.43522644]
[452.72860718 -124.06082916]
[465.41842651 -132.05889893]
[478.10821533 -140.05696106]
[490.79800415 -148.05503845]
[495.73422241 -163.31980896]
[510.79660034 -168.84288025]
[524.43054199 -160.38742065]
[526.17730713 -144.43974304]
[514.69689941 -133.23353577]
[498.79608154 -135.36523438]
[486.10626221 -127.36717224]
[473.41647339 -119.36910248]
[460.72668457 -111.37103271]
[459.59982300 -107.98094940]
[456.74670410 -104.98174286]
[452.37564087 -103.19172668]
[447.05825806 -103.30185699]
[433.92489624 -96.05516815]
[420.79150391 -88.80847931]
[407.65814209 -81.56179047]
[394.52474976 -74.31510162]
[381.39138794 -67.06841278]
[368.25802612 -59.82172012]
[355.12463379 -52.57503128]
[341.99127197 -45.32834244]
[328.85787964 -38.08165359]
[315.72451782 -30.83496475]
[302.59115601 -23.58827591]
[293.19543457 -2.44178891]
[269.34127808 -2.53574800]
[257.13796997 6.18663311]
[244.93470764 14.90901375]
[232.73141479 23.63139534]
[220.52813721 32.35377502]
[219.60031128 35.80364609]
[216.92639160 38.96367645]
[212.66680908 41.00481796]
[207.35202026 41.20405197]
[194.66221619 49.20212173]
[181.97242737 57.20018768]
[169.28262329 65.19824982]
[156.59283447 73.19631958]
[143.90303040 81.19438934]
[131.21324158 89.19245148]
[136.44827271 113.17949677]
[123.00578308 138.07365417]
[93.15446472 149.74221802]
[94.89585876 164.64079285]
[96.63725281 179.53936768]
[105.92433167 192.34799194]
[99.71689606 205.88745117]
[101.45829010 220.78602600]
[103.19968414 235.68460083]
[104.94107819 250.58317566]
[118.84481049 257.26821899]
[126.90768433 270.42092896]
[126.55687714 285.84429932]
[117.90431976 298.61679077]
[103.71102142 304.66278076]
[88.50600433 302.05297852]
[77.14114380 291.62017822]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 154]
[3 153]
[4 152]
[5 151]
[7 149]
[8 148]
[9 147]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[50 67]
[51 66]
[52 65]
[53 64]
[55 62]
[56 61]
[70 144]
[71 143]
[72 142]
[73 141]
[74 140]
[75 139]
[76 138]
[77 134]
[78 133]
[79 132]
[80 131]
[81 130]
[89 128]
[90 127]
[91 126]
[92 125]
[93 124]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
