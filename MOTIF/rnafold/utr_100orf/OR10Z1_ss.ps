%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGCAGACCAACGUAACCUCCUGGAGGGAUUUUGUCUUCCUGGGCUUCUCCAGUUCUGGGGAGUUGCAGCUCCUUCUCUUUGCCUUGUUCCUCUCUC\
) } def
/len { sequence length } bind def

/coor [
[145.59191895 285.72836304]
[141.44740295 271.31231689]
[137.30287170 256.89624023]
[133.15834045 242.48017883]
[129.01382446 228.06411743]
[124.86929321 213.64805603]
[120.72476959 199.23199463]
[116.58023834 184.81591797]
[112.43571472 170.39985657]
[108.29119110 155.98379517]
[98.20514679 156.56596375]
[88.17630768 155.34555054]
[78.52424622 152.36145020]
[69.55655670 147.70875549]
[61.55899429 141.53575134]
[54.78642273 134.03912354]
[49.45466614 125.45777893]
[45.73362732 116.06517792]
[43.74188232 106.16063690]
[43.54290390 96.05976868]
[45.14302826 86.08446503]
[48.49127197 76.55260468]
[53.48093414 67.76793671]
[59.95300674 60.01040649]
[50.83701706 48.09828186]
[41.72102737 36.18615723]
[32.60503769 24.27403069]
[23.48904610 12.36190605]
[14.37305450 0.44978106]
[5.25706434 -11.46234417]
[-3.85892630 -23.37446785]
[-7.84209061 -24.70432091]
[-10.97064877 -26.94177055]
[-13.07315636 -29.73778725]
[-14.09889793 -32.72350693]
[-14.11465073 -35.54823685]
[-13.29026508 -37.91395187]
[-20.45106316 -51.09435272]
[-27.61186218 -64.27475739]
[-34.77265930 -77.45515442]
[-49.03243256 -85.55397797]
[-48.87794876 -101.95239258]
[-34.46812820 -109.78112793]
[-20.62655640 -100.98664093]
[-21.59225845 -84.61595154]
[-14.43146038 -71.43555450]
[-7.27066231 -58.25515366]
[-0.10986432 -45.07475281]
[8.05319881 -32.49045944]
[17.16918945 -20.57833481]
[26.28517914 -8.66620922]
[35.40116882 3.24591517]
[44.51716232 15.15804005]
[53.63315201 27.07016563]
[62.74914169 38.98228836]
[71.86513519 50.89441299]
[88.40071869 44.60698700]
[106.06967163 43.73199463]
[123.14556122 48.35493851]
[137.95989990 58.02410507]
[149.06518555 71.79473114]
[162.94558716 66.10840607]
[176.82598877 60.42207718]
[190.70640564 54.73575211]
[204.58680725 49.04942703]
[218.46722412 43.36309814]
[232.34762573 37.67677307]
[241.94784546 24.38137436]
[258.23239136 26.31666565]
[264.44912720 41.49179077]
[254.20278931 54.29587555]
[238.03395081 51.55718231]
[224.15354919 57.24350739]
[210.27313232 62.92983246]
[196.39273071 68.61615753]
[182.51232910 74.30248260]
[168.63191223 79.98880768]
[154.75151062 85.67514038]
[156.32530212 105.51267242]
[150.93513489 124.66863251]
[139.24743652 140.77459717]
[122.70725250 151.83926392]
[126.85177612 166.25534058]
[130.99630737 180.67140198]
[135.14082336 195.08746338]
[139.28535461 209.50352478]
[143.42988586 223.91958618]
[147.57440186 238.33566284]
[151.71893311 252.75172424]
[155.86346436 267.16778564]
[160.00798035 281.58386230]
[174.93237305 285.21127319]
[186.03247070 295.82653809]
[190.32240295 310.57412720]
[186.64820862 325.48709106]
[175.99822998 336.55383301]
[161.23724365 340.79754639]
[146.33589172 337.07659912]
[135.30255127 326.39199829]
[131.10514832 311.61776733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 91]
[2 90]
[3 89]
[4 88]
[5 87]
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[37 48]
[38 47]
[39 46]
[40 45]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
