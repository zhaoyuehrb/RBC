%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAGAGACUACAACUCCCAGUAUGCACCGCGAUGCGCGCCUCACCCUGCAUCUCCCAGCCCGCAGCCAGCUGGCAUCCUAGACCCUCUGCCCUGCGACCAACAGCCGGGAGCGGACCAGACACCAGAACUC\
) } def
/len { sequence length } bind def

/coor [
[43.22562790 273.84954834]
[36.08641434 287.04165649]
[28.94720459 300.23376465]
[27.59075546 309.36578369]
[21.48039055 313.65023804]
[14.03158855 326.67004395]
[6.58278799 339.68984985]
[12.15837765 354.29965210]
[6.98969793 369.05834961]
[-6.48275852 376.99728394]
[-21.89770889 374.36798096]
[-31.97668648 362.41189575]
[-31.96070671 346.77432251]
[-21.85731125 334.83883667]
[-6.43701887 332.24102783]
[1.01178241 319.22122192]
[8.46058369 306.20141602]
[15.75509834 293.09457397]
[22.89430809 279.90246582]
[30.03351974 266.71035767]
[35.40352631 252.70452881]
[38.91381836 238.12104797]
[34.36980057 223.93650818]
[45.12175751 212.33021545]
[48.63205338 197.74673462]
[40.66230774 185.21603394]
[44.01449585 170.37629700]
[57.21189499 162.10186768]
[60.72218704 147.51838684]
[64.23248291 132.93490601]
[67.74277496 118.35142517]
[61.23451996 104.83689117]
[47.64406586 98.48870087]
[34.05360794 92.14051056]
[20.46315575 85.79231262]
[6.87270069 79.44412231]
[-6.71775341 73.09593201]
[-19.25864792 81.96280670]
[-34.55428314 83.35532379]
[-48.49021149 76.89889526]
[-57.31773758 64.33026886]
[-58.66230011 49.03034210]
[-52.16222000 35.11471939]
[-39.56598663 26.32663345]
[-24.26192093 25.03003502]
[-10.36674118 31.57370377]
[-1.61818242 44.19742203]
[-0.36956114 59.50547791]
[13.22089291 65.85366821]
[26.81134796 72.20185852]
[40.40180206 78.55005646]
[53.99225616 84.89824677]
[67.58271027 91.24643707]
[73.95659637 87.29376984]
[62.49901199 77.61266327]
[68.16587830 63.72430038]
[83.12564087 64.82225037]
[86.70436096 79.38842773]
[93.07824707 75.43576050]
[93.43252563 60.43994141]
[93.78681183 45.44412613]
[86.37760925 31.46505737]
[94.41336060 18.92408180]
[94.76763916 3.92826653]
[84.77960968 -8.62636662]
[88.50807190 -24.23015213]
[103.09287262 -30.91320038]
[117.34580231 -23.54884911]
[120.33322906 -7.78639841]
[109.76345825 4.28254843]
[109.40917206 19.27836418]
[116.84371185 32.18482971]
[108.78262329 45.79840851]
[108.42834473 60.79422379]
[108.07406616 75.79003906]
[114.83132935 79.04416656]
[121.33979034 65.52973175]
[134.85412598 72.03840637]
[128.34585571 85.55242157]
[135.10313416 88.80654907]
[146.60644531 79.17982483]
[158.10974121 69.55310059]
[169.61305237 59.92637253]
[177.87945557 45.12424469]
[194.39147949 48.96995163]
[195.26704407 65.90127563]
[179.23977661 71.42967987]
[167.73648071 81.05640411]
[156.23316956 90.68313599]
[144.72985840 100.30986023]
[149.60034180 114.49711609]
[164.59092712 115.02848053]
[179.58151245 115.55984497]
[193.64710999 108.31625366]
[206.09231567 116.49954987]
[221.08290100 117.03091431]
[230.53614807 104.72580719]
[245.42625427 100.35953522]
[260.02767944 105.61103058]
[268.72586060 118.46098328]
[268.17617798 133.96832275]
[258.58999634 146.17015076]
[243.65341187 150.37463379]
[229.10981750 144.96505737]
[220.55154419 132.02149963]
[205.56095886 131.49014282]
[192.56758118 138.77172852]
[179.05015564 130.55043030]
[164.05957031 130.01907349]
[149.06898499 129.48770142]
[107.42715454 142.02870178]
[82.32625580 121.86171722]
[78.81596375 136.44519043]
[75.30566406 151.02867126]
[71.79537201 165.61215210]
[79.78203583 178.98567200]
[76.01435089 193.72538757]
[63.21553040 201.25703430]
[59.70523834 215.84051514]
[63.99817657 231.06816101]
[53.49729538 241.63133240]
[49.98700333 256.21481323]
[61.76300430 246.92364502]
[76.48055267 244.02645874]
[90.89945984 248.16110229]
[101.84526062 258.41729736]
[106.90814972 272.53704834]
[104.97348785 287.41174316]
[96.46720123 299.76663208]
[83.26203156 306.88165283]
[68.26520538 307.19036865]
[54.77841568 300.62481689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[5 17]
[6 16]
[7 15]
[21 122]
[22 121]
[24 119]
[25 118]
[28 115]
[29 114]
[30 113]
[31 112]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[59 75]
[60 74]
[61 73]
[63 71]
[64 70]
[80 90]
[81 89]
[82 88]
[83 87]
[91 110]
[92 109]
[93 108]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
