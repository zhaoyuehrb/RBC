%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUGGCAUCCUUCCCCUGGUGGGCCCAGCAAGAUGGAUCUACUGUGGAUCCUGCCCUCCCUGUGGCUUCUCCUGCUUGGGGGGCCUGCCUGCCUGAAGACCCAGGAACACCCCAGCUGCCCAGGACCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[49.47948837 370.31597900]
[52.13004684 385.24078369]
[49.51311111 400.17153931]
[41.94468689 413.30526733]
[30.33870125 423.05599976]
[16.09662819 428.24630737]
[0.93827063 428.24942017]
[-13.30592632 423.06494141]
[-24.91590691 413.31896973]
[-32.48970795 400.18835449]
[-35.11275864 385.25866699]
[-32.46831131 370.33276367]
[-24.87569618 357.21298218]
[-13.25175953 347.48367310]
[0.99985415 342.31961060]
[16.15819168 342.34445190]
[21.28849411 328.24905396]
[26.41879654 314.15368652]
[31.54909706 300.05828857]
[36.67940140 285.96289062]
[41.80970383 271.86752319]
[46.27865601 257.54870605]
[50.07658386 243.03746033]
[53.87451172 228.52622986]
[57.67243958 214.01501465]
[61.47036743 199.50378418]
[59.82436752 194.93148804]
[61.09906387 189.27444458]
[65.79734039 184.41383362]
[70.26629639 170.09501648]
[74.73525238 155.77619934]
[61.35390472 147.49496460]
[50.52511978 136.07670593]
[42.96413422 122.27558899]
[39.17034149 107.00318146]
[39.39432144 91.26821899]
[43.62128448 76.10998535]
[30.63090515 68.60998535]
[17.64052391 61.10998917]
[4.65014267 53.60998917]
[-8.34023857 46.10998917]
[-21.33061981 38.60998917]
[-34.32099915 31.10998917]
[-51.06126022 28.42670631]
[-53.11700821 11.59785461]
[-37.51492310 4.96375751]
[-26.82100105 18.11960793]
[-13.83061886 25.61960793]
[-0.84023827 33.11960602]
[12.15014267 40.61960602]
[25.14052391 48.11960602]
[38.13090515 55.61960602]
[51.12128448 63.11960602]
[73.15789032 44.96552658]
[101.03059387 38.77721024]
[103.11819458 23.92318916]
[105.20578766 9.06916904]
[107.29338837 -5.78485250]
[109.38098145 -20.63887405]
[111.46857452 -35.49289322]
[113.55617523 -50.34691620]
[104.31707764 -62.88792038]
[106.64579773 -77.92227173]
[118.65866852 -86.65305328]
[120.74626923 -101.50707245]
[122.83386230 -116.36109924]
[124.92145538 -131.21511841]
[115.21123505 -143.68455505]
[117.24517822 -159.35742188]
[129.81658936 -168.93527222]
[145.46707153 -166.73574829]
[154.91146851 -154.06376648]
[152.54660034 -138.43742371]
[139.77548218 -129.12751770]
[137.68788147 -114.27349854]
[135.60028076 -99.41947937]
[133.51269531 -84.56546021]
[142.65367126 -72.86169434]
[140.74815369 -57.76786804]
[128.41020203 -48.25931931]
[126.32260132 -33.40529633]
[124.23500061 -18.55127716]
[122.14740753 -3.69725585]
[120.05980682 11.15676498]
[117.97221375 26.01078606]
[115.88461304 40.86480713]
[124.19696045 43.75233841]
[132.00956726 47.80153656]
[139.16110229 52.92877197]
[145.50384521 59.02815247]
[150.90681458 65.97371674]
[155.25842285 73.62200928]
[158.46879578 81.81507874]
[160.47163391 90.38371277]
[175.46249390 89.86022186]
[190.45336914 89.33673096]
[205.44422913 88.81323242]
[216.03807068 77.08523560]
[231.82601929 76.36670685]
[243.44136047 87.08395386]
[243.99291992 102.87861633]
[233.15347290 114.38000488]
[217.35385132 114.76454163]
[205.96771240 103.80410004]
[190.97685242 104.32759094]
[175.98599243 104.85108185]
[160.99513245 105.37457275]
[159.26452637 115.39508057]
[155.89939880 124.99098969]
[150.99256897 133.89764404]
[144.67935181 141.86941528]
[137.13388062 148.68641663]
[128.56427002 154.16064453]
[119.20684052 158.14111328]
[109.31969452 160.51805115]
[99.17550659 161.22590637]
[89.05406189 160.24514771]
[84.58510590 174.56396484]
[80.11615753 188.88278198]
[75.98159790 203.30171204]
[72.18367004 217.81294250]
[68.38574219 232.32415771]
[64.58781433 246.83538818]
[60.78988647 261.34661865]
[62.16624069 265.68658447]
[62.04340363 269.80874634]
[60.68684387 273.25317383]
[58.48798370 275.69973755]
[55.90509033 276.99780273]
[50.77478790 291.09320068]
[45.64448547 305.18859863]
[40.51418686 319.28396606]
[35.38388443 333.37936401]
[30.25358009 347.47476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[29 119]
[30 118]
[31 117]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[61 80]
[64 77]
[65 76]
[66 75]
[67 74]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
