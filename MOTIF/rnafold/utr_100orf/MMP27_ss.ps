%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAGCUGAAGAAAGAGAGGAAUGAAGCGCCUUCUGCUUCUGUUUUUGUUCUUUAUAACAUUUUCUUCUGCAUUUCCCUUAGUCCGGAUGACGGAAAAUGAAGAAAAUAUGCAACUGGCUC\
) } def
/len { sequence length } bind def

/coor [
[85.38999939 226.04794312]
[84.63026428 211.06719971]
[83.87052155 196.08644104]
[69.87030029 187.61578369]
[63.57660675 172.33212280]
[67.63263702 156.13809204]
[80.64275360 145.41488647]
[79.50375366 130.45819092]
[69.03236389 119.71807861]
[54.10932541 118.20055389]
[39.18628311 116.68302917]
[24.26324463 115.16550446]
[9.34020519 113.64797974]
[-5.58283520 112.13045502]
[-20.50587463 110.61293030]
[-35.01801300 116.91439056]
[-46.89721680 107.92919159]
[-61.82025528 106.41166687]
[-76.74329376 104.89414215]
[-91.66633606 103.37661743]
[-106.58937836 101.85909271]
[-114.26177979 111.11751556]
[-125.35764313 115.42799377]
[-137.02915955 113.81011963]
[-146.34152222 106.78915405]
[-151.01092529 96.23394775]
[-165.83795166 93.96253204]
[-180.66497803 91.69111633]
[-195.49200439 89.41970062]
[-210.31903076 87.14828491]
[-225.14605713 84.87686157]
[-238.87620544 93.17520142]
[-253.87417603 87.47953033]
[-258.63479614 72.15908051]
[-249.50611877 58.96639633]
[-233.49090576 58.02177048]
[-222.87463379 70.04984283]
[-208.04760742 72.32125854]
[-193.22058105 74.59267426]
[-178.39355469 76.86408997]
[-163.56652832 79.13550568]
[-148.73950195 81.40692139]
[-134.77676392 69.69769287]
[-116.36143494 71.83437347]
[-105.07185364 86.93605042]
[-90.14881134 88.45357513]
[-75.22576904 89.97109985]
[-60.30273056 91.48862457]
[-45.37969208 93.00614929]
[-31.93494797 86.59614563]
[-18.98834991 95.68988800]
[-4.06531048 97.20741272]
[10.85772991 98.72493744]
[25.78076935 100.24246216]
[40.70380783 101.75998688]
[55.62685013 103.27751160]
[70.54988861 104.79503632]
[73.14613342 89.71208191]
[82.64743042 78.43924713]
[96.01478577 73.70478821]
[109.38924408 76.27572632]
[119.20201111 84.89050293]
[133.26829529 79.68092346]
[147.33457947 74.47135162]
[161.40086365 69.26177216]
[175.46714783 64.05219269]
[189.53341675 58.84261322]
[203.59970093 53.63303375]
[217.66598511 48.42345428]
[231.73226929 43.21387482]
[234.54322815 31.52273750]
[242.60684204 22.76621437]
[253.79808044 19.07868767]
[265.25076294 21.28102303]
[274.09143066 28.70116425]
[288.40350342 24.21071625]
[302.71560669 19.72027016]
[317.02767944 15.22982311]
[331.33978271 10.73937607]
[342.19079590 -0.77434868]
[356.65066528 2.79803729]
[370.96273804 -1.69240940]
[385.27484131 -6.18285608]
[391.11193848 -20.69017029]
[404.93280029 -28.00574493]
[420.21163940 -24.67539215]
[429.73425293 -12.27159882]
[429.00433350 3.34893990]
[418.36654663 14.81068516]
[402.84371948 16.70174980]
[389.76528931 8.12923241]
[375.45318604 12.61967945]
[361.14111328 17.11012650]
[351.31378174 28.30266380]
[335.83023071 25.05146408]
[321.51812744 29.54191208]
[307.20605469 34.03236008]
[292.89395142 38.52280426]
[278.58187866 43.01325226]
[271.20272827 59.67496109]
[253.72837830 65.86664581]
[236.94184875 57.28015900]
[222.87556458 62.48973465]
[208.80928040 67.69931793]
[194.74299622 72.90889740]
[180.67672729 78.11846924]
[166.61044312 83.32804871]
[152.54415894 88.53762817]
[138.47787476 93.74720764]
[124.41159058 98.95678711]
[122.26446533 113.87733459]
[111.26152802 125.67542267]
[94.46044922 129.31918335]
[95.59944916 144.27587891]
[107.89119720 150.65429688]
[115.34201050 162.19813538]
[116.08031464 175.80903625]
[110.01925659 187.89688110]
[98.85127258 195.32670593]
[99.61100769 210.30744934]
[100.37075043 225.28820801]
[107.21156311 240.80076599]
[94.19896698 251.66854858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[7 114]
[8 113]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[62 110]
[63 109]
[64 108]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[75 99]
[76 98]
[77 97]
[78 96]
[79 95]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
