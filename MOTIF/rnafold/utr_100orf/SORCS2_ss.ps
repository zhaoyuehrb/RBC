%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGCACCGGGGGCCCUCGCGCGCCUCGAAGGGCCCCGGCCCCACCGCCCGAGCCCCGAGCCCCGGGGCUCCGCCGCCGCCGCGCUCGCCGCGCUCGC\
) } def
/len { sequence length } bind def

/coor [
[150.85026550 223.09663391]
[164.39356995 216.64846802]
[178.97752380 220.16241455]
[172.23010254 206.76568604]
[165.48268127 193.36895752]
[158.52772522 180.07879639]
[151.36692810 166.89839172]
[137.05619812 162.93121338]
[129.60636902 149.66642761]
[133.86453247 134.68290710]
[126.70373535 121.50251007]
[78.65764618 113.67082214]
[63.65945816 113.43754578]
[48.66127396 113.20426178]
[33.66308594 112.97098541]
[18.66490173 112.73770905]
[3.66671538 112.50443268]
[-11.33147049 112.27115631]
[-26.32965660 112.03787994]
[-41.32965469 112.03787994]
[-56.32784271 112.27115631]
[-66.05091858 124.51843262]
[-81.38189697 127.59984589]
[-95.08195496 120.06045532]
[-100.68235016 105.46012878]
[-95.53873444 90.69268799]
[-82.07978058 82.73087311]
[-66.66038513 85.33400726]
[-56.56111908 97.27297211]
[-41.56293488 97.03969574]
[-34.80489349 93.72994995]
[-26.09638023 97.03969574]
[-11.09819317 97.27297211]
[3.89999247 97.50624847]
[18.89817810 97.73952484]
[33.89636612 97.97280121]
[48.89455032 98.20607758]
[63.89273453 98.43935394]
[78.89092255 98.67263031]
[87.82055664 86.62017822]
[83.22969818 72.33998108]
[78.63883972 58.05978775]
[64.46678925 51.06489182]
[59.47096634 36.07098389]
[66.61530304 21.97367859]
[81.66119385 17.13666153]
[95.68217468 24.42964745]
[100.35984802 39.52583694]
[92.91903687 53.46892929]
[97.50989532 67.74912262]
[102.10075378 82.02931976]
[109.39759064 83.76314545]
[131.28810120 88.96460724]
[141.81190491 78.27584839]
[152.33570862 67.58708954]
[162.85951233 56.89833069]
[173.38331604 46.20957184]
[183.90711975 35.52081299]
[194.43092346 24.83205414]
[204.95472717 14.14329433]
[206.26829529 -1.84589195]
[219.66792297 -10.66800117]
[234.87455750 -5.55546570]
[240.22296143 9.56981468]
[231.61030579 23.10501862]
[215.64347839 24.66709709]
[205.11968994 35.35585785]
[194.59588623 46.04461670]
[184.07208252 56.73337555]
[173.54827881 67.42213440]
[163.02447510 78.11089325]
[152.50067139 88.79965210]
[141.97686768 99.48841095]
[139.88414001 114.34171295]
[147.04493713 127.52210999]
[161.93270874 132.10380554]
[169.00701904 145.57261658]
[164.54733276 159.73759460]
[171.70812988 172.91799927]
[178.67842102 179.09922791]
[178.87940979 186.62153625]
[185.62683105 200.01826477]
[192.37425232 213.41499329]
[200.53732300 225.99928284]
[210.01936340 237.62213135]
[219.50140381 249.24499512]
[228.98345947 260.86785889]
[244.73526001 263.91091919]
[252.04924011 278.18975830]
[245.31474304 292.75085449]
[229.69789124 296.42422485]
[217.17860413 286.39190674]
[217.36059570 270.34988403]
[207.87855530 258.72705078]
[198.39651489 247.10418701]
[188.91445923 235.48132324]
[186.17817688 250.22964478]
[174.76943970 259.96826172]
[159.77444458 260.35552979]
[147.87820435 251.21882629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 79]
[7 78]
[10 75]
[11 74]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 30]
[21 29]
[40 51]
[41 50]
[42 49]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
