%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:49:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUACCCCGCGGGCCCCCCGGCCGGCCCGGUACCGCGCCGCGGCCGCCGUCCCCUGCCCGGGCCCCCCGCGCCCGCCCCAGCCCCCGUCCCCGCUGCAC\
) } def
/len { sequence length } bind def

/coor [
[138.79762268 246.99287415]
[133.16120911 242.83909607]
[128.53573608 237.56523132]
[125.13982391 231.41195679]
[123.13584900 224.66172791]
[122.62212372 217.62579346]
[123.62812805 210.62982178]
[126.11284637 203.99888611]
[129.96644592 198.04228210]
[135.01506042 193.03919983]
[128.68753052 179.43910217]
[122.36000824 165.83901978]
[116.03247833 152.23893738]
[109.70495605 138.63883972]
[103.37743378 125.03874969]
[90.10294342 124.77581787]
[78.09591675 117.59116364]
[70.88143921 104.77400208]
[70.97062683 89.35017395]
[79.04437256 75.37429047]
[66.72003937 66.82380676]
[54.39570618 58.27332306]
[42.07136917 49.72283936]
[33.06560516 47.33771896]
[29.50235176 40.70984268]
[17.44989777 31.78021049]
[5.39744377 22.85057831]
[-6.65501070 13.92094517]
[-18.84487915 5.17982912]
[-31.16921425 -3.37065458]
[-43.49354935 -11.92113876]
[-55.81788254 -20.47162247]
[-71.79728699 -19.04396820]
[-82.77181244 -30.74607658]
[-80.32273865 -46.60109711]
[-66.32878876 -54.44640732]
[-51.52492523 -48.26376343]
[-47.26739883 -32.79595566]
[-34.94306564 -24.24547386]
[-22.61873055 -15.69498920]
[-10.29439545 -7.14450550]
[-2.87369823 -5.89600754]
[2.27462244 1.86849046]
[14.32707691 10.79812336]
[26.37953186 19.72775650]
[38.43198395 28.65738869]
[50.62185287 37.39850616]
[62.94618988 45.94898987]
[75.27052307 54.49947357]
[87.59485626 63.04995728]
[75.71928406 53.88640213]
[70.31729126 39.89288712]
[72.95511627 25.12664604]
[82.86795044 13.86895370]
[97.18170929 9.38382912]
[111.74629974 12.97167587]
[122.33892059 23.59224319]
[125.88837433 38.16624069]
[121.36553955 52.46812820]
[110.08397675 62.35020828]
[121.85289001 53.05006790]
[133.62179565 43.74992371]
[145.39071655 34.44977951]
[154.06921387 19.88544273]
[170.46682739 24.19297791]
[170.86694336 41.14220428]
[154.69085693 46.21869278]
[142.92195129 55.51883698]
[131.15303040 64.81897736]
[119.38411713 74.11912537]
[128.76853943 98.64669037]
[116.97751617 118.71122742]
[123.30504608 132.31130981]
[129.63256836 145.91140747]
[135.96009827 159.51148987]
[142.28762817 173.11158752]
[148.61514282 186.71166992]
[173.12281799 191.50993347]
[187.07850647 211.95599365]
[182.69523621 236.09802246]
[193.21903992 246.78677368]
[203.74284363 257.47552490]
[214.26664734 268.16430664]
[229.11228943 264.22698975]
[243.93345642 268.25549316]
[254.74330139 279.16616821]
[258.63406372 294.02407837]
[254.55909729 308.83255005]
[243.61460876 319.60815430]
[228.74456787 323.45230103]
[213.94895935 319.33096313]
[203.20771790 308.35272217]
[199.41018677 293.47073364]
[203.57789612 278.68811035]
[193.05409241 267.99932861]
[182.53028870 257.31057739]
[172.00648499 246.62182617]
[165.74185181 249.59729004]
[158.97262573 251.16595459]
[152.01127625 251.24957275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 72]
[20 50]
[21 49]
[22 48]
[23 47]
[25 46]
[26 45]
[27 44]
[28 43]
[29 41]
[30 40]
[31 39]
[32 38]
[60 70]
[61 69]
[62 68]
[63 67]
[80 97]
[81 96]
[82 95]
[83 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
