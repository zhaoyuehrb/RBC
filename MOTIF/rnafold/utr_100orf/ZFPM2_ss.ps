%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGGCAGCAGCCGCCGCCGAGAUGUCCCGGCGAAAGCAAAGCAAACCCCGGCAGAUCAAACGGCCGCUUGAAGAUGCCAUUGAAGAUGAGGAAGAAGAAUGUCCAUCAGAGGAAACAGACA\
) } def
/len { sequence length } bind def

/coor [
[65.85467529 176.27348328]
[57.99280548 172.42897034]
[50.56140900 167.77500916]
[43.61645889 181.07040405]
[36.67150879 194.36581421]
[29.72656059 207.66120911]
[22.78161049 220.95660400]
[24.01409721 237.30937195]
[10.31775284 246.32836914]
[-4.21779633 238.73561096]
[-4.63962364 222.34190369]
[9.48620987 214.01165771]
[16.43115997 200.71626282]
[23.37611008 187.42085266]
[30.32105827 174.12545776]
[37.26601028 160.83006287]
[27.78687859 149.20481873]
[13.36562729 153.33126831]
[-1.05562365 157.45770264]
[-15.47687435 161.58415222]
[-29.89812469 165.71058655]
[-35.08676910 180.33445740]
[-47.89918518 189.08782959]
[-63.40874481 188.60485840]
[-75.65169525 179.07125854]
[-79.92038727 164.15287781]
[-74.57341003 149.58615112]
[-61.66678619 140.97229004]
[-46.16337967 141.62347412]
[-34.02456665 151.28933716]
[-19.60331535 147.16290283]
[-5.18206549 143.03645325]
[9.23918533 138.91001892]
[23.66043663 134.78356934]
[20.26366043 125.57691193]
[17.97058105 116.05366516]
[16.80858612 106.34536743]
[16.78946304 96.58565521]
[17.90930176 86.90834808]
[20.14860535 77.44567108]
[23.47260475 68.32640076]
[27.83180237 59.67417145]
[33.16270065 51.60573196]
[39.38871765 44.22942352]
[46.42129135 37.64369202]
[54.16114426 31.93580627]
[62.49966431 27.18066978]
[71.32044983 23.43986320]
[80.50091553 20.76083946]
[89.91400909 19.17632675]
[99.42996216 18.70394135]
[108.91808319 19.34599113]
[111.93756104 4.65304136]
[114.95703888 -10.03990746]
[117.97651672 -24.73285675]
[108.08882904 -39.09737396]
[111.52537537 -55.85093307]
[125.70124817 -64.80349731]
[128.34754944 -79.56822968]
[130.99383545 -94.33295441]
[133.64013672 -109.09767914]
[122.79580688 -120.19632721]
[120.57949829 -135.55430603]
[127.84343719 -149.26615906]
[141.79447937 -156.05940247]
[157.06816101 -153.32188416]
[167.79145813 -142.10624695]
[169.84103394 -126.72512054]
[162.42877197 -113.09287262]
[148.40486145 -106.45137787]
[145.75856018 -91.68665314]
[143.11227417 -76.92192841]
[140.46597290 -62.15720367]
[149.26757812 -52.65616989]
[150.98010254 -39.62153625]
[144.74908447 -27.82399750]
[132.66946411 -21.71337891]
[129.64999390 -7.02042961]
[126.63051605 7.67251921]
[123.61103821 22.36546898]
[136.26283264 27.40792847]
[147.89306641 34.49537659]
[158.17410278 43.42814636]
[166.81632996 53.95459747]
[173.57627869 65.77819061]
[178.26351929 78.56584930]
[180.74600220 91.95732117]
[180.95379639 105.57536316]
[178.88104248 119.03633881]
[193.07478333 123.88790894]
[207.26852417 128.73948669]
[221.52258301 133.41085815]
[235.83467102 137.90130615]
[250.14675903 142.39175415]
[261.92398071 132.42680359]
[277.22204590 130.43363953]
[291.15939331 137.04830933]
[299.28869629 150.16007996]
[299.01586914 165.58502197]
[290.42800903 178.40110779]
[276.26544189 184.51878357]
[261.04742432 181.98588562]
[249.62995911 171.61067200]
[245.65631104 156.70384216]
[231.34422302 152.21339417]
[217.03213501 147.72294617]
[209.62382507 148.73410034]
[202.41696167 142.93322754]
[188.22322083 138.08164978]
[174.02947998 133.23008728]
[170.29277039 140.86268616]
[165.76995850 148.07731628]
[160.50756836 154.79312134]
[154.56044006 160.93437195]
[147.99118042 166.43136597]
[140.86943054 171.22120667]
[133.27122498 175.24851990]
[125.27811432 178.46609497]
[116.97628784 180.83543396]
[108.45568848 182.32716370]
[99.80900574 182.92150879]
[91.13067627 182.60844421]
[82.51586151 181.38784790]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[52 80]
[53 79]
[54 78]
[55 77]
[58 73]
[59 72]
[60 71]
[61 70]
[89 110]
[90 109]
[91 108]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
