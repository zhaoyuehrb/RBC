%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:31:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACUGCAACCACCCAGAGCCAUGGCUCCCCGAGGCUGCAUCGUAGCUGUCUUUGCCAUUUUCUGCAUCUCCAGGCUCCUCUGCUCACACGGAGCCCCAGUGGCCCCCAUGACUCCUUACC\
) } def
/len { sequence length } bind def

/coor [
[120.76882172 237.00808716]
[129.53782654 224.71958923]
[141.29776001 215.25352478]
[135.38243103 201.46914673]
[129.46708679 187.68478394]
[123.55175018 173.90042114]
[117.63641357 160.11605835]
[111.72106934 146.33168030]
[100.06198120 147.79125977]
[88.39914703 146.36193848]
[77.43756866 142.13009644]
[67.83984375 135.35156250]
[60.18615723 126.43608093]
[54.93915558 115.92258453]
[52.41600800 104.44659424]
[52.76923752 92.70180511]
[55.97749329 81.39818573]
[43.24782944 73.46372986]
[30.51816559 65.52926636]
[17.78850174 57.59480667]
[5.05883789 49.66034698]
[-7.73490572 51.80754089]
[-18.20044327 44.84441376]
[-20.97761154 32.99761963]
[-33.50218964 24.74322891]
[-46.02676773 16.48883820]
[-58.55134201 8.23444748]
[-71.07592010 -0.01994320]
[-82.68169403 8.33670998]
[-96.41918182 12.20360851]
[-110.62022400 11.13252163]
[-123.56768799 5.27355480]
[-133.70304871 -4.64550114]
[-139.81404114 -17.40951157]
[-141.17959595 -31.46483421]
[-137.65487671 -45.10843277]
[-149.96633911 -53.67745590]
[-162.27778625 -62.24647903]
[-174.58923340 -70.81550598]
[-186.90069580 -79.38452911]
[-199.21214294 -87.95355225]
[-215.66639709 -92.03932953]
[-216.29528809 -108.98160553]
[-200.18922424 -114.27600861]
[-190.64311218 -100.26499939]
[-178.33166504 -91.69597626]
[-166.02021790 -83.12695312]
[-153.70877075 -74.55792999]
[-141.39730835 -65.98890686]
[-129.08586121 -57.41988373]
[-115.92879486 -66.15795898]
[-100.39264679 -69.20823669]
[-84.83319092 -66.07827759]
[-71.62122345 -57.21505737]
[-62.78125381 -43.94137192]
[-59.68136597 -28.25851059]
[-62.82152939 -12.54452038]
[-50.29695129 -4.29012966]
[-37.77237701 3.96426105]
[-25.24779892 12.21865177]
[-12.72322178 20.47304344]
[4.77688837 20.51049232]
[12.99329853 36.93068314]
[25.72296143 44.86514282]
[38.45262527 52.79960251]
[51.18228912 60.73406219]
[63.91195297 68.66852570]
[71.55526733 61.59550095]
[80.54917145 56.34597397]
[90.46662903 53.16920471]
[100.83674622 52.21602249]
[111.16713715 53.53169250]
[120.96729279 57.05374146]
[129.77189636 62.61493683]
[137.16288757 69.95122528]
[142.78932190 78.71427155]
[157.10140991 74.22383118]
[171.41349792 69.73338318]
[185.72558594 65.24293518]
[200.03767395 60.75248718]
[214.34977722 56.26203918]
[217.01654053 41.19064713]
[226.39103699 29.09199524]
[240.31907654 22.74627304]
[255.60009766 23.61167717]
[268.72262573 31.48934555]
[276.67123413 44.56904602]
[277.61932373 59.84516144]
[271.34909058 73.80735016]
[259.30136108 83.24720001]
[244.24462891 85.99551392]
[229.63880920 81.42073822]
[218.84020996 70.57412720]
[204.52812195 75.06457520]
[190.21603394 79.55502319]
[175.90394592 84.04547119]
[161.59185791 88.53591919]
[147.27976990 93.02636719]
[143.42665100 119.95330048]
[125.50543976 140.41635132]
[131.42077637 154.20071411]
[137.33612061 167.98507690]
[143.25144958 181.76945496]
[149.16679382 195.55381775]
[155.08212280 209.33818054]
[170.04527283 207.33647156]
[184.99343872 209.44712830]
[198.81736755 215.51354980]
[210.49124146 225.08555603]
[219.14878845 237.45283508]
[224.14753723 251.69766235]
[225.11656189 266.76296997]
[221.98394775 281.53082275]
[214.98216248 294.90533447]
[204.63078308 305.89404297]
[191.69795227 313.68148804]
[177.14337158 317.68981934]
[162.04707336 317.62158203]
[147.52932739 313.48181152]
[134.66743469 305.57775879]
[124.41583252 294.49591064]
[117.53525543 281.05862427]
[114.53629303 266.26306152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 105]
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
[76 98]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
