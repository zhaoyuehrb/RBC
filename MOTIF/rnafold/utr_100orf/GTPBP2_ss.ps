%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACACGGCAGUGGCAGUAAGGGCGGCGGCGACGGCGGCGGCGGUCGGGGGAGGGGCCGGGCGGGGGGCUGGCGGCAGCGGCGGAUGGACUCGCGGGUAUCGGAGCUGUUCGGCGGCUGCUGCCGGCCCGGAGGGGGCCCGGCCGUGGGCGGAACCCUCAAGGCUAGGGGGGCCGGCAGCAGCA\
) } def
/len { sequence length } bind def

/coor [
[141.28692627 220.05499268]
[140.73550415 209.05242920]
[143.92251587 198.90756226]
[150.20050049 190.80368042]
[142.01312256 178.23518372]
[133.82572937 165.66670227]
[125.63835907 153.09822083]
[117.45097351 140.52973938]
[109.26359558 127.96125031]
[102.20177460 135.39241028]
[91.93846893 140.67463684]
[82.91690063 152.65843201]
[80.79842377 168.33715820]
[66.96228027 173.85171509]
[57.94070816 185.83551025]
[61.64162445 201.02883911]
[54.66430283 215.02351379]
[40.30322647 221.21168518]
[25.33925056 216.67147827]
[16.83790970 203.54664612]
[18.81327629 188.03433228]
[30.33264351 177.45896912]
[45.95691681 176.81393433]
[54.97848892 164.83013916]
[56.45167923 150.00857544]
[70.93311310 143.63685608]
[79.95468140 131.65306091]
[75.75487518 125.43924713]
[67.35524750 113.01160431]
[63.15544128 106.79777527]
[48.67206192 110.70056152]
[34.18868256 114.60334778]
[19.70530319 118.50613403]
[8.39356232 129.56756592]
[-5.90849924 125.40819550]
[-20.39187813 129.31097412]
[-31.58195496 141.29907227]
[-47.49580765 137.33911133]
[-51.76263428 121.50477600]
[-39.99308395 110.08506775]
[-24.29466438 114.82760620]
[-9.81128502 110.92481995]
[0.46450734 100.14254761]
[15.80251694 104.02275848]
[30.28589630 100.11997223]
[44.76927567 96.21718597]
[59.25265503 92.31439972]
[62.92907715 85.65364075]
[67.61594391 80.05285645]
[73.05502319 75.64810181]
[78.97389984 72.51785278]
[85.09812164 70.68267059]
[91.16290283 70.10734558]
[96.92398071 70.70522308]
[99.20758057 55.88007355]
[101.49118042 41.05492020]
[103.77478027 26.22976494]
[106.05837250 11.40461159]
[93.66281891 4.36634111]
[84.43645477 -6.46001959]
[79.47368622 -19.75879669]
[79.35241699 -33.92298508]
[84.06681824 -47.24843216]
[93.03048706 -58.13887024]
[105.14932251 -65.29714203]
[118.95500946 -67.87966156]
[121.49002075 -82.66390228]
[124.02503204 -97.44813538]
[126.56004333 -112.23237610]
[129.09506226 -127.01661682]
[131.63006592 -141.80085754]
[134.16508484 -156.58509827]
[136.70008850 -171.36933899]
[139.23510742 -186.15356445]
[141.77012634 -200.93780518]
[144.30513000 -215.72204590]
[146.84014893 -230.50628662]
[149.37515259 -245.29052734]
[151.91017151 -260.07476807]
[146.61640930 -274.98403931]
[156.39332581 -286.22064209]
[158.92834473 -301.00488281]
[161.33773804 -315.81008911]
[163.62133789 -330.63525391]
[165.90493774 -345.46041870]
[168.18853760 -360.28555298]
[170.47212219 -375.11071777]
[172.75572205 -389.93588257]
[170.96705627 -398.91732788]
[175.20603943 -404.99252319]
[177.74104309 -419.77676392]
[180.27606201 -434.56100464]
[178.64015198 -443.57153320]
[182.98168945 -449.57385254]
[185.76737976 -464.31292725]
[177.95156860 -478.32336426]
[184.16539001 -493.11416626]
[199.64213562 -497.33908081]
[212.50936890 -487.75714111]
[212.89645386 -471.71875000]
[200.50643921 -461.52722168]
[197.72074890 -446.78814697]
[195.06030273 -432.02597046]
[192.52528381 -417.24172974]
[189.99028015 -402.45748901]
[187.58088684 -387.65228271]
[185.29728699 -372.82711792]
[183.01368713 -358.00195312]
[180.73008728 -343.17681885]
[178.44648743 -328.35165405]
[176.16288757 -313.52651978]
[178.25680542 -306.42071533]
[173.71258545 -298.46984863]
[171.17756653 -283.68560791]
[176.65264893 -269.83380127]
[166.69441223 -257.53976440]
[164.15939331 -242.75550842]
[161.62438965 -227.97126770]
[159.08937073 -213.18704224]
[156.55435181 -198.40280151]
[154.01934814 -183.61856079]
[151.48432922 -168.83432007]
[148.94932556 -154.05007935]
[146.41430664 -139.26583862]
[143.87930298 -124.48160553]
[141.34428406 -109.69736481]
[138.80926514 -94.91312408]
[136.27426147 -80.12889099]
[133.73924255 -65.34465027]
[147.26519775 -57.10802460]
[156.62124634 -44.28308868]
[160.35299683 -28.81335258]
[157.86117554 -13.05719376]
[149.49758911 0.57168096]
[136.51585388 9.97398853]
[120.88352966 13.68821049]
[118.59992981 28.51336479]
[116.31632996 43.33851624]
[114.03273010 58.16366959]
[111.74913025 72.98882294]
[128.79469299 93.79426575]
[121.83208466 119.77387238]
[130.01945496 132.34236145]
[138.20684814 144.91084290]
[146.39422607 157.47932434]
[154.58160400 170.04780579]
[162.76898193 182.61628723]
[185.19660950 182.19458008]
[202.69712830 198.73434448]
[203.68572998 224.44396973]
[214.06481934 235.27331543]
[224.44389343 246.10266113]
[240.01272583 246.60191345]
[250.38432312 257.73226929]
[249.81240845 272.57168579]
[260.19149780 283.40103149]
[270.57058716 294.23037720]
[280.94964600 305.05972290]
[296.30493164 302.82479858]
[310.02557373 310.07214355]
[316.83572388 324.01495361]
[314.11669922 339.29193115]
[302.91403198 350.02880859]
[287.53543091 352.09698486]
[273.89419556 344.70126343]
[267.23571777 330.68539429]
[270.12033081 315.43881226]
[259.74124146 304.60946655]
[249.36215210 293.78012085]
[238.98306274 282.95077515]
[224.13273621 282.89236450]
[213.45260620 272.05773926]
[213.61456299 256.48175049]
[203.23547363 245.65240479]
[192.85638428 234.82305908]
[179.52032471 241.68959045]
[182.30601501 256.42864990]
[193.40483093 268.50128174]
[188.24153137 284.06637573]
[172.12765503 287.11190796]
[161.63980103 274.50488281]
[167.56695557 259.21435547]
[164.78126526 244.47528076]
[153.87353516 239.08898926]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 147]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[11 27]
[12 26]
[14 24]
[15 23]
[30 47]
[31 46]
[32 45]
[33 44]
[35 42]
[36 41]
[54 140]
[55 139]
[56 138]
[57 137]
[58 136]
[66 129]
[67 128]
[68 127]
[69 126]
[70 125]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[78 117]
[79 116]
[81 114]
[82 113]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[90 105]
[91 104]
[92 103]
[94 102]
[95 101]
[150 175]
[151 174]
[152 173]
[155 170]
[156 169]
[157 168]
[158 167]
[176 183]
[177 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
