%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:48:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGCGUCCUCCCCUCGGCGGGGAGGCCGGCUAGGGGCAGGCGGGCAGCGAUGCCUGCGUCGGCCACAGCUGCCUGGCACUGCCCUCCUUUGUGCCUGCCUCCUCUGCCAGCCUCCGCUCCAACCUCCCCCCCCAACCCCGCAACGAGGC\
) } def
/len { sequence length } bind def

/coor [
[152.56129456 540.07391357]
[150.22622681 555.07098389]
[142.62789917 568.20983887]
[130.79391479 577.71356201]
[116.32472229 582.29687500]
[101.17715454 581.33990479]
[87.39981079 574.97210693]
[76.85594940 564.05462646]
[70.97154999 550.06396484]
[70.54242706 534.89227295]
[75.62661743 520.59136963]
[85.53652191 509.09539795]
[98.93190765 501.95898438]
[114.00116730 500.14736938]
[117.68344879 485.60635376]
[121.36573029 471.06536865]
[125.04801178 456.52435303]
[128.73030090 441.98333740]
[132.11126709 427.36935425]
[135.18949890 412.68859863]
[138.26773071 398.00784302]
[141.34596252 383.32708740]
[144.42419434 368.64633179]
[147.50242615 353.96557617]
[147.19241333 338.96878052]
[143.51013184 324.42779541]
[139.82785034 309.88677979]
[136.14556885 295.34579468]
[125.52066803 284.90734863]
[129.63346863 269.63006592]
[125.95118713 255.08906555]
[122.26890564 240.54806519]
[117.54824066 234.79966736]
[118.66409302 225.66847229]
[115.28311157 211.05447388]
[111.90213776 196.44047546]
[108.52115631 181.82647705]
[105.14017487 167.21247864]
[100.53932190 161.36773682]
[101.84365082 152.26156616]
[98.76541901 137.58082581]
[95.68718719 122.90007019]
[92.60895538 108.21931458]
[86.30091858 94.61017609]
[77.08773041 82.77307129]
[67.87454224 70.93595886]
[58.66134644 59.09885406]
[49.44815826 47.26174545]
[40.23496628 35.42463684]
[31.02177620 23.58753014]
[14.15656853 24.38822365]
[0.26205790 15.09049606]
[-5.31871223 -0.49295771]
[-0.58129990 -16.18004608]
[-10.03715897 -27.82421875]
[-19.49301910 -39.46839142]
[-35.23686981 -40.84922791]
[-45.32889938 -53.01173019]
[-43.78168488 -68.74010468]
[-31.51316071 -78.70298004]
[-15.80202579 -76.98956299]
[-5.96941710 -64.61638641]
[-7.84884691 -48.92424774]
[1.60701215 -37.28007889]
[11.06287098 -25.63590622]
[24.30580902 -27.58488464]
[36.87744141 -22.68150330]
[45.44013596 -12.11229897]
[47.66374588 1.41713572]
[42.85888290 14.37433910]
[52.07207489 26.21144676]
[61.28526688 38.04855347]
[70.49845886 49.88566208]
[79.71164703 61.72277069]
[88.92483521 73.55987549]
[98.13803101 85.39698792]
[113.05800629 83.84961700]
[119.64595032 70.37374878]
[126.23390198 56.89788437]
[132.82185364 43.42201996]
[139.40980530 29.94615555]
[130.30705261 17.64173698]
[127.97659302 2.51469064]
[132.95391846 -11.95889759]
[144.09529114 -22.45310402]
[158.84051514 -26.55643654]
[173.80120850 -23.32597923]
[185.53955078 -13.50406742]
[191.35813904 0.65229487]
[189.91992188 15.89007950]
[181.55535889 28.70775604]
[168.18659973 36.15991211]
[152.88566589 36.53410339]
[146.29771423 50.00996780]
[139.70976257 63.48583221]
[133.12181091 76.96170044]
[126.53386688 90.43756104]
[118.39546967 102.48308563]
[107.28971100 105.14108276]
[110.36794281 119.82183838]
[113.44616699 134.50259399]
[116.52439880 149.18334961]
[119.75418091 163.83149719]
[123.13515472 178.44549561]
[126.51613617 193.05949402]
[129.89710999 207.67349243]
[133.27809143 222.28750610]
[136.80990601 236.86578369]
[140.49218750 251.40678406]
[144.17446899 265.94778442]
[155.06275940 277.42626953]
[150.68656921 291.66351318]
[154.36886597 306.20449829]
[158.05114746 320.74551392]
[161.73342896 335.28649902]
[166.09088135 320.93338013]
[173.95260620 308.15866089]
[184.80245972 297.80102539]
[197.92816162 290.54043579]
[212.46800232 286.85357666]
[227.46745300 286.98248291]
[241.94178772 290.91870117]
[254.94076538 298.40377808]
[265.61102295 308.94635010]
[273.25201416 321.85427856]
[277.36215210 336.28018188]
[277.67160034 351.27700806]
[274.16003418 365.86016846]
[267.05798340 379.07232666]
[256.83169556 390.04605103]
[244.15254211 398.06097412]
[229.85289001 402.59091187]
[214.87153625 403.33840942]
[200.19197083 400.25445557]
[186.77795410 393.54150391]
[175.51007080 383.64022827]
[167.12808228 371.20068359]
[162.18318176 357.04382324]
[159.10494995 371.72457886]
[156.02671814 386.40533447]
[152.94848633 401.08609009]
[149.87025452 415.76681519]
[146.79202271 430.44757080]
[148.51271057 436.93713379]
[146.89634705 442.46856689]
[143.27130127 445.66564941]
[139.58901978 460.20663452]
[135.90673828 474.74765015]
[132.22445679 489.28863525]
[128.54217529 503.82965088]
[140.93293762 512.59509277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 150]
[15 149]
[16 148]
[17 147]
[18 146]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[24 138]
[25 115]
[26 114]
[27 113]
[28 112]
[30 110]
[31 109]
[32 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[40 102]
[41 101]
[42 100]
[43 99]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 70]
[54 65]
[55 64]
[56 63]
[77 97]
[78 96]
[79 95]
[80 94]
[81 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
