%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCUUCCGGCUGACGUGUCUUUCAGGAAGAGGAGCUGGUGAGAAGACAGCGAAAUGGCGCCUCCGGCCCCCGGCCCGGCCUCCGGCGGCUCCGGGGAGGUAGACGAGCUGUUCGACGUAAAGAACGCCUUCUACAUCGGCAGCUACCAGCAGU\
) } def
/len { sequence length } bind def

/coor [
[26.80891991 208.14213562]
[17.09018898 219.56781006]
[7.37145710 230.99349976]
[4.16887569 239.61080933]
[-2.65985012 242.54885864]
[-12.60668945 253.77651978]
[-22.55352974 265.00418091]
[-32.50037003 276.23184204]
[-42.44720840 287.45950317]
[-51.81641769 299.17352295]
[-60.58424759 311.34417725]
[-69.35207367 323.51483154]
[-66.56982422 339.07229614]
[-75.67168427 351.99252319]
[-91.25769043 354.61013794]
[-104.08094025 345.37216187]
[-106.53363037 329.75936890]
[-97.16061401 317.03448486]
[-81.52274323 314.74700928]
[-72.75491333 302.57635498]
[-63.98708344 290.40567017]
[-78.97744751 289.86804199]
[-88.06866455 277.93701172]
[-84.60961914 263.34127808]
[-71.13093567 256.75909424]
[-57.49361038 263.00598145]
[-53.67486954 277.51266479]
[-43.72803116 266.28500366]
[-33.78119278 255.05734253]
[-23.83435059 243.82968140]
[-13.88751125 232.60202026]
[-4.05422735 221.27476501]
[5.66450357 209.84909058]
[15.38323402 198.42340088]
[17.21899414 177.89732361]
[37.40436935 170.81510925]
[46.41550064 158.82345581]
[55.42663574 146.83181763]
[64.43776703 134.84017944]
[73.44890594 122.84853363]
[82.46003723 110.85689545]
[68.80292511 117.06038666]
[57.45093918 126.86509705]
[42.52212524 128.32472229]
[29.48602295 120.90447235]
[23.11873817 107.32295227]
[25.75308228 92.55608368]
[36.42389679 82.01409149]
[51.22166443 79.55928040]
[64.72586060 86.09199524]
[79.52320099 88.54938507]
[67.71544647 79.29860687]
[52.05857086 81.45216370]
[39.51534271 71.83744049]
[37.52743530 56.15867233]
[47.27423859 43.71779633]
[62.97314835 41.89576340]
[75.31027985 51.77355576]
[76.96623230 67.49085236]
[88.77397919 76.74163055]
[102.68927002 71.14121246]
[104.79680634 56.29000854]
[106.90434265 41.43880081]
[109.01187897 26.58759689]
[111.11941528 11.73639297]
[113.22695923 -3.11481214]
[114.73478699 -18.03883553]
[115.64046478 -33.01146698]
[116.54614258 -47.98410034]
[117.45182037 -62.95673370]
[110.56186676 -77.19889832]
[119.05350494 -89.43578339]
[119.95918274 -104.40841675]
[120.86486053 -119.38105011]
[121.77053833 -134.35368347]
[109.70542145 -144.11137390]
[105.71248627 -159.10591125]
[111.32710266 -173.57157898]
[124.39033508 -181.94604492]
[139.87910461 -181.00915527]
[151.83766174 -171.12115479]
[155.66769409 -156.08418274]
[149.89648438 -141.68026733]
[136.74316406 -133.44799805]
[135.83749390 -118.47537231]
[134.93182373 -103.50273895]
[134.02613831 -88.53010559]
[140.98086548 -75.35888672]
[132.42445374 -62.05105591]
[131.51876831 -47.07842255]
[130.61309814 -32.10578918]
[129.70741272 -17.13315773]
[131.52323914 -14.92630959]
[132.54826355 -11.84690571]
[132.43789673 -8.20222759]
[130.96876526 -4.42116451]
[128.07815552 -1.00727522]
[125.97062683 13.84392929]
[123.86308289 28.69513512]
[121.75554657 43.54634094]
[119.64801025 58.39754486]
[117.54047394 73.24874878]
[126.51006317 61.22599792]
[140.72531128 66.01416779]
[147.51622009 79.38890839]
[142.99386597 93.69094086]
[129.74922180 100.72987366]
[114.82006836 102.18605042]
[128.61975098 108.06555176]
[142.41944885 113.94505310]
[156.21914673 119.82454681]
[170.01882935 125.70404816]
[183.81852722 131.58354187]
[192.99841309 132.07743835]
[197.83500671 137.72290039]
[211.51350403 143.87908936]
[225.19200134 150.03527832]
[240.95185852 148.64340210]
[249.38237000 160.92248535]
[263.06088257 167.07867432]
[276.73937988 173.23486328]
[290.47915649 179.25302124]
[304.27883911 185.13250732]
[318.07855225 191.01200867]
[333.43841553 186.38015747]
[346.55401611 195.61923218]
[347.36419678 211.64181519]
[335.24743652 222.15675354]
[319.49868774 219.09788513]
[312.19903564 204.81170654]
[298.39935303 198.93220520]
[284.59967041 193.05270386]
[277.17071533 193.32574463]
[270.58319092 186.91336060]
[256.90469360 180.75717163]
[243.22618103 174.60098267]
[228.44470215 176.43318176]
[219.03581238 163.71377563]
[205.35731506 157.55758667]
[191.67881775 151.40139771]
[177.93902588 145.38323975]
[164.13932800 139.50373840]
[150.33964539 133.62423706]
[136.53994751 127.74474335]
[122.74025726 121.86524200]
[108.94056702 115.98574066]
[94.45167542 119.86802673]
[85.44054413 131.85966492]
[76.42941284 143.85131836]
[67.41827393 155.84295654]
[58.40714264 167.83459473]
[49.39600754 179.82623291]
[51.97766495 189.00106812]
[50.04223251 198.19247437]
[44.15561295 205.33386230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 21]
[11 20]
[12 19]
[36 152]
[37 151]
[38 150]
[39 149]
[40 148]
[41 147]
[51 60]
[52 59]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[66 97]
[67 92]
[68 91]
[69 90]
[70 89]
[72 87]
[73 86]
[74 85]
[75 84]
[108 146]
[109 145]
[110 144]
[111 143]
[112 142]
[113 141]
[115 140]
[116 139]
[117 138]
[119 136]
[120 135]
[121 134]
[122 132]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
