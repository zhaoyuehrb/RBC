%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCUGCACCCUGAGGGCCCCGGGAGGAGGCGCGGGCGCGCCGGGAGGGACCGGCGGCGGCAUGGGCCGGGGGCCCUGGGAUGCGGGCCCGUCUCGCCGCCUGCUGCCGCUGUUGCUGCUGCUCGGCCUGGCCCGCGGCGCCGCGGGAGCGCCGGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[108.54528046 156.63552856]
[93.75000000 159.10527039]
[79.91446686 153.31060791]
[71.29519653 141.03428650]
[70.54390717 126.05310822]
[77.89173889 112.97605133]
[91.07962799 105.82595062]
[76.38574219 102.81104279]
[61.69185638 99.79613495]
[46.96959686 96.92295837]
[32.22033310 94.19179535]
[17.47107315 91.46063232]
[11.04768085 93.32688904]
[5.49571848 91.85614014]
[2.21081305 88.32951355]
[-12.42224026 85.03197479]
[-27.05529404 81.73444366]
[-41.68834686 78.43690491]
[-56.32139969 75.13936615]
[-70.95445251 71.84183502]
[-85.58750916 68.54429626]
[-100.22055817 65.24675751]
[-115.38407135 69.76100922]
[-126.09906006 59.41507721]
[-140.73211670 56.11754227]
[-148.21290588 67.07204437]
[-158.95393372 74.80155945]
[-171.65571594 78.39785004]
[-184.79071045 77.45110321]
[-196.78698730 72.09649658]
[-206.21632385 62.99542999]
[-211.96432495 51.25386047]
[-213.36198425 38.28797150]
[-227.85708618 34.42895889]
[-239.41857910 40.21713638]
[-251.43415833 36.67075729]
[-257.59121704 26.22355843]
[-272.00924683 22.08591080]
[-281.17047119 22.72511292]
[-286.66384888 17.72709274]
[-300.99948120 13.31234264]
[-315.33508301 8.89759350]
[-329.67071533 4.48284388]
[-344.00631714 0.06809441]
[-358.34194946 -4.34665537]
[-372.19241333 3.26520967]
[-387.34503174 -1.22630394]
[-394.81002808 -15.15646076]
[-390.15856934 -30.26074600]
[-376.15026855 -37.57805252]
[-361.09600830 -32.76715851]
[-353.92718506 -18.68227386]
[-339.59158325 -14.26752472]
[-325.25595093 -9.85277557]
[-310.92034912 -5.43802595]
[-296.58471680 -1.02327645]
[-282.24911499 3.39147305]
[-267.87161255 7.66787052]
[-253.45356750 11.80551815]
[-236.70440674 6.63668585]
[-223.99807739 19.93385696]
[-209.50297546 23.79286575]
[-198.91545105 10.67800140]
[-183.62054443 3.46526098]
[-166.65602112 3.64032769]
[-151.41445923 11.21626568]
[-140.96482849 24.72130013]
[-137.43458557 41.48448944]
[-122.80152893 44.78202438]
[-108.68466949 40.03191376]
[-96.92302704 50.61370468]
[-82.28997040 53.91124344]
[-67.65692139 57.20877838]
[-53.02386475 60.50631714]
[-38.39081192 63.80385208]
[-23.75775719 67.10138702]
[-9.12470436 70.39892578]
[5.50834942 73.69646454]
[20.20223618 76.71137238]
[34.95149994 79.44253540]
[49.70075989 82.17369843]
[56.88482285 80.29042053]
[64.70676422 85.10224152]
[79.40065002 88.11715698]
[94.09454346 91.13206482]
[108.99435425 92.86282349]
[123.98808289 93.29641724]
[138.98181152 93.73001099]
[153.97555542 94.16360474]
[168.96928406 94.59720612]
[183.96301270 95.03079987]
[198.95674133 95.46439362]
[213.95605469 95.31984711]
[228.93864441 94.59736633]
[243.92123413 93.87488556]
[258.90380859 93.15240479]
[273.88641357 92.42992401]
[288.86898804 91.70744324]
[302.28048706 83.31443787]
[315.36566162 90.42974854]
[330.34823608 89.70726776]
[345.32318115 88.84043884]
[360.28906250 87.82934570]
[375.25494385 86.81824493]
[390.22082520 85.80715179]
[405.23889160 75.19002533]
[420.68786621 83.47135925]
[435.63146973 82.17202759]
[450.57510376 80.87268829]
[465.49090576 79.28559875]
[480.37335205 77.41133118]
[495.25579834 75.53707123]
[510.13824463 73.66281128]
[518.67504883 63.95228577]
[531.14233398 62.72062683]
[540.77569580 70.08619690]
[555.69152832 68.49909973]
[568.62048340 58.41080475]
[583.71807861 64.81345367]
[585.45324707 81.12054443]
[572.04089355 90.55674744]
[557.27862549 83.41490173]
[542.36279297 85.00199890]
[528.78613281 96.08916473]
[512.01251221 88.54525757]
[497.13003540 90.41951752]
[482.24758911 92.29377747]
[467.36517334 94.16803741]
[463.75616455 97.36223602]
[458.08843994 98.29195404]
[451.87442017 95.81630707]
[436.93081665 97.11564636]
[421.98718262 98.41497803]
[413.94305420 107.48938751]
[401.47067261 108.66857910]
[391.23193359 100.77303314]
[376.26605225 101.78413391]
[361.30017090 102.79522705]
[346.33428955 103.80632019]
[339.84149170 107.41203308]
[331.07073975 104.68985748]
[316.08813477 105.41233826]
[303.74832153 113.75366974]
[289.59149170 106.69004059]
[274.60888672 107.41251373]
[259.62631226 108.13499451]
[244.64370728 108.85747528]
[229.66111755 109.57995605]
[214.67852783 110.30243683]
[212.68385315 112.33641815]
[209.74417114 113.68310547]
[206.12451172 113.97128296]
[202.22174072 112.93521118]
[198.52314758 110.45812225]
[183.52941895 110.02452850]
[168.53569031 109.59093475]
[153.54196167 109.15734100]
[138.54821777 108.72374725]
[123.55448914 108.29015350]
[108.56076050 107.85655212]
[119.75768280 117.83798218]
[123.91307831 132.25091553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 85]
[8 84]
[9 83]
[10 81]
[11 80]
[12 79]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[24 69]
[25 68]
[33 62]
[34 61]
[37 59]
[38 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[86 160]
[87 159]
[88 158]
[89 157]
[90 156]
[91 155]
[92 154]
[93 149]
[94 148]
[95 147]
[96 146]
[97 145]
[98 144]
[100 142]
[101 141]
[102 139]
[103 138]
[104 137]
[105 136]
[107 133]
[108 132]
[109 131]
[110 128]
[111 127]
[112 126]
[113 125]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
