%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:45:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACGCAUGGACUAUAAUAGGAUGAACUCCUUCUUAGAGUACCCACUCUGUAACCGGGGACCCAGCGCCUACAGCGCCCACAGCGCCCCAACCUCCUUUCCCCCAA\
) } def
/len { sequence length } bind def

/coor [
[98.43232727 250.74940491]
[86.46417999 260.48422241]
[71.13035583 262.18051147]
[57.32381821 255.29698181]
[49.45018768 242.03012085]
[50.02191162 226.61335754]
[58.85654831 213.96611023]
[73.13500214 208.12408447]
[75.76381683 193.35624695]
[78.39263153 178.58839417]
[68.90908051 175.34167480]
[59.89579391 170.95538330]
[51.48910522 165.49584961]
[43.81616974 159.04566956]
[36.99303818 151.70237732]
[31.12292099 143.57707214]
[26.29460335 134.79264832]
[22.58111572 125.48195648]
[20.03862953 115.78584290]
[5.11775970 117.32456970]
[-9.80310917 118.86328888]
[-24.72397804 120.40201569]
[-35.91951370 131.89285278]
[-51.86881256 130.16094971]
[-60.33692932 116.53485107]
[-54.82785797 101.46734619]
[-39.56768036 96.51692963]
[-26.26270294 105.48114777]
[-11.34183311 103.94242096]
[3.57903552 102.40370178]
[18.49990463 100.86497498]
[20.12351990 83.79007721]
[25.28449440 67.43303680]
[33.75427246 52.51824188]
[45.15776443 39.70619583]
[36.12858582 27.72813416]
[27.09940720 15.75007439]
[18.07022667 3.77201414]
[9.04104805 -8.20604610]
[0.01186873 -20.18410683]
[-15.28778934 -26.08770752]
[-17.55728149 -42.32905579]
[-4.46195030 -52.20044708]
[10.52685070 -45.54703522]
[11.98992920 -29.21328545]
[21.01910782 -17.23522568]
[30.04828644 -5.25716496]
[39.07746506 6.72089481]
[48.10664749 18.69895554]
[57.13582611 30.67701530]
[76.62365723 21.91952705]
[97.71777344 18.52727318]
[118.96871185 20.73335075]
[138.91622925 28.38616943]
[156.18965149 40.95987320]
[169.60205078 57.59047318]
[183.07537842 50.99731827]
[196.54869080 44.40416336]
[210.02200317 37.81100845]
[209.34263611 20.05499649]
[216.36648560 3.78971958]
[229.67895508 -7.82205343]
[246.64746094 -12.54351234]
[263.94192505 -9.49458885]
[278.18835449 0.68439060]
[291.02944946 -7.06842756]
[303.87054443 -14.82124519]
[316.71163940 -22.57406425]
[321.94021606 -37.74119186]
[337.10589600 -42.97389221]
[350.57492065 -34.25809097]
[352.01498413 -18.27979851]
[340.32138062 -7.29619741]
[324.46447754 -9.73296452]
[311.62338257 -1.98014677]
[298.78228760 5.77267122]
[285.94116211 13.52548885]
[288.42321777 25.76283264]
[286.96621704 38.18893814]
[281.69992065 49.56506348]
[273.13461304 58.75230408]
[262.11160278 64.82563019]
[249.72077942 67.16698456]
[237.19270325 65.52816010]
[225.77647400 60.05702972]
[216.61515808 51.28432846]
[203.14184570 57.87748337]
[189.66851807 64.47063446]
[176.19520569 71.06378937]
[179.56121826 82.30746460]
[181.27745056 93.91802216]
[181.30828857 105.65468597]
[179.65312195 117.27410126]
[176.34625244 128.53530884]
[171.45625305 139.20481873]
[165.08453369 149.06135559]
[157.36322021 157.90055847]
[148.45240784 165.53913879]
[138.53688049 171.81867981]
[127.82224274 176.60897827]
[116.53068542 179.81071472]
[104.89634705 181.35748291]
[93.16047668 181.21720886]
[90.53166199 195.98506165]
[87.90284729 210.75289917]
[99.28821564 221.16333008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 105]
[9 104]
[10 103]
[19 31]
[20 30]
[21 29]
[22 28]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[56 89]
[57 88]
[58 87]
[59 86]
[65 77]
[66 76]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
