%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACACCUAGUUUGAGUCAACCUGGUUAAGUACAAAUAUGAGAAGGCUUCUCAUUCAGGUCCAUGCUUGCCUACUCCUCUGUCCACUGCUUUCGUGAAGACAAGAUGAAGUUCACAAUUGUCUUUGCUGGACUUCUUGGAGUCUUUCUAGCUCCUGCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[123.35761261 139.83436584]
[113.76486206 144.86447144]
[103.09934235 147.57890320]
[91.92121124 147.75233459]
[80.83684540 145.29513550]
[70.46598816 140.26251221]
[61.60278320 152.36389160]
[52.73957825 164.46528625]
[54.95051193 179.88441467]
[45.78956985 192.03067017]
[31.07616425 194.04344177]
[22.21295738 206.14482117]
[13.34975052 218.24621582]
[16.00965691 233.82505798]
[6.80653620 246.67333984]
[-8.79956150 249.16838074]
[-21.54981613 239.82994080]
[-23.87972832 224.19833374]
[-14.40700054 211.54751587]
[1.24836338 209.38301086]
[10.11157036 197.28161621]
[18.97477722 185.18023682]
[16.45440102 170.54522705]
[25.27056503 158.14643860]
[40.63819122 155.60206604]
[49.50139618 143.50068665]
[58.36460495 131.39929199]
[55.76198959 124.36535645]
[42.18207932 130.73606873]
[28.60216904 137.10679626]
[19.44180870 148.98483276]
[4.47039127 149.91038513]
[-6.08326244 139.25109863]
[-5.00864935 124.28964233]
[6.96002913 115.24803162]
[21.64464760 118.30308533]
[36.10070038 114.30027771]
[50.55675507 110.29746246]
[47.95413971 103.26351929]
[33.34870911 99.84571838]
[18.74327660 96.42790985]
[4.13784504 93.01010895]
[-10.46758652 89.59230804]
[-25.07301712 86.17450714]
[-39.67844772 82.75669861]
[-56.47861862 85.03499603]
[-63.31862259 69.52207184]
[-50.30545807 58.65497589]
[-36.26064682 68.15126801]
[-21.65521431 71.56907654]
[-7.04978371 74.98687744]
[7.55564785 78.40467834]
[22.16107941 81.82247925]
[36.76651001 85.24028015]
[51.37194061 88.65808868]
[65.90036011 66.40661621]
[88.93051910 55.55592728]
[113.12027740 58.27819061]
[131.40109253 72.60659027]
[144.29463196 64.94130707]
[157.18817139 57.27602768]
[157.09552002 41.98097610]
[164.62139893 28.78029251]
[177.65763855 21.16959190]
[192.65270996 21.10634804]
[205.57902527 28.50741196]
[218.47257996 20.84213066]
[231.36611938 13.17685032]
[229.80892944 -2.99706054]
[235.43020630 -18.18050385]
[247.06056213 -29.36053085]
[262.34356689 -34.34215927]
[278.21319580 -32.17918396]
[291.50875854 -23.35345459]
[304.25311279 -31.26430130]
[316.99743652 -39.17515182]
[329.74179077 -47.08599854]
[342.48614502 -54.99684525]
[343.24136353 -73.07409668]
[354.56942749 -86.98049164]
[371.81652832 -91.29982758]
[388.07278442 -84.49494171]
[400.50479126 -92.88813019]
[412.93676758 -101.28131866]
[425.36877441 -109.67449951]
[437.80075073 -118.06768799]
[422.97045898 -120.31764984]
[412.19161987 -130.74916077]
[409.45730591 -145.49784851]
[415.78045654 -159.09997559]
[428.81860352 -166.51658630]
[443.74176025 -165.00016785]
[455.02154541 -155.11248779]
[458.47933960 -140.51646423]
[452.83486938 -126.62010193]
[466.40237427 -133.01719666]
[479.96987915 -139.41427612]
[493.53738403 -145.81137085]
[507.10488892 -152.20845032]
[520.67242432 -158.60554504]
[534.23992920 -165.00262451]
[547.80743408 -171.39971924]
[561.37493896 -177.79679871]
[574.94244385 -184.19389343]
[580.53350830 -200.74621582]
[596.05059814 -208.01202393]
[611.71539307 -201.95024109]
[625.15789795 -208.60603333]
[638.60034180 -215.26182556]
[650.11193848 -227.70849609]
[665.25891113 -220.09234619]
[662.13354492 -203.42897034]
[645.25616455 -201.81935120]
[631.81365967 -195.16355896]
[618.37121582 -188.50775146]
[615.98614502 -175.81765747]
[606.57708740 -166.69258118]
[593.43481445 -164.63713074]
[581.33953857 -170.62638855]
[567.77203369 -164.22929382]
[554.20452881 -157.83219910]
[540.63702393 -151.43511963]
[527.06951904 -145.03802490]
[513.50195312 -138.64094543]
[499.93447876 -132.24385071]
[486.36697388 -125.84677124]
[472.79946899 -119.44968414]
[459.23196411 -113.05259705]
[446.19393921 -105.63569641]
[433.76196289 -97.24250793]
[421.32995605 -88.84931946]
[408.89797974 -80.45613861]
[396.46597290 -72.06295013]
[397.84997559 -59.94963074]
[393.91180420 -48.33462524]
[385.34542847 -39.45686340]
[373.74307251 -35.05534363]
[361.29953003 -36.02870178]
[350.39700317 -42.25249481]
[337.65264893 -34.34164810]
[324.90829468 -26.43079948]
[312.16394043 -18.51995087]
[299.41958618 -10.60910320]
[301.57397461 3.12041402]
[298.31405640 16.67480469]
[290.10144043 27.99347878]
[278.15310669 35.34275055]
[264.26129150 37.58134842]
[250.52471924 34.33754730]
[239.03140259 26.07039452]
[226.13784790 33.73567581]
[213.24430847 41.40095520]
[213.57107544 56.29252243]
[206.35208130 69.43566132]
[193.43830872 77.25237274]
[178.24609375 77.55771637]
[164.85345459 70.16957092]
[151.95991516 77.83485413]
[139.06637573 85.50013733]
[142.10240173 94.80554962]
[142.91238403 104.73458862]
[141.37229919 114.75279999]
[137.48678589 124.30238342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 27]
[7 26]
[8 25]
[11 22]
[12 21]
[13 20]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[45 49]
[59 159]
[60 158]
[61 157]
[66 152]
[67 151]
[68 150]
[74 143]
[75 142]
[76 141]
[77 140]
[78 139]
[82 133]
[83 132]
[84 131]
[85 130]
[86 129]
[95 128]
[96 127]
[97 126]
[98 125]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
