%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGAAGGGGUGCCCGGGACGAAGCCAUGGCCCUGGAGGCGGCGGGAGGGCCGCCGGAGGAAACGCUGUCACUGUGGAAACGGGAGCAAGCUCGGCUGAAGGCCCACGUCGUAGACCGGGACACCG\
) } def
/len { sequence length } bind def

/coor [
[86.08505249 487.76794434]
[79.55776215 501.56497192]
[67.68518829 511.15686035]
[52.82463074 514.63922119]
[37.92667007 511.32052612]
[25.94930458 501.85980225]
[19.27064896 488.13543701]
[19.21675682 472.87240601]
[25.79832840 459.10122681]
[37.70858383 449.55615234]
[52.58274078 446.13235474]
[55.84419250 431.49121094]
[59.10564423 416.85006714]
[62.36709595 402.20895386]
[65.45002747 387.52917480]
[68.35398865 372.81295776]
[71.25794983 358.09674072]
[74.16191101 343.38052368]
[77.06586456 328.66430664]
[79.06902313 313.79867554]
[80.16394806 298.83868408]
[81.25888062 283.87869263]
[82.35381317 268.91870117]
[70.83747101 256.72686768]
[71.66841125 239.63963318]
[84.82042694 228.18054199]
[85.55074310 213.19833374]
[86.28105927 198.21612549]
[77.40795898 183.12687683]
[87.37400818 167.69982910]
[87.73927307 152.70426941]
[88.10453796 137.70872498]
[88.46980286 122.71316528]
[88.83506775 107.71761322]
[83.30641174 93.77365875]
[72.76457977 83.10267639]
[57.51588440 85.28978729]
[44.06051636 78.16191864]
[37.46041107 64.63777161]
[40.05835342 49.99575424]
[29.51652527 39.32477188]
[18.97469711 28.65379143]
[8.43286800 17.98280907]
[-2.10896063 7.31182861]
[-12.65078926 -3.35915303]
[-28.45432472 -3.20473433]
[-39.67964554 -14.32982731]
[-39.66697311 -30.13411140]
[-28.42382050 -41.24118423]
[-12.62055397 -41.06141663]
[-1.63297009 -29.70146370]
[-1.97980785 -13.90098190]
[8.56202126 -3.23000026]
[19.10384941 7.44098139]
[29.64567757 18.11196327]
[40.18750763 28.78294373]
[50.72933578 39.45392609]
[65.40190125 37.03446198]
[78.84468079 43.79875183]
[85.80818176 57.33991623]
[83.43556213 72.56085205]
[93.97739410 83.23183441]
[101.47683716 83.14051056]
[101.29441833 68.14161682]
[116.29331207 67.95943451]
[116.47572327 82.95786285]
[123.97516632 82.86653900]
[134.25401306 71.94201660]
[144.53286743 61.01749802]
[154.67794800 49.96862411]
[164.68772888 38.79704285]
[164.00311279 23.23526001]
[174.31359863 12.04827976]
[189.15359497 11.49150467]
[199.16337585 0.31992230]
[209.17315674 -10.85166073]
[219.18293762 -22.02324295]
[222.02207947 -38.17475510]
[237.51983643 -43.53677750]
[249.73347473 -32.59331512]
[246.09861755 -16.60206985]
[230.35452271 -12.01346111]
[220.34474182 -0.84187829]
[210.33496094 10.32970428]
[200.32518005 21.50128746]
[201.39480591 36.31315613]
[191.40261841 47.78532410]
[175.85931396 48.80682373]
[165.84953308 59.97840881]
[163.70692444 67.13333130]
[155.45739746 71.29634857]
[145.17854309 82.22087097]
[134.89968872 93.14539337]
[125.88382721 106.52062225]
[113.77074432 111.30790710]
[103.83061981 108.08288574]
[103.46535492 123.07843781]
[103.10009003 138.07398987]
[102.73482513 153.06953430]
[102.36956024 168.06509399]
[110.71653748 177.98663330]
[110.04360962 190.53205872]
[101.26326752 198.94642639]
[100.53295135 213.92864990]
[99.80264282 228.91085815]
[109.97855377 237.82905579]
[113.08214569 250.79849243]
[108.19083405 262.99456787]
[97.31379700 270.01364136]
[96.21886444 284.97363281]
[95.12393951 299.93362427]
[94.02900696 314.89358521]
[107.20925903 307.73251343]
[121.12100220 313.34173584]
[125.64791107 327.64233398]
[117.49810791 340.23519897]
[102.59796143 341.96310425]
[91.78208160 331.56826782]
[88.87812042 346.28448486]
[85.97416687 361.00070190]
[83.07020569 375.71691895]
[80.16624451 390.43313599]
[81.58057404 399.56466675]
[77.00823212 405.47039795]
[73.74678040 420.11154175]
[70.48532867 434.75265503]
[67.22387695 449.39379883]
[79.23840332 458.80731201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 127]
[12 126]
[13 125]
[14 124]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 112]
[21 111]
[22 110]
[23 109]
[26 105]
[27 104]
[28 103]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[35 62]
[36 61]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[67 93]
[68 92]
[69 91]
[70 89]
[71 88]
[74 85]
[75 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
