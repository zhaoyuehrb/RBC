%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAGUUCCUGGUCCCCCACUUUCUCAACCCCACAGAUGCUCCGGGCCCCUGCCCCUGCCCCAGCUAUGGCUCCUGGGGCUCCCUCAUCCAGCCCCAGCCCUAUCCUGGCUGUGCUGCUCUUCUCUUCUUUGGUGCUGUCCCCGGCCCAGGCCAUCGUGGUUUACA\
) } def
/len { sequence length } bind def

/coor [
[-14.45223904 309.65216064]
[-22.66881752 322.20156860]
[-30.88539505 334.75097656]
[-31.97150040 350.53488159]
[-45.41638184 356.94458008]
[-53.63295746 369.49398804]
[-46.83185577 383.19409180]
[-47.79497528 398.35882568]
[-56.16372299 410.92187500]
[-69.60721588 417.56478882]
[-84.47065735 416.59329224]
[-92.68723297 429.14273071]
[-100.90380859 441.69213867]
[-101.28258514 458.08691406]
[-115.79814148 465.71780396]
[-129.51812744 456.73483276]
[-128.32858276 440.37887573]
[-113.45322418 433.47555542]
[-105.23664856 420.92614746]
[-97.02007294 408.37673950]
[-103.85427856 395.14196777]
[-103.14157104 380.16369629]
[-94.97334290 367.46936035]
[-81.45906067 360.52233887]
[-66.18237305 361.27743530]
[-57.96579742 348.72799683]
[-57.46739578 333.84173584]
[-43.43481064 326.53442383]
[-35.21823502 313.98498535]
[-27.00165558 301.43557739]
[-28.56154442 278.35073853]
[-7.40392065 267.33453369]
[-0.64409614 253.94406128]
[6.11572838 240.55358887]
[12.87555313 227.16311646]
[13.08364964 219.74395752]
[19.88902283 213.58721924]
[26.89805222 200.32548523]
[33.90708160 187.06376648]
[40.91611099 173.80203247]
[37.65143967 162.12727356]
[43.41660309 151.00910950]
[55.59568024 146.68066406]
[62.85146332 133.55232239]
[57.37134933 119.58921051]
[43.12293625 114.90063477]
[28.87452507 110.21205902]
[14.62611198 105.52348328]
[-1.30805564 109.40089417]
[-12.43583965 97.35496521]
[-7.30992889 81.77751160]
[8.79657841 78.69328308]
[19.31468964 91.27507019]
[33.56310272 95.96364594]
[47.81151199 100.65222168]
[62.05992508 105.34079742]
[66.79071808 99.52104187]
[76.25230408 87.88152313]
[80.98310089 82.06176758]
[73.48310089 69.07138824]
[65.98310089 56.08100510]
[58.48310089 43.09062195]
[50.98310089 30.10024261]
[43.48310089 17.10986137]
[35.98310089 4.11948013]
[20.56866264 3.48814440]
[7.95567989 -5.39533615]
[2.16891241 -19.69627571]
[5.05489588 -34.85129547]
[15.69272423 -46.02448654]
[30.68790436 -49.65052032]
[45.25552750 -44.57234573]
[54.74711990 -32.41038895]
[56.13394928 -17.04548454]
[48.97348404 -3.38052011]
[56.47348404 9.60986137]
[63.97348404 22.60024261]
[71.47348022 35.59062195]
[78.97348022 48.58100510]
[86.47348022 61.57138443]
[93.97348022 74.56176758]
[101.41814423 75.47114563]
[101.06420135 60.47532272]
[94.48974609 46.99286652]
[100.39620209 33.20469284]
[114.69192505 28.66241455]
[127.47370148 36.51265335]
[129.88708496 51.31723404]
[120.26069641 62.82020950]
[116.30747986 77.28990173]
[123.75214386 78.19928741]
[134.15855408 67.39620972]
[144.56497192 56.59312820]
[154.97138977 45.79005051]
[155.51768494 32.87622070]
[164.44258118 24.09005356]
[176.56094360 23.76848984]
[187.16754150 13.16188908]
[197.77415466 2.55528712]
[208.38075256 -8.05131435]
[218.98735046 -18.65791702]
[217.44429016 -34.21918106]
[226.30746460 -47.10243225]
[241.39196777 -51.22458649]
[255.57533264 -44.63929367]
[262.16061401 -30.45592499]
[258.03845215 -15.37143517]
[245.15521240 -6.50825787]
[229.59394836 -8.05131435]
[218.98735046 2.55528712]
[208.38075256 13.16188908]
[197.77415466 23.76848984]
[187.16754150 34.37509155]
[183.56838989 51.53291702]
[165.77445984 56.19646454]
[155.36805725 66.99954224]
[144.96163940 77.80261993]
[134.55522156 88.60569763]
[135.46459961 96.05036926]
[149.77636719 91.55887604]
[164.08811951 87.06738281]
[174.58065796 76.34793091]
[189.40184021 74.03868866]
[202.65817261 81.05790710]
[209.07843018 94.61447144]
[206.10966492 109.31774902]
[194.93235779 119.32114410]
[179.99107361 120.64691162]
[167.22756958 112.76852417]
[152.25546265 111.85411072]
[137.28335571 110.93969727]
[138.19273376 118.38436127]
[150.89360046 126.36483765]
[163.59446716 134.34532166]
[172.56645203 136.27452087]
[176.45625305 142.59565735]
[189.00567627 150.81222534]
[201.55508423 159.02880859]
[214.10450745 167.24537659]
[230.49926758 167.62416077]
[238.13017273 182.13970947]
[229.14718628 195.85969543]
[212.79122925 194.67016602]
[205.88792419 179.79479980]
[193.33850098 171.57821655]
[180.78909302 163.36164856]
[168.23966980 155.14506531]
[155.61398315 147.04618835]
[142.91311646 139.06570435]
[130.21224976 131.08522034]
[75.97981262 140.80810547]
[68.72402954 153.93644714]
[69.51252747 172.31445312]
[54.17784119 180.81106567]
[47.16881180 194.07278442]
[40.15978241 207.33451843]
[33.15075302 220.59625244]
[26.26602554 233.92294312]
[19.50620079 247.31341553]
[12.74637699 260.70388794]
[5.98655224 274.09436035]
[9.78053379 279.94143677]
[11.54559898 286.63088989]
[11.13642597 293.48532104]
[8.62618542 299.82107544]
[4.29600000 305.01626587]
[-1.39616859 308.57189941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[6 25]
[11 20]
[12 19]
[13 18]
[32 161]
[33 160]
[34 159]
[35 158]
[37 157]
[38 156]
[39 155]
[40 154]
[43 152]
[44 151]
[45 56]
[46 55]
[47 54]
[48 53]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[91 118]
[92 117]
[93 116]
[94 115]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[132 150]
[133 149]
[134 148]
[136 147]
[137 146]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
