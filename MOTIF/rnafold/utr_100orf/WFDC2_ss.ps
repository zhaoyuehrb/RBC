%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUGCACCCCGCCCGGGCAUAGCACCAUGCCUGCUUGUCGCCUAGGCCCGCUAGCCGCCGCCCUCCUCCUCAGCCUGCUGCUGUUCGGCUUCACCCUAGUCUCAGGCACAGGAGCAGAGAAGACUG\
) } def
/len { sequence length } bind def

/coor [
[116.61068726 207.97171021]
[102.00715637 211.39761353]
[87.02497864 210.66662598]
[72.82431793 205.83534241]
[60.50482941 197.27787781]
[51.02048492 185.65690613]
[45.10571671 171.87228394]
[43.21854401 156.99147034]
[45.50510406 142.16677856]
[51.78833389 128.54617310]
[61.58168030 117.18437195]
[74.12678528 108.96121216]
[88.44738770 104.51424408]
[74.03182220 100.36797333]
[61.80461121 109.73822784]
[46.58235931 110.10767365]
[34.20778275 101.54415894]
[29.30725479 87.50411224]
[14.89169025 83.35784912]
[0.47612619 79.21158600]
[-8.74267387 79.84336853]
[-14.23768711 74.78485870]
[-28.54801178 70.28878784]
[-42.85833359 65.79272461]
[-57.16865921 61.29665375]
[-65.23707581 68.54936981]
[-75.52727509 71.72029114]
[-86.11728668 70.28862000]
[-95.05896759 64.58662415]
[-100.73636627 55.72574997]
[-102.15762329 45.38057327]
[-116.10157776 39.85190964]
[-130.04553223 34.32324982]
[-143.98948669 28.79459000]
[-158.06393433 23.60711861]
[-172.26054382 18.76391220]
[-187.23594666 24.51864243]
[-200.99868774 16.27447891]
[-202.99118042 0.35563672]
[-191.68495178 -11.02630901]
[-175.75317383 -9.14010429]
[-167.41732788 4.56731558]
[-153.22073364 9.41052151]
[-148.53118896 8.09553051]
[-142.96876526 9.78708172]
[-138.46083069 14.85063362]
[-124.51687622 20.37929344]
[-110.57292175 25.90795517]
[-96.62895966 31.43661499]
[-79.49407959 22.35656357]
[-60.86753082 28.74907494]
[-52.67259216 46.98632812]
[-38.36226654 51.48239899]
[-24.05194283 55.97846603]
[-9.74161911 60.47453308]
[4.62239027 64.79602051]
[19.03795433 68.94228363]
[33.45351791 73.08854675]
[45.06459045 63.79764175]
[60.09792709 63.11730194]
[72.79772949 71.51780701]
[78.17808533 85.95241547]
[92.59365082 90.09867859]
[100.54647827 87.69106293]
[108.19614410 90.85923004]
[122.94663239 88.13467407]
[137.69711304 85.41011810]
[152.37687683 82.32718658]
[166.97721863 78.88770294]
[181.57756042 75.44821167]
[196.17790222 72.00872803]
[210.77824402 68.56923676]
[219.11662292 55.41214371]
[233.97244263 52.13199997]
[246.46434021 60.16245651]
[261.06466675 56.72296906]
[275.66500854 53.28348160]
[290.26535034 49.84399414]
[304.86569214 46.40450668]
[313.20407104 33.24741364]
[328.05990601 29.96726990]
[340.55178833 37.99772644]
[355.15213013 34.55823898]
[369.75247192 31.11874962]
[384.35281372 27.67926216]
[389.60275269 18.00483131]
[399.14303589 12.97240257]
[409.65258789 14.05699348]
[417.62344360 20.65041924]
[432.37393188 17.92586517]
[442.61676025 5.57822847]
[458.65338135 6.03181076]
[468.18191528 18.93866348]
[463.89285278 34.39775467]
[449.07641602 40.55018997]
[435.09848022 32.67634964]
[420.34799194 35.40090561]
[406.71505737 49.02743912]
[387.79229736 42.27960205]
[373.19195557 45.71908951]
[358.59161377 49.15857697]
[343.99127197 52.59806442]
[336.39761353 65.36019135]
[321.63980103 69.05631256]
[308.30517578 61.00484467]
[293.70483398 64.44433594]
[279.10449219 67.88381958]
[264.50415039 71.32331085]
[249.90382385 74.76279449]
[242.31016541 87.52492523]
[227.55233765 91.22103882]
[214.21772766 83.16957855]
[199.61738586 86.60906219]
[185.01704407 90.04855347]
[170.41671753 93.48803711]
[155.81637573 96.92752838]
[152.54209900 100.53310394]
[146.93096924 102.05533600]
[140.42167664 100.16060638]
[125.67118835 102.88516235]
[110.92070007 105.60971069]
[124.74508667 111.43091583]
[136.43008423 120.83628082]
[145.07084656 133.09748840]
[149.99826050 147.26507568]
[150.83078003 162.24195862]
[147.50392151 176.86837769]
[140.27532959 190.01170349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 63]
[14 62]
[18 58]
[19 57]
[20 56]
[22 55]
[23 54]
[24 53]
[25 52]
[31 49]
[32 48]
[33 47]
[34 46]
[35 43]
[36 42]
[65 121]
[66 120]
[67 119]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[75 109]
[76 108]
[77 107]
[78 106]
[79 105]
[82 102]
[83 101]
[84 100]
[85 99]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
