%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUGGCGGCGGUUGGGGCUCGGCGCUCGCUCGCUCGCUGGGCGGGCGGGCGGUGCGAUGUCCGGAGAGGAUGGCCCGGCGGCUGGCCCGGGGGCGGCGGCGGCGGCUGCCCGGGAGCGGCGACGGGAGCAGCUGCGGCAGUGGGGGGCGCGGGCGG\
) } def
/len { sequence length } bind def

/coor [
[68.79026794 256.49389648]
[75.95454407 243.31538391]
[87.98612976 234.35765076]
[102.66555786 231.27313232]
[117.28492737 234.63082886]
[129.14543152 243.80899048]
[125.31118011 229.30732727]
[114.57762909 218.98065186]
[118.53032684 203.66116333]
[114.69607544 189.15950012]
[110.86183167 174.65782166]
[107.02758026 160.15614319]
[103.19332886 145.65447998]
[99.35907745 131.15280151]
[95.52483368 116.65113068]
[83.63967896 107.50000000]
[68.63967896 107.50000000]
[53.63967896 107.50000000]
[38.63967896 107.50000000]
[29.47897148 119.88497925]
[14.95193863 124.44773102]
[0.69239676 119.63842010]
[-7.89811039 107.50000000]
[-22.89811134 107.50000000]
[-37.89810944 107.50000000]
[-52.89810944 107.50000000]
[-61.53423309 110.64313507]
[-68.19560242 107.34790802]
[-83.19263458 107.04967499]
[-98.18967438 106.75144196]
[-113.18670654 106.45320892]
[-128.18374634 106.15498352]
[-143.18077087 105.85675049]
[-158.17781067 105.55851746]
[-173.17485046 105.26028442]
[-188.17187500 104.96205139]
[-203.16891479 104.66381836]
[-218.16595459 104.36558533]
[-234.12216187 110.09580994]
[-244.04557800 96.34945679]
[-233.58351135 83.00848389]
[-217.86772156 89.36854553]
[-202.87068176 89.66677856]
[-187.87364197 89.96501160]
[-172.87661743 90.26324463]
[-157.87957764 90.56147766]
[-142.88253784 90.85971069]
[-127.88550568 91.15794373]
[-112.88847351 91.45617676]
[-97.89144135 91.75440979]
[-82.89440155 92.05264282]
[-67.89736938 92.35087585]
[-52.89810944 92.50000000]
[-37.89810944 92.50000000]
[-22.89811134 92.50000000]
[-7.89811039 92.50000000]
[0.69239676 80.36157990]
[14.95193863 75.55226898]
[29.47897148 80.11502075]
[38.63967896 92.50000000]
[53.63967896 92.50000000]
[68.63967896 92.50000000]
[83.63967896 92.50000000]
[69.05964661 88.97542572]
[57.60633850 79.28926086]
[51.70997620 65.49676514]
[52.62167740 50.52449799]
[60.14799500 37.54934692]
[72.69195557 29.32444382]
[87.59191895 27.59498787]
[101.68634033 32.72794342]
[111.98460388 43.63417435]
[116.30155945 57.99954605]
[113.72122192 72.77593994]
[104.79125214 84.82790375]
[116.30319214 75.21150208]
[127.81513214 65.59510040]
[139.32707214 55.97869492]
[138.98381042 42.48138809]
[146.38371277 31.42196465]
[158.62716675 26.72965050]
[171.14521790 29.91469002]
[182.84606934 20.52906990]
[194.54693604 11.14344788]
[206.24778748 1.75782716]
[212.49592590 -15.53705025]
[229.90193176 -17.58195114]
[241.41387939 -27.19835472]
[252.92581177 -36.81475830]
[264.43774414 -46.43116379]
[275.94970703 -56.04756927]
[287.46163940 -65.66397095]
[298.87741089 -75.39434814]
[310.19586182 -85.23773193]
[321.51434326 -95.08112335]
[326.85006714 -109.97544098]
[341.53100586 -112.48911285]
[352.84948730 -122.33249664]
[357.67056274 -138.00698853]
[373.71383667 -141.40481567]
[384.47537231 -129.03059387]
[378.88461304 -113.61386871]
[362.69287109 -111.01403046]
[351.37438965 -101.17064667]
[346.84826660 -86.98038483]
[331.35772705 -83.76264954]
[320.03927612 -73.91926575]
[308.72079468 -64.07588196]
[305.72097778 -57.27635574]
[297.07803345 -54.15203476]
[285.56610107 -44.53562927]
[274.05416870 -34.91922379]
[262.54223633 -25.30282021]
[251.03028870 -15.68641472]
[239.51834106 -6.07001019]
[238.11201477 5.97891712]
[228.55218506 14.08245087]
[215.63340759 13.45868683]
[203.93255615 22.84430695]
[192.23168945 32.22993088]
[180.53083801 41.61555099]
[179.42915344 58.37255859]
[166.30773926 69.38497925]
[148.94346619 67.49063110]
[137.43153381 77.10704041]
[125.91959381 86.72344208]
[114.40765381 96.33984375]
[115.19190216 102.08609772]
[113.70126343 107.87588501]
[110.02650452 112.81687927]
[113.86075592 127.31855011]
[117.69499969 141.82022095]
[121.52925110 156.32189941]
[125.36350250 170.82357788]
[129.19775391 185.32524109]
[133.03199768 199.82691956]
[144.03981018 211.19084167]
[139.81285095 225.47306824]
[143.64710999 239.97474670]
[151.28584290 248.06584167]
[150.56079102 257.91439819]
[157.45024109 271.23861694]
[164.33970642 284.56286621]
[179.12918091 290.77987671]
[183.35075378 306.25753784]
[173.76602173 319.12271118]
[157.72755432 319.50631714]
[147.53869629 307.11410522]
[151.01547241 291.45233154]
[144.12600708 278.12808228]
[137.23654175 264.80386353]
[134.60183716 279.57064819]
[126.01576233 291.87020874]
[113.06221771 299.43365479]
[98.13073730 300.86575317]
[83.97573090 295.90231323]
[73.20836639 285.45895386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 139]
[7 138]
[9 136]
[10 135]
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 63]
[17 62]
[18 61]
[19 60]
[23 56]
[24 55]
[25 54]
[26 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[75 127]
[76 126]
[77 125]
[78 124]
[82 121]
[83 120]
[84 119]
[85 118]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 108]
[94 107]
[95 106]
[97 104]
[98 103]
[141 151]
[142 150]
[143 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
