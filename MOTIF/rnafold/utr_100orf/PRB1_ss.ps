%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:15:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGAGUUGGGAGUGACUCCAGAGCCUCCUGCAAGAUGCUGUUGAUUCUGCUGUCAGUGGCCUUGCUGGCCCUGAGCUCAGCUCAGAACUUAAAUGAAGAUGUCAGCCAGGAAGAAUCUCCCUCCCUAAUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[-120.50028229 388.08908081]
[-131.22692871 398.57427979]
[-141.95356750 409.05944824]
[-146.46330261 426.87167358]
[-163.56498718 430.64138794]
[-174.05017090 441.36804199]
[-177.85559082 449.76895142]
[-184.89823914 452.21609497]
[-195.62487793 462.70129395]
[-206.35151672 473.18646240]
[-210.86126709 490.99871826]
[-227.96293640 494.76840210]
[-238.44813538 505.49505615]
[-248.93331909 516.22167969]
[-259.41851807 526.94836426]
[-266.16647339 542.50152588]
[-282.97982788 540.32281494]
[-285.54067993 523.56341553]
[-270.14514160 516.46313477]
[-259.65997314 505.73651123]
[-249.17477417 495.00985718]
[-238.68959045 484.28323364]
[-238.49772644 472.13433838]
[-229.77484131 463.10806274]
[-216.83670044 462.45983887]
[-206.11006165 451.97463989]
[-195.38342285 441.48944092]
[-184.77682495 430.88284302]
[-174.29162598 420.15621948]
[-174.09976196 408.00732422]
[-165.37689209 398.98101807]
[-152.43875122 398.33282471]
[-141.71211243 387.84762573]
[-130.98547363 377.36242676]
[-133.33850098 366.09625244]
[-129.88760376 354.99035645]
[-121.38987732 346.87533569]
[-109.90383148 343.87863159]
[-98.29143524 346.86782837]
[-87.09867859 336.88171387]
[-75.90592194 326.89559937]
[-64.71316528 316.90951538]
[-53.52041245 306.92340088]
[-42.32765961 296.93731689]
[-31.13490295 286.95120239]
[-21.02204704 275.87283325]
[-12.09513187 263.81838989]
[-3.16821575 251.76391602]
[5.75870037 239.70944214]
[14.68561649 227.65496826]
[23.61253357 215.60050964]
[31.83931160 203.05776978]
[39.33930969 190.06739807]
[46.83930969 177.07701111]
[54.33930969 164.08663940]
[54.00224686 149.19584656]
[67.60303497 141.11318970]
[75.10303497 128.12281799]
[60.87736511 105.49549103]
[65.03455353 77.73326111]
[87.29335785 58.50156403]
[85.92933655 43.56370926]
[84.56531525 28.62585831]
[83.20129395 13.68800545]
[71.84223938 2.35877514]
[73.76066589 -13.56916237]
[87.48491669 -21.87725639]
[102.48692322 -16.19224930]
[107.25843048 -0.87519026]
[98.13914490 12.32398224]
[99.50316620 27.26183510]
[100.86718750 42.19968796]
[102.23120880 57.13753891]
[116.84420013 60.52289581]
[124.63795471 47.70660400]
[132.43171692 34.89031219]
[140.22547913 22.07402229]
[148.01924133 9.25773144]
[155.81298828 -3.55855918]
[158.87664795 -20.23340225]
[175.74792480 -21.90553856]
[182.02516174 -6.15648079]
[168.62928772 4.23519993]
[160.83552551 17.05149078]
[153.04176331 29.86778259]
[145.24800110 42.68407440]
[137.45425415 55.50036621]
[129.66049194 68.31665802]
[134.56088257 74.39765930]
[138.25149536 81.20062256]
[140.63362122 88.49065399]
[141.65321350 96.02111053]
[141.30187988 103.54187012]
[139.61634827 110.80770111]
[136.67646790 117.58618927]
[132.60169983 123.66525269]
[127.54660034 128.85968018]
[121.69494629 133.01681519]
[115.25318909 136.02095032]
[108.44322205 137.79644775]
[101.49469757 138.30952454]
[94.63735962 137.56851196]
[88.09341431 135.62281799]
[80.59341431 148.61318970]
[80.39402771 164.43313599]
[67.32968903 171.58663940]
[59.82969284 184.57701111]
[52.32969284 197.56739807]
[44.82969284 210.55776978]
[59.80797577 209.75094604]
[69.95069122 220.80198669]
[67.86528778 235.65632629]
[55.07173157 243.48733521]
[40.89461899 238.58738708]
[35.66699982 224.52742004]
[26.74008369 236.58189392]
[17.81316757 248.63635254]
[8.88625145 260.69082642]
[-0.04066512 272.74530029]
[-8.96758080 284.79974365]
[5.69932079 281.65618896]
[19.79372597 286.78921509]
[29.00404358 298.62854004]
[30.51276398 313.55249023]
[23.85835838 326.99563599]
[11.07645988 334.84567261]
[-3.92284441 334.70120239]
[-16.55114746 326.60638428]
[-22.94535255 313.03753662]
[-21.14879990 298.14395142]
[-32.34155655 308.13006592]
[-43.53431320 318.11618042]
[-54.72706604 328.10226440]
[-65.91982269 338.08837891]
[-77.11257935 348.07446289]
[-88.30533600 358.06057739]
[-88.60304260 376.93569946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 29]
[6 28]
[8 27]
[9 26]
[10 25]
[12 22]
[13 21]
[14 20]
[15 19]
[39 136]
[40 135]
[41 134]
[42 133]
[43 132]
[44 131]
[45 130]
[46 120]
[47 119]
[48 118]
[49 117]
[50 116]
[51 115]
[52 109]
[53 108]
[54 107]
[55 106]
[57 104]
[58 103]
[61 73]
[62 72]
[63 71]
[64 70]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
