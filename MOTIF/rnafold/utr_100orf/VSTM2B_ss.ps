%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAACAGCGGAACCGGCUCGGUGCCCUCGGAUACCUGCCGCCUCUGCUGCUGCAUGCCCUGCUGCUCUUCGUGGCCGACGCUGCAUUCACAGAAGUCC\
) } def
/len { sequence length } bind def

/coor [
[53.34480667 176.87828064]
[49.82208633 162.29780579]
[50.45365906 147.31111145]
[55.19062042 133.07870483]
[63.66616058 120.70271301]
[75.22396088 111.14147186]
[88.96432495 105.13668823]
[74.37065125 101.66904449]
[59.77696991 98.20140076]
[45.18329239 94.73375702]
[30.58961487 91.26611328]
[15.99593639 87.79846954]
[1.40225840 84.33081818]
[-11.94785404 92.35654449]
[-26.69852066 88.63196564]
[-34.26755142 75.85521698]
[-48.86122894 72.38757324]
[-63.45490646 68.91992950]
[-78.04858398 65.45228577]
[-89.53278351 71.57357025]
[-101.70059967 68.26165771]
[-108.07604980 57.85149384]
[-122.55482483 53.93166351]
[-137.03359985 50.01183701]
[-151.51237488 46.09200668]
[-166.05036926 42.39782333]
[-180.64404297 38.93017960]
[-197.45188904 41.15110016]
[-204.23889160 25.61492157]
[-191.18870544 14.79231167]
[-177.17639160 24.33650017]
[-162.58271790 27.80414391]
[-155.21771240 26.26070786]
[-147.59254456 31.61323166]
[-133.11376953 35.53305817]
[-118.63499451 39.45288849]
[-104.15621948 43.37271881]
[-87.55870056 37.91160583]
[-74.58094025 50.85860443]
[-59.98726273 54.32624817]
[-45.39358521 57.79389572]
[-30.79990578 61.26153946]
[-18.29254532 53.25519562]
[-3.44308329 56.56398773]
[4.86990309 69.73714447]
[19.46358109 73.20478821]
[34.05725861 76.67243195]
[48.65093613 80.14007568]
[63.24461365 83.60771942]
[77.83829498 87.07537079]
[92.43196869 90.54301453]
[99.18136597 87.96315765]
[106.16890717 89.68733978]
[120.21944427 84.43544006]
[134.26997375 79.18354034]
[148.32051086 73.93164825]
[155.41375732 67.89190674]
[162.89053345 68.74236298]
[177.09761047 63.92997360]
[181.84492493 47.78410339]
[195.10925293 37.69674301]
[211.60646057 37.44057465]
[224.90872192 46.91969299]
[238.95925903 41.66779709]
[253.00979614 36.41590118]
[267.06033325 31.16400337]
[281.11087036 25.91210556]
[289.04666138 11.96926117]
[304.91720581 9.62292862]
[316.54797363 20.67301178]
[315.01687622 36.64283371]
[301.49838257 45.28171539]
[286.36276245 39.96264267]
[272.31222534 45.21453857]
[258.26168823 50.46643448]
[244.21115112 55.71833420]
[230.16061401 60.97023010]
[227.76348877 74.20315552]
[219.03627014 84.57770538]
[206.20475769 89.27992249]
[192.62599182 86.96440887]
[181.91000366 78.13704681]
[167.70292664 82.94943237]
[153.57241821 87.98218536]
[139.52188110 93.23407745]
[125.47133636 98.48597717]
[111.42079926 103.73787689]
[125.80458069 107.99309540]
[138.45884705 116.04726410]
[148.40370178 127.27668762]
[154.86903381 140.81179810]
[157.35421753 155.60449219]
[155.66680908 170.50927734]
[149.93745422 184.37197876]
[140.60981750 196.11912537]
[128.40620422 204.84104919]
[114.27162170 209.86235046]
[99.30059814 210.79421997]
[84.65242767 207.56448364]
[71.46142578 200.42324829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 51]
[8 50]
[9 49]
[10 48]
[11 47]
[12 46]
[13 45]
[16 42]
[17 41]
[18 40]
[19 39]
[22 37]
[23 36]
[24 35]
[25 34]
[26 32]
[27 31]
[53 87]
[54 86]
[55 85]
[56 84]
[58 83]
[59 82]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
