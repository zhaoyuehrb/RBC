%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGUUGUUGCACAGUUGUUUCCGGGAAGCGGGACUCCAAAUGGGUCGCAGUCGCAGCCGCUCUCCACGGAGGGAACGUAGGCGUUCCCGGUCCACAUCCCGGGAGAGAGAACGCAGGCGCCGAGAAAGGUCCAGGUCUC\
) } def
/len { sequence length } bind def

/coor [
[91.62736511 160.98916626]
[84.02645874 173.92076111]
[71.70208740 182.47119141]
[56.92772675 185.06315613]
[42.42880249 181.21852112]
[30.87993050 171.64651489]
[24.41152763 158.11285400]
[24.21682167 143.11412048]
[30.33172989 129.41711426]
[41.62823486 119.54853058]
[56.02246857 115.32881927]
[70.85627747 117.53530121]
[58.14915466 109.56478882]
[42.58314514 116.08748627]
[26.35064507 112.11425781]
[15.76899815 99.39426422]
[14.83544636 83.04061127]
[1.95630026 75.35115814]
[-10.92284584 67.66171265]
[-26.73817825 67.23065186]
[-33.69956589 54.06295395]
[-46.57871246 46.37350845]
[-59.45785904 38.68405914]
[-72.33700562 30.99461174]
[-85.21614838 23.30516434]
[-98.09529877 15.61571693]
[-111.05812836 8.06820297]
[-124.10308075 0.66353214]
[-137.14804077 -6.74113846]
[-150.27354431 -14.00207138]
[-163.47801208 -21.11839104]
[-176.68247986 -28.23471069]
[-189.88694763 -35.35103226]
[-203.09141541 -42.46735001]
[-216.99642944 -48.09323883]
[-231.43437195 -52.16088104]
[-245.87232971 -56.22852325]
[-260.31027222 -60.29616547]
[-274.74822998 -64.36380768]
[-289.39016724 -57.80689240]
[-303.57897949 -65.29399109]
[-306.43023682 -81.08164215]
[-295.75671387 -93.05890656]
[-279.74618530 -92.03785706]
[-270.68057251 -78.80175018]
[-256.24261475 -74.73410797]
[-241.80468750 -70.66646576]
[-227.36672974 -66.59882355]
[-212.92878723 -62.53118515]
[-205.38127136 -75.49401855]
[-216.04597473 -86.04220581]
[-232.03793335 -89.67388153]
[-236.62966919 -105.41706848]
[-225.09757996 -117.07653046]
[-209.30490112 -112.65801239]
[-205.49778748 -96.70690155]
[-194.83308411 -86.15871429]
[-190.12905884 -74.24040222]
[-190.99290466 -63.36383438]
[-195.97509766 -55.67181778]
[-182.77062988 -48.55550003]
[-169.56616211 -41.43917847]
[-156.36169434 -34.32286072]
[-143.15722656 -27.20653915]
[-135.71928406 -26.79897118]
[-129.74336243 -19.78609276]
[-116.69841003 -12.38142300]
[-103.65345764 -4.97675276]
[-96.22627258 -4.40588951]
[-90.40584564 2.73657107]
[-77.52670288 10.42601871]
[-64.64756012 18.11546516]
[-51.76840973 25.80491257]
[-38.88926697 33.49436188]
[-26.01012039 41.18380737]
[-11.11598969 41.06486511]
[-3.23339820 54.78256607]
[9.64574814 62.47201538]
[22.52489281 70.16146088]
[34.30115128 63.78154373]
[47.79986954 64.07562256]
[59.47323608 71.07390594]
[66.19998169 83.03047943]
[66.11966705 96.85766602]
[78.82678986 104.82817841]
[89.79705811 83.41461182]
[110.99271393 86.73470306]
[124.63719940 80.50347900]
[138.28167725 74.27225494]
[151.92616272 68.04102325]
[165.57063293 61.80980301]
[179.21511841 55.57857513]
[192.85958862 49.34735107]
[195.80903625 34.11316681]
[207.17257690 23.54672050]
[222.58068848 21.71102905]
[236.10864258 29.31195259]
[242.55465698 43.42678070]
[239.44012451 58.62807465]
[227.96264648 69.07062531]
[212.53552246 70.73905945]
[199.09082031 62.99183273]
[185.44633484 69.22305298]
[171.80186462 75.45428467]
[158.15737915 81.68550873]
[144.51289368 87.91673279]
[130.86842346 94.14795685]
[117.22393799 100.37918091]
[113.35361481 114.17237091]
[99.18666077 121.70149231]
[109.37773895 132.70793152]
[119.56882477 143.71438599]
[129.75990295 154.72082520]
[141.95715332 151.60505676]
[154.24468994 153.98788452]
[164.27630615 161.35122681]
[170.16360474 172.23211670]
[170.83126831 184.51300049]
[166.21302795 195.83378601]
[175.91082764 207.27723694]
[183.91123962 211.84729004]
[185.69261169 219.08026123]
[195.13668823 230.73399353]
[204.58076477 242.38772583]
[220.32319641 243.78448486]
[230.40292358 255.95719910]
[228.83979797 271.68399048]
[216.56120300 281.63446045]
[200.85180664 279.90515137]
[191.03172302 267.52203369]
[192.92703247 251.83178711]
[183.48295593 240.17805481]
[174.03887939 228.52432251]
[164.46736145 216.97503662]
[154.76956177 205.53158569]
[137.30467224 207.69670105]
[121.87172699 198.91841125]
[114.68080902 182.51422119]
[118.75346375 164.91191101]
[108.56237793 153.90545654]
[98.37129974 142.89901733]
[88.18021393 131.89257812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 85]
[13 84]
[17 79]
[18 78]
[19 77]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 68]
[28 67]
[29 66]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[50 57]
[51 56]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[110 142]
[111 141]
[112 140]
[113 139]
[119 135]
[120 134]
[122 133]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
