%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:20:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUGACAGCCACACGCCCCAAGGCCUCCAAGAUGAGCUACACGUUGGACUCGCUGGGCAACCCGUCCGCCUACCGGCGGGUAACCGAGACCCGCUCGAGCUUCAGCCGCGUCAGCGGCUCCCCGUCCAGUG\
) } def
/len { sequence length } bind def

/coor [
[93.73487091 238.71566772]
[93.38323212 223.71978760]
[93.03159332 208.72390747]
[92.67995453 193.72802734]
[89.34708405 187.05245972]
[92.50000000 178.37742615]
[92.50000000 163.37742615]
[92.50000000 148.37742615]
[84.59053040 146.46690369]
[77.10676575 143.27268982]
[70.25546265 138.88299561]
[64.22588348 133.41912842]
[59.18460846 127.03199768]
[55.27091217 119.89808655]
[52.59291077 112.21446228]
[51.22459030 104.19339752]
[51.20375061 96.05648804]
[36.61410904 92.57190704]
[22.02446556 89.08732605]
[7.43482113 85.60274506]
[2.25440812 87.15634918]
[-2.50574493 86.56345367]
[-6.08014774 84.36360931]
[-8.03997326 81.32639313]
[-22.34866333 76.82512665]
[-36.65735245 72.32386017]
[-56.03321457 77.65758514]
[-68.61514282 63.04718399]
[-83.11908722 59.22154236]
[-97.62303162 55.39590073]
[-112.12697601 51.57025909]
[-126.63092804 47.74461746]
[-140.17445374 55.43946457]
[-154.82902527 51.35310364]
[-162.08142090 38.39400101]
[-176.58535767 34.56835938]
[-191.11561584 41.36919785]
[-205.42765808 34.12041473]
[-208.54252625 18.38265038]
[-198.07075500 6.22857618]
[-182.04537964 6.98175478]
[-172.75971985 20.06441307]
[-158.25576782 23.89005470]
[-145.55522156 16.19385147]
[-130.79165649 19.86698151]
[-122.80528259 33.24067307]
[-108.30133820 37.06631470]
[-93.79739380 40.89195633]
[-79.29344177 44.71759796]
[-64.78949738 48.54323959]
[-56.35641861 42.57324219]
[-45.80752945 42.27484512]
[-36.67609406 47.99263000]
[-32.15608215 58.01516724]
[-17.84739304 62.51643753]
[-3.53870416 67.01770782]
[10.91940117 71.01309967]
[25.50904465 74.49768066]
[40.09869003 77.98226166]
[54.68833160 81.46684265]
[74.86269379 57.99117661]
[105.08634186 51.30960846]
[108.91197968 36.80566025]
[112.73762512 22.30171394]
[116.56326294 7.79776812]
[120.38890839 -6.70617867]
[119.55276489 -15.89846039]
[124.47796631 -21.50324249]
[128.64256287 -35.91352081]
[132.80717468 -50.32379913]
[126.34882355 -65.00948334]
[133.93112183 -79.14766693]
[149.73759460 -81.89274597]
[161.64283752 -71.13892365]
[160.51419067 -55.13562393]
[147.21745300 -46.15919876]
[143.05284119 -31.74892044]
[138.88824463 -17.33864212]
[134.89285278 -2.88053703]
[131.06721497 11.62340927]
[127.24156952 26.12735558]
[123.41592407 40.63130188]
[119.59028625 55.13525009]
[128.82588196 58.10586166]
[137.60694885 63.00813675]
[145.52587891 69.76908112]
[152.18806458 78.22941589]
[166.27003479 73.06241608]
[180.35202026 67.89541626]
[194.43399048 62.72840881]
[202.45378113 48.83371353]
[218.33819580 46.58320618]
[229.90208435 57.70328140]
[228.27461243 73.66357422]
[214.70423889 82.22071075]
[199.60099792 76.81038666]
[185.51901245 81.97738647]
[171.43704224 87.14439392]
[157.35505676 92.31139374]
[156.39064026 99.74913025]
[171.26611328 101.67796326]
[186.14155579 103.60704803]
[184.21221924 118.48245239]
[169.33728027 116.55343628]
[154.46180725 114.62460327]
[153.49739075 122.06233215]
[165.79586792 130.64996338]
[178.09434509 139.23760986]
[190.39282227 147.82524109]
[202.69129944 156.41287231]
[214.98977661 165.00050354]
[231.36593628 165.86865234]
[238.55999756 180.60560608]
[229.17134094 194.05123901]
[212.85820007 192.37384033]
[206.40214539 177.29898071]
[194.10366821 168.71134949]
[181.80519104 160.12371826]
[169.50671387 151.53608704]
[157.20823669 142.94844055]
[144.90975952 134.36080933]
[138.10607910 139.69976807]
[130.74809265 143.79388428]
[123.05202484 146.60223389]
[115.23315430 148.12005615]
[107.50000000 148.37742615]
[107.50000000 163.37742615]
[107.50000000 178.37742615]
[107.67583466 193.37638855]
[108.02747345 208.37226868]
[108.37911224 223.36814880]
[108.73074341 238.36402893]
[111.37243652 257.56484985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[3 130]
[4 129]
[6 128]
[7 127]
[8 126]
[17 60]
[18 59]
[19 58]
[20 57]
[24 56]
[25 55]
[26 54]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[35 43]
[36 42]
[62 83]
[63 82]
[64 81]
[65 80]
[66 79]
[68 78]
[69 77]
[70 76]
[87 99]
[88 98]
[89 97]
[90 96]
[106 121]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
