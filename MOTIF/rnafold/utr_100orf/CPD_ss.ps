%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCGGAGCGCUGAGCCGCGGGAGCGGAGCCGGGGUUAGCGGCGCUGCUGGAAGAUGGCGAGCGGCCGGGACGAGCGGCCGCCUUGGCGGCUAGGGCGGCUCCUGUUGCUCAUGUGCCUGCUGCUGCUGGGGAGCUCGGCCCGGGCGGCUCACA\
) } def
/len { sequence length } bind def

/coor [
[106.79116058 243.64820862]
[105.30235291 228.72227478]
[103.81355286 213.79634094]
[102.32474518 198.87040710]
[100.83593750 183.94447327]
[99.34712982 169.01853943]
[97.85832214 154.09260559]
[96.36951447 139.16667175]
[94.88070679 124.24074554]
[81.99088287 116.56921387]
[68.16139221 122.37828064]
[54.33190536 128.18734741]
[40.50241852 133.99641418]
[26.67293167 139.80548096]
[12.84344292 145.61454773]
[-0.98604447 151.42361450]
[-14.69730186 157.50650024]
[-28.28490829 163.86077881]
[-41.87251282 170.21507263]
[-55.46012115 176.56936646]
[-64.68320465 189.42413330]
[-79.48974609 187.80690002]
[-93.07735443 194.16117859]
[-106.66496277 200.51547241]
[-109.47660065 215.77568054]
[-120.74417114 226.44439697]
[-136.13505554 228.41928101]
[-149.73115540 220.94091797]
[-156.30448914 206.88493347]
[-153.32746887 191.65611267]
[-141.94482422 181.11026001]
[-126.53342438 179.30245972]
[-113.01924896 186.92785645]
[-99.43164062 180.57357788]
[-85.84403992 174.21928406]
[-77.59282684 161.81901550]
[-61.81440735 162.98175049]
[-48.22679901 156.62747192]
[-34.63919449 150.27317810]
[-21.05158806 143.91888428]
[-18.59634781 139.76458740]
[-13.47937679 137.13761902]
[-6.79511213 137.59413147]
[7.03437567 131.78506470]
[20.86386299 125.97599792]
[34.69335175 120.16692352]
[48.52283859 114.35785675]
[62.35232544 108.54878998]
[76.18181610 102.73972321]
[78.11506653 87.86483002]
[66.22991180 78.71369934]
[54.34475708 69.56257629]
[42.45960236 60.41144562]
[26.42906189 61.04492569]
[16.04834747 48.81298828]
[19.28065681 33.09892654]
[33.64643860 25.95722389]
[48.12549210 32.86638641]
[51.61072922 48.52629089]
[63.49588394 57.67742157]
[75.38103485 66.82854462]
[87.26618958 75.97967529]
[103.88629913 72.68580627]
[119.48846436 79.90686035]
[128.87408447 68.20600128]
[138.25970459 56.50514221]
[147.64532471 44.80428314]
[157.03094482 33.10342407]
[166.41656494 21.40256310]
[169.01591492 5.79634619]
[183.01501465 0.70963603]
[192.40063477 -10.99122334]
[194.99996948 -26.59744072]
[208.99906921 -31.68415070]
[218.38468933 -43.38500977]
[227.53581238 -55.27016449]
[236.44882202 -67.33491516]
[245.36184692 -79.39965820]
[254.27485657 -91.46440887]
[262.45278931 -104.03904724]
[269.86651611 -117.07885742]
[277.28024292 -130.11865234]
[284.69400024 -143.15846252]
[292.10772705 -156.19827271]
[299.52148438 -169.23806763]
[306.93521118 -182.27787781]
[314.34893799 -195.31767273]
[321.76269531 -208.35748291]
[329.17642212 -221.39729309]
[336.59014893 -234.43708801]
[339.16244507 -251.19476318]
[355.97729492 -253.36201477]
[362.71466064 -237.80422974]
[349.62997437 -227.02334595]
[342.21621704 -213.98355103]
[334.80249023 -200.94374084]
[327.38876343 -187.90394592]
[319.97500610 -174.86413574]
[312.56127930 -161.82432556]
[305.14752197 -148.78453064]
[297.73379517 -135.74472046]
[290.32006836 -122.70491791]
[282.90631104 -109.66511536]
[275.49258423 -96.62531281]
[290.27127075 -99.19245148]
[302.64154053 -90.70854187]
[305.57009888 -75.99720001]
[297.39187622 -63.42274094]
[282.75674438 -60.13452911]
[269.98562622 -68.00211334]
[266.33959961 -82.55139160]
[257.42660522 -70.48664856]
[248.51358032 -58.42189789]
[239.60055542 -46.35714722]
[239.42352295 -41.53479004]
[236.17854309 -36.78563690]
[230.08554077 -33.99938965]
[220.69992065 -22.29852867]
[218.77191162 -7.52923632]
[204.10148621 -1.60560238]
[194.71586609 10.09525681]
[192.78784180 24.86454964]
[178.11743164 30.78818321]
[168.73181152 42.48904419]
[159.34619141 54.18990326]
[149.96057129 65.89076233]
[140.57495117 77.59162140]
[131.18933105 89.29248047]
[132.67813110 104.21841431]
[144.19007874 113.83481598]
[155.70201111 123.45122528]
[167.21395874 133.06762695]
[178.72589111 142.68403625]
[190.23783875 152.30043030]
[206.27005005 157.81446838]
[205.40966797 174.74656677]
[188.90110779 178.60708618]
[180.62142944 163.81237793]
[169.10948181 154.19596863]
[157.59754944 144.57957458]
[146.08560181 134.96316528]
[134.57366943 125.34675598]
[123.06172943 115.73035431]
[109.80664062 122.75193787]
[111.29544830 137.67787170]
[112.78425598 152.60380554]
[114.27306366 167.52973938]
[115.76187134 182.45567322]
[117.25067139 197.38159180]
[118.73947906 212.30752563]
[120.22828674 227.23345947]
[121.71709442 242.15939331]
[134.10365295 251.97514343]
[135.83847046 267.68392944]
[125.89230347 279.96600342]
[110.16605377 281.53463745]
[97.98982239 271.45919800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[9 144]
[10 49]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 40]
[18 39]
[19 38]
[20 37]
[22 35]
[23 34]
[24 33]
[50 62]
[51 61]
[52 60]
[53 59]
[64 128]
[65 127]
[66 126]
[67 125]
[68 124]
[69 123]
[71 121]
[72 120]
[74 118]
[75 117]
[76 114]
[77 113]
[78 112]
[79 111]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[129 143]
[130 142]
[131 141]
[132 140]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
