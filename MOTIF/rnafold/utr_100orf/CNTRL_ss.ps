%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUGAUGAACACCUGGCUUUAUUCUUGCAAUGAAGAAAGGUUCUCAACAAAAAAUAUUCUCCAAAGCAAAGAUACCAUCAUCAUCUCACUCUCCUAUCCCAUCAUCUAUGUCCAAUAUGAGAUCUAGGU\
) } def
/len { sequence length } bind def

/coor [
[75.93277740 117.82313538]
[77.31707764 102.88711548]
[62.73990631 106.42350006]
[48.16273499 109.95988464]
[33.58555984 113.49626923]
[19.00838661 117.03265381]
[7.42135715 127.80536652]
[-6.77129078 123.28673553]
[-21.34846497 126.82312012]
[-35.92563629 130.35949707]
[-44.17644882 143.57168579]
[-59.01015472 146.95042419]
[-71.55510712 139.00311279]
[-86.13227844 142.53950500]
[-100.70944977 146.07588196]
[-115.28662872 149.61227417]
[-123.53743744 162.82446289]
[-138.37113953 166.20320129]
[-150.91609192 158.25588989]
[-165.49327087 161.79226685]
[-180.07044983 165.32865906]
[-194.64761353 168.86503601]
[-209.22479248 172.40142822]
[-223.80195618 175.93780518]
[-238.37913513 179.47419739]
[-247.92320251 192.36955261]
[-263.96035767 192.80381775]
[-274.18832397 180.44386292]
[-270.76101685 164.77116394]
[-256.30761719 157.80850220]
[-241.91552734 164.89701843]
[-227.33834839 161.36062622]
[-212.76116943 157.82424927]
[-198.18400574 154.28785706]
[-183.60682678 150.75148010]
[-169.02964783 147.21510315]
[-154.45248413 143.67871094]
[-146.94374084 130.86642456]
[-132.21080017 127.07238007]
[-118.82301331 135.03509521]
[-104.24583435 131.49871826]
[-89.66866302 127.96232605]
[-75.09149170 124.42594147]
[-67.58275604 111.61366272]
[-52.84980774 107.81961060]
[-39.46202087 115.78232574]
[-24.88484764 112.24594879]
[-10.30767441 108.70956421]
[0.23669773 98.18979645]
[15.47200298 102.45548248]
[30.04917526 98.91909790]
[44.62635040 95.38271332]
[59.20352173 91.84632874]
[73.78069305 88.30994415]
[61.01446152 80.43445587]
[49.23676682 71.14543915]
[38.60335541 60.56571198]
[29.25483513 48.83518982]
[21.31482887 36.10898590]
[14.88833141 22.55538368]
[10.06032276 8.35361099]
[6.89464712 -6.30853415]
[5.43316460 -21.23716736]
[5.69520235 -36.23487854]
[7.67729473 -51.10334396]
[11.35323143 -65.64595032]
[16.67440414 -79.67040253]
[23.57044792 -92.99123383]
[31.95017242 -105.43230438]
[41.70277023 -116.82909393]
[52.69927216 -127.03090668]
[64.79427338 -135.90283203]
[77.82782745 -143.32754517]
[91.62759399 -149.20686340]
[106.01108551 -153.46307373]
[120.78810120 -156.03985596]
[135.76322937 -156.90315247]
[150.73846436 -156.04153442]
[165.51577759 -153.46643066]
[179.89974976 -149.21185303]
[193.70016479 -143.33407593]
[206.73455811 -135.91082764]
[218.83056641 -127.04027557]
[229.82821655 -116.83970642]
[239.58210754 -105.44401550]
[247.96322632 -93.00389099]
[254.86077881 -79.68383789]
[260.18353271 -65.65998840]
[263.86111450 -51.11779404]
[265.84487915 -36.24954987]
[266.10861206 -21.25186920]
[264.64880371 -6.32307196]
[261.48480225 8.33942986]
[256.65838623 22.54174614]
[250.23341370 36.09607315]
[242.29484558 48.82317352]
[232.94764709 60.55475235]
[222.31542969 71.13567352]
[210.53877258 80.42602539]
[197.77343750 88.30294800]
[184.18818665 94.66229248]
[169.96269226 99.41995239]
[155.28506470 102.51302338]
[140.34938049 103.90060425]
[125.35315704 103.56434631]
[110.49864197 101.50947571]
[119.48780823 113.51759338]
[128.47697449 125.52571106]
[137.46614075 137.53382874]
[146.45530701 149.54194641]
[160.91946411 155.95277405]
[162.35260010 170.77825928]
[171.34176636 182.78637695]
[180.33093262 194.79449463]
[189.46235657 206.69480896]
[198.73474121 218.48559570]
[213.27859497 227.19839478]
[208.93241882 243.58581543]
[191.98229980 243.94598389]
[186.94393921 227.75798035]
[177.67155457 215.96719360]
[170.99908447 212.62155151]
[168.32281494 203.78366089]
[159.33364868 191.77554321]
[150.34448242 179.76742554]
[136.52328491 174.21551514]
[134.44718933 158.53111267]
[125.45801544 146.52299500]
[116.46885681 134.51487732]
[107.47969055 122.50675964]
[98.49052429 110.49864197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 54]
[3 53]
[4 52]
[5 51]
[6 50]
[8 48]
[9 47]
[10 46]
[13 43]
[14 42]
[15 41]
[16 40]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[106 131]
[107 130]
[108 129]
[109 128]
[110 127]
[112 125]
[113 124]
[114 123]
[115 121]
[116 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
