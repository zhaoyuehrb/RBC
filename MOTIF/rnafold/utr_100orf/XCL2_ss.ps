%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUCCCUGCACAGCUCAGCGGGACCUCAGCCAUGAGACUUCUCAUCCUGGCCCUCCUUGGCAUCUGCUCUCUCACUGCAUACAUUGUGGAAGGUGUAGGGAGUGAAGUCUCACAUAGGAGGACCUGUGUGA\
) } def
/len { sequence length } bind def

/coor [
[182.96762085 276.96972656]
[172.99511719 261.76208496]
[172.03031921 243.51768494]
[180.42016602 227.19348145]
[171.83253479 214.89500427]
[163.24490356 202.59652710]
[154.65725708 190.29804993]
[146.06962585 177.99957275]
[137.48199463 165.70109558]
[128.89434814 153.40261841]
[120.30671692 141.10414124]
[111.71908569 128.80566406]
[103.13144684 116.50718689]
[89.50793457 115.51335144]
[79.73255157 103.98203278]
[65.22859955 100.15639496]
[50.72465515 96.33074951]
[35.40751648 100.29254150]
[25.07448006 89.56511688]
[10.57053375 85.73947906]
[-4.74660635 89.70127106]
[-15.07964230 78.97384644]
[-29.58358955 75.14820099]
[-44.08753586 71.32256317]
[-53.25722122 77.38874817]
[-64.03102875 77.35387421]
[-72.79444122 71.47418213]
[-76.74272156 61.92595291]
[-91.05140686 57.42468262]
[-105.36009979 52.92341232]
[-119.66878510 48.42214203]
[-131.50646973 53.69570541]
[-143.37138367 49.58414078]
[-149.03230286 38.82777786]
[-163.23153687 33.99231339]
[-177.43077087 29.15684700]
[-191.63000488 24.32138252]
[-205.82923889 19.48591805]
[-221.80259705 23.19857788]
[-232.80540466 11.03837490]
[-227.51889038 -4.48531485]
[-211.38139343 -7.40305138]
[-200.99377441 5.28668261]
[-186.79454041 10.12214756]
[-172.59530640 14.95761299]
[-158.39607239 19.79307747]
[-144.19683838 24.62854195]
[-127.23991394 20.26630211]
[-115.16751862 34.11345291]
[-100.85882568 38.61472321]
[-86.55014038 43.11599350]
[-72.24144745 47.61726379]
[-53.80534744 41.97113800]
[-40.26189423 56.81861496]
[-25.75794792 60.64425659]
[-11.25400066 64.46990204]
[3.02572012 60.23447037]
[14.39617538 71.23553467]
[28.90012169 75.06117249]
[43.17984390 70.82574463]
[54.55029678 81.82680511]
[69.05424500 85.65245056]
[83.55818939 89.47808838]
[70.71483612 81.72900391]
[65.30229187 67.73956299]
[69.58561707 53.36412811]
[81.77230835 44.61858368]
[96.76242828 45.16279221]
[108.28286743 54.76901627]
[111.51249695 69.41720581]
[105.09889221 82.97824097]
[115.06596375 71.76853180]
[118.45359802 56.31426239]
[132.69270325 51.94421387]
[142.65977478 40.73450851]
[152.62684631 29.52480507]
[162.59391785 18.31510162]
[157.68043518 3.76335502]
[160.71684265 -11.29240036]
[170.88636780 -22.80224419]
[185.45344543 -27.67008209]
[200.49960327 -24.58649445]
[211.97750854 -14.38094902]
[216.79966736 0.20131397]
[213.66893005 15.23773861]
[203.42745972 26.68360329]
[188.83015442 31.46002579]
[173.80361938 28.28217316]
[163.83654785 39.49187851]
[153.86947632 50.70158386]
[143.90240479 61.91128540]
[141.22767639 76.56376648]
[126.27567291 81.73561096]
[116.30860138 92.94531250]
[115.42992401 107.91955566]
[124.01756287 120.21803284]
[132.60519409 132.51651001]
[141.19282532 144.81498718]
[149.78047180 157.11346436]
[158.36810303 169.41194153]
[166.95573425 181.71041870]
[175.54336548 194.00889587]
[184.13101196 206.30735779]
[192.71864319 218.60583496]
[204.61553955 216.02622986]
[216.64556885 217.64546204]
[227.37522888 223.24664307]
[235.53414917 232.13984680]
[240.16540527 243.24699402]
[240.73783875 255.23251343]
[237.20674133 266.66390991]
[230.01647949 276.18301392]
[237.71858215 289.05459595]
[245.42070007 301.92617798]
[253.12281799 314.79776001]
[260.82492065 327.66934204]
[268.52703857 340.54089355]
[276.22915649 353.41247559]
[283.93127441 366.28405762]
[291.63339233 379.15563965]
[306.21725464 386.65512085]
[306.74407959 403.04580688]
[292.67187500 411.46633911]
[278.47695923 403.25442505]
[278.76181030 386.85775757]
[271.05969238 373.98617554]
[263.35757446 361.11459351]
[255.65545654 348.24301147]
[247.95335388 335.37142944]
[240.25123596 322.49987793]
[232.54911804 309.62829590]
[224.84701538 296.75671387]
[217.14489746 283.88513184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[15 63]
[16 62]
[17 61]
[19 59]
[20 58]
[22 56]
[23 55]
[24 54]
[28 52]
[29 51]
[30 50]
[31 49]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[71 94]
[72 93]
[74 91]
[75 90]
[76 89]
[77 88]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
