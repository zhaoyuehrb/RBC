%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:14:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUCGGUUAUUCUAUUUCUCUGCUAUUAUUGCCUCAGUUAUUUUAAAUUUUGUAGGAAUCAUUAUGAAUCUGUUUAUUACAGUGGUCAAUUGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[103.64262390 133.32710266]
[83.42729187 129.14291382]
[69.49573517 113.90878296]
[54.80127335 116.92089081]
[40.10681152 119.93299866]
[31.38816071 132.84124756]
[16.44297791 135.68661499]
[4.19066477 127.29517365]
[-10.50379753 130.30728149]
[-25.19825935 133.31938171]
[-25.92969131 148.38311768]
[-30.38512611 162.79144287]
[-38.28449249 175.63864136]
[-49.13122940 186.11715698]
[-62.24350357 193.56826782]
[-76.79706573 197.52360535]
[-91.87705994 197.73454285]
[-106.53555298 194.18780518]
[-119.85109711 187.10633850]
[-130.98666382 176.93530273]
[-139.24227905 164.31407166]
[-144.09895325 150.03599548]
[-145.25141907 134.99861145]
[-142.62722778 120.14720154]
[-136.39134216 106.41532898]
[-126.93573761 94.66618347]
[-114.85481262 85.63833618]
[-100.90798187 79.89927673]
[-85.97196198 77.80976868]
[-70.98563385 79.50116730]
[-56.89105606 84.86714172]
[-44.57422256 93.57038879]
[-34.80938339 105.06381226]
[-28.21036530 118.62492371]
[-13.51590347 115.61281586]
[1.17855883 112.60070801]
[9.14128304 100.06553650]
[24.00064850 96.80150604]
[37.09470367 105.23853302]
[51.78916550 102.22642517]
[66.48362732 99.21431732]
[68.08409882 89.73648071]
[72.30809021 81.10231018]
[78.80838776 74.02154541]
[87.05065918 69.07624054]
[96.35737610 66.67289734]
[105.96351624 67.00907898]
[115.07945251 70.05714417]
[122.95584869 75.56654358]
[128.94523621 83.08440399]
[132.55531311 91.99273682]
[147.55349731 91.75946045]
[162.55168152 91.52618408]
[177.54986572 91.29290771]
[192.54804993 91.05963135]
[207.54623413 90.82635498]
[222.54441833 90.59307098]
[237.54261780 90.35979462]
[249.39201355 77.60696411]
[266.46176147 77.28687286]
[278.30606079 89.11278534]
[293.28973389 88.41317749]
[308.27340698 87.71356964]
[323.25708008 87.01396179]
[338.24075317 86.31436157]
[353.22442627 85.61475372]
[368.15917969 84.21706390]
[383.01248169 82.12433624]
[397.86578369 80.03160095]
[412.71905518 77.93887329]
[427.57235718 75.84614563]
[440.15127563 65.32458496]
[455.45764160 71.21081543]
[457.74554443 87.44957733]
[444.66143799 97.33583069]
[429.66510010 90.69944000]
[414.81179810 92.79217529]
[399.95849609 94.88490295]
[385.10519409 96.97763062]
[370.25189209 99.07036591]
[367.79504395 101.83058167]
[363.80288696 103.44844055]
[358.87203979 103.18003845]
[353.92404175 100.59842682]
[338.94036865 101.29803467]
[323.95669556 101.99764252]
[308.97302246 102.69725037]
[293.98934937 103.39685059]
[279.00564575 104.09645844]
[271.66937256 114.81377411]
[259.29629517 119.36463928]
[246.38642883 115.85243988]
[237.77589417 105.35798645]
[222.77770996 105.59126282]
[207.77951050 105.82453918]
[192.78132629 106.05781555]
[177.78314209 106.29109192]
[162.78495789 106.52436829]
[147.78677368 106.75764465]
[132.78858948 106.99092102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 41]
[4 40]
[5 39]
[8 36]
[9 35]
[10 34]
[51 100]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 80]
[68 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
