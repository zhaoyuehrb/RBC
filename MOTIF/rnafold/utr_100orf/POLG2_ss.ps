%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:16:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCGCCGUGGCCUCUCCGGAUUCUGUUAACGGUAGUGGUGGCUUGUUGGGAUCCGUUGAGUGAUGGGAGAGUGUGCUCUUUAACUUCGGAGAGAGAUGCGCUCUCGUGUAGCCGUCAGGGCCUGCCAUAAGGUCUGCAGGUGCCUGUUGUCUGGGUUUGGGGGUCGAGUAGAUGCGGGGCAGCCGGAGCUGUUGA\
) } def
/len { sequence length } bind def

/coor [
[252.29673767 260.01394653]
[241.00289917 250.14231873]
[229.70904541 240.27069092]
[218.41520691 230.39906311]
[207.12135315 220.52743530]
[195.82751465 210.65580750]
[184.37924194 200.96369934]
[172.77938843 191.45352173]
[161.17953491 181.94334412]
[149.43099976 172.61746216]
[137.53671265 163.47822571]
[125.64242554 154.33897400]
[113.74813080 145.19972229]
[101.85384369 136.06047058]
[87.04037476 133.70227051]
[72.89614105 138.69635010]
[58.75191498 143.69042969]
[51.88117218 157.67007446]
[37.46577072 162.53329468]
[24.18065262 155.89692688]
[10.03642559 160.89100647]
[-4.10780144 165.88508606]
[-18.25202942 170.87916565]
[-32.39625549 175.87324524]
[-46.54048538 180.86732483]
[-60.68471146 185.86140442]
[-74.82894135 190.85548401]
[-78.23323822 194.83827209]
[-82.40888214 196.90380859]
[-86.49382019 197.08000183]
[-89.76268005 195.73384094]
[-104.12747955 200.05268860]
[-118.49228668 204.37153625]
[-132.85708618 208.69038391]
[-137.67045593 213.24589539]
[-143.22784424 214.49206543]
[-147.74391174 212.91111755]
[-162.23788452 216.77433777]
[-176.73187256 220.63755798]
[-187.95463562 232.59503174]
[-203.85762024 228.59164429]
[-208.08119202 212.74571228]
[-196.28050232 201.35818481]
[-180.59509277 206.14356995]
[-166.10110474 202.28034973]
[-151.60713196 198.41712952]
[-137.17593384 194.32557678]
[-122.81113434 190.00672913]
[-108.44633484 185.68788147]
[-94.08152771 181.36903381]
[-79.82302094 176.71125793]
[-65.67878723 171.71717834]
[-51.53456497 166.72309875]
[-37.39033508 161.72901917]
[-23.24610901 156.73493958]
[-9.10188103 151.74085999]
[5.04234648 146.74678040]
[19.18657303 141.75270081]
[25.35954094 128.24603271]
[39.63265610 122.97984314]
[53.75783539 129.54620361]
[67.90206146 124.55211639]
[82.04629517 119.55803680]
[75.72749329 106.30687714]
[77.58835602 92.58019257]
[86.12911987 82.74707794]
[81.24684143 68.56387329]
[76.36456299 54.38066864]
[64.55683136 43.85033035]
[67.73027039 29.29771805]
[62.84799576 15.11451149]
[57.96571732 0.93130469]
[53.08343887 -13.25190258]
[48.20116043 -27.43510818]
[43.31888199 -41.61831665]
[38.43660355 -55.80152130]
[33.55432510 -69.98472595]
[28.67204475 -84.16793823]
[23.67796516 -98.31216431]
[18.57239532 -112.41653442]
[13.46682644 -126.52089691]
[8.36125755 -140.62525940]
[3.25568748 -154.72962952]
[-1.84988201 -168.83399963]
[-16.79511070 -173.00769043]
[-26.40640831 -185.18975830]
[-26.98803520 -200.69592285]
[-18.31634521 -213.56376648]
[-3.72577643 -218.84533691]
[11.17329693 -214.50975037]
[20.65187645 -202.22415161]
[21.06525803 -186.71258545]
[12.25448513 -173.93955994]
[17.36005402 -159.83520508]
[22.46562386 -145.73083496]
[27.57119370 -131.62646484]
[32.67676163 -117.52210236]
[37.78233337 -103.41773224]
[43.02020645 -98.19319916]
[42.85525131 -89.05021667]
[47.73752975 -74.86700439]
[52.61980820 -60.68379974]
[57.50208664 -46.50059509]
[62.38436508 -32.31738663]
[67.26664734 -18.13418007]
[72.14892578 -3.95097375]
[77.03120422 10.23223305]
[81.91348267 24.41543961]
[93.37200165 33.93129730]
[90.54776764 49.49839020]
[95.43004608 63.68159485]
[100.31232452 77.86479950]
[103.13475800 78.08567047]
[105.90591431 78.66493988]
[114.56873322 66.41930389]
[123.23155212 54.17367172]
[121.95006561 38.18188095]
[133.75204468 27.31481743]
[149.58399963 29.90876198]
[157.30102539 43.97386169]
[150.98327637 58.72057724]
[135.47718811 62.83648682]
[126.81436920 75.08212280]
[118.15155029 87.32775879]
[123.60056305 99.40932465]
[121.25550842 113.30920410]
[110.99308777 124.16618347]
[122.88737488 133.30543518]
[134.78166199 142.44468689]
[146.67596436 151.58392334]
[158.57025146 160.72317505]
[165.07913208 161.97045898]
[169.33598328 165.75419617]
[170.68971252 170.34349060]
[182.28956604 179.85366821]
[193.88941956 189.36384583]
[200.35568237 190.81597900]
[204.49095154 194.73222351]
[205.69914246 199.36195374]
[216.99298096 209.23359680]
[228.28683472 219.10522461]
[239.58067322 228.97685242]
[250.87452698 238.84848022]
[262.16836548 248.72010803]
[288.28646851 246.02301025]
[304.54360962 271.29550171]
[318.05081177 277.81896973]
[331.55798340 284.34246826]
[345.06515503 290.86596680]
[358.57235718 297.38946533]
[367.67080688 298.30566406]
[372.24005127 304.12402344]
[385.64254761 310.85992432]
[399.04507446 317.59582520]
[412.44760132 324.33175659]
[425.85012817 331.06765747]
[432.47744751 331.06692505]
[437.37063599 333.98135376]
[439.56439209 338.23361206]
[452.74758911 345.38925171]
[465.93078613 352.54492188]
[479.11398315 359.70056152]
[494.84243774 356.53900146]
[507.02752686 366.97467041]
[506.32189941 383.00219727]
[493.26684570 392.32666016]
[477.87707520 387.79507446]
[471.95834351 372.88375854]
[458.77511597 365.72811890]
[445.59191895 358.57244873]
[432.40872192 351.41680908]
[419.11422729 344.47018433]
[405.71170044 337.73425293]
[392.30917358 330.99835205]
[378.90664673 324.26245117]
[365.50411987 317.52655029]
[352.04885864 310.89663696]
[338.54168701 304.37313843]
[325.03448486 297.84967041]
[311.52731323 291.32617188]
[298.02011108 284.80267334]
[286.80453491 294.76315308]
[291.68682861 308.94635010]
[296.56909180 323.12954712]
[301.45138550 337.31277466]
[306.33364868 351.49597168]
[319.05758667 361.84167480]
[316.19311523 377.98870850]
[300.68695068 383.32638550]
[288.49050903 372.36376953]
[292.15045166 356.37823486]
[287.26818848 342.19503784]
[282.38589478 328.01184082]
[277.50363159 313.82861328]
[272.62133789 299.64541626]
[261.80996704 295.58541870]
[253.76809692 288.09567261]
[249.42347717 278.61264038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[3 142]
[4 141]
[5 140]
[6 139]
[7 136]
[8 135]
[9 134]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 63]
[16 62]
[17 61]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[31 50]
[32 49]
[33 48]
[34 47]
[37 46]
[38 45]
[39 44]
[66 112]
[67 111]
[68 110]
[70 108]
[71 107]
[72 106]
[73 105]
[74 104]
[75 103]
[76 102]
[77 101]
[78 100]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[114 124]
[115 123]
[116 122]
[146 181]
[147 180]
[148 179]
[149 178]
[150 177]
[152 176]
[153 175]
[154 174]
[155 173]
[156 172]
[159 171]
[160 170]
[161 169]
[162 168]
[182 195]
[183 194]
[184 193]
[185 192]
[186 191]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
