%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCACAGGACUCCAGGUUCCCCUGCCGUGGCUGGCCACAGGACUGCUGCUUCUCCUCAGUGUCCAGCCCUGGGCUGAGAGUGGAAAGGUGUUGGUGG\
) } def
/len { sequence length } bind def

/coor [
[35.16195297 152.86587524]
[22.02392197 153.95910645]
[10.85137272 147.33671570]
[-3.02903461 153.02304077]
[-16.90944099 158.70936584]
[-30.78984833 164.39570618]
[-44.67025375 170.08203125]
[-58.55066299 175.76835632]
[-65.45264435 182.02577209]
[-72.95225525 181.40824890]
[-87.00279236 186.66015625]
[-89.86747742 190.45805359]
[-93.47274780 192.79560852]
[-97.22641754 193.62315369]
[-100.58776855 193.10324097]
[-103.13690948 191.57151794]
[-117.73058319 195.03915405]
[-132.32426453 198.50680542]
[-146.91793823 201.97444153]
[-158.46173096 213.62231445]
[-174.24996948 209.18794250]
[-178.04106140 193.23301697]
[-165.93505859 182.17060852]
[-150.38558960 187.38076782]
[-135.79190063 183.91311646]
[-121.19822693 180.44548035]
[-106.60455322 176.97782898]
[-92.25468445 172.60961914]
[-78.20414734 167.35771179]
[-64.23699188 161.88793945]
[-50.35658264 156.20161438]
[-36.47617340 150.51528931]
[-22.59576797 144.82896423]
[-8.71536064 139.14263916]
[5.16504622 133.45631409]
[10.91536045 117.73774719]
[26.52705765 110.82735443]
[42.65017700 117.39150238]
[56.34702301 111.27624512]
[70.04387665 105.16099548]
[83.74072266 99.04573822]
[88.61946106 88.34848022]
[99.42854309 83.72277069]
[110.53540802 87.57905579]
[124.41581726 81.89273071]
[138.29621887 76.20640564]
[145.19819641 69.94898224]
[152.69781494 70.56649780]
[166.74835205 65.31460571]
[180.79888916 60.06270599]
[186.92453003 48.58083725]
[198.87388611 44.55126953]
[209.96838379 49.64344025]
[224.17546082 44.83105469]
[238.38253784 40.01866531]
[252.58959961 35.20627975]
[263.17794800 23.45053673]
[277.71475220 26.69559288]
[291.92184448 21.88320541]
[306.12890625 17.07081985]
[310.83193970 2.40154386]
[323.12719727 -6.58065844]
[338.17590332 -6.60040522]
[350.20663452 2.14029789]
[364.41369629 -2.67208862]
[378.62075806 -7.48447514]
[392.82785034 -12.29686165]
[407.03491211 -17.10924911]
[417.44314575 -29.78208733]
[433.57589722 -26.83813286]
[438.83715820 -11.30587387]
[427.81460571 0.83643430]
[411.84732056 -2.90217471]
[397.64022827 1.91021168]
[383.43316650 6.72259808]
[369.22607422 11.53498459]
[355.01901245 16.34737206]
[350.77691650 30.60018730]
[338.81411743 39.73009872]
[323.59115601 40.06918716]
[310.94128418 31.27789307]
[296.73422241 36.09027863]
[282.52716064 40.90266418]
[272.95498657 52.31419754]
[257.40197754 49.41335297]
[243.19491577 54.22573853]
[228.98783875 59.03812790]
[214.78077698 63.85051346]
[204.04124451 77.63325500]
[186.05078125 74.11324310]
[172.00024414 79.36514282]
[157.94970703 84.61703491]
[143.98254395 90.08680725]
[130.10214233 95.77313232]
[116.22173309 101.45946503]
[106.40795135 114.97373962]
[89.85597992 112.74258423]
[76.15912628 118.85784149]
[62.46228027 124.97309875]
[48.76543045 131.08834839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 35]
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[10 29]
[11 28]
[16 27]
[17 26]
[18 25]
[19 24]
[38 100]
[39 99]
[40 98]
[41 97]
[44 95]
[45 94]
[46 93]
[48 92]
[49 91]
[50 90]
[53 88]
[54 87]
[55 86]
[56 85]
[58 83]
[59 82]
[60 81]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
