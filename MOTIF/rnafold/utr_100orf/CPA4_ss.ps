%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:24:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUACAGCUUGACUCAGCCACUGUAUGACUGACUCCCCGGGGACAUGAGGUGGAUACUGUUCAUUGGGGCCCUUAUUGGGUCCAGCAUCUGUGGCCAAGAAAAAUUUUUUGGGGACCAAGUUUUGAGGAUUAAUGUCAGAAAUG\
) } def
/len { sequence length } bind def

/coor [
[80.25736237 460.92919922]
[66.13423157 466.38958740]
[51.00325012 466.96588135]
[36.50570679 462.59552002]
[24.21419334 453.75259399]
[15.46199608 441.39630127]
[11.19848919 426.86697388]
[11.88614655 411.74063110]
[17.45037651 397.65811157]
[27.28761101 386.14691162]
[40.33078384 378.45571899]
[55.16506577 375.41882324]
[57.07033157 360.54031372]
[58.97560120 345.66180420]
[60.88086700 330.78329468]
[62.78613281 315.90478516]
[49.47741318 309.11044312]
[39.27715683 298.15216064]
[33.43059540 284.33938599]
[32.66114807 269.33175659]
[37.08095932 254.93955994]
[46.17503357 242.90551758]
[58.86117554 234.69371033]
[73.61873627 231.31144714]
[75.52400208 216.43293762]
[64.97438049 208.18858337]
[59.85126114 195.70121765]
[61.59884644 182.20802307]
[69.86492157 171.26472473]
[82.56539917 165.80862427]
[84.78604126 150.97390747]
[87.00668335 136.13920593]
[89.22732544 121.30448151]
[78.79183960 110.96109772]
[76.38981628 96.46574402]
[82.93112183 83.30913544]
[95.93796539 76.47487640]
[98.15859985 61.64015961]
[100.37924194 46.80544662]
[102.59988403 31.97073174]
[104.82052612 17.13601685]
[107.04116058 2.30130196]
[109.26180267 -12.53341293]
[111.48244476 -27.36812782]
[113.70308685 -42.20284271]
[115.92372131 -57.03755569]
[101.90930176 -64.54816437]
[91.32244873 -76.37530518]
[85.42388153 -91.08313751]
[84.90663910 -106.89447021]
[89.81468964 -121.90547943]
[99.53987122 -134.31497192]
[112.89714813 -142.64048767]
[128.26902771 -145.89541626]
[130.17428589 -160.77392578]
[132.07955933 -175.65242004]
[126.15779114 -190.32359314]
[135.44902039 -201.96501160]
[137.35427856 -216.84352112]
[139.25955200 -231.72203064]
[126.82714844 -237.45596313]
[116.53720856 -246.46141052]
[109.22398376 -257.99554443]
[105.47680664 -271.11111450]
[105.59257507 -284.73410034]
[109.55229950 -297.75177002]
[117.02338409 -309.10357666]
[127.38758087 -317.86749268]
[139.79211426 -323.33486938]
[153.21984863 -325.06787109]
[155.75486755 -339.85208130]
[158.28987122 -354.63632202]
[160.82489014 -369.42056274]
[163.35990906 -384.20480347]
[165.89491272 -398.98904419]
[157.84233093 -412.86474609]
[163.80409241 -427.75894165]
[179.20686340 -432.24606323]
[192.23493958 -422.88400269]
[192.89431763 -406.85449219]
[180.67915344 -396.45404053]
[178.14413452 -381.66979980]
[175.60913086 -366.88555908]
[173.07411194 -352.10131836]
[170.53910828 -337.31707764]
[168.00408936 -322.53283691]
[182.40792847 -314.69375610]
[193.29354858 -302.39483643]
[199.34382629 -287.09796143]
[199.81773376 -270.62933350]
[194.64108276 -254.96134949]
[184.41751099 -241.97653198]
[170.35812378 -233.24124146]
[154.13806152 -229.81675720]
[152.23278809 -214.93824768]
[150.32751465 -200.05973816]
[156.38555908 -186.45277405]
[146.95806885 -173.74716187]
[145.05279541 -158.86865234]
[143.14752197 -143.99014282]
[155.94807434 -137.86294556]
[166.23916626 -128.05986023]
[173.00094604 -115.53401947]
[175.55766296 -101.50924683]
[173.64509583 -87.36052704]
[167.43791199 -74.47917175]
[157.53372192 -64.13602448]
[144.89559937 -57.35607910]
[130.75843811 -54.81691742]
[128.53779602 -39.98220062]
[126.31716156 -25.14748764]
[124.09651947 -10.31277275]
[121.87587738 4.52194214]
[119.65523529 19.35665703]
[117.43460083 34.19137192]
[115.21395874 49.02608490]
[112.99331665 63.86080170]
[110.77267456 78.69551849]
[121.20816040 89.03890228]
[123.61018372 103.53425598]
[117.06887817 116.69086456]
[104.06203461 123.52512360]
[101.84140015 138.35983276]
[99.62075806 153.19454956]
[97.40011597 168.02926636]
[109.60760498 179.68923950]
[112.45695496 196.16012573]
[105.02469635 210.94715881]
[90.40251160 218.33819580]
[88.49724579 233.21670532]
[101.92636108 240.20841980]
[112.13396454 251.35188293]
[117.90229034 265.28912354]
[118.55296326 280.33062744]
[114.02674866 294.66012573]
[104.88832855 306.55398560]
[92.25595856 314.58843994]
[77.66464233 317.81005859]
[75.75937653 332.68856812]
[73.85410309 347.56707764]
[71.94883728 362.44558716]
[70.04357147 377.32406616]
[83.63396454 384.00091553]
[94.31826019 394.73052979]
[100.93750763 408.34902954]
[102.77370453 423.37924194]
[99.62767029 438.19076538]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[24 130]
[25 129]
[30 125]
[31 124]
[32 123]
[33 122]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[42 113]
[43 112]
[44 111]
[45 110]
[46 109]
[54 100]
[55 99]
[56 98]
[58 96]
[59 95]
[60 94]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
