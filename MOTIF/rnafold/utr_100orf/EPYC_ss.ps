%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCAUUGGUCAGGGGCAAAUACCACUAGCUCUGCAUCCUCAGUCACUUUGUGCCAUUUCAUCAGGUCAGAGCCAAAGGAAAGCUUGAAAAAUGAAGACAUUAGCAGGACUUGUUCUGGGACUUGUCAUCUUUGAUGCUGCUGUGACUGCCCCAACUCUAGAGUCCAUCAACUAUGACUCAGAAACCUAUG\
) } def
/len { sequence length } bind def

/coor [
[227.88284302 581.86499023]
[215.89454651 592.16333008]
[200.14204407 590.88507080]
[189.97099304 578.78857422]
[191.41572571 563.05047607]
[203.61909485 553.00787354]
[204.83230591 538.05700684]
[206.04551697 523.10620117]
[199.36294556 509.79479980]
[208.19105530 496.66564941]
[209.40426636 481.71478271]
[210.61747742 466.76391602]
[196.56733704 454.89208984]
[193.49295044 436.51455688]
[203.15859985 420.30603027]
[197.47448730 406.42471313]
[191.79039001 392.54339600]
[186.10629272 378.66207886]
[180.42219543 364.78076172]
[174.73808289 350.89944458]
[164.52784729 349.62484741]
[155.70298767 344.17822266]
[149.89651489 335.48846436]
[148.21553040 325.09146118]
[151.03067017 314.85882568]
[157.89709473 306.66082764]
[152.89381409 292.51986694]
[147.89053345 278.37887573]
[142.68820190 273.11422729]
[142.92274475 263.96823120]
[138.14909363 249.74807739]
[133.37544250 235.52793884]
[123.83871460 231.81045532]
[117.80204773 223.27380371]
[117.46118164 212.60406494]
[123.17071533 203.32502747]
[118.86004639 188.95776367]
[114.54938507 174.59049988]
[110.23871613 160.22325134]
[105.92805481 145.85598755]
[95.89330292 146.05484009]
[86.05206299 144.08364868]
[76.86802673 140.03529358]
[68.77394104 134.10054016]
[62.15118790 126.55899811]
[57.31181717 117.76604462]
[54.48385620 108.13597107]
[53.80056000 98.12254333]
[55.29411697 88.19757843]
[41.60414124 82.06695557]
[27.91416359 75.93633270]
[14.22418690 69.80570984]
[0.53421009 63.67508316]
[-8.59141731 63.02125931]
[-13.32655811 57.33274841]
[-26.91546631 50.98124695]
[-40.50437546 44.62974548]
[-53.50074768 52.94225693]
[-68.92800903 52.88596344]
[-81.86337280 44.47883224]
[-88.17921448 30.40354729]
[-85.86017609 15.15147972]
[-75.64624786 3.58950853]
[-60.79665375 -0.59298235]
[-46.04985428 3.93862462]
[-36.11149597 15.73830986]
[-34.15287399 31.04083633]
[-20.56396484 37.39233780]
[-6.97505665 43.74383926]
[6.66483307 49.98510742]
[20.35480881 56.11573029]
[34.04478836 62.24635315]
[47.73476410 68.37697601]
[61.42473984 74.50759888]
[63.31621170 68.71706390]
[66.06629181 63.02668381]
[69.67626953 57.56198883]
[74.12933350 52.44998932]
[67.55861664 38.96571350]
[60.98790359 25.48143578]
[46.35043335 18.91454697]
[42.49803543 3.34089708]
[52.38594055 -9.29274368]
[68.42899323 -9.29492664]
[78.32033539 3.33602238]
[74.47217560 18.91072083]
[81.04289246 32.39499664]
[87.61360931 45.87927246]
[95.10475922 46.24348831]
[95.80312347 31.25975609]
[91.89167786 16.77871132]
[104.44583130 8.56937504]
[116.14363098 17.95881081]
[110.84556580 31.99111366]
[110.08705902 46.97192383]
[117.57821655 47.33613968]
[125.42604828 34.55288696]
[126.05228424 18.74407959]
[139.30490112 11.94575310]
[147.15274048 -0.83749932]
[155.00056458 -13.62075138]
[162.84840393 -26.40400314]
[154.82241821 -40.85226440]
[155.17169189 -57.28252029]
[163.70640564 -71.21659088]
[178.01863098 -78.90433502]
[194.16094971 -78.33279419]
[201.80075073 -91.24145508]
[209.44055176 -104.15010834]
[217.08035278 -117.05876923]
[224.72015381 -129.96742249]
[224.35604858 -146.36253357]
[238.51110840 -154.64299011]
[252.62384033 -146.29057312]
[252.17626953 -129.89752197]
[237.62881470 -122.32762146]
[229.98901367 -109.41896057]
[222.34919739 -96.51030731]
[214.70939636 -83.60165405]
[207.06959534 -70.69299316]
[214.54298401 -59.25299454]
[216.36396790 -45.64335632]
[212.12028503 -32.51507568]
[202.58662415 -22.45024490]
[189.58390808 -17.45420837]
[175.63165283 -18.55617332]
[167.78382874 -5.77292013]
[159.93598938 7.01033211]
[152.08816528 19.79358482]
[152.02325439 34.68804932]
[138.20930481 42.40071869]
[130.36146545 55.18397141]
[146.91099548 77.19930267]
[150.06016541 103.53586578]
[139.96792603 126.96085358]
[120.29531097 141.54531860]
[124.60597992 155.91258240]
[128.91664124 170.27984619]
[133.22731018 184.64709473]
[137.53797913 199.01435852]
[152.82028198 212.14593506]
[147.59558105 230.75430298]
[152.36923218 244.97444153]
[157.14288330 259.19458008]
[162.03150940 273.37557983]
[167.03479004 287.51657104]
[172.03807068 301.65753174]
[190.59729004 309.31942749]
[197.45440674 327.86627197]
[188.61941528 345.21533203]
[194.30351257 359.09664917]
[199.98760986 372.97796631]
[205.67170715 386.85928345]
[211.35580444 400.74060059]
[217.03991699 414.62191772]
[232.04675293 417.43341064]
[243.12022400 427.73352051]
[246.93518066 442.21820068]
[242.45928955 456.36083984]
[252.26550293 467.71154785]
[262.07171631 479.06222534]
[270.06201172 483.51864624]
[271.94299316 490.67703247]
[281.56411743 502.18502808]
[291.18524170 513.69305420]
[300.80636597 525.20104980]
[310.42749023 536.70904541]
[325.54382324 533.99017334]
[339.98892212 539.20886230]
[349.87713623 550.96130371]
[352.54858398 566.08605957]
[347.28463745 580.51470947]
[335.50128174 590.36602783]
[320.36822510 592.99005127]
[305.95611572 587.68090820]
[296.14178467 575.86676025]
[293.56521606 560.72552490]
[298.91949463 546.33013916]
[289.29837036 534.82214355]
[279.67724609 523.31414795]
[270.05612183 511.80615234]
[260.43499756 500.29815674]
[250.72102356 488.86843872]
[240.91481018 477.51776123]
[231.10859680 466.16705322]
[228.38833618 467.22473145]
[225.56832886 467.97714233]
[224.35513306 482.92797852]
[223.14192200 497.87884521]
[229.73770142 512.25958252]
[220.99636841 524.31939697]
[219.78315735 539.27026367]
[218.56996155 554.22106934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 193]
[7 192]
[8 191]
[10 189]
[11 188]
[12 187]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[26 147]
[27 146]
[28 145]
[30 144]
[31 143]
[32 142]
[36 140]
[37 139]
[38 138]
[39 137]
[40 136]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 69]
[56 68]
[57 67]
[78 88]
[79 87]
[80 86]
[96 132]
[97 131]
[99 129]
[100 128]
[101 127]
[102 126]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
[159 185]
[160 184]
[161 183]
[163 182]
[164 181]
[165 180]
[166 179]
[167 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
