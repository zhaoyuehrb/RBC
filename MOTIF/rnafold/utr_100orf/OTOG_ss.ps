%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGAGUCCUGGCGUCUGCGCUCUGCUGGCUGCUUUGUGUCUGGCUGCCCUGGGGUGAGCAGGCAGCCGAGUCCCUGCGGGUGCAGCGCCUCGGUGAGA\
) } def
/len { sequence length } bind def

/coor [
[76.96999359 429.01400757]
[61.83518982 427.59759521]
[48.39683151 420.49273682]
[38.70416260 408.78289795]
[34.23525238 394.25372314]
[35.67157364 379.12078857]
[42.79409409 365.69177246]
[54.51668930 356.01452637]
[69.05174255 351.56472778]
[70.44943237 336.63000488]
[62.24242020 321.20446777]
[72.79103851 306.21203613]
[73.72357941 291.24102783]
[74.65612793 276.27005005]
[75.58866882 261.29907227]
[72.81391907 254.30433655]
[76.79017639 245.87925720]
[78.18786621 230.94451904]
[79.58554840 216.00978088]
[80.98323822 201.07504272]
[82.38092804 186.14030457]
[83.77861786 171.20555115]
[81.22274780 164.12791443]
[85.45909119 155.83056641]
[87.32057190 140.94651794]
[89.18205261 126.06246948]
[91.04353333 111.17842102]
[85.78678131 98.22241974]
[94.07241821 86.96009827]
[95.93389893 72.07604980]
[88.60106659 61.32493210]
[90.57131195 48.86930084]
[100.22714233 41.40050507]
[102.55061340 26.58155060]
[104.87408447 11.76259327]
[107.19755554 -3.05636311]
[94.39027405 4.75219202]
[79.52323914 2.75941634]
[69.22441101 -8.14627743]
[68.08518219 -23.10295296]
[76.61343384 -35.44268036]
[91.00714111 -39.66420746]
[104.84934235 -33.88550568]
[111.96918488 -20.68143845]
[117.43895721 -34.64860153]
[122.90872955 -48.61576080]
[128.37849426 -62.58292007]
[133.84826660 -76.55007935]
[139.31805420 -90.51724243]
[144.78782654 -104.48440552]
[145.02641296 -113.79760742]
[150.65101624 -118.79653931]
[156.55252075 -132.58683777]
[149.33319092 -146.45822144]
[152.76965332 -161.71353149]
[165.23934937 -171.14968872]
[180.85443115 -170.31121826]
[192.24195862 -159.59402466]
[194.02508545 -144.05844116]
[185.36186218 -131.03988647]
[170.34280396 -126.68533325]
[164.44129944 -112.89503479]
[158.75497437 -99.01463318]
[153.28520203 -85.04747009]
[147.81542969 -71.08030701]
[142.34565735 -57.11314774]
[136.87588501 -43.14598846]
[131.40611267 -29.17882729]
[125.93634033 -15.21166611]
[122.01651764 -0.73289031]
[119.69303894 14.08606625]
[117.36956787 28.90502357]
[115.04609680 43.72397995]
[122.27823639 59.62987900]
[110.81794739 73.93753052]
[108.95646667 88.82157898]
[114.21321869 101.77758026]
[105.92758179 113.03990173]
[104.06610107 127.92395020]
[102.20462036 142.80799866]
[100.34313965 157.69204712]
[98.71335602 172.60324097]
[97.31566620 187.53799438]
[95.91798401 202.47273254]
[94.52029419 217.40747070]
[93.12260437 232.34220886]
[91.72491455 247.27694702]
[90.55965424 262.23162842]
[89.62711334 277.20260620]
[88.69456482 292.17358398]
[87.76202393 307.14456177]
[95.74906158 317.41900635]
[94.55699158 329.97302246]
[85.38417053 338.02767944]
[83.98648071 352.96243286]
[97.44348907 360.03189087]
[107.16693115 371.71621704]
[111.67404938 386.23358154]
[110.27754974 401.37023926]
[103.19037628 414.81793213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 95]
[10 94]
[12 91]
[13 90]
[14 89]
[15 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[22 82]
[24 81]
[25 80]
[26 79]
[27 78]
[29 76]
[30 75]
[33 73]
[34 72]
[35 71]
[36 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
