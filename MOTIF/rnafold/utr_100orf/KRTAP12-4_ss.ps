%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:52:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCAGCCCUGUCCUCUGCGCCCCCCACCUGUCCACACUCCAUCAUGUGCCACACCAGCCACUCUUCGGGCUGCCCAAUGGCCUGCCCUGGCUCCCCGUGCUGUGUCCCCAGCACCUGCUACCCACCCGAGGGCUAUGGGACCU\
) } def
/len { sequence length } bind def

/coor [
[82.13201904 376.16152954]
[73.73335266 388.83160400]
[61.12257767 397.31906128]
[46.22274399 400.32962036]
[31.30596542 397.40417480]
[18.64694786 388.98883057]
[10.17609501 376.36691284]
[7.18515253 361.46313477]
[10.13021660 346.55020142]
[18.56218719 333.90228271]
[31.19524765 325.44802856]
[46.10295105 322.47671509]
[48.98972321 307.75711060]
[51.87649918 293.03750610]
[54.76327133 278.31790161]
[57.65004730 263.59832764]
[52.50676727 249.61990356]
[62.75529480 237.56675720]
[65.64206696 222.84716797]
[63.82971573 215.62574768]
[68.75255585 207.84342957]
[71.95536804 193.18936157]
[75.15818787 178.53527832]
[78.36100006 163.88121033]
[65.99710846 158.24824524]
[55.01302338 150.25163269]
[45.85446167 140.21586609]
[38.89307022 128.54817200]
[34.41133881 115.72202301]
[32.59112549 102.25788879]
[33.50629425 88.70214081]
[19.08934784 84.56068420]
[4.67240095 80.41922760]
[-13.04835224 85.29997253]
[-24.77140045 72.28255463]
[-39.27411652 68.45225525]
[-53.77683258 64.62195587]
[-68.27954865 60.79165649]
[-80.21791077 70.70403290]
[-95.70473480 71.67252350]
[-108.78501892 63.32472610]
[-114.42913055 48.87053680]
[-110.46679688 33.86788559]
[-98.42160797 24.08560181]
[-82.92519379 23.28516960]
[-69.93623352 31.77437210]
[-64.44924927 46.28894043]
[-49.94653320 50.11923981]
[-35.44381714 53.94953918]
[-20.94110107 57.77983856]
[-10.28680420 51.95647812]
[1.86114812 55.08233643]
[8.81385517 66.00228119]
[23.23080254 70.14373779]
[37.64775085 74.28519440]
[52.54065323 52.07646942]
[74.89327240 37.40042496]
[101.19219971 32.56385803]
[103.12342834 17.68869781]
[105.05464935 2.81353879]
[106.98587036 -12.06162071]
[108.91709137 -26.93678093]
[96.14464569 -19.07137871]
[81.50674438 -22.34734344]
[73.30535889 -34.90669632]
[76.19194794 -49.62632751]
[88.52936554 -58.15792465]
[103.32038116 -55.66274261]
[112.17630768 -43.55545425]
[116.00660706 -58.05817032]
[119.83690643 -72.56089020]
[123.66720581 -87.06360626]
[118.40631104 -104.67523956]
[131.16848755 -116.67565918]
[134.68585205 -131.25743103]
[138.20323181 -145.83920288]
[133.04609680 -161.40635681]
[144.14970398 -173.47456360]
[160.09161377 -169.62910461]
[164.47215271 -153.82585144]
[152.78500366 -142.32183838]
[149.26762390 -127.74005890]
[145.75025940 -113.15828705]
[151.80149841 -102.63175964]
[148.93774414 -90.41935730]
[138.16992188 -83.23330688]
[134.33963013 -68.73059082]
[130.50932312 -54.22787094]
[126.67902374 -39.72515488]
[123.79225159 -25.00555801]
[121.86103058 -10.13039875]
[119.92980957 4.74476147]
[117.99858856 19.61992073]
[116.06735992 34.49508286]
[130.37043762 39.77798462]
[143.12138367 48.13863373]
[153.66853333 59.14974213]
[161.47285461 72.24857330]
[166.13552856 86.76567841]
[181.08000183 85.47621155]
[196.02447510 84.18673706]
[210.96893311 82.89726257]
[225.91340637 81.60779572]
[240.85787964 80.31832123]
[250.83807373 68.06387329]
[266.56860352 66.53886414]
[278.71685791 76.64804840]
[280.07546997 92.39383698]
[269.83840942 104.43452454]
[254.07913208 105.62658691]
[242.14735413 95.26279449]
[227.20288086 96.55226898]
[212.25840759 97.84173584]
[197.31393433 99.13121033]
[182.36946106 100.42068481]
[167.42498779 101.71015167]
[166.89117432 108.63854980]
[165.64732361 115.47525024]
[163.70663452 122.14768219]
[161.08969116 128.58502197]
[157.82431030 134.71893311]
[153.94511414 140.48429871]
[149.49330139 145.81994629]
[144.51612854 150.66920471]
[139.06642151 154.98062134]
[133.20202637 158.70843506]
[126.98519897 161.81304932]
[120.48192596 164.26153564]
[113.76124573 166.02789307]
[106.89448547 167.09336853]
[99.95453644 167.44667053]
[93.01507568 167.08401489]
[89.81226349 181.73809814]
[86.60945129 196.39216614]
[83.40663147 211.04624939]
[80.36166382 225.73393250]
[77.47489166 240.45353699]
[82.41168976 255.48478699]
[72.36964417 266.48507690]
[69.48287201 281.20468140]
[66.59609222 295.92428589]
[63.70932007 310.64389038]
[60.82254791 325.36346436]
[73.50366211 333.74545288]
[82.00769043 346.34506226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 143]
[13 142]
[14 141]
[15 140]
[16 139]
[18 137]
[19 136]
[21 135]
[22 134]
[23 133]
[24 132]
[31 55]
[32 54]
[33 53]
[35 50]
[36 49]
[37 48]
[38 47]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[69 89]
[70 88]
[71 87]
[72 86]
[74 83]
[75 82]
[76 81]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
