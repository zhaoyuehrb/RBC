%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGCCGCCGACGGCGCGCUUUCGUGACGCAGCCCGGGUCUCAGGGAACAUGGCGGCGCUGGUGAGACCCGCGAGGUUUGUCGUGCGACCGUUGCUGCAGGUGGUCCAGGCUUGGGACCUUGACGCGAGGCGCUGGGUCCGGGCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[70.55783081 366.31616211]
[58.17331696 374.77923584]
[43.17578888 374.50704956]
[31.10653114 365.60015869]
[26.42490196 351.35034180]
[20.07777214 364.94128418]
[13.73064327 378.53222656]
[7.38351393 392.12316895]
[9.34163189 408.40499878]
[-3.94029760 418.02386475]
[-18.79896545 411.08468628]
[-19.94904709 394.72592163]
[-6.20743704 385.77606201]
[0.13969235 372.18508911]
[6.48682165 358.59414673]
[12.83395100 345.00320435]
[18.02936745 330.93167114]
[22.03710747 316.47698975]
[26.04484749 302.02230835]
[30.05258751 287.56762695]
[34.06032944 273.11291504]
[32.49528885 268.53842163]
[33.83357620 262.93124390]
[38.54714203 258.14691162]
[43.15270615 243.87145996]
[42.20712280 236.49232483]
[48.00542068 229.34869385]
[52.90697479 215.17213440]
[57.80852509 200.99557495]
[54.65486145 186.43865967]
[66.47689819 175.92437744]
[71.37844849 161.74781799]
[76.27999878 147.57127380]
[81.18154907 133.39471436]
[85.93536377 119.16793060]
[90.54093170 104.89247131]
[93.94390869 90.28357697]
[96.12074280 75.44236755]
[98.29758453 60.60116577]
[100.47441864 45.75996017]
[102.65125275 30.91875458]
[104.82809448 16.07754898]
[107.00492859 1.23634350]
[109.18177032 -13.60486221]
[111.35860443 -28.44606781]
[112.91618347 -43.36497879]
[113.85181427 -58.33576965]
[114.78744507 -73.30656433]
[107.92599487 -87.56247711]
[116.44210052 -99.78234863]
[117.37772369 -114.75314331]
[118.31335449 -129.72393799]
[109.72790527 -145.98031616]
[119.92068481 -160.23188782]
[120.54465485 -175.21890259]
[121.16863251 -190.20591736]
[121.79261017 -205.19293213]
[122.41658783 -220.17994690]
[123.04056549 -235.16697693]
[115.88403320 -249.27705383]
[124.14406586 -261.67144775]
[124.76804352 -276.65847778]
[125.39202118 -291.64547729]
[126.01599884 -306.63250732]
[117.53758240 -311.64135742]
[111.53110504 -319.37127686]
[108.80464935 -328.71261597]
[109.69928741 -338.34402466]
[114.04701233 -346.91952515]
[121.20026398 -353.25653076]
[130.12805176 -356.49884033]
[131.99566650 -371.38211060]
[133.86328125 -386.26538086]
[135.73089600 -401.14865112]
[137.59851074 -416.03195190]
[127.70486450 -428.35638428]
[129.50671387 -444.05761719]
[141.93505859 -453.82040405]
[157.61636353 -451.85263062]
[167.24720764 -439.32177734]
[165.11376953 -423.66213989]
[152.48178101 -414.16433716]
[150.61418152 -399.28106689]
[148.74656677 -384.39776611]
[146.87895203 -369.51449585]
[145.01133728 -354.63122559]
[158.90249634 -339.71234131]
[157.38366699 -319.09329224]
[141.00302124 -306.00851440]
[140.37904358 -291.02151489]
[139.75506592 -276.03448486]
[139.13108826 -261.04748535]
[146.33226013 -248.00935364]
[138.02758789 -234.54299927]
[137.40361023 -219.55596924]
[136.77963257 -204.56895447]
[136.15565491 -189.58193970]
[135.53167725 -174.59492493]
[134.90769958 -159.60791016]
[142.88256836 -150.45866394]
[142.44534302 -137.92758179]
[133.28414917 -128.78829956]
[132.34851074 -113.81751251]
[131.41288757 -98.84672546]
[138.34126282 -85.66162109]
[129.75823975 -72.37093353]
[128.82260132 -57.40014267]
[127.88697815 -42.42935181]
[129.70613098 -40.21621323]
[130.72875977 -37.12619400]
[130.60757446 -33.47007751]
[129.11833191 -29.68151283]
[126.19980621 -26.26922989]
[124.02297211 -11.42802525]
[121.84613800 3.41318059]
[119.66929626 18.25438690]
[117.49246216 33.09559250]
[115.31562805 47.93679810]
[113.13878632 62.77800369]
[110.96195221 77.61920929]
[108.78511047 92.46041107]
[120.53496552 83.13619995]
[135.51376343 82.33882904]
[148.18711853 90.36290741]
[153.87249756 104.24369812]
[150.46926880 118.85253143]
[139.23483276 128.79173279]
[124.32012177 130.38896179]
[111.23580170 123.05406952]
[104.81639099 109.49803162]
[100.21082306 123.77349091]
[100.54984283 132.96789551]
[95.35810852 138.29626465]
[90.45655823 152.47282410]
[85.55500793 166.64936829]
[80.65345764 180.82592773]
[83.45652771 196.39685059]
[71.98508453 205.89712524]
[67.08353424 220.07368469]
[62.18198013 234.25024414]
[57.42816544 248.47702026]
[52.82260132 262.75247192]
[48.51501465 277.12066650]
[44.50727463 291.57534790]
[40.49953461 306.03002930]
[36.49179459 320.48474121]
[32.48405457 334.93942261]
[45.30341339 327.15069580]
[60.26493073 328.22451782]
[71.84062195 337.76406860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[17 147]
[18 146]
[19 145]
[20 144]
[21 143]
[24 142]
[25 141]
[27 140]
[28 139]
[29 138]
[31 136]
[32 135]
[33 134]
[34 133]
[35 131]
[36 130]
[37 121]
[38 120]
[39 119]
[40 118]
[41 117]
[42 116]
[43 115]
[44 114]
[45 113]
[46 108]
[47 107]
[48 106]
[50 104]
[51 103]
[52 102]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[64 89]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
