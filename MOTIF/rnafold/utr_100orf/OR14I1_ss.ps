%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGACAAUCUCACAAAAGUGACAGAAUUCCUGCUGAUGGAGUUUUCUGGUAUCUGGGAGCUGCAGGUGCUGCACGCCGGGCUGUUUCUGCUGAUUUAUC\
) } def
/len { sequence length } bind def

/coor [
[148.01672363 181.00231934]
[136.36862183 190.45333862]
[122.23825836 195.48648071]
[107.23831177 195.52734375]
[93.08073425 190.57122803]
[81.38133240 181.18379211]
[73.47534943 168.43643188]
[70.26509094 153.78398132]
[72.11695862 138.89872742]
[78.81958771 125.47953033]
[89.61009216 115.05650330]
[76.77801514 122.82424164]
[63.94594193 130.59199524]
[51.11386871 138.35972595]
[43.68894577 152.98171997]
[27.30116463 153.59223938]
[18.80887222 139.56323242]
[26.94820976 125.32654572]
[43.34612274 125.52765656]
[56.17819977 117.75991058]
[69.01027679 109.99217224]
[81.84234619 102.22442627]
[82.77489471 87.25344086]
[71.00598145 77.95330048]
[59.23706436 68.65315247]
[47.46815109 59.35301208]
[35.41569901 50.42337799]
[23.09136200 41.87289429]
[10.76702785 33.32241058]
[-1.55730677 24.77192688]
[-13.88164139 16.22144318]
[-28.92016792 20.50825119]
[-43.17467880 14.07839870]
[-49.91462326 -0.03213361]
[-45.95761490 -15.16078472]
[-33.17202377 -24.16426659]
[-17.59481812 -22.79141235]
[-6.58108044 -11.69044113]
[-5.33115768 3.89710855]
[6.99317694 12.44759274]
[19.31751251 20.99807549]
[31.64184570 29.54856110]
[43.96618271 38.09904480]
[48.90488052 38.10128021]
[53.85366058 41.32917786]
[56.76829529 47.58409882]
[68.53720856 56.88423920]
[80.30612183 66.18438721]
[92.07503510 75.48452759]
[101.71113586 79.09468079]
[107.41681671 85.61341095]
[108.71313477 92.65407562]
[123.56642914 90.56134796]
[138.41973877 88.46861267]
[153.51811218 75.29199219]
[171.19755554 82.85835266]
[185.89201355 79.84625244]
[200.58648682 76.83414459]
[215.28094482 73.82203674]
[229.97540283 70.80992889]
[244.66987610 67.79782867]
[256.63522339 57.44695663]
[270.65698242 62.47092819]
[285.35144043 59.45882034]
[298.72555542 46.92169189]
[315.14520264 52.89634323]
[329.73889160 49.42869568]
[344.33258057 45.96105194]
[358.92623901 42.49340820]
[368.53097534 29.64316368]
[384.57000732 29.28448296]
[394.73959351 41.69251633]
[391.23849487 57.34887695]
[376.75244141 64.24335480]
[362.39389038 57.08708572]
[347.80023193 60.55472946]
[333.20654297 64.02237701]
[318.61285400 67.49002075]
[311.91674805 77.69687653]
[299.65179443 80.62876129]
[288.36352539 74.15328217]
[273.66906738 77.16539001]
[262.75476074 87.30081177]
[247.68197632 82.49228668]
[232.98751831 85.50439453]
[218.29304504 88.51650238]
[203.59858704 91.52860260]
[188.90412903 94.54071045]
[174.20967102 97.55281830]
[169.24298096 106.72932434]
[159.80377197 111.67457581]
[148.99092102 110.48582458]
[140.51246643 103.32191467]
[125.65916443 105.41464233]
[110.80586243 107.50737762]
[125.75330353 108.76203156]
[139.42999268 114.92223358]
[150.27502441 125.28492737]
[157.05064392 138.66741943]
[158.98355103 153.54235840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 22]
[12 21]
[13 20]
[14 19]
[23 49]
[24 48]
[25 47]
[26 46]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[52 95]
[53 94]
[54 93]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 84]
[63 82]
[64 81]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
