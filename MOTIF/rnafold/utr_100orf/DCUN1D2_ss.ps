%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGCCGGGGCCGGCCAGAAGCGGGCGGCGCGGGGGAGAUGCAUAAGCUUAAAUCGUCUCAGAAGGACAAGGUCCGCCAGUUUAUGGCGUGCACUCAGGCUGGCGAGAGAACUGCUAUCUACUGCUUAACGCAGAAUG\
) } def
/len { sequence length } bind def

/coor [
[165.32632446 546.11102295]
[165.15803528 531.11199951]
[164.98973083 516.11291504]
[157.49020386 516.19708252]
[150.68034363 529.56219482]
[143.87049866 542.92724609]
[137.06063843 556.29235840]
[130.25077820 569.65747070]
[131.64892578 585.99688721]
[118.04467773 595.15423584]
[103.43292999 587.70916748]
[102.84499359 571.32055664]
[116.88568115 562.84759521]
[123.69554138 549.48248291]
[130.50540161 536.11743164]
[137.31524658 522.75231934]
[144.12510681 509.38720703]
[147.46292114 494.76330566]
[147.12635803 479.76705933]
[146.78977966 464.77084351]
[146.28497314 449.77932739]
[145.61199951 434.79443359]
[144.93904114 419.80953979]
[144.26606750 404.82464600]
[143.59309387 389.83975220]
[128.08177185 382.52584839]
[118.32028198 368.31848145]
[117.04276276 351.03952026]
[124.68633270 335.39202881]
[139.24777222 325.68005371]
[137.90318298 310.74044800]
[136.55859375 295.80084229]
[127.71157074 283.81835938]
[134.18067932 269.38018799]
[132.83609009 254.44056702]
[120.54199982 239.57865906]
[129.07266235 221.37435913]
[127.05915833 206.51011658]
[125.04566193 191.64587402]
[120.99733734 185.38821411]
[123.15762329 176.42593384]
[121.47815704 161.52024841]
[119.79869080 146.61456299]
[118.11922455 131.70889282]
[116.43975067 116.80319977]
[116.27763367 131.80232239]
[110.26499939 145.54454041]
[99.35875702 155.84277344]
[85.29460144 161.05810547]
[70.31083679 160.36050415]
[56.79208755 153.86100769]
[46.88984680 142.59399414]
[42.18004227 128.35258484]
[43.41222763 113.40327454]
[50.39178085 100.12341309]
[43.58192444 86.75831604]
[28.47559357 82.11350250]
[21.15211678 68.10842896]
[25.95638466 53.05204773]
[40.03810883 45.87704849]
[55.04285431 50.84023285]
[62.06856918 64.99703217]
[56.94702148 79.94846344]
[63.75688171 93.31356049]
[71.08710480 91.72679901]
[93.07777405 86.96650696]
[93.75074768 71.98160553]
[94.42372131 56.99671173]
[95.09669495 42.01181793]
[89.76705933 25.91736603]
[103.75714874 16.34062958]
[116.83245850 27.13287354]
[110.08158875 42.68478775]
[109.40861511 57.66968536]
[108.73564148 72.65457916]
[108.06266785 87.63948059]
[122.32852173 92.27473450]
[130.59197998 79.75613403]
[138.85542297 67.23753357]
[147.11888123 54.71893692]
[145.32241821 38.77678299]
[156.76783752 27.53481674]
[172.67521667 29.61691475]
[180.84175110 43.42586899]
[175.00279236 58.36862946]
[159.63748169 62.98239136]
[151.37402344 75.50099182]
[143.11056519 88.01958466]
[134.84712219 100.53818512]
[131.34544373 115.12373352]
[133.02490234 130.02941895]
[134.70437622 144.93510437]
[136.38383484 159.84078979]
[138.06330872 174.74647522]
[139.90991211 189.63237000]
[141.92340088 204.49661255]
[143.93690491 219.36087036]
[153.03858948 225.50396729]
[157.12922668 235.45626831]
[155.06460571 245.79165649]
[147.77571106 253.09597778]
[149.12030029 268.03558350]
[158.06349182 281.08663940]
[151.49819946 294.45623779]
[152.84278870 309.39587402]
[154.18737793 324.33547974]
[166.45056152 328.66561890]
[176.11074829 337.30267334]
[181.74015808 348.92221069]
[182.52503967 361.76269531]
[178.38307190 373.89254761]
[169.97041321 383.50064087]
[158.57798767 389.16677856]
[159.25096130 404.15167236]
[159.92393494 419.13656616]
[160.59690857 434.12145996]
[161.26988220 449.10638428]
[164.80557251 457.62036133]
[161.78601074 464.43426514]
[162.12257385 479.43051147]
[162.45915222 494.42672729]
[181.41032410 492.66204834]
[200.69725037 508.75244141]
[207.80528259 521.96136475]
[214.91331482 535.17028809]
[222.02134705 548.37927246]
[236.91122437 554.35174561]
[241.38722229 569.75775146]
[232.01573181 582.77911377]
[215.98576355 583.42687988]
[205.59413147 571.20422363]
[208.81240845 555.48730469]
[201.70437622 542.27832031]
[194.59634399 529.06939697]
[187.48832703 515.86047363]
[179.98878479 515.94464111]
[180.15708923 530.94366455]
[180.32537842 545.94274902]
[180.49345398 560.94177246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[18 121]
[19 120]
[20 119]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[30 106]
[31 105]
[32 104]
[34 102]
[35 101]
[37 97]
[38 96]
[39 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 90]
[55 64]
[56 63]
[66 76]
[67 75]
[68 74]
[69 73]
[77 89]
[78 88]
[79 87]
[80 86]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
