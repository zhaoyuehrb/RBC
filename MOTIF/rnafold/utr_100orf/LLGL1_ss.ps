%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGCGCGGCGCAUCCUGCGGGCGGCGGCGGCGGGCGAGGCGCCUGCAGCCGGGCGCAAGAUGAUGAAGUUUCGGUUCCGGCGGCAGGGCGCCGACCCGCAGCGCGAGAAGCUCAAGCAGGAGCUUUUCGCCUUCAACAAGACUGUGGAGCAUGGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[68.33364105 131.20550537]
[60.92371368 130.04661560]
[52.20133209 142.24990845]
[43.47895432 154.45318604]
[34.75657272 166.65646362]
[26.03419113 178.85974121]
[17.43054390 191.14701843]
[8.94644070 203.51715088]
[10.53507137 216.34950256]
[3.17370820 226.48765564]
[-8.73202419 228.79557800]
[-17.45440483 240.99887085]
[-26.17678642 253.20214844]
[-34.89916611 265.40542603]
[-39.19048309 281.80728149]
[-56.13930511 282.22415161]
[-61.23178864 266.05310059]
[-47.10244751 256.68304443]
[-38.38006592 244.47976685]
[-29.65768623 232.27648926]
[-20.93530464 220.07321167]
[-20.20408249 202.56044006]
[-3.42368412 195.03305054]
[5.06041908 182.66291809]
[6.25617981 175.33201599]
[13.83090973 170.13735962]
[22.55329132 157.93408203]
[31.27567101 145.73080444]
[39.99805450 133.52752686]
[48.72043228 121.32424164]
[67.43988800 92.47059631]
[92.52887726 91.51948547]
[84.53081512 78.82968903]
[76.53274536 66.13989258]
[68.53468323 53.45009995]
[60.53661346 40.76030350]
[47.11689377 39.30440521]
[37.14200592 30.50175858]
[34.11842728 17.74655151]
[38.93543243 5.76480675]
[31.18494225 -7.07769632]
[23.43445206 -19.92020035]
[15.68396187 -32.76270294]
[7.93347120 -45.60520554]
[0.18298069 -58.44771194]
[-7.69166803 -71.21446228]
[-15.68973446 -83.90425873]
[-23.68780136 -96.59405518]
[-37.59176636 -104.14324951]
[-37.83235168 -119.03591156]
[-45.83041763 -131.72570801]
[-53.82848358 -144.41549683]
[-61.82654953 -157.10530090]
[-69.82461548 -169.79508972]
[-77.82268524 -182.48489380]
[-85.08255768 -188.11119080]
[-85.85003662 -195.49922180]
[-93.60053253 -208.34172058]
[-109.91486359 -216.83207703]
[-109.62657166 -234.35772705]
[-117.62463379 -247.04751587]
[-125.62270355 -259.73730469]
[-133.62077332 -272.42712402]
[-149.08715820 -275.67767334]
[-157.65496826 -288.95806885]
[-154.24105835 -304.38922119]
[-140.87083435 -312.81613159]
[-125.47663116 -309.23925781]
[-117.19154358 -295.78070068]
[-120.93096924 -280.42517090]
[-112.93290710 -267.73538208]
[-104.93483734 -255.04559326]
[-96.93677521 -242.35578918]
[-85.18537903 -239.35951233]
[-78.42594910 -228.81048584]
[-80.75802612 -216.09220886]
[-73.00753784 -203.24971008]
[-65.13288879 -190.48295593]
[-57.13482285 -177.79316711]
[-49.13675308 -165.10336304]
[-41.13868713 -152.41357422]
[-33.14062119 -139.72377014]
[-25.14255524 -127.03398132]
[-11.81066704 -120.39244080]
[-10.99800491 -104.59211731]
[-2.99993801 -91.90232086]
[4.99812841 -79.21252441]
[11.25586987 -75.21093750]
[13.02548409 -66.19820404]
[20.77597427 -53.35569763]
[28.52646446 -40.51319504]
[36.27695465 -27.67069054]
[44.02744675 -14.82818699]
[51.77793884 -1.98568368]
[68.24277496 1.33120894]
[77.41496277 15.80192375]
[73.22640991 32.76223755]
[81.22447205 45.45203400]
[89.22254181 58.14182663]
[97.22061157 70.83162689]
[105.21867371 83.52142334]
[118.81329346 89.86069489]
[133.67529297 87.83072662]
[141.80148315 83.54982758]
[148.84486389 85.90838623]
[163.74343872 84.16699219]
[178.64201355 82.42559814]
[193.54058838 80.68420410]
[208.43916321 78.94281006]
[223.33773804 77.20141602]
[238.23631287 75.46002197]
[253.13488770 73.71862793]
[268.03347778 71.97723389]
[282.93203735 70.23583984]
[297.83062744 68.49444580]
[307.43518066 55.94342422]
[323.11230469 53.94279861]
[335.56109619 63.67950821]
[337.39587402 79.37693024]
[327.52807617 91.72206879]
[311.81213379 93.39076996]
[299.57202148 83.39302063]
[284.67343140 85.13441467]
[269.77487183 86.87580872]
[254.87628174 88.61720276]
[239.97770691 90.35859680]
[225.07913208 92.09999084]
[210.18055725 93.84138489]
[195.28198242 95.58277893]
[180.38340759 97.32417297]
[165.48483276 99.06556702]
[150.58625793 100.80696106]
[135.70526123 102.69273376]
[120.84326172 104.72270203]
[116.84423065 111.06759644]
[130.86009216 116.41136169]
[144.87594604 121.75511932]
[159.80683899 120.31700134]
[172.66557312 128.04054260]
[178.40980530 141.89707947]
[174.78703308 156.45303345]
[163.21788025 166.00051880]
[148.23896790 166.79565430]
[135.72402954 158.52665710]
[130.58058167 144.43624878]
[119.71337128 134.09681702]
[108.84616089 123.75739288]
[104.84712982 130.10229492]
[109.42701721 144.38601685]
[114.00691223 158.66972351]
[118.58679962 172.95344543]
[123.16668701 187.23716736]
[133.76040649 200.47384644]
[123.97364807 214.31782532]
[107.96145630 208.74594116]
[108.88297272 191.81706238]
[104.30307770 177.53334045]
[99.72319031 163.24961853]
[95.14330292 148.96589661]
[90.56340790 134.68218994]
[83.15348816 133.52330017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 24]
[8 23]
[11 21]
[12 20]
[13 19]
[14 18]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[40 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 87]
[47 86]
[48 85]
[50 83]
[51 82]
[52 81]
[53 80]
[54 79]
[55 78]
[57 77]
[58 76]
[60 73]
[61 72]
[62 71]
[63 70]
[102 134]
[103 133]
[105 132]
[106 131]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[148 160]
[149 159]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
