%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCAGUUUCCUGGAGACCCGGAAGCAGAUUACGUGGAGUGACGGUCAUGCUGCGGCGUGGACACUUGGCAUUCAGGGACGUGGCCAUAGAAUUCCCUCAGGAGGAGUGGAAAUGUCUGGACCCUGCUCAGAGGACUUUAUACAGGG\
) } def
/len { sequence length } bind def

/coor [
[100.65023804 139.50260925]
[105.20872498 153.79318237]
[95.79860687 165.47434998]
[80.86518860 164.06260681]
[73.81077576 150.82496643]
[80.96630096 137.64193726]
[84.73520660 123.12313843]
[77.26849365 122.41732788]
[67.00028992 133.35185242]
[56.73208237 144.28639221]
[46.46387482 155.22091675]
[36.19566727 166.15544128]
[25.92746162 177.08998108]
[22.30107117 185.54750061]
[15.32787514 188.14312744]
[4.83292484 198.86021423]
[1.28092933 214.87007141]
[-14.43920135 219.54013062]
[-26.15594482 208.06625366]
[-21.81611824 192.25177002]
[-5.88416529 188.36526489]
[4.61078501 177.64817810]
[14.99293232 166.82177734]
[25.26113892 155.88723755]
[35.52934647 144.95271301]
[45.79755402 134.01818848]
[56.06575775 123.08364868]
[66.33396912 112.14912415]
[65.86303711 104.66392517]
[54.74606323 114.73432159]
[39.94136047 112.32167816]
[32.59690475 99.24272919]
[38.24308777 85.34593964]
[52.62831879 81.09563446]
[64.92118073 89.69351959]
[64.45024872 82.20832062]
[52.89255142 72.64696503]
[37.32739639 69.81209564]
[32.45280457 55.73773193]
[20.89510536 46.17637253]
[9.33740711 36.61501312]
[-2.22029161 27.05365181]
[-13.77799034 17.49229240]
[-23.07870674 19.64590836]
[-32.18336487 17.27395821]
[-39.04625320 11.04182625]
[-42.18708038 2.46686482]
[-41.00925446 -6.44951296]
[-51.94378662 -16.71772003]
[-62.87831497 -26.98592567]
[-73.81284332 -37.25413132]
[-84.74737549 -47.52233887]
[-95.68190002 -57.79054642]
[-111.76263428 -61.00647736]
[-116.76089478 -76.62535858]
[-105.53490448 -88.57981873]
[-89.63299561 -84.57214355]
[-85.41369629 -68.72507477]
[-74.47916412 -58.45686722]
[-63.54463577 -48.18866348]
[-52.61010742 -37.92045593]
[-41.67557907 -27.65224838]
[-30.74104881 -17.38404274]
[-10.33266449 -14.55806828]
[-4.21663046 5.93459415]
[7.34106827 15.49595356]
[18.89876747 25.05731392]
[30.45646477 34.61867523]
[42.01416397 44.18003464]
[56.75263596 46.33100891]
[62.45391083 61.08926392]
[74.01161194 70.65061951]
[94.97792053 68.22225952]
[110.05092621 76.95393372]
[115.03501892 89.89950562]
[127.69993591 81.86210632]
[131.29060364 69.42882538]
[142.05961609 63.00452423]
[153.92079163 65.58191681]
[166.75125122 57.81151199]
[179.58172607 50.04110718]
[192.41218567 42.27069855]
[205.24264526 34.50029373]
[218.07312012 26.72989082]
[221.95231628 11.64381981]
[235.07492065 3.94629836]
[249.43328857 7.73749733]
[262.26373291 -0.03290791]
[275.09420776 -7.80331326]
[287.92468262 -15.57371807]
[288.47048950 -27.52855682]
[294.68280029 -37.61609650]
[304.90319824 -43.36580658]
[316.50939941 -43.43629837]
[326.58773804 -37.92652512]
[339.73236084 -45.15282822]
[352.87695312 -52.37913513]
[366.02154541 -59.60543823]
[374.04931641 -73.90534210]
[390.44830322 -73.83247375]
[398.34863281 -59.46178818]
[389.62313843 -45.57662201]
[373.24786377 -46.46083832]
[360.10327148 -39.23453522]
[346.95864868 -32.00822830]
[333.81405640 -24.78192329]
[329.82849121 -6.96417570]
[313.84567261 2.50175977]
[295.69506836 -2.74325418]
[282.86462402 5.02715063]
[270.03414917 12.79755592]
[257.20367432 20.56796074]
[253.91128540 35.04883575]
[241.01007080 43.11190414]
[225.84352112 39.56035233]
[213.01306152 47.33076096]
[200.18258667 55.10116577]
[187.35212708 62.87157059]
[174.52166748 70.64197540]
[161.69119263 78.41237640]
[154.11816406 94.21194458]
[135.73733521 94.52702332]
[123.07241821 102.56442261]
[119.80027008 117.20317841]
[127.83767700 129.86810303]
[135.87507629 142.53302002]
[143.91247559 155.19793701]
[151.94987488 167.86285400]
[166.74928284 164.58357239]
[181.77732849 166.56681824]
[195.21934509 173.57312012]
[205.45211792 184.75642395]
[211.23999023 198.76628113]
[211.88406372 213.91094971]
[207.30654907 228.36163330]
[198.06021118 240.37333679]
[185.26158142 248.49559021]
[170.45617676 251.74758911]
[155.43179321 249.73664856]
[142.00271606 242.70559692]
[131.79057312 231.50344849]
[126.02852631 217.48294067]
[125.41236877 202.33711243]
[130.01649475 187.89489746]
[139.28495789 175.90025330]
[131.24755859 163.23533630]
[123.21015930 150.57041931]
[115.17275238 137.90550232]
[107.13535309 125.24057770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[15 22]
[16 21]
[36 72]
[37 71]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[75 123]
[76 122]
[79 120]
[80 119]
[81 118]
[82 117]
[83 116]
[84 115]
[87 112]
[88 111]
[89 110]
[90 109]
[95 106]
[96 105]
[97 104]
[98 103]
[124 149]
[125 148]
[126 147]
[127 146]
[128 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
