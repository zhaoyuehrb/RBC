%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGGACUAACGGGGAAACAUCCUCCGAGAAGAUACAAUCUCAAGGGUGGGCCUGGAUGUGGGCUUCCAGAGACCAUCUCCCUGAACCAGAUCUUGGGGAUGCAGCGCCCCCUGGCUCGCCUUCAUCAUUCUGGACAUCCGGGCUCCCGAGACAAG\
) } def
/len { sequence length } bind def

/coor [
[-21.90602684 380.45196533]
[-37.00673676 379.54437256]
[-51.08716583 374.01293945]
[-62.76784897 364.39956665]
[-70.90444183 351.64611816]
[-74.69979858 337.00198364]
[-73.78208160 321.90188599]
[-68.24121857 307.82516479]
[-58.62002563 296.15090942]
[-45.86110306 288.02288818]
[-31.21443748 284.23733521]
[-30.31452179 269.26434326]
[-29.41460609 254.29136658]
[-28.51469040 239.31838989]
[-34.20064163 234.42759705]
[-43.98242188 245.79934692]
[-55.35402679 236.01739502]
[-45.57254791 224.64598083]
[-51.25850296 219.75518799]
[-65.92863464 222.88365173]
[-80.59876251 226.01211548]
[-95.26889038 229.14056396]
[-109.93902588 232.26902771]
[-124.60915375 235.39749146]
[-132.29650879 245.79997253]
[-144.62049866 248.08012390]
[-154.84349060 241.54818726]
[-169.57327271 244.38249207]
[-184.30307007 247.21679688]
[-199.03285217 250.05110168]
[-205.49502563 264.15853882]
[-219.03167725 271.74398804]
[-234.43768311 269.89065552]
[-245.78910828 259.31121826]
[-248.72111511 244.07365417]
[-242.10627747 230.03713989]
[-228.48814392 222.59899902]
[-213.10314941 224.61933899]
[-201.86715698 235.32130432]
[-187.13737488 232.48699951]
[-172.40757751 229.65269470]
[-157.67778015 226.81840515]
[-145.08544922 214.62974548]
[-127.73761749 220.72735596]
[-113.06748199 217.59890747]
[-98.39735413 214.47044373]
[-83.72722626 211.34197998]
[-69.05709076 208.21351624]
[-54.38696289 205.08505249]
[-18.42826462 216.12472534]
[-8.09025192 205.25616455]
[2.24776006 194.38761902]
[12.58577251 183.51905823]
[22.92378426 172.65049744]
[33.26179504 161.78195190]
[43.59980774 150.91339111]
[53.93782043 140.04483032]
[64.27583313 129.17628479]
[74.61384583 118.30772400]
[84.95185852 107.43917084]
[86.45011139 92.51418304]
[78.47871399 79.80761719]
[63.74016953 72.61682892]
[62.86838531 56.24087143]
[76.76016998 47.52592468]
[91.12485504 55.43717957]
[91.18527222 71.83621979]
[99.15667725 84.54277802]
[106.20151520 81.96979523]
[127.33602905 74.25083923]
[125.24182892 59.39775085]
[123.14762878 44.54465866]
[121.05342865 29.69156837]
[112.85494995 14.85171413]
[124.84529114 2.86555505]
[139.68228149 11.06921196]
[135.90652466 27.59736824]
[138.00071716 42.45045853]
[140.09492493 57.30355072]
[142.18911743 72.15663910]
[148.50221252 76.20570374]
[149.20222473 61.22204971]
[162.52841187 54.33636475]
[175.15473938 62.43426132]
[174.45500183 77.41793060]
[161.12838745 84.30384064]
[167.44146729 88.35290527]
[181.81449890 84.06150818]
[196.18753052 79.77011108]
[210.56054688 75.47871399]
[224.93357849 71.18731689]
[230.30815125 55.17773438]
[244.01817322 45.60412979]
[260.56777954 46.06356812]
[273.46450806 56.17840576]
[287.74880981 51.60028076]
[302.03308105 47.02215576]
[316.31738281 42.44403076]
[330.60165405 37.86590576]
[335.38497925 33.17147446]
[340.98266602 31.84089088]
[345.54986572 33.40277481]
[360.00585938 29.39982414]
[374.42111206 25.25244141]
[388.79412842 20.96104431]
[403.16717529 16.66964722]
[408.18792725 1.98728776]
[420.89920044 -6.91230679]
[436.41326904 -6.60706139]
[448.76464844 2.78565097]
[453.20397949 17.65414047]
[448.02426147 32.28116989]
[435.21716309 41.04234695]
[419.70733643 40.56882095]
[407.45855713 31.04267311]
[393.08554077 35.33407211]
[378.71252441 39.62546921]
[373.17196655 44.58028793]
[364.00881958 43.85583878]
[349.55279541 47.85879135]
[335.17977905 52.15018845]
[320.89550781 56.72831345]
[306.61120605 61.30643845]
[292.32693481 65.88456726]
[278.04263306 70.46269226]
[275.04779053 83.50487518]
[265.91592407 93.43415070]
[252.96289062 97.57389832]
[239.55291748 94.73624420]
[229.22497559 85.56034088]
[214.85194397 89.85173798]
[200.47892761 94.14313507]
[186.10589600 98.43453217]
[171.73286438 102.72592926]
[95.82041168 117.77718353]
[85.48239899 128.64573669]
[75.14438629 139.51429749]
[64.80637360 150.38284302]
[54.46836472 161.25140381]
[44.13035202 172.11996460]
[33.79233932 182.98851013]
[23.45432854 193.85707092]
[13.11631584 204.72563171]
[2.77830386 215.59417725]
[-7.55970812 226.46273804]
[-13.54170895 240.21830750]
[-14.44162464 255.19128418]
[-15.34154034 270.16427612]
[-16.24145699 285.13723755]
[-2.15362954 290.64981079]
[9.53992939 300.24749756]
[17.69360352 312.99008179]
[21.50857925 327.62908936]
[20.61110687 342.73040771]
[15.08910656 356.81454468]
[5.48357201 368.50167847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 149]
[12 148]
[13 147]
[14 146]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[27 42]
[28 41]
[29 40]
[30 39]
[50 145]
[51 144]
[52 143]
[53 142]
[54 141]
[55 140]
[56 139]
[57 138]
[58 137]
[59 136]
[60 135]
[61 68]
[62 67]
[70 80]
[71 79]
[72 78]
[73 77]
[87 134]
[88 133]
[89 132]
[90 131]
[91 130]
[95 125]
[96 124]
[97 123]
[98 122]
[99 121]
[102 120]
[103 119]
[104 117]
[105 116]
[106 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
