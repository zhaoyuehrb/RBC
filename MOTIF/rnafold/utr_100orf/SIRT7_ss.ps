%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGCCUGCCGUGUGAGGCGGAAGCGGAAGAGCAGGUCUCCAGGGGAGCGAUGGCAGCCGGGGGUCUGAGCCGCUCCGAGCGCAAAGCGGCGGAGCGGGUCCGGAGGUUGCGGGAGGAGCAGCAGAGGGAGCGCCUCCGCCAGGUGUCGC\
) } def
/len { sequence length } bind def

/coor [
[64.73545837 388.12496948]
[67.32382965 368.91690063]
[67.63383484 353.92010498]
[67.94384003 338.92330933]
[67.94384003 323.92330933]
[67.63383484 308.92651367]
[67.32382965 293.92971802]
[67.01382446 278.93292236]
[66.70382690 263.93612671]
[63.89267731 260.00424194]
[63.56468582 254.25082397]
[66.70382690 248.31611633]
[67.01382446 233.31932068]
[67.32382965 218.32252502]
[64.29855347 211.52719116]
[67.79840088 203.01986694]
[68.41828156 188.03268433]
[69.03815460 173.04548645]
[69.65802765 158.05830383]
[70.27790070 143.07112122]
[70.89777374 128.08393860]
[70.01775360 143.05809021]
[62.93755341 156.28196716]
[50.96326065 165.31614685]
[36.30376816 168.49407959]
[21.66331482 165.22955322]
[9.74262238 156.12477112]
[2.74070120 142.85928345]
[1.94919395 127.88018036]
[7.51411009 113.95065308]
[18.40888977 103.64028168]
[32.62377548 98.85102081]
[47.53654480 100.46633911]
[60.39402390 108.18616486]
[47.66965103 100.24321747]
[34.94528198 92.30027771]
[22.22091103 84.35733032]
[13.22216320 82.44783020]
[9.31802464 76.11643982]
[-3.23947263 67.91221619]
[-15.79696941 59.70799637]
[-28.35446739 51.50377274]
[-41.15719986 53.37957764]
[-51.46104431 46.23634720]
[-54.02482986 34.37415314]
[-66.41008759 25.91215706]
[-81.74850464 28.62705231]
[-94.18837738 19.86895370]
[-96.68209076 5.22938490]
[-109.06734467 -3.23260999]
[-125.45149231 -3.93400621]
[-132.79519653 -18.59695053]
[-123.54389954 -32.13746262]
[-107.21453094 -30.62622643]
[-100.60535431 -15.61786938]
[-88.22009277 -7.15587473]
[-73.67551422 -10.15435505]
[-60.99456024 -1.74912190]
[-57.94809341 13.52689838]
[-45.56283569 21.98889351]
[-28.04434586 22.34240341]
[-20.15024376 38.94627762]
[-7.59274721 47.15049744]
[4.96474981 55.35472107]
[17.52224731 63.55894470]
[30.16385651 71.63295746]
[42.88822556 79.57590485]
[55.61259842 87.51885223]
[68.33696747 95.46179199]
[76.18133545 81.83996582]
[88.86328888 74.40034485]
[102.55073547 74.24353027]
[108.29098511 60.38533783]
[114.03124237 46.52714539]
[119.77149200 32.66895294]
[125.51174164 18.81075859]
[131.25199890 4.95256615]
[136.99224854 -8.90562725]
[142.73249817 -22.76382065]
[138.52125549 -34.99877167]
[143.63562012 -46.44596481]
[154.81903076 -51.15937042]
[160.84445190 -64.89597321]
[166.86988831 -78.63256836]
[167.69531250 -95.56641388]
[184.19587708 -99.46099091]
[192.50607300 -84.68340302]
[180.60649109 -72.60713959]
[174.58105469 -58.87053680]
[168.55561829 -45.13393784]
[171.44816589 -27.85228348]
[156.59069824 -17.02356911]
[150.85043335 -3.16537547]
[145.11018372 10.69281769]
[139.36993408 24.55101013]
[133.62968445 38.40920258]
[127.88943481 52.26739502]
[122.14918518 66.12558746]
[116.40892792 79.98377991]
[122.09632874 86.52208710]
[125.30673218 94.57127380]
[140.25550842 95.80995941]
[155.20426941 97.04865265]
[164.00386047 84.53807831]
[177.79296875 78.15392303]
[192.82627869 79.51986694]
[205.07546997 88.16933441]
[211.30859375 101.69758606]
[226.25737000 102.93627930]
[241.20613098 104.17497253]
[256.15490723 105.41365814]
[271.10366821 106.65235138]
[281.98095703 95.41763306]
[297.54022217 93.85454559]
[310.43484497 102.70113373]
[314.57641602 117.78031158]
[308.00939941 131.97213745]
[293.83450317 138.57568359]
[278.74472046 134.47294617]
[269.86499023 121.60112000]
[254.91621399 120.36242676]
[239.96743774 119.12373352]
[225.01867676 117.88504791]
[210.06990051 116.64635468]
[201.69511414 128.96417236]
[188.18933105 135.47952271]
[173.13621521 134.35243225]
[160.58598328 125.78572845]
[153.96557617 111.99742126]
[139.01681519 110.75872803]
[124.06804657 109.52004242]
[110.42419434 126.99154663]
[85.88496399 128.70381165]
[85.26509094 143.69099426]
[84.64521790 158.67817688]
[84.02533722 173.66535950]
[83.40546417 188.65255737]
[82.78559113 203.63973999]
[82.32062531 218.63253784]
[82.01062012 233.62933350]
[81.70062256 248.62612915]
[81.70062256 263.62612915]
[82.01062012 278.62292480]
[82.32062531 293.61972046]
[82.63063049 308.61651611]
[82.94063568 323.61331177]
[86.07977295 329.54800415]
[85.75177765 335.30142212]
[82.94063568 339.23330688]
[82.63063049 354.23010254]
[82.32062531 369.22689819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 151]
[3 150]
[4 149]
[5 146]
[6 145]
[7 144]
[8 143]
[9 142]
[12 141]
[13 140]
[14 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[34 69]
[35 68]
[36 67]
[37 66]
[39 65]
[40 64]
[41 63]
[42 62]
[45 60]
[46 59]
[49 56]
[50 55]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[78 93]
[79 92]
[82 90]
[83 89]
[84 88]
[101 131]
[102 130]
[103 129]
[108 124]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
