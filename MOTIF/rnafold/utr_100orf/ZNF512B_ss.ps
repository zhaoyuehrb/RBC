%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCCCCCCGCCCCGGCCCGGCCCGGCCCGGCCGCAGCCCCGCUGGGCGCCGCAGAGAUGACGGAUCCUUUCUGCGUUGGAGGCCGUCGGCUCCCGGGGUCCAGCAAGAGUGGUCCCGGGAAGGAUGGCAGCCGAAAGGAGGUCCGACUUCCAAUGC\
) } def
/len { sequence length } bind def

/coor [
[66.76646423 139.92623901]
[76.99360657 128.95555115]
[85.21298981 116.40798187]
[71.98417664 123.47892761]
[58.75535583 130.54988098]
[45.52653503 137.62083435]
[32.29771805 144.69178772]
[19.06889915 151.76274109]
[17.30021667 170.76515198]
[4.58249044 184.79403687]
[-13.86298847 188.35624695]
[-30.62171173 180.20213318]
[-43.41131592 188.03961182]
[-47.21147537 203.14579773]
[-60.29359818 210.91191101]
[-74.67160797 207.19595337]
[-87.46121216 215.03343201]
[-100.25081635 222.87091064]
[-113.04042053 230.70838928]
[-125.83001709 238.54586792]
[-133.55387878 252.35356140]
[-148.44837952 252.40641785]
[-161.23799133 260.24389648]
[-174.02758789 268.08135986]
[-184.37345886 281.51263428]
[-200.14385986 275.28924561]
[-198.52935791 258.41235352]
[-181.86506653 255.29177856]
[-169.07546997 247.45429993]
[-156.28585815 239.61682129]
[-149.47680664 226.36970520]
[-133.66749573 225.75625610]
[-120.87789154 217.91877747]
[-108.08829498 210.08129883]
[-95.29869080 202.24382019]
[-82.50908661 194.40634155]
[-79.29255676 179.90843201]
[-66.43373108 171.77792358]
[-51.24879456 175.25001526]
[-38.45919037 167.41253662]
[-39.70278549 156.23881531]
[-36.64929581 145.36520386]
[-29.70766449 136.39088440]
[-19.86154938 130.65066528]
[-8.53007317 129.01663208]
[2.63667941 131.76577759]
[11.99794769 138.53392029]
[25.22676659 131.46296692]
[38.45558548 124.39201355]
[51.68440247 117.32106018]
[64.91322327 110.25011444]
[78.14204407 103.17916107]
[81.92941284 88.66517639]
[73.84233856 76.03191376]
[65.75526428 63.39865875]
[57.66819000 50.76539993]
[49.58111572 38.13214111]
[41.49404144 25.49888229]
[33.40696716 12.86562443]
[25.31989098 0.23236547]
[11.36320210 -7.21890259]
[11.01793003 -22.10950470]
[2.93085527 -34.74276352]
[-11.87272072 -41.79869843]
[-12.89397621 -58.16601562]
[0.91766870 -67.00742340]
[15.35397720 -59.22763824]
[15.56411362 -42.82983780]
[23.65118790 -30.19658089]
[37.02943802 -23.64892769]
[37.95315170 -7.85470915]
[46.04022598 4.77854919]
[54.12730026 17.41180801]
[62.21437454 30.04506683]
[70.30145264 42.67832565]
[78.38852692 55.31158447]
[86.47560120 67.94483948]
[94.56267548 80.57810211]
[109.03878021 84.50778198]
[122.40387726 77.69792175]
[135.76898193 70.88806152]
[149.13407898 64.07820892]
[154.10774231 49.31675720]
[167.75885010 42.60098267]
[181.80099487 47.43358231]
[195.16609192 40.62372208]
[208.53118896 33.81386566]
[221.89628601 27.00400925]
[235.26138306 20.19415092]
[248.62648010 13.38429356]
[251.29840088 0.15129931]
[260.97433472 -8.98121452]
[273.95361328 -10.82954884]
[285.44729614 -4.93881178]
[298.94351196 -11.48495007]
[312.43972778 -18.03108978]
[325.93597412 -24.57722855]
[339.43218994 -31.12336540]
[352.92840576 -37.66950607]
[366.42465210 -44.21564484]
[379.92086792 -50.76178360]
[386.31735229 -57.35689926]
[393.74694824 -57.30103302]
[407.36907959 -63.58092880]
[420.99124146 -69.86082458]
[424.92956543 -84.99434662]
[437.70404053 -94.01360321]
[453.28292847 -92.65997314]
[464.31036377 -81.57260132]
[465.57952881 -65.98661041]
[456.49114990 -53.26121902]
[441.33648682 -49.40497589]
[427.27114868 -56.23867798]
[413.64898682 -49.95877838]
[400.02682495 -43.67888260]
[386.46701050 -37.26555634]
[372.97076416 -30.71941948]
[359.47454834 -24.17328072]
[345.97833252 -17.62714195]
[332.48211670 -11.08100319]
[318.98587036 -4.53486490]
[305.48965454 2.01127386]
[291.99343872 8.55741215]
[287.18890381 24.64991760]
[271.94357300 32.46455002]
[255.43634033 26.74939156]
[242.07124329 33.55924988]
[228.70614624 40.36910629]
[215.34104919 47.17896271]
[201.97595215 53.98882294]
[188.61085510 60.79867935]
[184.26673889 74.99953461]
[170.80964661 82.09609222]
[155.94392395 77.44330597]
[142.57882690 84.25316620]
[129.21372986 91.06301880]
[115.84864044 97.87287903]
[118.88414764 102.48069000]
[120.40307617 108.49787140]
[119.89467621 115.39837646]
[127.22399139 128.48580933]
[134.55331421 141.57325745]
[141.88262939 154.66069031]
[149.21194458 167.74813843]
[156.54125977 180.83557129]
[169.55601501 191.70079041]
[162.71826172 207.21469116]
[145.91775513 204.93884277]
[143.45382690 188.16488647]
[136.12451172 175.07745361]
[128.79519653 161.99000549]
[121.46587372 148.90257263]
[114.13655090 135.81513977]
[106.80723572 122.72769165]
[106.96486664 137.72686768]
[109.66334534 152.48214722]
[102.49929810 165.66076660]
[88.64894104 171.41992188]
[74.25294495 167.20622253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[12 40]
[13 39]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[22 30]
[23 29]
[24 28]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[62 69]
[63 68]
[79 137]
[80 136]
[81 135]
[82 134]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[90 126]
[94 123]
[95 122]
[96 121]
[97 120]
[98 119]
[99 118]
[100 117]
[101 116]
[103 115]
[104 114]
[105 113]
[140 154]
[141 153]
[142 152]
[143 151]
[144 150]
[145 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
