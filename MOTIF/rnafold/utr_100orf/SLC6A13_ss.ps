%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:37:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUUUAAAUAGCCAGCACCUUCUCCUUCCCCCUUAGAUAAUUCUUCUCCCCUGACUGGACCUCUGGCAGCAGCUUCACUAAGGUGGGAUGGAUAGCAGGGUCUCAGGCACAACCAGUAAUGGAGAGACAAAACCAGUGUAUCCAGUCAUGGAAAAGAAGGAGGAAGAUGGCACCCUGGAGCGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[64.86798096 445.17822266]
[49.88011551 444.57495117]
[35.94840240 439.01553345]
[24.66286659 429.13439941]
[17.31152344 416.05932617]
[14.73338127 401.28253174]
[17.22268486 386.49053955]
[24.49532700 373.37152100]
[35.72128296 363.42276001]
[49.61933899 357.77969360]
[64.60330963 357.08639526]
[78.96307373 361.42196655]
[91.05975342 370.29156494]
[99.51381683 382.68527222]
[98.77394867 367.70352173]
[98.03408051 352.72180176]
[97.29421997 337.74005127]
[86.24404907 332.66720581]
[78.35777283 323.31793213]
[75.18267822 311.43124390]
[77.38223267 299.25259399]
[84.59848785 289.10980225]
[95.50873566 282.96807861]
[95.26203156 267.97009277]
[95.01531982 252.97213745]
[94.76860809 237.97416687]
[94.52189636 222.97619629]
[94.27518463 207.97822571]
[94.02847290 192.98025513]
[93.78176117 177.98226929]
[93.53504944 162.98429871]
[83.08506775 161.01396179]
[73.11224365 157.32247925]
[63.89788437 152.01399231]
[55.70193100 145.23825073]
[48.75557709 137.18638611]
[43.25477219 128.08554077]
[39.35468674 118.19242096]
[24.57783318 120.77014160]
[9.80098248 123.34786224]
[-2.42684245 134.27546692]
[-17.91763496 128.89332581]
[-20.73579788 112.73814392]
[-7.98224497 102.42897034]
[7.22326088 108.57101440]
[22.00011253 105.99329376]
[36.77696609 103.41557312]
[37.14218903 92.40303802]
[39.41109467 81.62058258]
[43.51496887 71.39476013]
[49.32952499 62.03526306]
[56.67866135 53.82555008]
[65.33981323 47.01425171]
[58.67322922 33.57711411]
[52.00664902 20.13997459]
[45.34006882 6.70283508]
[38.67348480 -6.73430347]
[34.29609299 -9.63976955]
[31.73781013 -13.54720688]
[31.07506943 -17.59127808]
[32.02795410 -21.00270844]
[26.03226662 -34.75231552]
[20.03657913 -48.50192261]
[14.04089069 -62.25153351]
[7.73143339 -68.88081360]
[8.06172752 -76.27693939]
[2.29299569 -90.12329865]
[-3.47573614 -103.96966553]
[-19.88658714 -105.92135620]
[-33.00179291 -115.82205200]
[-39.30274582 -130.89703369]
[-37.15888977 -146.99993896]
[-27.24845505 -159.75308228]
[-33.24414444 -173.50270081]
[-44.95166016 -178.94183350]
[-49.65790176 -190.53096008]
[-45.34221649 -201.84288025]
[-51.11095047 -215.68923950]
[-56.87968063 -229.53561401]
[-62.64841080 -243.38197327]
[-68.41714478 -257.22833252]
[-81.76937103 -266.74935913]
[-79.93091583 -283.04513550]
[-64.79301453 -289.35195923]
[-51.92824554 -279.18191528]
[-54.57078171 -262.99707031]
[-48.80205154 -249.15069580]
[-43.03331757 -235.30433655]
[-37.26458740 -221.45797729]
[-31.49585533 -207.61161804]
[-16.99897194 -197.73472595]
[-19.49453545 -179.49838257]
[-13.49884796 -165.74877930]
[0.15256388 -165.11285400]
[12.25454998 -158.62277222]
[20.41562462 -147.49629211]
[22.99524307 -133.87356567]
[19.43332291 -120.40560913]
[10.37062550 -109.73839569]
[16.13935661 -95.89203644]
[21.90808868 -82.04566956]
[27.79049873 -68.24722290]
[33.78618622 -54.49761200]
[39.78187561 -40.74800491]
[45.77756119 -26.99839592]
[52.11062622 -13.40088463]
[58.77720642 0.03625429]
[65.44378662 13.47339344]
[72.11036682 26.91053200]
[78.77694702 40.34767151]
[94.43122864 36.93014145]
[110.44215393 37.55178452]
[125.78433228 42.17278671]
[139.47520447 50.49721146]
[150.63798523 61.99193192]
[158.55775452 75.92079926]
[173.00872803 71.89967346]
[187.45970154 67.87855530]
[191.37582397 53.09304810]
[202.09611511 42.32400131]
[216.67050171 38.39292526]
[231.15878296 42.25887680]
[241.69573975 52.78685379]
[256.14669800 48.76573181]
[270.59768677 44.74460983]
[285.04864502 40.72348785]
[290.55395508 26.33606911]
[303.32611084 18.04599190]
[318.35299683 18.85664749]
[329.88305664 28.24787903]
[344.33404541 24.22675705]
[350.64135742 9.91760159]
[364.69354248 3.05682898]
[379.85559082 6.88388491]
[388.96844482 19.59175110]
[387.72927856 35.18016052]
[376.72323608 46.28874588]
[361.14697266 47.67236710]
[348.35516357 38.67772675]
[333.90420532 42.69884872]
[328.88211060 56.69587708]
[316.43374634 65.15177917]
[301.21527100 64.65036774]
[289.06976318 55.17445755]
[274.61880493 59.19557953]
[260.16784668 63.21670151]
[245.71685791 67.23782349]
[242.13233948 81.69523621]
[231.72329712 92.48911285]
[217.21315002 96.65108490]
[202.47117615 92.96715546]
[191.48081970 82.32952881]
[177.02984619 86.35064697]
[162.57887268 90.37177277]
[162.45536804 110.39933014]
[156.08262634 129.38635254]
[144.09831238 145.43299866]
[127.70156097 156.93365479]
[108.53302002 162.73759460]
[108.77973175 177.73556519]
[109.02644348 192.73353577]
[109.27315521 207.73150635]
[109.51986694 222.72947693]
[109.76657867 237.72744751]
[110.01329041 252.72541809]
[110.26000214 267.72338867]
[110.50671387 282.72137451]
[125.64546967 292.67453003]
[131.73812866 309.57012939]
[126.52770996 326.59411621]
[112.27596283 337.00018311]
[113.01582336 351.98193359]
[113.75569153 366.96365356]
[114.49555206 381.94540405]
[120.18167114 391.17401123]
[117.72776794 400.47415161]
[122.10417175 414.82153320]
[126.48056793 429.16888428]
[130.85696411 443.51626587]
[135.23336792 457.86364746]
[145.63786316 471.24957275]
[135.65531921 484.95303345]
[119.72394562 479.15411377]
[120.88599396 462.24005127]
[116.50959015 447.89266968]
[112.13319397 433.54528809]
[107.75679779 419.19793701]
[103.38039398 404.85055542]
[99.62299347 419.37231445]
[91.24459839 431.81430054]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 174]
[15 173]
[16 172]
[17 171]
[23 167]
[24 166]
[25 165]
[26 164]
[27 163]
[28 162]
[29 161]
[30 160]
[31 159]
[38 47]
[39 46]
[40 45]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[61 105]
[62 104]
[63 103]
[64 102]
[66 101]
[67 100]
[68 99]
[73 93]
[74 92]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
[116 154]
[117 153]
[118 152]
[123 147]
[124 146]
[125 145]
[126 144]
[130 140]
[131 139]
[176 188]
[177 187]
[178 186]
[179 185]
[180 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
