%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACAGAACUCCCACGGACACACCAUGAUAAGGACGCUGCUGCUGUCCACUUUGGUGGCUGGAGCCCUCAGUUGUGGGGACCCCACUUACCCACCUUAUGUGACUAGGGUGGUUGGCGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[173.74189758 252.85346985]
[158.91287231 255.11181641]
[144.18380737 252.27375793]
[131.25561523 244.66706848]
[121.62123871 233.17016602]
[116.39328003 219.11070251]
[116.17545319 204.11228943]
[120.99291229 189.90693665]
[130.28935242 178.13508606]
[142.99119568 170.15615845]
[157.63162231 166.89157104]
[172.52107239 168.71864319]
[161.34086609 158.71850586]
[150.16064453 148.71836853]
[138.98042297 138.71823120]
[127.80020905 128.71809387]
[116.61999512 118.71795654]
[105.43978119 108.71781921]
[101.83287811 112.94657135]
[95.66471100 115.27215576]
[88.05739594 114.35781860]
[80.75450134 109.52899170]
[75.74668121 101.03167725]
[62.29017639 94.40428162]
[48.83366776 87.77688599]
[35.37715912 81.14949036]
[21.92065048 74.52209473]
[11.81741714 82.75485229]
[-0.61513537 86.50489807]
[-13.49208641 85.24106598]
[-24.87533951 79.18952942]
[-33.06532288 69.29435730]
[-36.85471344 57.07036209]
[-35.70632935 44.37129593]
[-48.81862640 37.08653259]
[-61.93091965 29.80177307]
[-75.04321289 22.51701164]
[-88.24460602 15.39498138]
[-101.53306580 8.43677330]
[-117.88705444 9.65294743]
[-126.89237976 -4.05238533]
[-119.28514099 -18.58035278]
[-102.89100647 -18.98582840]
[-94.57485962 -4.85169315]
[-81.28639221 2.10651469]
[-73.82118225 2.42558503]
[-67.75845337 9.40471745]
[-54.64615631 16.68947792]
[-41.53386307 23.97423935]
[-28.42156982 31.25900269]
[-14.08274841 21.89025307]
[3.11097527 21.00509071]
[18.49304962 28.93272781]
[27.84383965 43.59840012]
[28.54804802 61.06558609]
[42.00455475 67.69298553]
[55.46106339 74.32038116]
[68.91757202 80.94777679]
[82.37407684 87.57517242]
[95.74758911 80.78185272]
[98.33200836 66.00617218]
[100.91642761 51.23048782]
[103.50084686 36.45480347]
[106.08526611 21.67912292]
[98.07910156 7.77657223]
[104.09062958 -7.09760523]
[119.50830841 -11.53321362]
[132.50502014 -2.12763357]
[133.11080933 13.90397835]
[120.86094666 24.26354218]
[118.27652740 39.03922272]
[115.69210815 53.81490707]
[113.10768890 68.59059143]
[110.52326965 83.36627197]
[115.43991852 97.53759766]
[126.62013245 107.53773499]
[137.80035400 117.53787994]
[148.98056030 127.53801727]
[160.16078186 137.53814697]
[171.34100342 147.53828430]
[182.52120972 157.53843689]
[195.44931030 165.14529419]
[209.62063599 170.06193542]
[223.79197693 174.97857666]
[238.02302551 179.71957397]
[252.31163025 184.28419495]
[266.60025024 188.84881592]
[273.36724854 183.56149292]
[281.59802246 181.46780396]
[289.88195801 182.84791565]
[296.83068848 187.39324951]
[301.31088257 194.27131653]
[302.62872314 202.27731323]
[316.39654541 208.23112488]
[330.16433716 214.18493652]
[343.93212891 220.13876343]
[357.69992065 226.09257507]
[371.46771240 232.04638672]
[385.23550415 238.00019836]
[399.00329590 243.95401001]
[413.60214233 237.90014648]
[428.17364502 244.01948547]
[434.07281494 258.68151855]
[427.79977417 273.18753052]
[413.07620239 278.93136597]
[398.63729858 272.50527954]
[393.04946899 257.72180176]
[379.28167725 251.76799011]
[365.51388550 245.81417847]
[351.74609375 239.86036682]
[337.97830200 233.90655518]
[324.21051025 227.95274353]
[310.44271851 221.99891663]
[296.67492676 216.04510498]
[275.62091064 220.88719177]
[262.03561401 203.13742065]
[247.74700928 198.57279968]
[233.45840454 194.00817871]
[226.04986572 194.98008728]
[218.87533569 189.14990234]
[204.70399475 184.23326111]
[190.53266907 179.31661987]
[199.36036682 191.44392395]
[203.61714172 205.82725525]
[202.81138611 220.80558777]
[197.03616333 234.64924622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[34 50]
[35 49]
[36 48]
[37 47]
[38 45]
[39 44]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[82 122]
[83 121]
[84 120]
[85 118]
[86 117]
[87 116]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
