%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCGAGGAGCAGAGCACGGUGAGCGGCGGCGGCGGGCCCCAGGAGUCGCAGACCCUGGCCAGUGGCACUGCGGGCCACCCUGAGCCCCCGAGGCCUC\
) } def
/len { sequence length } bind def

/coor [
[95.85663605 419.62429810]
[88.34219360 405.04809570]
[97.43473053 391.40048218]
[97.90122986 376.40771484]
[98.36772919 361.41497803]
[98.83422089 346.42224121]
[85.53202057 334.03692627]
[85.32411957 315.54821777]
[98.79489899 302.42791748]
[98.32839966 287.43518066]
[90.19902802 274.95468140]
[97.50340271 260.92056274]
[97.03690338 245.92781067]
[86.04031372 235.94729614]
[85.35364532 220.74916077]
[95.89669037 209.28260803]
[95.43019104 194.28987122]
[83.03047943 186.08100891]
[77.78002930 171.97793579]
[81.88878632 157.31604004]
[93.98287201 147.77458191]
[93.51637268 132.78184509]
[93.04987335 117.78910065]
[82.56270599 107.79082489]
[82.11208344 93.30831146]
[91.95738220 82.67739868]
[91.49088287 67.68465424]
[91.02438354 52.69190979]
[90.55788422 37.69916534]
[81.64823151 28.21365356]
[81.66533661 15.60317039]
[90.04772949 6.72885132]
[90.04772949 -8.27114868]
[82.31042480 -22.07132149]
[90.04772949 -34.79859161]
[90.04772949 -49.79859161]
[82.31042480 -63.59876633]
[90.04772949 -76.32603455]
[90.04772949 -91.32603455]
[90.04772949 -106.32603455]
[90.04772949 -121.32603455]
[86.94725037 -127.49095154]
[87.48295593 -133.37506104]
[90.54324341 -137.25132751]
[91.47578430 -152.22230530]
[92.40833282 -167.19329834]
[89.78510284 -176.13259888]
[93.60983276 -182.61311340]
[95.00752258 -197.54785156]
[96.40520477 -212.48258972]
[91.86105347 -228.81620789]
[106.29840088 -237.70436096]
[118.83586121 -226.29173279]
[111.33995056 -211.08489990]
[109.94226074 -196.15016174]
[108.54457092 -181.21542358]
[107.37931061 -166.26074219]
[106.44676971 -151.28976440]
[105.51422119 -136.31878662]
[105.04772949 -121.32603455]
[105.04772949 -106.32603455]
[105.04772949 -91.32603455]
[105.04772949 -76.32603455]
[112.78502655 -63.59876633]
[105.04772949 -49.79859161]
[105.04772949 -34.79859161]
[112.78502655 -22.07132149]
[105.04772949 -8.27114868]
[105.04772949 6.72885132]
[114.65637207 21.32252884]
[105.55062866 37.23266983]
[106.01712799 52.22541428]
[106.48362732 67.21815491]
[106.95012665 82.21089935]
[117.43729401 92.20917511]
[117.88791656 106.69168854]
[108.04261780 117.32260132]
[108.50911713 132.31533813]
[108.97561646 147.30809021]
[121.63950348 156.07919312]
[126.65183258 170.45730591]
[122.28831482 184.85951233]
[110.42293549 193.82336426]
[110.88943481 208.81611633]
[122.12495422 219.60502625]
[122.38447571 234.81645203]
[112.02964783 245.46131897]
[112.49614716 260.45407104]
[120.65888214 274.00692749]
[113.32114410 286.96865845]
[113.78764343 301.96142578]
[124.03740692 308.39028931]
[129.77821350 318.90298462]
[129.64845276 330.75936890]
[123.79949951 340.93408203]
[113.82696533 346.88873291]
[113.36047363 361.88146973]
[112.89397430 376.87423706]
[112.42747498 391.86697388]
[120.65396118 406.05346680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 99]
[4 98]
[5 97]
[6 96]
[9 91]
[10 90]
[12 88]
[13 87]
[16 84]
[17 83]
[21 79]
[22 78]
[23 77]
[26 74]
[27 73]
[28 72]
[29 71]
[32 69]
[33 68]
[35 66]
[36 65]
[38 63]
[39 62]
[40 61]
[41 60]
[44 59]
[45 58]
[46 57]
[48 56]
[49 55]
[50 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
