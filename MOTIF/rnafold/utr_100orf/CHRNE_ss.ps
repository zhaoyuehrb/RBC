%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCAGCAGGAUGGCAAGGGCUCCGCUUGGGGUCCUGCUCCUCUUGGGGCUUCUCGGCAGGGGUGUGGGGAAGAACGAGGAACUGCGUCUUUAUCACCAUCUCUUCAACA\
) } def
/len { sequence length } bind def

/coor [
[135.57241821 193.08741760]
[145.74467468 181.96139526]
[137.41111755 169.48934937]
[129.07757568 157.01730347]
[120.74401855 144.54525757]
[112.41046143 132.07321167]
[104.07691193 119.60116577]
[83.70135498 115.74852753]
[75.41419220 93.99913788]
[60.50851059 95.67860413]
[45.60282516 97.35807037]
[30.69714355 99.03753662]
[24.96404266 102.77850342]
[19.10034561 102.92671204]
[14.91180992 100.36901855]
[-0.06459200 101.21007538]
[-15.04099464 102.05112457]
[-23.57522011 105.70092773]
[-30.44808197 102.69976044]
[-45.44218063 103.12045288]
[-60.43627930 103.54115295]
[-75.43038177 103.96184540]
[-90.42447662 104.38253784]
[-105.41857910 104.80323029]
[-120.41268158 105.22392273]
[-134.08801270 114.27473450]
[-148.64117432 106.71578979]
[-149.10112000 90.32309723]
[-134.99468994 81.96004486]
[-120.83337402 90.22982788]
[-105.83927155 89.80913544]
[-90.84517670 89.38843536]
[-75.85107422 88.96774292]
[-60.85697556 88.54705048]
[-45.86287689 88.12635803]
[-30.86877632 87.70566559]
[-15.88205051 87.07472992]
[-0.90564871 86.23367310]
[14.07075310 85.39261627]
[29.01767540 84.13185120]
[43.92335892 82.45238495]
[58.82904053 80.77291870]
[73.73472595 79.09345245]
[85.46219635 69.74110413]
[90.41638184 55.58285522]
[95.37056732 41.42460632]
[100.32475281 27.26635742]
[93.09093475 15.80304050]
[93.81639099 2.46330905]
[102.00753021 -7.84180307]
[114.46408844 -11.44958687]
[119.81340790 -25.46331978]
[125.16273499 -39.47705460]
[130.51205444 -53.49078751]
[135.86137390 -67.50452423]
[141.21070862 -81.51825714]
[138.90357971 -97.17034149]
[150.67095947 -106.30149078]
[156.02027893 -120.31523132]
[161.36961365 -134.32896423]
[158.24107361 -150.42692566]
[170.79388428 -160.97961426]
[186.11477661 -155.13131714]
[188.44291687 -138.89826965]
[175.38334656 -128.97964478]
[170.03401184 -114.96590424]
[164.68469238 -100.95217133]
[167.37443542 -86.30244446]
[155.22444153 -76.16893768]
[149.87510681 -62.15520096]
[144.52578735 -48.14146423]
[139.17646790 -34.12773132]
[133.82714844 -20.11399841]
[128.47782898 -6.10026360]
[136.00563049 8.86578369]
[130.33428955 24.98569107]
[114.48300171 32.22054291]
[109.52881622 46.37879181]
[104.57463074 60.53704071]
[99.62044525 74.69528961]
[112.14410400 79.31568909]
[119.95432281 89.25351715]
[121.31367493 101.10669708]
[116.54895020 111.26761627]
[124.88250732 123.73966217]
[133.21606445 136.21170044]
[141.54960632 148.68374634]
[149.88316345 161.15579224]
[158.21672058 173.62783813]
[172.38859558 168.48764038]
[187.37884521 166.88906860]
[202.31599426 168.92503357]
[216.33158875 174.47718811]
[228.61079407 183.22274780]
[238.43971252 194.65322876]
[245.24688721 208.10408020]
[248.63658142 222.79331970]
[248.41171265 237.86689758]
[244.58534241 252.44847107]
[237.37994385 265.69027710]
[227.21444702 276.82247925]
[214.67982483 285.19784546]
[200.50483704 290.32946777]
[185.51361084 291.91894531]
[170.57769775 289.87390137]
[156.56547546 284.31326294]
[144.29158020 275.56027222]
[134.46958923 264.12384033]
[127.67057037 250.66885376]
[124.28977966 235.97756958]
[124.52379608 220.90412903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[9 43]
[10 42]
[11 41]
[12 40]
[15 39]
[16 38]
[17 37]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[44 80]
[45 79]
[46 78]
[47 77]
[51 74]
[52 73]
[53 72]
[54 71]
[55 70]
[56 69]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
