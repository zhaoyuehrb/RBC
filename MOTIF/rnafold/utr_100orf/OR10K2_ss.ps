%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:38:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCGGGUCAAUGAGACUGUGGUGAGAGAGGUCAUCUUCCUCGGCUUCUCAUCCCUGGCCAGGCUGCAGCAGCUGCUCUUUGUUAUCUUCCUGCUCC\
) } def
/len { sequence length } bind def

/coor [
[83.89611816 358.53021240]
[71.00978851 347.51300049]
[78.02914429 332.08041382]
[78.96168518 317.10943604]
[79.89423370 302.13845825]
[80.82677460 287.16744995]
[81.75932312 272.19647217]
[82.69186401 257.22549438]
[83.62441254 242.25451660]
[84.55695343 227.28352356]
[72.97608948 217.95500183]
[69.06259155 203.42404175]
[74.51965332 189.20878601]
[87.45019531 180.83576965]
[88.38273621 165.86477661]
[89.31528473 150.89379883]
[90.24782562 135.92280579]
[80.14551544 131.48576355]
[71.78775787 124.28215027]
[65.90892029 114.94494629]
[63.02555084 104.29457855]
[63.39101028 93.26686096]
[66.97318268 82.83075714]
[73.45732117 73.90326691]
[65.09953308 61.44744873]
[57.58360672 55.94259262]
[56.68257141 48.47174072]
[48.71620560 35.76202011]
[40.55314255 23.17772675]
[32.19535828 10.72190666]
[23.83757401 -1.73391294]
[15.47978973 -14.18973255]
[7.12200546 -26.64555168]
[-1.23577881 -39.10137177]
[-9.59356308 -51.55719376]
[-17.95134735 -64.01300812]
[-33.37331009 -63.60486221]
[-46.55590057 -71.61878204]
[-53.29259491 -85.49755859]
[-51.43374634 -100.81252289]
[-41.57250214 -112.67673492]
[-26.85555267 -117.30435181]
[-11.97901821 -113.21873474]
[-1.68995082 -101.72357941]
[0.72844690 -86.48694611]
[-5.49552727 -72.37079620]
[2.86225677 -59.91497421]
[11.22004128 -47.45915604]
[19.57782555 -35.00333786]
[27.93560982 -22.54751587]
[36.29339218 -10.09169674]
[44.65117645 2.36412263]
[53.00896072 14.81994247]
[59.46343231 18.68844223]
[61.42592621 27.79565239]
[69.39228821 40.50537109]
[77.55535126 53.08966446]
[85.91313934 65.54548645]
[111.39237213 64.56319427]
[131.52586365 80.20925903]
[145.57640076 74.95735931]
[159.62693787 69.70546722]
[164.31607056 64.64273834]
[170.01528931 63.08435440]
[174.71768188 64.59375000]
[189.06755066 60.22552872]
[203.41741943 55.85730743]
[217.76727295 51.48908615]
[232.11714172 47.12086487]
[245.50898743 36.72399902]
[259.20678711 46.71434784]
[253.39877319 62.64242172]
[236.48536682 61.47072983]
[222.13549805 65.83895111]
[207.78562927 70.20716858]
[193.43577576 74.57539368]
[179.08590698 78.94361115]
[164.87882996 83.75599670]
[150.82829285 89.00789642]
[136.77775574 94.25979614]
[137.00077820 104.06151581]
[134.65684509 113.58146667]
[129.90858459 122.15919495]
[123.08539581 129.19961548]
[114.66065216 134.21430969]
[105.21881104 136.85536194]
[104.28627014 151.82633972]
[103.35372162 166.79731750]
[102.42118073 181.76831055]
[114.21267700 191.68125916]
[117.86346436 206.46386719]
[112.17694855 220.39682007]
[99.52793884 228.21607971]
[98.59539795 243.18705750]
[97.66284943 258.15805054]
[96.73030853 273.12902832]
[95.79776001 288.10000610]
[94.86521912 303.07098389]
[93.93267059 318.04199219]
[93.00012970 333.01296997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[8 95]
[9 94]
[10 93]
[14 89]
[15 88]
[16 87]
[17 86]
[24 58]
[25 57]
[27 56]
[28 55]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[60 80]
[61 79]
[62 78]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
