%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:22:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUGCCCCGCCGGGCCUGCCCCGCGCAGUCUGGGUCUCUGCGCCGCAGCCGCCCGCCCGCCCGCUCAGCGCCCGGCCCCGGGAUGACGGCGGCCCAGGCCGCGGGUGAGGAGGCGCCACCAGGCGUGCGGUCCGUCAAGGUGGUCCUGGUGGGCGACGGCGGCUGCGGGAAGACGUCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-94.33252716 521.17657471]
[-80.28941345 526.44830322]
[-69.85370636 537.22308350]
[-65.03354645 551.42749023]
[-66.75648499 566.32824707]
[-74.69098663 579.05786133]
[-87.31019592 587.16687012]
[-102.18579102 589.09472656]
[-116.45523071 584.47058105]
[-127.37265015 574.18420410]
[-132.83717346 560.21496582]
[-131.79734802 545.25128174]
[-140.97894287 557.11291504]
[-143.30763245 572.76177979]
[-157.21653748 578.09014893]
[-166.39813232 589.95178223]
[-175.57972717 601.81341553]
[-177.25152588 618.12713623]
[-192.32417297 624.58837891]
[-205.29222107 614.55035400]
[-202.81524658 598.33935547]
[-187.44136047 592.63183594]
[-178.25976562 580.77020264]
[-169.07818604 568.90856934]
[-167.40620422 554.10809326]
[-152.84057617 547.93127441]
[-143.65898132 536.06964111]
[-135.72451782 523.34002686]
[-129.11860657 509.87292480]
[-122.51269531 496.40585327]
[-115.90678406 482.93878174]
[-109.30087280 469.47174072]
[-116.61482239 458.28820801]
[-117.44882202 444.84292603]
[-111.47779846 432.64669800]
[-100.16764832 424.93725586]
[-86.41688538 423.81997681]
[-79.58445740 410.46640015]
[-72.75203705 397.11282349]
[-65.91961670 383.75924683]
[-71.60805511 375.16946411]
[-73.21891785 364.91174316]
[-70.39359283 354.83605957]
[-63.57970047 346.78796387]
[-53.96167755 342.27056885]
[-43.25526047 342.16406250]
[-35.75526047 329.17367554]
[-28.25526047 316.18328857]
[-20.75526047 303.19290161]
[-13.25526047 290.20251465]
[-5.75525999 277.21215820]
[1.74473977 264.22177124]
[9.24473953 251.23138428]
[16.74473953 238.24099731]
[24.24473953 225.25062561]
[31.74473953 212.26023865]
[39.02426910 199.14503479]
[46.08125305 185.90876770]
[53.13823318 172.67248535]
[60.19521713 159.43621826]
[67.25219727 146.19993591]
[74.30918121 132.96366882]
[81.36616516 119.72738647]
[88.42314148 106.49111176]
[69.61705017 76.43302917]
[66.84616089 61.69118118]
[64.07527161 46.94933319]
[61.30437851 32.20748138]
[58.53348541 17.46562958]
[53.86324310 9.58933449]
[55.84249496 2.45152688]
[53.32098007 -12.33502007]
[50.79946899 -27.12156677]
[48.15317154 -41.88629150]
[45.38227844 -56.62814331]
[33.06658173 -70.30414581]
[39.49765015 -86.62229156]
[36.47817230 -101.31524658]
[33.45869446 -116.00819397]
[30.43921661 -130.70114136]
[27.29576302 -145.36807251]
[24.02856064 -160.00791931]
[20.76135635 -174.64778137]
[7.28752613 -182.90800476]
[3.68224955 -198.29559326]
[12.08447361 -211.68133545]
[27.50930786 -215.12371826]
[40.80547333 -206.58044434]
[44.08458710 -191.12007141]
[35.40121078 -177.91497803]
[38.66841507 -163.27513123]
[41.93561935 -148.63526917]
[46.47104263 -142.77902222]
[45.13216400 -133.72062683]
[48.15164185 -119.02767181]
[51.17111969 -104.33472443]
[54.19059753 -89.64176941]
[64.12397003 -82.71456146]
[66.74996185 -70.48190308]
[60.12413025 -59.39903259]
[62.89501953 -44.65718460]
[67.23006439 -38.65109253]
[65.58601379 -29.64307976]
[68.10752869 -14.85653305]
[70.62904358 -0.06998644]
[73.27533722 14.69473934]
[76.04622650 29.43659019]
[78.81711578 44.17844009]
[81.58801270 58.92029190]
[84.35890198 73.66213989]
[90.69000244 77.68298340]
[103.98526001 70.73775482]
[103.35220337 85.72466278]
[109.68330383 89.74549866]
[124.20446014 85.98571014]
[138.72561646 82.22592926]
[146.26866150 77.03460693]
[153.52380371 78.52747345]
[168.10638428 75.01347351]
[182.68898010 71.49948120]
[197.27156067 67.98548126]
[211.85414124 64.47148895]
[226.43673706 60.95748901]
[239.47140503 47.96492004]
[256.09432983 53.56123352]
[270.61547852 49.80144501]
[285.13665771 46.04165649]
[299.65780640 42.28186798]
[306.22219849 28.08881950]
[320.39587402 21.48264885]
[335.48641968 25.58259010]
[344.36856079 38.45277405]
[342.84841919 54.01629257]
[331.64373779 64.92453003]
[316.04507446 66.02695465]
[303.41760254 56.80302429]
[288.89642334 60.56281281]
[274.37527466 64.32260132]
[259.85412598 68.08238983]
[253.43891907 78.35387421]
[241.35496521 81.59606934]
[229.95072937 75.54007721]
[215.36814880 79.05406952]
[200.78555298 82.56806946]
[186.20297241 86.08206940]
[171.62039185 89.59606171]
[157.03779602 93.11006165]
[142.48541260 96.74708557]
[127.96424866 100.50687408]
[113.44309235 104.26665497]
[101.65942383 113.54809570]
[94.60243988 126.78437042]
[87.54545593 140.02064514]
[80.48847198 153.25692749]
[73.43149567 166.49319458]
[66.37451172 179.72947693]
[59.31752777 192.96574402]
[52.26054382 206.20202637]
[52.10113907 212.84690857]
[49.05482483 217.67709351]
[44.73512268 219.76023865]
[37.23512268 232.75062561]
[29.73512077 245.74099731]
[22.23512077 258.73138428]
[14.73512077 271.72177124]
[7.23512077 284.71215820]
[-0.26487914 297.70251465]
[-7.76487923 310.69290161]
[-15.26487923 323.68328857]
[-22.76487923 336.67367554]
[-30.26487923 349.66406250]
[-24.02688980 368.74157715]
[-33.65087128 386.00762939]
[-52.56604004 390.59164429]
[-59.39846420 403.94522095]
[-66.23088074 417.29879761]
[-73.06330872 430.65237427]
[-65.20617676 445.61932373]
[-67.78459167 462.15740967]
[-79.58846283 473.78900146]
[-95.83380890 476.07763672]
[-102.43972015 489.54470825]
[-109.04563141 503.01177979]
[-115.65154266 516.47882080]
[-122.25745392 529.94592285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 27]
[13 26]
[15 24]
[16 23]
[17 22]
[28 185]
[29 184]
[30 183]
[31 182]
[32 181]
[37 177]
[38 176]
[39 175]
[40 174]
[46 171]
[47 170]
[48 169]
[49 168]
[50 167]
[51 166]
[52 165]
[53 164]
[54 163]
[55 162]
[56 161]
[57 158]
[58 157]
[59 156]
[60 155]
[61 154]
[62 153]
[63 152]
[64 151]
[65 110]
[66 109]
[67 108]
[68 107]
[69 106]
[71 105]
[72 104]
[73 103]
[74 101]
[75 100]
[77 97]
[78 96]
[79 95]
[80 94]
[81 92]
[82 91]
[83 90]
[114 150]
[115 149]
[116 148]
[118 147]
[119 146]
[120 145]
[121 144]
[122 143]
[123 142]
[125 139]
[126 138]
[127 137]
[128 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
