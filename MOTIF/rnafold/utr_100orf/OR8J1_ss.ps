%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCAAACAGAUGAAUUUCCAAACUCUGACAUGGCUCCUGAAAAUUUCACCAGAGUCACUGAGUUUAUUCUUACAGGUGUCUCUAGCUGUCCAGAGCUCCAGAUUCCCCUCUUCCUGGUCUUUCUGGUGC\
) } def
/len { sequence length } bind def

/coor [
[120.34471893 141.82701111]
[122.13994598 156.71919250]
[120.24919891 171.59954834]
[114.78663635 185.56953430]
[106.08212280 197.78556824]
[94.66127777 207.50997925]
[81.21374512 214.15557861]
[66.55155945 217.32106018]
[51.56008530 216.81527710]
[37.14459229 212.66876221]
[24.17555237 205.13192749]
[13.43609905 194.65986633]
[5.57473469 181.88491821]
[1.06616712 167.57853699]
[0.18264519 152.60458374]
[2.97752023 137.86724854]
[9.28202438 124.25647736]
[18.71545982 112.59413147]
[30.70819092 103.58444977]
[44.53603745 97.77147675]
[59.36400604 95.50622559]
[74.29671478 96.92549133]
[88.42832947 101.94150543]
[75.87083435 93.73728180]
[63.31333542 85.53305817]
[50.75583649 77.32883453]
[38.19834137 69.12461090]
[25.64084244 60.92039108]
[15.92231464 65.71092987]
[5.17190552 65.98069763]
[-4.62541389 61.74810410]
[-11.68923473 53.85657120]
[-14.76718330 43.80744934]
[-13.35660934 33.47464752]
[-25.30170059 24.40189934]
[-37.24679184 15.32914925]
[-49.19188690 6.25640011]
[-61.13697815 -2.81634927]
[-73.08206940 -11.88909817]
[-93.11923981 -13.41640472]
[-100.02628326 -31.41687584]
[-112.38650513 -39.91540146]
[-124.74672699 -48.41392899]
[-137.10694885 -56.91245651]
[-153.58428955 -60.90413666]
[-154.30998230 -77.84254456]
[-138.23443604 -83.22890472]
[-128.60841370 -69.27267456]
[-116.24819946 -60.77415085]
[-103.88797760 -52.27562332]
[-91.52775574 -43.77709579]
[-81.57175446 -46.54912567]
[-71.53988647 -43.26585007]
[-64.87602997 -34.79703140]
[-64.00932312 -23.83419037]
[-52.06422806 -14.76144123]
[-40.11913681 -5.68869209]
[-28.17404366 3.38405728]
[-16.22895241 12.45680618]
[-4.28386021 21.52955627]
[14.66971207 17.39579010]
[30.88665771 28.58127785]
[33.84506607 48.36289597]
[46.40256119 56.56711578]
[58.96006012 64.77133942]
[71.51755524 72.97556305]
[84.07505035 81.17978668]
[96.63255310 89.38401031]
[98.26449585 85.16159821]
[101.39129639 81.30989075]
[105.90532684 78.24308777]
[116.94118500 68.08386230]
[127.97704315 57.92464066]
[133.01319885 40.25855637]
[150.21418762 36.99307251]
[161.00701904 26.57602882]
[171.79985046 16.15898514]
[182.59268188 5.74194193]
[187.14889526 -9.40901661]
[201.67976379 -12.68056011]
[212.47259521 -23.09760284]
[216.47439575 -39.00098801]
[232.31991577 -43.22614288]
[243.70861816 -31.42659378]
[238.92480469 -15.74070454]
[222.88963318 -12.30477238]
[212.09680176 -1.88772905]
[208.31257629 12.51813221]
[193.00971985 16.53477287]
[182.21688843 26.95181656]
[171.42405701 37.36885834]
[160.63122559 47.78590393]
[160.08407593 59.92984009]
[151.09408569 68.69866943]
[138.13626099 68.96049500]
[127.10041046 79.11972046]
[116.06455231 89.27894592]
[116.24169922 104.27790070]
[127.51443481 114.17363739]
[142.98988342 117.46312714]
[147.45021057 131.67420959]
[158.72294617 141.56994629]
[169.99566650 151.46568298]
[181.26840210 161.36141968]
[192.54112244 171.25715637]
[207.05978394 166.44511414]
[221.93946838 169.52598572]
[233.20436096 179.57429504]
[237.89578247 193.81671143]
[234.84887695 208.39691162]
[246.12161255 218.29264832]
[261.54989624 215.74272156]
[274.98129272 223.75093079]
[280.07394409 238.53602600]
[274.42318726 253.11695862]
[260.69720459 260.60903931]
[245.37695312 257.47473145]
[235.69618225 245.19398499]
[236.22587585 229.56536865]
[224.95315552 219.66963196]
[210.89054871 224.57972717]
[196.16038513 221.77294922]
[184.73736572 211.90475464]
[179.75479126 197.54959106]
[182.64538574 182.52987671]
[171.37266541 172.63414001]
[160.09992981 162.73840332]
[148.82720947 152.84266663]
[137.55447388 142.94692993]
[122.88531494 140.36524963]
[117.61869812 125.44636536]
[106.34597015 115.55062866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[41 51]
[42 50]
[43 49]
[44 48]
[71 97]
[72 96]
[73 95]
[75 92]
[76 91]
[77 90]
[78 89]
[80 87]
[81 86]
[98 132]
[99 131]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
