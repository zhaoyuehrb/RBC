%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAGGGCCGCGUGGCAGGGAGCUGCGCUCCUCUGGGCCUGCUCCUGGUCUGUCUUCAUCUCCCAGGCCUCUUUGCCCGGAGCAUCGGUGUUGUGGAGG\
) } def
/len { sequence length } bind def

/coor [
[101.84362030 124.54743958]
[88.89804840 120.28124237]
[80.96146393 110.25647736]
[66.10816193 112.34920502]
[51.25486374 114.44194031]
[36.40156555 116.53466797]
[21.54826546 118.62739563]
[8.96253300 128.21435547]
[-4.71973705 122.32838440]
[-19.57303619 124.42111206]
[-34.16671371 127.88875580]
[-48.37378693 132.70114136]
[-62.58086014 137.51353455]
[-76.78793335 142.32591248]
[-90.99501038 147.13830566]
[-105.20207977 151.95068359]
[-119.40915680 156.76307678]
[-127.77471924 170.45237732]
[-143.71055603 172.30400085]
[-154.99206543 160.89755249]
[-152.96502686 144.98306274]
[-139.18441772 136.76878357]
[-124.22154236 142.55599976]
[-110.01446533 137.74362183]
[-95.80739594 132.93122864]
[-81.60031891 128.11885071]
[-67.39324951 123.30645752]
[-53.18617249 118.49407196]
[-38.97909927 113.68168640]
[-51.27914047 105.09629059]
[-54.18730545 90.38090515]
[-46.07780838 77.76202393]
[-31.48419380 74.29412079]
[-18.56488037 81.91588593]
[-14.54228973 96.36644745]
[-21.66576576 109.56781769]
[-6.81246710 107.47508240]
[4.71085882 98.03780365]
[19.45553589 103.77410126]
[34.30883408 101.68136597]
[49.16213226 99.58863831]
[64.01543427 97.49591064]
[78.86872864 95.40317535]
[90.60443115 77.24700165]
[114.97641754 76.80752563]
[120.44618988 62.84036636]
[125.91596222 48.87320709]
[131.38572693 34.90604401]
[136.85551453 20.93888474]
[128.56765747 4.05943298]
[134.96678162 -13.28780651]
[151.65338135 -20.49208069]
[156.24424744 -34.77227783]
[152.25776672 -50.67950821]
[164.22718811 -61.88955307]
[179.83938599 -56.87047577]
[183.03387451 -40.78547287]
[170.52444458 -30.18141937]
[165.93357849 -15.90122223]
[173.33015442 -6.94576931]
[175.42628479 4.60158253]
[171.57052612 15.81421566]
[162.63528442 23.79141808]
[150.82266235 26.40865707]
[145.35289001 40.37582016]
[139.88311768 54.34297943]
[134.41334534 68.31014252]
[128.94357300 82.27729797]
[133.75596619 96.48437500]
[146.58804321 104.25212097]
[159.42012024 112.01986694]
[172.25218201 119.78760529]
[185.08425903 127.55535126]
[201.89735413 123.04280090]
[216.53079224 131.83717346]
[220.28601074 148.14784241]
[233.35345459 155.51275635]
[246.53384399 162.67355347]
[259.82400513 169.62850952]
[273.11419678 176.58345032]
[288.12048340 171.62498474]
[302.19995117 178.80439758]
[306.99951172 193.86228943]
[299.67163086 207.86506653]
[284.56384277 212.50514221]
[270.63931274 205.02963257]
[266.15924072 189.87362671]
[252.86906433 182.91867065]
[239.57890320 175.96371460]
[232.06062317 175.64576721]
[225.98854065 168.58020020]
[212.92109680 161.21528625]
[201.01307678 166.39997864]
[188.11227417 163.68478394]
[179.03883362 153.85250854]
[177.31651306 140.38742065]
[164.48443604 132.61968994]
[151.65237427 124.85193634]
[138.82029724 117.08419800]
[125.98822021 109.31645203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[7 39]
[9 37]
[10 36]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[52 59]
[53 58]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[76 92]
[77 91]
[78 89]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
