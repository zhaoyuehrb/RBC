%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCGGAACCCGGGCCGGACGCUGCCGGCACCGCCAGCGCACAGCCCCAACCGCCGCCGCCCCCCCCACCCGCUCCCAAGGAGUCCCCGUUCUCCAUCA\
) } def
/len { sequence length } bind def

/coor [
[177.52600098 305.75897217]
[173.82229614 297.18453979]
[172.50257874 287.91857910]
[173.66990662 278.61270142]
[177.25210571 269.92404175]
[183.00611877 262.46887207]
[175.03976440 249.75914001]
[167.07339478 237.04942322]
[156.73876953 235.61006165]
[148.80162048 228.49978638]
[146.12925720 217.95515442]
[149.87118530 207.50508118]
[142.71038818 194.32467651]
[135.54959106 181.14427185]
[128.38879395 167.96388245]
[114.07805634 163.99670410]
[106.62822723 150.73191833]
[110.88639069 135.74839783]
[103.72559357 122.56799316]
[86.33751678 118.34477997]
[77.31050873 102.89506531]
[82.16884613 85.67364502]
[74.20247650 72.96392822]
[60.31740189 65.38005066]
[60.11399078 50.48683548]
[52.14762115 37.77711487]
[44.80653000 32.04117584]
[44.13827133 24.54591370]
[36.57102966 11.59458828]
[29.00378609 -1.35673702]
[14.09781075 1.29603910]
[-0.78844142 -1.30617034]
[-13.86161900 -8.83028316]
[-23.55350113 -20.35145760]
[-28.70911026 -34.46673965]
[-28.72432518 -49.46588135]
[-23.61661339 -63.53856277]
[-14.02058506 -74.99288940]
[-21.58782768 -87.94421387]
[-36.67815018 -93.39047241]
[-41.69208908 -108.62989044]
[-32.78338242 -121.97209930]
[-16.78602409 -123.18209076]
[-5.97181988 -111.33166504]
[-8.63650227 -95.51145935]
[-1.06925917 -82.56012726]
[13.62091637 -85.29582977]
[28.38837051 -82.83587646]
[41.44759750 -75.45812988]
[51.21293259 -64.03623199]
[56.49109650 -49.93619919]
[56.62697220 -34.85303497]
[51.58485794 -20.60701561]
[41.95511246 -8.92397976]
[49.52235413 4.02734566]
[57.08959961 16.97867203]
[64.85734558 29.81074524]
[72.82370758 42.52046585]
[86.13897705 49.19525909]
[86.91220093 64.99755859]
[94.87857056 77.70728302]
[106.35010529 78.02568054]
[116.22320557 83.87542725]
[122.01263428 93.78401184]
[122.26107025 105.25727844]
[116.90599823 115.40719604]
[124.06679535 128.58760071]
[138.95457458 133.16928101]
[146.02888489 146.63809204]
[141.56918335 160.80308533]
[148.72998047 173.98347473]
[155.89077759 187.16387939]
[163.05158997 200.34428406]
[180.68049622 209.87348938]
[179.78311157 229.08305359]
[187.74948120 241.79277039]
[195.71585083 254.50248718]
[217.42556763 253.92381287]
[235.28831482 266.05847168]
[242.66537476 286.22323608]
[236.91638184 306.78359985]
[247.44018555 317.47238159]
[257.96398926 328.16113281]
[268.48779297 338.84988403]
[283.81161499 336.40866089]
[297.62850952 343.47076416]
[304.62554932 357.32070923]
[302.11224365 372.63290405]
[291.05502319 383.51947021]
[275.70562744 385.79434204]
[261.96615601 378.58273315]
[255.11976624 364.65771484]
[257.79901123 349.37368774]
[247.27522278 338.68493652]
[236.75141907 327.99618530]
[226.22761536 317.30740356]
[217.86067200 321.19064331]
[208.74774170 322.73864746]
[199.52935791 321.83236694]
[190.85624695 318.52548218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[12 73]
[13 72]
[14 71]
[15 70]
[18 67]
[19 66]
[22 61]
[23 60]
[25 58]
[26 57]
[28 56]
[29 55]
[30 54]
[38 46]
[39 45]
[81 96]
[82 95]
[83 94]
[84 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
