%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:30:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGUUCAGAGUCACCCAUCUCAGCAAGCCCAGAAGUAUCUGCAAUAUCUACGAUGGCCUCGCCCUUUGCUUUACUGAUGGUCCUGGUGGUGCUCAGCUGCAAGUCAAGCUGCUCUCUGGGCUGUGAUCUCCCUGAGACCCACAGCCUGGAUA\
) } def
/len { sequence length } bind def

/coor [
[88.29698181 164.23556519]
[73.61713409 167.31809998]
[58.99822235 163.95845032]
[47.13698578 154.77633667]
[40.22147369 141.46560669]
[39.52738953 126.48166656]
[45.18276978 112.58862305]
[56.14436340 102.34931946]
[70.39009094 97.65258789]
[85.28915405 99.36385345]
[72.72290802 91.17303467]
[60.15666580 82.98220825]
[51.20133591 80.89817047]
[47.42107773 74.49588013]
[35.02342224 66.05206299]
[22.62576294 57.60824203]
[10.22810555 49.16442108]
[1.18082941 52.17064285]
[-8.09296608 50.66337585]
[-15.50129223 45.11228180]
[-19.43321991 36.88434601]
[-19.10844040 27.90923309]
[-30.97007561 18.72764206]
[-42.83171082 9.54605293]
[-54.69334793 0.36446315]
[-64.70322418 4.34223747]
[-75.37853241 3.77831292]
[-84.77005005 -1.15651226]
[-91.19131470 -9.49956131]
[-93.52138519 -19.68333435]
[-91.40003204 -29.82979774]
[-102.68180084 -39.71522141]
[-113.96357727 -49.60064697]
[-129.51681519 -48.74369812]
[-140.81732178 -58.92963791]
[-141.53843689 -73.76255798]
[-152.82020569 -83.64798737]
[-164.10197449 -93.53340912]
[-175.38375854 -103.41883087]
[-188.66796875 -100.99138641]
[-200.74064636 -106.59372711]
[-207.26931763 -117.96741486]
[-206.05487061 -130.82952881]
[-217.13397217 -140.94157410]
[-228.21308899 -151.05361938]
[-239.29219055 -161.16564941]
[-251.23651123 -156.08718872]
[-264.16775513 -155.92471313]
[-276.14877319 -160.66697693]
[-285.39822388 -169.57064819]
[-290.55554199 -181.27659607]
[-290.88082886 -194.01725769]
[-286.36099243 -205.88354492]
[-297.02117920 -216.43626404]
[-307.68139648 -226.98898315]
[-323.66696167 -228.34587097]
[-332.45272827 -241.76934814]
[-327.29904175 -256.96206665]
[-312.15930176 -262.26947021]
[-298.64749146 -253.62019348]
[-297.12869263 -237.64918518]
[-286.46847534 -227.09646606]
[-275.80825806 -216.54374695]
[-259.42898560 -221.69065857]
[-242.60475159 -217.84770203]
[-229.95530701 -205.97833252]
[-225.00027466 -189.26243591]
[-229.18014526 -172.24476624]
[-218.10104370 -162.13272095]
[-207.02194214 -152.02067566]
[-195.94282532 -141.90864563]
[-179.21858215 -143.40757751]
[-166.31219482 -132.14691162]
[-165.49832153 -114.70060730]
[-154.21655273 -104.81517792]
[-142.93478394 -94.92975616]
[-131.65301514 -85.04433441]
[-116.85389709 -86.27796936]
[-105.27175903 -76.41345215]
[-104.07814789 -60.88241959]
[-92.79637909 -50.99699402]
[-81.51460266 -41.11156845]
[-62.28098297 -43.87487030]
[-46.92198563 -31.48420715]
[-45.51175690 -11.49717331]
[-33.65012360 -2.31558323]
[-21.78848648 6.86600637]
[-9.92685032 16.04759598]
[10.66135693 16.93251419]
[18.67192459 36.76676559]
[31.06958199 45.21058273]
[43.46723938 53.65440369]
[55.86489868 62.09822083]
[68.34748840 70.41596985]
[80.91372681 78.60678864]
[93.47997284 86.79761505]
[108.43070221 88.01238251]
[122.15441895 81.95765686]
[135.87812805 75.90293121]
[145.38095093 63.25355148]
[160.14846802 65.19517517]
[173.87217712 59.14044952]
[178.05918884 44.07383347]
[190.98045349 35.26615906]
[206.53492737 36.87614822]
[217.37829590 48.14360428]
[218.39060974 63.74838638]
[209.09393311 76.32238770]
[193.87782288 79.92855835]
[179.92691040 72.86416626]
[166.20318604 78.91888428]
[157.68197632 91.13519287]
[141.93286133 89.62664795]
[128.20913696 95.68137360]
[114.48542786 101.73609161]
[113.84020996 101.90774536]
[113.19364929 102.05712891]
[124.27275085 112.16917419]
[135.35186768 122.28121185]
[146.43096924 132.39324951]
[157.51007080 142.50529480]
[168.58918762 152.61734009]
[179.66828918 162.72938538]
[190.74740601 172.84141541]
[201.82650757 182.95346069]
[212.90560913 193.06550598]
[223.98472595 203.17753601]
[242.03514099 206.67932129]
[246.74615479 223.55813599]
[258.02792358 233.44355774]
[269.30969238 243.32897949]
[280.59146118 253.21440125]
[296.48907471 259.10528564]
[295.22930908 276.01235962]
[278.63424683 279.48217773]
[270.70605469 264.49618530]
[259.42428589 254.61074829]
[248.14250183 244.72532654]
[236.86073303 234.83990479]
[224.73664856 235.31411743]
[215.25117493 227.11956787]
[213.87268066 214.25665283]
[202.79357910 204.14460754]
[191.71446228 194.03256226]
[180.63536072 183.92053223]
[169.55624390 173.80848694]
[158.47714233 163.69644165]
[147.39804077 153.58439636]
[136.31892395 143.47236633]
[125.23982239 133.36032104]
[114.16071320 123.24828339]
[103.08160400 113.13623810]
[108.47319031 127.13376617]
[107.49581146 142.10189819]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 96]
[11 95]
[12 94]
[14 93]
[15 92]
[16 91]
[17 90]
[22 88]
[23 87]
[24 86]
[25 85]
[31 82]
[32 81]
[33 80]
[36 77]
[37 76]
[38 75]
[39 74]
[43 71]
[44 70]
[45 69]
[46 68]
[53 63]
[54 62]
[55 61]
[97 115]
[98 114]
[99 113]
[101 111]
[102 110]
[117 152]
[118 151]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 142]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
