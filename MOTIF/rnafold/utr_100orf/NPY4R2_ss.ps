%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCAUCCCUCAAGUGUAUCACUUAGUUCAAGAGUCCUGGAAUCUUUUCACAUCCACUAUGAACACCUCUCACCUCCUGGCCUUGCUGCUCCCAAAAUCUCCACAAGGUGAAAACAGAAGCAAACCCCUGGGCACCCCAUACAACUUCUCUGAACAUU\
) } def
/len { sequence length } bind def

/coor [
[79.69953918 226.65008545]
[76.96237946 211.46748352]
[82.88917542 197.22399902]
[95.58870697 188.46470642]
[94.99980927 173.47625732]
[94.41091156 158.48782349]
[87.37447357 155.89195251]
[82.18271637 169.96481323]
[76.99073029 184.03759766]
[62.91803360 178.84538269]
[68.10984802 164.77307129]
[73.30160522 150.70019531]
[66.26516724 148.10430908]
[56.08316040 159.11915588]
[45.90114975 170.13398743]
[35.71913910 181.14883423]
[25.53712654 192.16366577]
[19.22547531 207.89895630]
[2.35788560 206.18992615]
[-0.66928959 189.50842285]
[14.52228832 181.98165894]
[24.70429993 170.96681213]
[34.88631058 159.95198059]
[45.06832123 148.93714905]
[55.25033188 137.92230225]
[47.70962143 116.59971619]
[49.13159180 95.50068665]
[34.54604340 91.99900818]
[19.96049500 88.49732971]
[5.37494707 84.99565125]
[-9.21060181 81.49396515]
[-20.62891388 87.56521606]
[-32.72987747 84.31240845]
[-39.13994598 74.01560211]
[-53.65393066 70.22822571]
[-68.16791534 66.44084930]
[-83.06681061 75.56087494]
[-99.63266754 71.19502258]
[-107.77434540 56.50606537]
[-122.35989380 53.00438690]
[-136.97912598 49.64606476]
[-151.63059998 46.43142700]
[-166.28208923 43.21679306]
[-181.73910522 48.69520187]
[-194.03468323 37.84389877]
[-190.52018738 21.82576942]
[-174.81105042 17.11889458]
[-163.06745911 28.56530380]
[-148.41596985 31.77993965]
[-133.76448059 34.99457932]
[-126.51949310 33.34777832]
[-118.85821533 38.41883850]
[-104.27266693 41.92051697]
[-94.30847168 33.70344543]
[-81.23464203 32.72725677]
[-69.82633209 39.57394409]
[-64.38054657 51.92686462]
[-49.86655807 55.71423721]
[-35.35257339 59.50161362]
[-18.73565865 53.92757034]
[-5.70892143 66.90841675]
[8.87662697 70.41010284]
[23.46217537 73.91178131]
[38.04772568 77.41345978]
[52.63327408 80.91513824]
[58.78712845 69.84477234]
[67.47622681 60.62941742]
[78.16604614 53.83597946]
[90.19899750 49.88235092]
[102.83486176 49.01174545]
[115.29634094 51.27771759]
[121.84247589 37.78149414]
[128.38861084 24.28527069]
[134.93475342 10.78904629]
[141.48089600 -2.70717788]
[148.02702332 -16.20340157]
[143.08326721 -30.97489548]
[149.91424561 -44.56873322]
[164.02706909 -49.19081879]
[170.57321167 -62.68704224]
[177.11935425 -76.18326569]
[167.08889771 -87.57034302]
[162.19543457 -101.89155579]
[163.15521240 -116.95451355]
[169.79086304 -130.46582031]
[181.06329346 -140.38031006]
[195.23419189 -145.21055603]
[210.13407898 -144.24996948]
[216.68020630 -157.74618530]
[214.96153259 -174.05502319]
[228.38336182 -183.47769165]
[243.13847351 -176.32095337]
[244.04806519 -159.94705200]
[230.17643738 -151.20005798]
[223.63029480 -137.70382690]
[233.60908508 -126.59739685]
[238.58894348 -112.47837830]
[237.78161621 -97.48794556]
[231.27903748 -83.91207886]
[220.04403687 -73.83296967]
[205.76783752 -68.80970764]
[190.61558533 -69.63713074]
[184.06944275 -56.14090347]
[177.52330017 -42.64468002]
[182.63066101 -28.70013237]
[176.18420410 -14.91978931]
[161.52325439 -9.65726376]
[154.97711182 3.83896089]
[148.43098450 17.33518600]
[141.88484192 30.83140945]
[135.33869934 44.32763290]
[128.79255676 57.82385635]
[139.02903748 67.06715393]
[146.41862488 78.71267700]
[150.42227173 91.91095734]
[150.74797058 105.69928741]
[147.37194824 119.07189178]
[160.31295776 126.65675354]
[173.25398254 134.24160767]
[186.19499207 141.82647705]
[199.13601685 149.41133118]
[208.78906250 141.44924927]
[220.40405273 136.86068726]
[232.84347534 136.07873535]
[244.89411926 139.16452026]
[255.38533020 145.80264282]
[263.30276489 155.33341980]
[267.88650513 166.81837463]
[268.70388794 179.13261414]
[265.69030762 191.07505798]
[278.16235352 199.40861511]
[290.63439941 207.74217224]
[303.10644531 216.07571411]
[319.63534546 219.84812927]
[320.58602905 236.77539062]
[304.58346558 242.37486267]
[294.77288818 228.54776001]
[282.30084229 220.21421814]
[269.82879639 211.88066101]
[257.35675049 203.54710388]
[242.52442932 213.08660889]
[224.96591187 215.22151184]
[208.18014526 209.48022461]
[195.53218079 196.96522522]
[189.57870483 180.14178467]
[191.55114746 162.35235596]
[178.61013794 154.76748657]
[165.66911316 147.18263245]
[152.72810364 139.59776306]
[139.78709412 132.01290894]
[127.59692383 147.41564941]
[109.39934540 157.89892578]
[109.98824310 172.88735962]
[110.57714081 187.87580872]
[123.92477417 195.61170959]
[130.95082092 209.34626770]
[129.41331482 224.69682312]
[119.80286407 236.76507568]
[105.18611908 241.70008850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 154]
[5 153]
[6 152]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[34 59]
[35 58]
[36 57]
[39 53]
[40 52]
[41 50]
[42 49]
[43 48]
[71 112]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[79 104]
[80 103]
[81 102]
[88 95]
[89 94]
[117 150]
[118 149]
[119 148]
[120 147]
[121 146]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
