%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAAUGAAUGAAUGAAUGAGUGAAUGAAUCAACGAAGGAGUGAGUCAAGGCCCGGGAACCACAGACUCCAAGCCUACGCAGAGCCCGGGAAGGGGGAUUCCGGAGGGGCGGGGCCUCUUUCCG\
) } def
/len { sequence length } bind def

/coor [
[174.79341125 304.57556152]
[167.93447876 307.97354126]
[160.74504089 310.60476685]
[153.31053162 312.43768311]
[145.71929932 313.45016479]
[138.06163025 313.62991333]
[130.42863464 312.97448730]
[122.91111755 311.49139404]
[115.59857178 309.19799805]
[108.57808685 306.12133789]
[101.93329620 302.29772949]
[95.74338531 297.77239990]
[90.08216095 292.59893799]
[85.01717377 286.83874512]
[80.60890198 280.56005859]
[76.91000366 273.83749390]
[73.96475220 266.75085449]
[71.80844879 259.38433838]
[70.46701050 251.82550049]
[69.95669556 244.16419983]
[70.28385162 236.49157715]
[71.44487762 228.89891052]
[73.42624664 221.47657776]
[76.20466614 214.31295776]
[79.74734497 207.49336243]
[84.01239777 201.09907532]
[88.94932556 195.20629883]
[94.49961853 189.88533020]
[100.59744263 185.19969177]
[107.17043304 181.20533752]
[114.14054108 177.95004272]
[110.07793427 163.51068115]
[97.00182343 156.47145081]
[92.67606354 141.88575745]
[100.14812469 128.21804810]
[96.08551788 113.77868652]
[86.21142578 103.87950134]
[89.47511292 90.28392029]
[85.41250610 75.84455872]
[81.34989929 61.40519333]
[67.84724426 53.63886261]
[63.93287277 38.93741989]
[71.42009735 26.11255646]
[67.35749054 11.67319393]
[63.11519241 -2.71440244]
[58.69386292 -17.04799461]
[54.27253723 -31.38158607]
[49.85120773 -45.71517944]
[34.27110291 -53.55354691]
[29.22671890 -69.89723969]
[37.35325241 -84.56455994]
[32.57595062 -98.78347015]
[17.73147011 -103.30243683]
[8.40509987 -115.70398712]
[8.18301678 -131.21946716]
[17.15061951 -143.88287354]
[31.85967827 -148.82485962]
[46.65426254 -144.14512634]
[55.84555435 -131.64312744]
[55.89930725 -116.12614441]
[46.79486084 -103.56076813]
[51.57216263 -89.34185791]
[63.85519791 -85.24320221]
[71.62303162 -74.64000702]
[71.83399963 -61.30232620]
[64.18479919 -50.13650513]
[68.60612488 -35.80291367]
[73.02745819 -21.46932220]
[77.44878387 -7.13573027]
[82.48189545 -1.61093318]
[81.79685211 7.61058664]
[85.85945892 22.04994965]
[98.93556976 29.08918762]
[103.26132965 43.67488480]
[95.78926849 57.34258652]
[99.85187531 71.78195190]
[103.91448212 86.22131348]
[113.78857422 96.12049866]
[110.52488708 109.71607971]
[114.58749390 124.15544128]
[128.09014893 131.92176819]
[132.00451660 146.62321472]
[124.51729584 159.44807434]
[128.57991028 173.88743591]
[154.91180420 174.48377991]
[179.16441345 184.69284058]
[197.96002197 203.07298279]
[208.68821716 227.04591370]
[209.86839294 253.25843811]
[201.35412598 278.05139160]
[213.53320312 286.80752563]
[225.71226501 295.56369019]
[237.89134216 304.31985474]
[250.07040405 313.07598877]
[262.24948120 321.83215332]
[274.42855835 330.58831787]
[286.60760498 339.34445190]
[298.78668213 348.10061646]
[307.68637085 350.61083984]
[311.15655518 357.23001099]
[323.11355591 366.28707886]
[335.07055664 375.34414673]
[347.02752686 384.40121460]
[358.98452759 393.45828247]
[374.60421753 391.04974365]
[387.30249023 400.45874023]
[389.54574585 416.10299683]
[380.00305176 428.70111084]
[364.33590698 430.77883911]
[351.83941650 421.10345459]
[349.92745972 405.41525269]
[337.97045898 396.35818481]
[326.01348877 387.30111694]
[314.05648804 378.24404907]
[302.09948730 369.18698120]
[290.03054810 360.27969360]
[277.85147095 351.52352905]
[265.67239380 342.76736450]
[253.49331665 334.01123047]
[241.31425476 325.25506592]
[229.13517761 316.49890137]
[216.95611572 307.74276733]
[204.77703857 298.98660278]
[192.59797668 290.23043823]
[187.19877625 295.65069580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[31 84]
[32 83]
[35 80]
[36 79]
[38 77]
[39 76]
[40 75]
[43 72]
[44 71]
[45 69]
[46 68]
[47 67]
[48 66]
[51 62]
[52 61]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
