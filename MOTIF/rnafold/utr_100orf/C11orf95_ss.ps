%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUCCGCAGCGCAGCGCAUGGAGCCCGGCGGGGACCACCGGAGCCGGAGCAGCGGCGGCAGGGGCGGCCCCGGGCCAGCAGUGGCCUCGGCACGGGGCCGACGGCUGCCGCCCGCCG\
) } def
/len { sequence length } bind def

/coor [
[98.89102936 136.52526855]
[84.31710052 134.01289368]
[71.59196472 125.78725433]
[61.26664352 136.66786194]
[50.94132233 147.54847717]
[40.61600494 158.42909241]
[30.29068756 169.30970764]
[19.96536827 180.19032288]
[19.50272751 193.16076660]
[10.57516193 202.01849365]
[-1.59388340 202.35586548]
[-12.20048523 212.96246338]
[-22.80708694 223.56906128]
[-29.73163795 239.04443359]
[-46.51912689 236.67449951]
[-48.88905334 219.88700867]
[-33.41368866 212.96246338]
[-22.80708694 202.35586548]
[-12.20048523 191.74925232]
[-8.64610672 174.61793518]
[9.08475208 169.86500549]
[19.41007042 158.98439026]
[29.73538971 148.10377502]
[40.06070709 137.22315979]
[50.38602829 126.34255219]
[60.71134567 115.46192932]
[57.78499222 100.75015259]
[44.08181000 94.64910126]
[30.37862778 88.54805756]
[16.67544556 82.44700623]
[2.97226334 76.34595490]
[-13.17382240 82.92276764]
[-28.79910088 75.98055267]
[-34.51161957 60.22206497]
[-48.36981583 54.48181152]
[-64.54918671 57.15762329]
[-74.74565887 44.31379318]
[-68.46997833 29.16295624]
[-52.17802429 27.29099274]
[-42.62956238 40.62361908]
[-28.77136993 46.36387253]
[-17.60373306 39.79425430]
[-4.49921513 40.91132355]
[5.69379282 49.52848434]
[9.07331276 62.64277267]
[22.77649498 68.74382019]
[36.47967529 74.84487152]
[50.18285751 80.94592285]
[63.88603973 87.04697418]
[74.31971741 72.98669434]
[89.52359772 65.37292480]
[106.02237701 65.43830109]
[120.26541138 72.71483612]
[129.39083862 85.23077393]
[143.97637939 81.72908783]
[158.56193542 78.22740936]
[173.14747620 74.72573090]
[187.68594360 71.03343201]
[202.17483521 67.15114594]
[216.66372681 63.26885986]
[231.15260315 59.38657379]
[245.64149475 55.50428772]
[260.13037109 51.62200165]
[265.93249512 35.79682541]
[279.86050415 26.60105133]
[296.36236572 27.46497917]
[308.99844360 37.85478973]
[323.38076782 33.59455872]
[337.76306152 29.33432770]
[352.14535522 25.07409668]
[366.52764893 20.81386757]
[380.90994263 16.55363655]
[395.29223633 12.29340744]
[409.67453003 8.03317642]
[423.67822266 2.65765762]
[437.21701050 -3.80000877]
[450.75579834 -10.25767517]
[464.29458618 -16.71534157]
[477.83334351 -23.17300797]
[486.67095947 -36.98709106]
[503.03854370 -35.97034836]
[510.09857178 -21.16872025]
[500.58825684 -7.80885029]
[484.29101562 -9.63422871]
[470.75222778 -3.17656255]
[457.21347046 3.28110385]
[443.67468262 9.73877048]
[430.13589478 16.19643593]
[443.52856445 22.95194054]
[448.45059204 37.12139511]
[442.13000488 50.72470093]
[428.12643433 56.10061264]
[414.32659912 50.22146606]
[408.50241089 36.39833832]
[413.93475342 22.41547203]
[399.55245972 26.67570305]
[385.17016602 30.93593407]
[370.78787231 35.19616318]
[356.40557861 39.45639420]
[342.02328491 43.71662521]
[327.64099121 47.97685242]
[313.25869751 52.23708344]
[309.95874023 65.24372864]
[300.56497192 74.97758484]
[287.47528076 78.79878235]
[274.10873413 75.59691620]
[264.01266479 66.11088562]
[249.52378845 69.99317169]
[235.03489685 73.87545776]
[220.54600525 77.75774384]
[206.05711365 81.64002991]
[191.56823730 85.52231598]
[185.85139465 90.35224152]
[176.64916992 89.31127930]
[162.06361389 92.81295776]
[147.47805786 96.31463623]
[132.89251709 99.81632233]
[131.18785095 113.04283905]
[124.24313354 124.85115051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[8 21]
[11 19]
[12 18]
[13 17]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[34 41]
[35 40]
[54 117]
[55 116]
[56 115]
[57 114]
[58 112]
[59 111]
[60 110]
[61 109]
[62 108]
[63 107]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[72 97]
[73 96]
[74 95]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
