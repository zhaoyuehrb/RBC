%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGGGAGAGUUAGGGCUCCGAGCCGAGCGCGCGGAGCAGCUGGGGCCGGGGCGCGGAUGCUGGAAGUUCACAUCCCGUCGGUGGGGCCCGAGGCCGAGGGGCCCAGGCAGAGCCCGGAGAAAAGCCACAUGGUGUUCCGAGUGGAGGUGCUGUGCA\
) } def
/len { sequence length } bind def

/coor [
[340.67962646 397.50152588]
[346.16491699 389.55072021]
[336.42318726 378.14465332]
[326.68148804 366.73855591]
[316.93975830 355.33245850]
[307.19802856 343.92636108]
[297.45632935 332.52029419]
[287.71459961 321.11419678]
[271.42391968 322.93414307]
[257.10574341 314.61834717]
[250.48243713 299.26205444]
[254.33648682 282.81805420]
[244.37269592 271.60543823]
[234.40892029 260.39279175]
[220.17109680 256.01858521]
[216.78799438 240.56332397]
[206.82420349 229.35069275]
[196.86042786 218.13807678]
[186.89663696 206.92544556]
[176.93284607 195.71281433]
[166.96905518 184.50019836]
[157.00527954 173.28756714]
[140.21281433 173.03157043]
[128.55337524 160.47984314]
[129.57324219 143.04104614]
[119.39122772 132.02619934]
[109.20921326 121.01136780]
[92.27142334 121.59991455]
[79.55171204 110.39974213]
[64.69316864 112.45493317]
[49.83462906 114.51011658]
[34.99698257 116.71107483]
[20.18165779 119.05758667]
[9.62647629 131.13929749]
[-6.39332390 130.27583313]
[-15.58872223 117.12957001]
[-10.90579700 101.78520203]
[4.06311274 96.01360321]
[17.83514023 104.24226379]
[32.65046692 101.89574432]
[38.79689789 97.72164154]
[47.77944565 99.65157318]
[62.63798523 97.59638977]
[77.49652863 95.54120636]
[79.87503052 88.98760986]
[84.11224365 83.45109558]
[77.83234406 69.82894897]
[71.55244446 56.20679855]
[65.27255249 42.58465195]
[58.99265671 28.96250343]
[39.83023453 23.08586121]
[31.22363281 5.32069159]
[38.26959610 -12.79434586]
[31.19864464 -26.02316475]
[24.12769318 -39.25198364]
[17.05674171 -52.48080444]
[10.21558285 -58.61344910]
[9.97972393 -66.03949738]
[3.16986656 -79.40459442]
[-3.63999081 -92.76969147]
[-10.44984818 -106.13478851]
[-17.25970650 -119.49988556]
[-23.97913933 -125.76567078]
[-24.06915283 -133.19491577]
[-30.61529160 -146.69113159]
[-37.16143036 -160.18736267]
[-51.03305817 -168.93435669]
[-50.12346268 -185.30825806]
[-35.36835861 -192.46499634]
[-21.94652939 -183.04234314]
[-23.66520500 -166.73350525]
[-17.11906624 -153.23727417]
[-10.57292747 -139.74105835]
[-3.89460802 -126.30974579]
[2.91524959 -112.94464874]
[9.72510719 -99.57955170]
[16.53496361 -86.21445465]
[23.34482193 -72.84934998]
[30.28556061 -59.55175400]
[37.35651016 -46.32293320]
[44.42746353 -33.09411621]
[51.49841309 -19.86529732]
[61.84978867 -19.63279152]
[71.23168182 -15.06442642]
[77.90098572 -6.93373394]
[80.58735657 3.31723762]
[78.73471832 13.83346462]
[72.61479950 22.68260765]
[78.89469910 36.30475616]
[85.17459869 49.92690277]
[91.45449066 63.54904938]
[97.73439026 77.17119598]
[113.35796356 81.34920502]
[122.34295654 94.79620361]
[120.22405243 110.82936096]
[130.40606689 121.84419250]
[140.58807373 132.85903931]
[154.04949951 131.83866882]
[165.46557617 138.67239380]
[170.76762390 150.66264343]
[168.21789551 163.32377625]
[178.18168640 174.53640747]
[188.14547729 185.74903870]
[198.10925293 196.96165466]
[208.07304382 208.17428589]
[218.03683472 219.38690186]
[228.00062561 230.59953308]
[242.95111084 235.77575684]
[245.62153625 250.42901611]
[255.58532715 261.64163208]
[265.54910278 272.85427856]
[279.15768433 270.48641968]
[292.05233765 275.12792969]
[300.88888550 285.46099854]
[303.43212891 298.70681763]
[299.12069702 311.37246704]
[308.86239624 322.77856445]
[318.60412598 334.18466187]
[328.34585571 345.59072876]
[338.08755493 356.99682617]
[347.82928467 368.40292358]
[357.57101440 379.80902100]
[377.61712646 373.04162598]
[398.58929443 375.49197388]
[416.46286011 386.65292358]
[427.82351685 404.34942627]
[430.51965332 425.16201782]
[424.06954956 445.08776855]
[435.66470337 454.60366821]
[447.25985718 464.11956787]
[458.85501099 473.63546753]
[474.43118286 476.40917969]
[479.36099243 490.46429443]
[490.95614624 499.98019409]
[502.55130005 509.49609375]
[518.81072998 511.63211060]
[524.83978271 526.88281250]
[514.43627930 539.55950928]
[498.30245972 536.62152100]
[493.03540039 521.09124756]
[481.44024658 511.57534790]
[469.84509277 502.05944824]
[455.09829712 499.96636963]
[449.33911133 485.23062134]
[437.74395752 475.71472168]
[426.14880371 466.19882202]
[414.55364990 456.68292236]
[406.83532715 462.30709839]
[398.14514160 466.28625488]
[388.82934570 468.45846558]
[379.25982666 468.73382568]
[369.81915283 467.09817505]
[360.88546753 463.61392212]
[352.81713867 458.41748047]
[345.93856812 451.71408081]
[340.52694702 443.76959229]
[336.80133057 434.89993286]
[334.91357422 425.45867920]
[334.94216919 415.82278442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[12 111]
[13 110]
[14 109]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[25 97]
[26 96]
[27 95]
[29 44]
[30 43]
[31 42]
[32 40]
[33 39]
[46 92]
[47 91]
[48 90]
[49 89]
[50 88]
[53 82]
[54 81]
[55 80]
[56 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[64 73]
[65 72]
[66 71]
[128 147]
[129 146]
[130 145]
[131 144]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
