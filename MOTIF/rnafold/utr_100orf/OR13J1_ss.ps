%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:26:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCGCUCAACAGAACAGAGGUGUCCGAGUUCUUUCUGAAAGGAUUUUCUGGCUACCCAGCCCUGGAGCAUCUGCUCUUCCCUCUGUGCUCAGCCA\
) } def
/len { sequence length } bind def

/coor [
[41.48463821 329.75827026]
[38.39994431 314.64245605]
[43.99846649 300.26678467]
[56.49373627 291.21847534]
[55.56119156 276.24749756]
[54.62864685 261.27651978]
[53.69610214 246.30552673]
[44.47521973 258.13665771]
[30.89203072 264.50036621]
[15.89995003 264.01303101]
[2.75873256 256.78054810]
[-5.67430210 244.37556458]
[-7.56554461 229.49526978]
[-2.50377846 215.37512207]
[8.41040707 205.08529663]
[22.80392075 200.86312866]
[37.54715729 203.62663269]
[49.43446350 212.77496338]
[55.88080215 226.31726074]
[60.02532959 211.90119934]
[64.16985321 197.48513794]
[68.31438446 183.06906128]
[72.45890808 168.65299988]
[76.60343170 154.23693848]
[80.74796295 139.82087708]
[69.14675140 131.69258118]
[60.71007919 120.31367493]
[56.30327606 106.85123444]
[56.37833405 92.68608093]
[60.92755508 79.27110291]
[69.48433685 67.98223114]
[61.12655258 55.52641296]
[52.76876831 43.07059097]
[44.41098404 30.61477280]
[36.05319977 18.15895271]
[27.69541740 5.70313358]
[19.33763313 -6.75268650]
[10.97984886 -19.20850563]
[2.62206507 -31.66432571]
[-11.22407913 -41.44801712]
[-5.65573215 -57.46144485]
[11.27335548 -56.54366684]
[15.07788467 -40.02210999]
[23.43566895 -27.56628990]
[31.79345322 -15.11047077]
[40.15123749 -2.65465069]
[48.50902176 9.80116940]
[56.86680603 22.25698853]
[65.22458649 34.71280670]
[73.58237457 47.16862869]
[81.94015503 59.62444687]
[91.10329437 56.67342758]
[100.68786621 55.77478027]
[110.23985291 56.97107315]
[119.30677795 60.20563889]
[128.04789734 48.01576996]
[136.78901672 35.82590103]
[145.53012085 23.63603020]
[146.60346985 7.27204704]
[161.42942810 0.26326737]
[174.75633240 9.81972313]
[172.87458801 26.11055183]
[157.72000122 32.37714767]
[148.97888184 44.56701660]
[140.23776245 56.75688553]
[131.49664307 68.94675446]
[136.97651672 75.72901917]
[141.01937866 83.45451355]
[143.46815491 91.82300568]
[158.46633911 91.58972168]
[173.46452332 91.35644531]
[188.46270752 91.12316895]
[203.46089172 90.88989258]
[217.24827576 82.01069641]
[231.70582581 89.75092316]
[231.96086121 106.14808655]
[217.75102234 114.33419800]
[203.69416809 105.88807678]
[188.69598389 106.12136078]
[173.69779968 106.35463715]
[158.69961548 106.58791351]
[143.70143127 106.82118988]
[134.85099792 127.23511505]
[117.18141174 140.75711060]
[95.16402435 143.96539307]
[91.01950073 158.38146973]
[86.87496948 172.79753113]
[82.73044586 187.21359253]
[78.58592224 201.62965393]
[74.44139099 216.04571533]
[70.29686737 230.46179199]
[68.66708374 245.37298584]
[69.59963226 260.34396362]
[70.53217316 275.31494141]
[71.46472168 290.28594971]
[84.98628235 297.71365356]
[92.32553101 311.28341675]
[91.14053345 326.66522217]
[81.80942535 338.95074463]
[67.30972290 344.21972656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
[38 44]
[39 43]
[55 66]
[56 65]
[57 64]
[58 63]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
