%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCGGGGGCCCGACCACCGCGGGGCCGGGACGCGAUGGCGGCGGCAGAGCCCGCGAGCUCGGGCCAGCAGGCGCCGGCAGGGCAGGGGCAGGGCCAGCGGCCGCCGCCGCAGCCUCCGCAGGCGCAAGCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[104.99626160 203.89114380]
[89.99425507 209.57615662]
[76.26999664 201.26806641]
[74.35157013 185.34011841]
[85.71062469 174.01089478]
[87.07464600 159.07304382]
[88.43867493 144.13519287]
[89.80269623 129.19734192]
[91.16671753 114.25948334]
[82.23979950 102.20501709]
[67.55354309 99.15317535]
[52.86727905 96.10133362]
[38.18101883 93.04949188]
[23.49475670 89.99765778]
[8.80849552 86.94581604]
[-5.87776566 83.89397430]
[-15.40069008 93.92627716]
[-28.53958702 97.89011383]
[-41.81034470 94.84668732]
[-51.74927902 85.70067596]
[-55.81710052 72.93490601]
[-70.43008423 69.54955292]
[-85.04306793 66.16419983]
[-99.65605927 62.77884293]
[-114.26904297 59.39348602]
[-128.88203430 56.00812912]
[-143.63395691 53.29138565]
[-158.49424744 51.24888611]
[-173.35453796 49.20638657]
[-188.21482849 47.16388702]
[-196.57548523 54.28960419]
[-207.26458740 55.56248093]
[-216.67094421 50.79851151]
[-221.75224304 41.81235504]
[-236.50416565 39.09561157]
[-251.25610352 36.37886810]
[-266.51876831 42.37746048]
[-279.17468262 31.94866562]
[-276.20452881 15.82073212]
[-260.66375732 10.58469582]
[-248.53935242 21.62694168]
[-233.78742981 24.34368515]
[-219.03550720 27.06042862]
[-201.42147827 19.20641136]
[-186.17231750 32.30360031]
[-171.31202698 34.34609985]
[-156.45175171 36.38859940]
[-141.59146118 38.43109894]
[-139.24020386 36.75861359]
[-136.05686951 35.95846939]
[-132.38621521 36.36322403]
[-128.69056702 38.16852188]
[-125.49667358 41.39514542]
[-110.88368988 44.78049850]
[-96.27069855 48.16585541]
[-81.65771484 51.55121231]
[-67.04473114 54.93656540]
[-52.43174362 58.32192230]
[-40.42699814 47.18331909]
[-23.98746300 45.34568024]
[-9.53291702 53.72476196]
[-2.82592559 69.20771027]
[11.86033535 72.25955200]
[26.54659653 75.31139374]
[41.23285675 78.36323547]
[55.91912079 81.41507721]
[70.60538483 84.46691132]
[85.29164124 87.51875305]
[101.04052734 81.41571045]
[114.88605499 89.99392700]
[129.78898621 88.29022980]
[139.61265564 76.20167542]
[154.75062561 74.68617249]
[166.21467590 84.12604523]
[181.11761475 82.42234039]
[196.02053833 80.71863556]
[210.92347717 79.01493835]
[225.82640076 77.31123352]
[238.65846252 68.05657196]
[252.18218994 74.29824066]
[267.08511353 72.59453583]
[281.57089233 61.29075623]
[297.39096069 68.80104828]
[312.25125122 66.75854492]
[327.11151123 64.71604919]
[341.97180176 62.67354965]
[357.22097778 49.57636261]
[374.83499146 57.43037796]
[389.58691406 54.71363449]
[404.30697632 51.82915497]
[418.99322510 48.77731705]
[433.67950439 45.72547531]
[438.96789551 41.52903748]
[444.71484375 40.80907440]
[449.10302734 42.88504791]
[463.91296387 40.50481033]
[478.72290039 38.12457275]
[493.53286743 35.74433517]
[508.21185303 27.26121140]
[520.42700195 39.01818466]
[512.51098633 54.01061630]
[495.91308594 50.55427933]
[481.10314941 52.93451691]
[466.29321289 55.31475830]
[451.48324585 57.69499588]
[436.73132324 60.41173935]
[422.04507446 63.46357727]
[407.35879517 66.51541901]
[401.39862061 70.99465179]
[392.30364990 69.46556091]
[377.55172729 72.18230438]
[372.47042847 81.16845703]
[363.06408691 85.93243408]
[352.37496948 84.65955353]
[344.01431274 77.53383636]
[329.15402222 79.57633972]
[314.29373169 81.61883545]
[299.43344116 83.66133881]
[291.83139038 93.13979340]
[279.40588379 94.91998291]
[268.78881836 87.49746704]
[253.88589478 89.20117188]
[242.11978149 98.33396912]
[227.53010559 92.21416473]
[212.62718201 93.91786957]
[197.72424316 95.62157440]
[182.82130432 97.32527161]
[167.91838074 99.02897644]
[158.88059998 110.81261444]
[143.79118347 112.75270844]
[131.49269104 103.19316101]
[116.58975983 104.89686584]
[106.10456848 115.62350464]
[104.74054718 130.56135559]
[103.37652588 145.49920654]
[102.01250458 160.43705750]
[100.64847565 175.37490845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 137]
[6 136]
[7 135]
[8 134]
[9 133]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 53]
[27 48]
[28 47]
[29 46]
[30 45]
[34 43]
[35 42]
[36 41]
[70 132]
[71 131]
[74 128]
[75 127]
[76 126]
[77 125]
[78 124]
[80 122]
[81 121]
[83 118]
[84 117]
[85 116]
[86 115]
[88 111]
[89 110]
[90 108]
[91 107]
[92 106]
[95 105]
[96 104]
[97 103]
[98 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
