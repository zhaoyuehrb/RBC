%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAUUGGAGGGCCCGGGCCUGGCGGAAGCGGGGCAGACCGGGAGGGGACCUGGAUCAUGGCUGCCGCGCCGCCGCUACGGGACCGCCUGAGCUUUCUACACCGGCUCCCGAUUCUCCUGAAGGGGACGUCCGAUGAUGAUGUCCCGUGUCCGGGCU\
) } def
/len { sequence length } bind def

/coor [
[94.89204407 266.07437134]
[95.03409576 281.33682251]
[88.53218079 295.14581299]
[76.67725372 304.75952148]
[61.82312012 308.26916504]
[46.91908646 304.97787476]
[34.92435074 295.53918457]
[28.22048378 281.82711792]
[28.13853836 266.56420898]
[34.69478607 252.78094482]
[46.58747864 243.21398926]
[61.45531464 239.76287842]
[64.68984985 225.11576843]
[67.92439270 210.46865845]
[71.15892792 195.82154846]
[74.39346313 181.17443848]
[77.62799835 166.52732849]
[80.86253357 151.88021851]
[84.09707642 137.23312378]
[87.33161163 122.58600616]
[71.95332336 104.41505432]
[77.34404755 79.00553894]
[63.67727280 72.82336426]
[50.01049423 66.64119720]
[36.34371948 60.45903015]
[22.67694092 54.27686310]
[9.01016426 48.09469604]
[-5.62356186 53.43246841]
[-19.39554977 46.96818161]
[-24.39411736 32.98426437]
[-38.06089401 26.80209732]
[-51.72767258 20.61992836]
[-67.49015045 21.98186111]
[-75.89731598 9.68678761]
[-89.56409454 3.50461984]
[-103.23087311 -2.67754817]
[-116.89764404 -8.85971642]
[-130.56442261 -15.04188442]
[-153.94186401 -10.29440212]
[-167.30044556 -29.19038010]
[-181.60249329 -33.71274185]
[-195.90452576 -38.23510361]
[-210.20655823 -42.75746918]
[-224.50859070 -47.27983093]
[-238.41586304 -39.77227402]
[-253.53430176 -44.37753677]
[-260.89440918 -58.36340332]
[-256.12954712 -73.43230438]
[-242.06665039 -80.64412689]
[-227.04896545 -75.72023010]
[-219.98623657 -61.58186722]
[-205.68420410 -57.05950546]
[-191.38215637 -52.53713989]
[-177.08012390 -48.01477814]
[-162.77809143 -43.49241638]
[-157.97236633 -48.07709885]
[-151.92564392 -50.94799423]
[-145.23255920 -51.78686142]
[-138.56269836 -50.47710037]
[-132.59356689 -47.11869812]
[-127.94179535 -42.02138519]
[-125.09947968 -35.67627716]
[-124.38225555 -28.70866203]
[-110.71547699 -22.52649307]
[-97.04870605 -16.34432602]
[-83.38192749 -10.16215706]
[-69.71514893 -3.97998929]
[-54.93021011 -5.78411102]
[-45.54550171 6.95315218]
[-31.87872696 13.13531971]
[-18.21194839 19.31748772]
[-4.40925550 13.83832359]
[9.53886700 19.91323280]
[15.19233227 34.42791748]
[28.85910988 40.61008453]
[42.52588654 46.79225540]
[56.19266510 52.97442245]
[69.85944366 59.15658951]
[83.52621460 65.33876038]
[98.07104492 61.67160034]
[107.17304230 49.74878311]
[116.27504730 37.82596588]
[125.37705231 25.90315056]
[134.47904968 13.98033333]
[143.46282959 1.96817923]
[152.32748413 -10.13214016]
[161.19215393 -22.23245811]
[155.12034607 -36.27099228]
[156.87901306 -51.36417007]
[165.89634705 -63.47011566]
[179.67033386 -69.39743805]
[194.46218872 -67.64625549]
[203.32685852 -79.74657440]
[204.56660461 -96.09879303]
[219.46308899 -102.95639038]
[232.69209290 -93.26486206]
[230.64472961 -76.99401855]
[215.42716980 -70.88190460]
[206.56251526 -58.78158951]
[212.69181824 -45.20598221]
[211.19303894 -30.28587341]
[202.36903381 -18.03828621]
[188.50837708 -11.81100845]
[173.29246521 -13.36779404]
[164.42781067 -1.26747525]
[155.56314087 10.83284378]
[154.13951111 18.12600708]
[146.40187073 23.08233452]
[137.29986572 35.00515366]
[128.19786072 46.92796707]
[119.09586334 58.85078430]
[109.99385834 70.77360535]
[120.13652802 79.98428345]
[124.55326843 91.76879120]
[139.54667664 91.32428741]
[154.54010010 90.87979126]
[168.20104980 81.80728149]
[182.76618958 89.34310913]
[183.25215149 105.73505402]
[169.15901184 114.12049103]
[154.98458862 105.87319946]
[139.99118042 106.31770325]
[124.99777222 106.76219940]
[124.61293793 108.05102539]
[124.16171265 109.31813812]
[135.99401855 118.53748322]
[147.82633972 127.75682068]
[159.65866089 136.97616577]
[171.49096680 146.19551086]
[183.32328796 155.41485596]
[195.15560913 164.63420105]
[206.98791504 173.85354614]
[222.24061584 170.40545654]
[236.11749268 177.61422729]
[242.06631470 192.07608032]
[237.27822876 206.96260071]
[224.01402283 215.24479675]
[208.53665161 213.01210022]
[198.15405273 201.31869507]
[197.76856995 185.68586731]
[185.93626404 176.46652222]
[174.10394287 167.24717712]
[162.27162170 158.02783203]
[150.43931580 148.80848694]
[138.60699463 139.58914185]
[126.77468109 130.36979675]
[114.94236755 121.15045166]
[110.92552948 123.47868347]
[106.55751038 125.05224609]
[101.97872162 125.82054901]
[98.74417877 140.46765137]
[95.50964355 155.11476135]
[92.27510834 169.76187134]
[89.04057312 184.40898132]
[85.80603027 199.05609131]
[82.57149506 213.70318604]
[79.33695984 228.35029602]
[76.10242462 242.99740601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 158]
[13 157]
[14 156]
[15 155]
[16 154]
[17 153]
[18 152]
[19 151]
[20 150]
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[30 71]
[31 70]
[32 69]
[34 67]
[35 66]
[36 65]
[37 64]
[38 63]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 106]
[86 105]
[87 104]
[92 99]
[93 98]
[114 123]
[115 122]
[116 121]
[125 147]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[132 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
