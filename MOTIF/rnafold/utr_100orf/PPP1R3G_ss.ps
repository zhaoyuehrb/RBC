%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAGCCCAUAGGGGCGCGGCUAAGUUUGGAGGCGCCGGGACCAGCGCCCUUCCGAGAGGCCCCGCCGGCCGAGGAGCUGCCCGCCCCGGUGGUCCCCU\
) } def
/len { sequence length } bind def

/coor [
[81.97335815 426.02502441]
[81.64888763 410.22409058]
[92.65253448 398.87969971]
[92.18604279 383.88693237]
[91.71954346 368.89419556]
[88.78128815 364.92465210]
[88.42884064 359.02670288]
[91.71954346 352.96121216]
[92.18604279 337.96847534]
[92.65253448 322.97570801]
[93.11903381 307.98297119]
[85.78129578 295.02124023]
[93.94403839 281.46835327]
[94.41053009 266.47561646]
[94.87702942 251.48287964]
[95.34352875 236.49012756]
[95.81002808 221.49739075]
[95.81002808 206.49739075]
[95.34352875 191.50463867]
[94.87702942 176.51190186]
[94.41053009 161.51914978]
[93.94403839 146.52641296]
[93.47753906 131.53366089]
[77.92857361 123.44710541]
[68.91777802 108.41487122]
[69.11439514 90.88991547]
[78.46017456 76.06362152]
[71.29936981 62.88322067]
[64.13857269 49.70281982]
[56.97777557 36.52241898]
[49.81697845 23.34201622]
[42.65618134 10.16161633]
[35.08893967 -2.78970981]
[27.12257004 -15.49943066]
[19.15620422 -28.20915031]
[11.18983746 -40.91887283]
[3.22346997 -53.62859344]
[-12.26591301 -54.55521774]
[-24.23102188 -64.43528748]
[-28.07102776 -79.46971893]
[-22.30937004 -93.87745667]
[-9.16152477 -102.11843109]
[6.31689501 -101.02383423]
[18.17411995 -91.01454163]
[21.85080528 -75.93934631]
[15.93319035 -61.59495926]
[23.89955711 -48.88523865]
[31.86592484 -36.17551804]
[39.83229065 -23.46579742]
[47.79866028 -10.75607681]
[52.33818436 -8.81097031]
[55.61789703 -3.89637876]
[55.83658218 3.00081778]
[62.99737930 16.18121910]
[70.15818024 29.36161995]
[77.31897736 42.54201889]
[84.47977448 55.72242355]
[91.64057159 68.90282440]
[107.44414520 68.67111206]
[121.45432281 75.98695374]
[133.77865601 67.43647003]
[146.10299683 58.88598251]
[158.42732239 50.33549881]
[162.68484497 34.86769485]
[177.48872375 28.68504906]
[191.48266602 36.53036118]
[193.93173218 52.38537979]
[182.95721436 64.08748627]
[166.97781372 62.65983582]
[154.65347290 71.21031952]
[142.32914734 79.76080322]
[130.00480652 88.31128693]
[132.17999268 98.83277130]
[130.77278137 109.48419952]
[125.93984222 119.07981110]
[118.21916962 126.55138397]
[108.47028351 131.06716919]
[108.93678284 146.05990601]
[109.40327454 161.05265808]
[109.86977386 176.04539490]
[110.33627319 191.03814697]
[110.80277252 206.03088379]
[114.09347534 212.09640503]
[113.74102783 217.99432373]
[110.80277252 221.96388245]
[110.33627319 236.95663452]
[109.86977386 251.94937134]
[109.40327454 266.94210815]
[108.93678284 281.93484497]
[116.24115753 295.96899414]
[108.11177826 308.44946289]
[107.64527893 323.44223022]
[107.17878723 338.43496704]
[106.71228790 353.42770386]
[106.71228790 368.42770386]
[107.17878723 383.42044067]
[107.64527893 398.41320801]
[119.33292389 409.05154419]
[119.99142456 424.84210205]
[109.23009491 436.41662598]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 97]
[4 96]
[5 95]
[8 94]
[9 93]
[10 92]
[11 91]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[23 77]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 53]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
