%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUCGUCGCUGGCUGCCCUGCGUCCACCCGGCCGACUACUGGCCAUGGAGCCGCGCACAGGGGGCGCCGCGAACCCUAAGGGGAGCAGAGGAGGCCGCGGCCCCUCCCCGCUCGCGGGCCCUAGCGCCCGGCAGCUCCUGGCGC\
) } def
/len { sequence length } bind def

/coor [
[93.89112091 348.89428711]
[80.45879364 356.66296387]
[65.02903748 355.01916504]
[53.53489685 344.59494019]
[50.39611053 329.39865112]
[56.81960297 315.27352905]
[70.33541107 307.65103149]
[71.92444611 292.73544312]
[73.51348114 277.81985474]
[75.10251617 262.90426636]
[76.69155884 247.98866272]
[67.16379547 236.59754944]
[68.56282806 221.44837952]
[80.57546997 211.53202820]
[82.16450500 196.61642456]
[83.75354004 181.70083618]
[85.34258270 166.78523254]
[86.93161774 151.86964417]
[88.52065277 136.95404053]
[90.10968781 122.03845215]
[84.05710602 118.14761353]
[79.41906738 112.64661407]
[76.60707855 106.02353668]
[61.63748169 105.06896210]
[52.80396271 107.65889740]
[46.36133957 103.93193817]
[31.41537857 102.65985107]
[16.46941566 101.38776398]
[1.52345431 100.11566925]
[-6.44136143 107.65053558]
[-17.02790833 109.48137665]
[-26.65703773 105.23655701]
[-32.20907211 96.55769348]
[-47.08758163 94.65242767]
[-61.96608734 92.74716187]
[-76.84459686 90.84189606]
[-91.72309875 88.93663025]
[-105.24454498 97.57086182]
[-120.37834167 92.24659729]
[-125.51512909 77.04814911]
[-116.71440887 63.63446045]
[-100.72734070 62.29537582]
[-89.81783295 74.05812073]
[-74.93932343 75.96338654]
[-60.06081772 77.86865234]
[-45.18231201 79.77392578]
[-30.30380630 81.67919159]
[-13.12902355 72.88423157]
[2.79554319 85.16970825]
[17.74150467 86.44180298]
[32.68746948 87.71389008]
[47.63343048 88.98597717]
[62.59205246 90.09936523]
[77.56164551 91.05393982]
[91.71140289 77.31055450]
[111.38814545 78.69690704]
[122.21748352 68.31782532]
[133.04682922 57.93873978]
[143.87617493 47.55965424]
[142.80798340 38.06726074]
[146.21697998 29.29214096]
[153.20494080 23.19229126]
[162.09123230 21.06452179]
[170.81596375 23.27020836]
[182.28385925 13.60131836]
[193.75175476 3.93243027]
[205.21965027 -5.73645830]
[216.68754578 -15.40534687]
[221.27288818 -23.38741875]
[228.50299072 -25.15462112]
[240.17353821 -34.57792282]
[251.84407043 -44.00122070]
[263.51461792 -53.42452240]
[275.18515015 -62.84782028]
[286.85568237 -72.27111816]
[271.59786987 -83.63694000]
[266.31881714 -106.88753510]
[271.01458740 -121.13357544]
[275.71035767 -135.37962341]
[271.84100342 -151.31575012]
[283.89254761 -162.43743896]
[299.46743774 -157.30364990]
[302.54351807 -141.19558716]
[289.95642090 -130.68383789]
[285.26062012 -116.43779755]
[280.56484985 -102.19175720]
[286.14199829 -97.17722321]
[302.87338257 -82.13362122]
[316.54180908 -88.31214142]
[327.46395874 -105.20095062]
[346.58761597 -102.62998199]
[359.98150635 -109.38304138]
[373.37539673 -116.13609314]
[386.76928711 -122.88915253]
[393.07708740 -129.59365845]
[400.51989746 -129.63999939]
[414.05410767 -136.10723877]
[427.58831787 -142.57447815]
[436.41613770 -156.39482117]
[452.78445435 -155.38964844]
[459.85494995 -140.59301758]
[450.35409546 -127.22643280]
[434.05557251 -129.04028320]
[420.52136230 -122.57302856]
[406.98715210 -116.10578918]
[393.52233887 -109.49526215]
[380.12844849 -102.74221039]
[366.73455811 -95.98915100]
[353.34066772 -89.23609924]
[350.99707031 -79.20339203]
[343.33209229 -71.99320221]
[332.74035645 -70.19265747]
[322.72033691 -74.64371490]
[309.05191040 -68.46519470]
[296.27899170 -60.60058594]
[284.60842896 -51.17728424]
[272.93789673 -41.75398636]
[261.26736450 -32.33068466]
[249.59683228 -22.90738487]
[237.92630005 -13.48408508]
[226.35643005 -3.93745303]
[214.88853455 5.73143530]
[203.42063904 15.40032387]
[191.95274353 25.06921196]
[180.48484802 34.73810196]
[175.31495667 54.68025208]
[154.25524902 58.38899612]
[143.42590332 68.76808167]
[132.59657288 79.14716339]
[121.76722717 89.52624512]
[123.86727905 103.72354889]
[117.54242706 116.60647583]
[105.02528381 123.62748718]
[103.43624878 138.54309082]
[101.84720612 153.45867920]
[100.25817108 168.37426758]
[98.66913605 183.28987122]
[97.08010101 198.20545959]
[95.49106598 213.12106323]
[105.14492035 225.34565735]
[103.32093048 240.44955444]
[91.60714722 249.57769775]
[90.01811218 264.49328613]
[88.42907715 279.40887451]
[86.84004211 294.32446289]
[85.25100708 309.24008179]
[96.85755157 319.53900146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[23 54]
[24 53]
[26 52]
[27 51]
[28 50]
[29 49]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[56 130]
[57 129]
[58 128]
[59 127]
[64 125]
[65 124]
[66 123]
[67 122]
[68 121]
[70 120]
[71 119]
[72 118]
[73 117]
[74 116]
[75 115]
[77 86]
[78 85]
[79 84]
[88 114]
[89 113]
[91 109]
[92 108]
[93 107]
[94 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
