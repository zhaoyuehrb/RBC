%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCCUUUCCCGGGGUCCUGCCCCGCGCGUGCGCACUGUGGUUCUGCGCUUGUCAUCAUGGCGACGCGGGGCCAUGUGCAGGACCCUAACGACAGGCGCCUCCGGCCCAUUUACGAUUAUCUUGACAAUGGUAAUAAUAAAAUGGCAAUUCAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[369.81268311 253.42515564]
[369.85046387 243.76739502]
[371.81152344 234.30278015]
[358.39965820 227.58551025]
[344.92208862 221.00106812]
[331.38009644 214.55009460]
[317.83813477 208.09910583]
[303.02044678 209.61077881]
[293.88922119 196.69058228]
[280.34725952 190.23960876]
[264.77975464 196.53916931]
[249.15480042 189.51580811]
[243.30601501 173.05613708]
[229.63923645 166.87396240]
[215.97245789 160.69178772]
[202.30567932 154.50962830]
[188.63890076 148.32745361]
[174.97212219 142.14529419]
[161.30534363 135.96311951]
[147.63858032 129.78096008]
[133.97180176 123.59878540]
[120.30501556 117.41661835]
[111.94181824 127.22566986]
[98.85172272 132.68756104]
[83.40770721 131.59400940]
[68.95874786 123.05117798]
[54.94973755 128.41285706]
[40.94072723 133.77453613]
[31.03361511 146.84286499]
[14.79852390 144.52903748]
[8.93672276 129.21331787]
[19.47833061 116.65120697]
[35.57904434 119.76553345]
[49.58805466 114.40384674]
[63.59706497 109.04216766]
[64.85075378 101.64768982]
[53.29681396 92.08178711]
[67.35813141 86.85874176]
[68.61181641 79.46426392]
[57.15296555 69.78466797]
[45.69411087 60.10506439]
[34.23525620 50.42546082]
[22.77640533 40.74586105]
[11.31755161 31.06625938]
[-0.14130200 21.38665771]
[-11.60015488 11.70705605]
[-23.05900764 2.02745461]
[-34.51786041 -7.65214682]
[-45.97671509 -17.33174896]
[-54.60107803 -20.50296211]
[-57.56388855 -27.31755829]
[-68.82926178 -37.22166443]
[-80.09463501 -47.12577057]
[-91.36001587 -57.02987671]
[-102.62538910 -66.93398285]
[-113.89076233 -76.83808899]
[-129.77859497 -82.75530243]
[-128.49081421 -99.66027069]
[-111.88999939 -103.10257721]
[-103.98665619 -88.10346222]
[-92.72128296 -78.19935608]
[-81.45590973 -68.29524994]
[-70.19052887 -58.39114761]
[-58.92515564 -48.48703766]
[-47.65978241 -38.58293152]
[-36.29711151 -28.79060173]
[-24.83826065 -19.11100006]
[-13.37940693 -9.43139839]
[-1.92055380 0.24820289]
[9.53829956 9.92780399]
[20.99715233 19.60740662]
[32.45600510 29.28700638]
[43.91485977 38.96660995]
[55.37371063 48.64620972]
[66.83256531 58.32580948]
[78.29141998 68.00540924]
[105.97341919 65.82492065]
[124.85047913 81.93593597]
[126.48719025 103.74983978]
[140.15396118 109.93200684]
[153.82073975 116.11417389]
[167.48751831 122.29634857]
[181.15429688 128.47851562]
[194.82107544 134.66067505]
[208.48785400 140.84284973]
[222.15463257 147.02502441]
[235.82141113 153.20718384]
[249.48817444 159.38935852]
[261.49127197 153.20883179]
[274.66781616 155.05999756]
[284.21917725 164.04164124]
[286.79824829 176.69763184]
[300.34020996 183.14860535]
[316.12652588 182.09837341]
[324.28912354 194.55714417]
[337.83108521 201.00811768]
[351.37304688 207.45910645]
[360.52011108 208.33529663]
[365.11691284 214.17364502]
[378.52880859 220.89091492]
[394.35876465 206.85731506]
[414.62756348 200.94979858]
[435.43414307 204.26727295]
[452.79022217 216.13684082]
[463.38473511 234.24981689]
[465.21551514 255.11077881]
[479.60412598 259.34970093]
[493.99270630 263.58859253]
[507.75079346 256.28427124]
[522.28247070 260.78811646]
[529.16125488 273.94934082]
[543.54986572 278.18826294]
[557.93841553 282.42715454]
[572.32702637 286.66607666]
[586.08508301 279.36175537]
[600.61682129 283.86557007]
[607.49554443 297.02679443]
[621.88415527 301.26571655]
[636.27276611 305.50463867]
[650.66137695 309.74356079]
[665.04992676 313.98245239]
[679.43853760 318.22137451]
[691.65246582 308.65057373]
[707.16046143 308.12045288]
[719.99945068 316.83483887]
[725.23254395 331.44287109]
[720.84747314 346.32745361]
[708.53045654 355.76516724]
[693.01763916 356.12704468]
[680.27392578 347.27389526]
[675.19964600 332.60995483]
[660.81103516 328.37106323]
[646.42242432 324.13214111]
[632.03387451 319.89321899]
[617.64526367 315.65432739]
[603.25665283 311.41540527]
[590.34118652 318.74520874]
[575.68872070 314.65130615]
[568.08813477 301.05465698]
[553.69952393 296.81576538]
[539.31091309 292.57684326]
[524.92236328 288.33792114]
[512.00683594 295.66772461]
[497.35440063 291.57385254]
[489.75378418 277.97720337]
[475.36520386 273.73828125]
[460.97662354 269.49935913]
[456.06042480 277.69415283]
[449.60610962 284.75210571]
[441.86972046 290.38864136]
[433.15908813 294.37564087]
[423.82150269 296.55068970]
[414.23001099 296.82373047]
[404.76843262 295.18069458]
[395.81597900 291.68432617]
[387.73208618 286.47164917]
[380.84204102 279.74865723]
[375.42370605 271.78225708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 97]
[6 96]
[7 95]
[9 93]
[10 92]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[26 35]
[27 34]
[28 33]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[106 147]
[107 146]
[108 145]
[111 142]
[112 141]
[113 140]
[114 139]
[117 136]
[118 135]
[119 134]
[120 133]
[121 132]
[122 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
