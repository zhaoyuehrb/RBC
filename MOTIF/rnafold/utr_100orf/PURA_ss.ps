%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUGAGGCGGCGGGCGGAGCGGCAGGCGGCGGCGGCGCGGCAGCGGAGCGCAGCAUCAUGGCGGACCGAGACAGCGGCAGCGAGCAGGGUGGUGCGGCGCUGGGUUCGGGCGGCUCCCUGGGGCACCCCGGCUCGGGCUCAGGCUCCGGCGGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[185.83505249 413.36853027]
[186.42765808 398.38024902]
[198.39500427 389.33688354]
[212.97682190 392.86029053]
[207.78506470 378.78741455]
[202.59330750 364.71453857]
[197.40155029 350.64166260]
[192.20979309 336.56881714]
[180.54559326 327.30621338]
[183.02819824 311.68099976]
[177.83644104 297.60812378]
[172.64468384 283.53524780]
[167.35166931 278.32125854]
[167.49211121 269.13479614]
[162.57765198 254.96269226]
[157.52430725 240.83953857]
[152.33255005 226.76666260]
[146.45652771 212.96548462]
[139.91038513 199.46926880]
[133.36425781 185.97303772]
[126.81811523 172.47682190]
[120.27197266 158.98059082]
[107.75605774 150.90588379]
[108.69515228 135.11256409]
[102.14901733 121.61634827]
[87.74295807 121.21261597]
[75.13758850 111.21656036]
[70.54273224 94.05218506]
[55.58897018 92.87529755]
[41.22427750 99.50599670]
[29.14330101 90.79398346]
[14.18954086 89.61709595]
[5.33619022 92.07249451]
[-1.04531562 88.26747131]
[-15.97308636 86.79721069]
[-28.12045479 96.54806519]
[-43.23839188 94.84436798]
[-52.45948410 83.20361328]
[-67.38725281 81.73336029]
[-82.31502533 80.26309967]
[-97.02097321 87.52031708]
[-110.50675964 78.18941498]
[-108.89936066 61.86923599]
[-93.85233307 55.34857559]
[-80.84477234 65.33533478]
[-65.91699982 66.80558777]
[-50.98922729 68.27584839]
[-39.67432022 58.65771484]
[-24.51449203 59.93611145]
[-14.50282955 71.86944580]
[0.42494154 73.33969879]
[15.36642742 74.66333771]
[30.32018661 75.84021759]
[43.61528778 69.12534332]
[56.76585770 77.92153931]
[71.71961975 79.09842682]
[57.10529709 75.71883392]
[47.61765289 64.10054779]
[47.22710800 49.10562897]
[56.09709930 37.00921631]
[70.51567841 32.87345505]
[84.44890594 38.42910004]
[92.06595612 51.35119629]
[90.17864990 66.23320007]
[94.25025177 51.79636765]
[98.32186127 37.35953903]
[102.39347076 22.92271233]
[106.46507263 8.48588371]
[110.53668213 -5.95094490]
[106.83580017 -21.33320999]
[117.73730469 -31.48242188]
[121.80891418 -45.91925049]
[115.92394257 -55.14422607]
[116.11328125 -65.86457825]
[122.07073975 -74.51306915]
[131.61111450 -78.34607697]
[136.24636841 -92.61192322]
[133.15225220 -108.12762451]
[144.44380188 -117.84101868]
[149.07905579 -132.10687256]
[153.71430969 -146.37271118]
[150.62019348 -161.88841248]
[161.91174316 -171.60182190]
[166.54699707 -185.86766052]
[158.10746765 -199.03231812]
[160.15573120 -214.53517151]
[171.72470093 -225.05625916]
[187.35183716 -225.62783813]
[199.65847778 -215.98002625]
[202.83383179 -200.66822815]
[195.37857056 -186.92219543]
[180.81285095 -181.23240662]
[176.17759705 -166.96656799]
[179.60325623 -152.47125244]
[167.98016357 -141.73745728]
[163.34490967 -127.47161102]
[158.70965576 -113.20576477]
[162.13531494 -98.71045685]
[150.51222229 -87.97666931]
[145.87696838 -73.71082306]
[151.31449890 -55.18640900]
[136.24574280 -41.84764481]
[132.17413330 -27.41081619]
[136.16624451 -13.06116962]
[124.97351074 -1.87933815]
[120.90190125 12.55749035]
[116.83029938 26.99431801]
[112.75868988 41.43114853]
[108.68708038 55.86797714]
[104.61547852 70.30480194]
[124.53246307 91.73490143]
[115.64524078 115.07020569]
[122.19137573 128.56643677]
[135.17552185 137.60649109]
[133.76820374 152.43444824]
[140.31434631 165.93067932]
[146.86047363 179.42689514]
[153.40661621 192.92312622]
[159.95275879 206.41935730]
[167.51805115 193.46688843]
[182.33119202 191.10665894]
[193.54719543 201.06665039]
[192.95458984 216.05493164]
[180.98722839 225.09829712]
[166.40542603 221.57490540]
[171.59718323 235.64778137]
[177.53356934 242.65991211]
[176.74975586 250.04823303]
[181.66419983 264.22033691]
[186.71754456 278.34350586]
[191.90930176 292.41635132]
[197.10105896 306.48922729]
[209.13661194 316.75842285]
[206.28266907 331.37704468]
[211.47442627 345.44992065]
[216.66616821 359.52279663]
[221.85792542 373.59567261]
[227.04968262 387.66851807]
[232.92570496 401.46969604]
[239.47184753 414.96591187]
[246.01799011 428.46215820]
[252.56413269 441.95837402]
[267.22506714 447.22088623]
[273.67153931 461.00125122]
[268.56417847 474.94580078]
[275.11032104 488.44201660]
[288.98193359 497.18902588]
[288.07235718 513.56292725]
[273.31723022 520.71966553]
[259.89541626 511.29699707]
[261.61407471 494.98815918]
[255.06794739 481.49194336]
[240.95512390 476.86984253]
[234.12414551 463.27600098]
[239.06790161 448.50451660]
[232.52175903 435.00830078]
[225.97563171 421.51205444]
[219.42948914 408.01583862]
[211.86419678 420.96829224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[8 134]
[10 132]
[11 131]
[12 130]
[14 129]
[15 128]
[16 126]
[17 125]
[18 119]
[19 118]
[20 117]
[21 116]
[22 115]
[24 113]
[25 112]
[28 56]
[29 55]
[31 53]
[32 52]
[34 51]
[35 50]
[38 47]
[39 46]
[40 45]
[64 110]
[65 109]
[66 108]
[67 107]
[68 106]
[69 105]
[71 103]
[72 102]
[76 100]
[77 99]
[79 97]
[80 96]
[81 95]
[83 93]
[84 92]
[139 158]
[140 157]
[141 156]
[142 155]
[145 152]
[146 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
