%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:35:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGAAUGGGAAAACCACACCAUUCUGGUGGAAUUUUUUCUGAAGGGACUUUCUGGUCACCCAAGACUUGAGUUACUCUUUUUUGUGCUCAUCUUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[99.15597534 207.08779907]
[98.22343445 192.11680603]
[97.29088593 177.14582825]
[96.35834503 162.17485046]
[95.42579651 147.20385742]
[80.82896423 145.89830017]
[66.67459869 139.99230957]
[56.48830795 151.00318909]
[46.30201340 162.01406860]
[45.48633575 178.03636169]
[32.36755753 187.27093506]
[17.00928688 182.63380432]
[11.19307232 167.68217468]
[19.38061714 153.88566589]
[35.29113770 151.82777405]
[45.47742844 140.81689453]
[55.66372299 129.80601501]
[49.12545776 116.30597687]
[34.17078781 117.47122955]
[19.21611595 118.63648987]
[4.26144505 119.80175018]
[-10.69322586 120.96700287]
[-26.01478958 128.22552490]
[-37.23106766 115.51208496]
[-28.11945343 101.21471405]
[-11.85848331 106.01233673]
[3.09618735 104.84707642]
[18.05085754 103.68181610]
[33.00552750 102.51656342]
[47.96019745 101.35130310]
[49.01806259 92.41810608]
[51.58228683 83.88868713]
[55.54581070 76.01228333]
[60.76119232 69.01343536]
[67.04589844 63.08558655]
[74.18856049 58.38579559]
[81.95601654 55.03065109]
[90.10086060 53.09349823]
[98.36929321 52.60307312]
[100.23077393 37.71902466]
[102.09225464 22.83497620]
[92.59548187 13.13517284]
[90.50675964 -0.07989291]
[96.37504578 -11.88524151]
[107.82601929 -18.01363754]
[110.14949036 -32.83259583]
[112.24221802 -47.68589401]
[114.10369873 -62.56994247]
[115.96517944 -77.45398712]
[117.82666016 -92.33803558]
[110.95785522 -107.22936249]
[120.63943481 -120.46564484]
[136.91181946 -118.43052673]
[143.03536987 -103.21757507]
[132.71070862 -90.47655487]
[130.84922791 -75.59250641]
[128.98774719 -60.70846176]
[127.12626648 -45.82441330]
[129.46078491 -38.67070770]
[124.96844482 -30.50912094]
[122.64497375 -15.69016552]
[133.11396790 -2.63108134]
[130.94110107 14.30282974]
[116.97630310 24.69645882]
[115.11482239 39.58050537]
[113.25334167 54.46455383]
[132.24375916 65.22260284]
[144.40486145 83.34660339]
[147.16088867 104.99784088]
[161.63966370 108.91767120]
[176.11843872 112.83750153]
[190.59721375 116.75732422]
[205.07598877 120.67715454]
[214.35998535 119.90243530]
[219.94044495 124.95059204]
[234.29031372 129.31881714]
[246.58985901 119.85832214]
[262.10202026 119.46776581]
[274.86206055 128.29733276]
[279.96347046 142.95185852]
[275.44467163 157.79638672]
[263.04321289 167.12289429]
[247.52774048 167.34515381]
[234.86424255 158.37768555]
[229.92208862 143.66868591]
[215.57221985 139.30046082]
[201.15615845 135.15592957]
[186.67738342 131.23609924]
[172.19860840 127.31627655]
[157.71983337 123.39644623]
[143.24105835 119.47661591]
[135.27464294 131.69902039]
[123.96993256 140.92150879]
[110.39678192 146.27131653]
[111.32933044 161.24229431]
[112.26187134 176.21328735]
[113.19441986 191.18426514]
[114.12696075 206.15525818]
[121.14631653 221.58784485]
[108.25998688 232.60505676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[4 95]
[5 94]
[7 17]
[8 16]
[9 15]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[39 66]
[40 65]
[41 64]
[45 61]
[46 60]
[47 58]
[48 57]
[49 56]
[50 55]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
