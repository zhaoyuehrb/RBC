%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:58:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGUCACUCUCUGUUCUUGCUAUCUAAUGGCCGCUGCUUCCGCCAUGGCUGAGGCUUCCUCUGAGACAACCUCGGAGGAAGGCCAGAGCAUCCAGGAGCCCAAAGAGGCCAACUCCACGAAGGCCC\
) } def
/len { sequence length } bind def

/coor [
[177.93222046 469.95092773]
[162.93377686 470.16644287]
[149.48602295 463.52130127]
[140.54589844 451.47662354]
[138.07919312 436.68081665]
[142.62826538 422.38726807]
[153.19285583 411.73883057]
[167.45002747 407.07690430]
[182.26484680 409.42660522]
[194.38095093 418.27261353]
[190.41052246 403.80761719]
[186.44009399 389.34265137]
[170.05187988 381.35635376]
[164.51071167 363.65631104]
[173.72848511 347.19815063]
[169.05850220 332.94363403]
[164.38851929 318.68911743]
[159.71853638 304.43460083]
[155.04855347 290.18008423]
[150.37857056 275.92556763]
[145.70858765 261.67105103]
[131.10397339 258.74343872]
[119.85079193 248.83274841]
[115.03742981 234.52548218]
[118.05148315 219.63212585]
[128.18164062 208.17231750]
[123.51165771 193.91780090]
[112.81724548 188.12765503]
[108.84761810 176.20782471]
[114.27069092 164.43075562]
[109.94920349 150.06675720]
[105.62771606 135.70274353]
[101.30622864 121.33872986]
[96.98474121 106.97472382]
[91.75326538 109.61802673]
[84.98137665 109.44245148]
[77.95858765 105.87592316]
[72.14048767 98.87905884]
[61.09161758 88.73398590]
[50.04274368 78.58892059]
[38.99387360 68.44384766]
[27.94500351 58.29877853]
[12.54688454 54.66442490]
[8.40511513 40.35725784]
[-2.64375615 30.21218872]
[-18.75950050 27.17660141]
[-23.93241692 11.61469364]
[-12.84105015 -0.46477804]
[3.10475111 3.36451197]
[7.50131369 19.16331863]
[18.55018425 29.30838776]
[33.15801620 32.21709824]
[38.09007263 47.24990463]
[49.13894272 57.39497757]
[60.18781662 67.54004669]
[71.23668671 77.68511963]
[82.28556061 87.83018494]
[96.70111847 83.68392181]
[100.67154694 69.21894073]
[104.64197540 54.75395584]
[108.61240387 40.28897476]
[112.58283234 25.82399368]
[116.55325317 11.35901070]
[120.52368164 -3.10597134]
[124.49411011 -17.57095337]
[128.46453857 -32.03593445]
[132.43496704 -46.50091934]
[125.77970123 -61.09841919]
[133.17118835 -75.33729553]
[148.93930054 -78.29469299]
[160.98808289 -67.70195770]
[160.07476807 -51.68492508]
[146.89994812 -42.53049088]
[142.92951965 -28.06550980]
[138.95909119 -13.60052681]
[134.98866272 0.86445534]
[131.01823425 15.32943726]
[127.04781342 29.79442024]
[123.07738495 44.25940323]
[119.10695648 58.72438431]
[115.13652802 73.18936920]
[111.16610718 87.65435028]
[111.34874725 102.65323639]
[115.67023468 117.01724243]
[119.99172211 131.38125610]
[124.31320953 145.74526978]
[128.63468933 160.10926819]
[142.32875061 172.34811401]
[137.76617432 189.24781799]
[142.43615723 203.50233459]
[157.38351440 206.74638367]
[168.62596130 216.96911621]
[173.21156311 231.35099792]
[170.00421143 245.99916077]
[159.96310425 257.00106812]
[164.63308716 271.25558472]
[169.30307007 285.51010132]
[173.97305298 299.76461792]
[178.64303589 314.01913452]
[183.31301880 328.27365112]
[187.98301697 342.52816772]
[199.54667664 345.77770996]
[207.98518372 354.15557861]
[211.25111389 365.46389771]
[208.63272095 376.81582642]
[200.90507507 385.37222290]
[204.87550354 399.83718872]
[208.84593201 414.30218506]
[214.71250916 428.10736084]
[222.37011719 441.00546265]
[230.02774048 453.90356445]
[237.68536377 466.80166626]
[252.96633911 465.93551636]
[266.89468384 472.28054810]
[276.26977539 484.37875366]
[278.93728638 499.45001221]
[274.28421021 514.03106689]
[263.37985229 524.77136230]
[248.72988892 529.20275879]
[233.70080566 526.30700684]
[221.74617004 516.74951172]
[215.61308289 502.72653198]
[216.71087646 487.46044922]
[224.78727722 474.45925903]
[217.12965393 461.56118774]
[209.47203064 448.66308594]
[201.81440735 435.76498413]
[199.77383423 450.62554932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 108]
[11 107]
[12 106]
[15 101]
[16 100]
[17 99]
[18 98]
[19 97]
[20 96]
[21 95]
[26 90]
[27 89]
[30 87]
[31 86]
[32 85]
[33 84]
[34 83]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[44 51]
[45 50]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[109 127]
[110 126]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
