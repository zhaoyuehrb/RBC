%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:44:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUCAGGUCUACCCCAGAGAGGUCCUAGGGCUGGUGGACAUGGCCGCCCUGGAGAAUGGGGAGCUGGGGCCCCUUCUCUCCCCUGGCACCCUGCGGGGUUUGGAGGAUGAAUGCGUCACAGAUGUUAAGGCUCAGACCC\
) } def
/len { sequence length } bind def

/coor [
[109.62586975 215.86273193]
[98.09156799 226.10789490]
[82.84582520 228.46818542]
[68.75350952 222.19042969]
[60.31142807 209.27784729]
[60.21341324 193.85079956]
[68.49074554 180.83198547]
[82.50215149 174.37568665]
[84.48746490 159.50764465]
[86.47277069 144.63960266]
[88.45807648 129.77157593]
[90.44338989 114.90353394]
[86.82887268 100.34553528]
[78.11982727 88.13272858]
[69.41078186 75.91992950]
[60.70174026 63.70712280]
[51.99269867 51.49431992]
[36.65856934 48.75528717]
[28.00033760 36.24570084]
[30.70608902 21.64383698]
[21.99704552 9.43103313]
[14.40456676 4.20817327]
[13.23395634 -3.14966416]
[4.79721689 -15.55214119]
[-3.63952231 -27.95461845]
[-17.79886436 -35.01319885]
[-18.55986404 -49.88835144]
[-26.99660301 -62.29082870]
[-35.43334198 -74.69330597]
[-43.87008286 -87.09577942]
[-52.30681992 -99.49826050]
[-60.74356079 -111.90073395]
[-74.00897980 -112.77297211]
[-84.29706573 -120.79541016]
[-88.22393036 -132.97648621]
[-102.51014709 -137.54856873]
[-116.79636383 -142.12066650]
[-131.08258057 -146.69274902]
[-145.36880493 -151.26483154]
[-159.30209351 -143.80569458]
[-174.40441895 -148.46353149]
[-181.71583557 -162.47491455]
[-176.89859009 -177.52714539]
[-162.81068420 -184.69000244]
[-147.81022644 -179.71389771]
[-140.79670715 -165.55105591]
[-126.51049805 -160.97897339]
[-112.22427368 -156.40687561]
[-97.93805695 -151.83479309]
[-83.65184021 -147.26271057]
[-81.86602020 -149.26971436]
[-79.84457397 -151.03916931]
[-77.61886597 -152.54365540]
[-80.25989532 -167.30932617]
[-82.90092468 -182.07499695]
[-85.54195404 -196.84065247]
[-88.18297577 -211.60632324]
[-90.82400513 -226.37199402]
[-95.44895935 -234.34280396]
[-93.35635376 -241.49327087]
[-95.67008209 -256.31375122]
[-97.98381805 -271.13421631]
[-100.29755402 -285.95471191]
[-114.16863251 -292.90975952]
[-121.27257538 -306.70520020]
[-118.87776947 -322.03634644]
[-107.90507507 -333.00811768]
[-92.57370758 -335.40161133]
[-78.77889252 -328.29647827]
[-71.82501984 -314.42480469]
[-74.38599396 -299.12051392]
[-85.47707367 -288.26843262]
[-83.16333771 -273.44796753]
[-80.84960175 -258.62747192]
[-78.53587341 -243.80700684]
[-76.05833435 -229.01301575]
[-73.41731262 -214.24736023]
[-70.77628326 -199.48168945]
[-68.13525391 -184.71601868]
[-65.49422455 -169.95034790]
[-62.85319901 -155.18467712]
[-46.02925873 -142.12739563]
[-48.34108353 -120.33747101]
[-39.90434647 -107.93499756]
[-31.46760559 -95.53252411]
[-23.03086662 -83.13004303]
[-14.59412670 -70.72756958]
[-6.15738773 -58.32509232]
[7.39850330 -52.15361786]
[8.76295471 -36.39135742]
[17.19969368 -23.98888016]
[25.63643265 -11.58640385]
[34.20985031 0.72198963]
[42.91889191 12.93479252]
[57.60559464 15.13396835]
[66.61177826 27.39542389]
[64.20549774 42.78527832]
[72.91454315 54.99808121]
[81.62358856 67.21088409]
[90.33263397 79.42369080]
[99.04167175 91.63648987]
[103.79920959 87.37273407]
[111.54747009 86.25140381]
[120.30146027 89.79332733]
[127.44232941 98.36510468]
[139.84480286 106.80184937]
[152.24728394 115.23858643]
[163.25532532 107.77719116]
[176.11882019 104.53256989]
[189.28500366 105.87378693]
[201.17227173 111.61771393]
[210.36013794 121.05365753]
[215.75904846 133.03121948]
[216.73951721 146.10054016]
[213.20542908 158.68780518]
[225.22257996 167.66488647]
[237.23973083 176.64196777]
[249.25688171 185.61904907]
[261.27404785 194.59613037]
[277.58203125 199.23143005]
[277.64236450 216.18527222]
[261.36779785 220.93655396]
[252.29695129 206.61329651]
[240.27980042 197.63619995]
[228.26264954 188.65911865]
[216.24549866 179.68203735]
[204.22833252 170.70495605]
[189.54766846 178.93182373]
[172.69512939 179.95658875]
[157.02400208 173.52738953]
[145.67335510 160.88032532]
[140.93927002 144.50205994]
[143.81054688 127.64105988]
[131.40806580 119.20432281]
[119.00559235 110.76758575]
[105.31142426 116.88883972]
[103.32611847 131.75688171]
[101.34080505 146.62490845]
[99.35549927 161.49295044]
[97.37019348 176.36099243]
[109.19671631 186.26739502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 140]
[9 139]
[10 138]
[11 137]
[12 136]
[13 101]
[14 100]
[15 99]
[16 98]
[17 97]
[20 94]
[21 93]
[23 92]
[24 91]
[25 90]
[27 88]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[53 81]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[60 75]
[61 74]
[62 73]
[63 72]
[105 135]
[106 134]
[107 133]
[115 127]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
