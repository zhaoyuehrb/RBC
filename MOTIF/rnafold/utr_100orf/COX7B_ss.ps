%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUUCAGCUCACUUCAAGGGUACCUGAAGCGAAUUGGCACCAAAGCAGCAGCUGUAUUGCCGCAGUUCUAGCUUCACCUUCACGAUGUUUCCCUUGGUCAAAAGCGCACUAAAUCGUCUCCAAGUUCGAAGCAUUCAGCAAACAAUGGCAAGGCAGAGCCACCAGAAACGUACACCUGAUUUUC\
) } def
/len { sequence length } bind def

/coor [
[139.63243103 353.90841675]
[132.13226318 366.97915649]
[121.81951141 377.96752930]
[109.25032043 386.28088379]
[95.10253143 391.47094727]
[80.13911438 393.25781250]
[65.16702271 391.54510498]
[50.99369812 386.42517090]
[38.38348007 378.17416382]
[28.01642036 367.23706055]
[20.45160294 354.20361328]
[16.09699249 339.77676392]
[15.18742371 324.73449707]
[17.77194977 309.88806152]
[23.71119118 296.03808594]
[32.68485260 283.93145752]
[44.20899200 274.22109985]
[57.66212845 267.43069458]
[72.31875610 263.92639160]
[87.38845825 263.89724731]
[90.81211853 249.29316711]
[94.23577881 234.68911743]
[92.69889832 227.44689941]
[97.83771515 219.87397766]
[101.50111389 205.32820129]
[105.04476166 190.75279236]
[108.46842194 176.14872742]
[111.89208221 161.54466248]
[115.31575012 146.94061279]
[73.69301605 133.47752380]
[64.32707214 97.26031494]
[49.94419098 93.00205231]
[35.56130981 88.74379730]
[21.17843246 84.48554230]
[6.79555225 80.22727966]
[-7.58732796 75.96902466]
[-22.03829956 71.94789886]
[-36.55345154 68.16500092]
[-51.06860733 64.38210297]
[-65.58376312 60.59920883]
[-80.15917206 57.05555725]
[-94.79089355 53.75211334]
[-109.42261505 50.44867325]
[-124.05433655 47.14522934]
[-138.68605042 43.84178925]
[-149.13835144 55.00856018]
[-163.68066406 59.41514587]
[-178.37843323 55.97394180]
[-189.30720520 45.70662308]
[-193.60047913 31.44361305]
[-208.23219299 28.14017105]
[-222.86392212 24.83672905]
[-238.35386658 30.22128868]
[-250.58340454 19.29560852]
[-246.97183228 3.29909182]
[-231.23442078 -1.31241691]
[-219.56047058 10.20500755]
[-204.92875671 13.50845051]
[-190.29702759 16.81189346]
[-180.29219055 5.77700377]
[-166.01222229 1.20113063]
[-151.26167297 4.40855074]
[-140.02326965 14.63571930]
[-135.38261414 29.21006584]
[-120.75089264 32.51350784]
[-106.11917114 35.81695175]
[-91.48744965 39.12039566]
[-76.85572815 42.42383575]
[-72.39829254 40.66642761]
[-66.78869629 41.70253754]
[-61.80086136 46.08405304]
[-47.28570938 49.86695099]
[-32.77055740 53.64984894]
[-18.25540161 57.43274689]
[-13.74258041 55.82289505]
[-8.17009068 57.04294205]
[-3.32906914 61.58613968]
[11.05381107 65.84439850]
[25.43669128 70.10266113]
[39.81956863 74.36091614]
[54.20244980 78.61917877]
[68.58532715 82.87743378]
[73.78691864 73.21464539]
[81.99767303 65.20355988]
[92.67053986 59.78521729]
[104.96515656 57.71348953]
[117.81314850 59.46453857]
[130.01098633 65.16925049]
[140.33226013 74.57685089]
[147.64894104 87.05503082]
[156.82107544 75.18609619]
[165.99322510 63.31715393]
[175.16537476 51.44821548]
[184.33752441 39.57927704]
[193.50965881 27.71033478]
[202.68180847 15.84139633]
[211.85395813 3.97245622]
[213.63121033 -16.09630966]
[231.79893494 -22.68720245]
[240.57574463 -34.85139465]
[249.35255432 -47.01558685]
[258.12936401 -59.17978287]
[266.90618896 -71.34397125]
[262.63531494 -80.09809113]
[261.86059570 -89.74943542]
[264.64675903 -98.96174622]
[270.56857300 -106.47501373]
[278.77490234 -111.27782440]
[288.11108398 -112.74340057]
[297.28112793 -110.71116638]
[306.83868408 -122.27201080]
[316.39624023 -133.83285522]
[312.40206909 -148.82705688]
[318.01550293 -163.29319763]
[331.07803345 -171.66873169]
[346.56689453 -170.73310852]
[358.52624512 -160.84608459]
[362.35751343 -145.80943298]
[356.58749390 -131.40504456]
[343.43484497 -123.17169952]
[327.95706177 -124.27529907]
[318.39950562 -112.71445465]
[308.84194946 -101.15361023]
[312.49954224 -81.05802155]
[299.98895264 -64.54288483]
[279.07037354 -62.56716537]
[270.29354858 -50.40296936]
[261.51675415 -38.23877716]
[252.73994446 -26.07458496]
[243.96313477 -13.91039085]
[246.49787903 -3.99002838]
[243.07325745 5.89225721]
[234.59478760 12.38446140]
[223.72290039 13.14460278]
[214.55075073 25.01354218]
[205.37860107 36.88248062]
[196.20646667 48.75142288]
[187.03431702 60.62036133]
[177.86216736 72.48930359]
[168.69001770 84.35823822]
[159.51786804 96.22718048]
[160.92808533 103.59340668]
[174.66766357 97.57479858]
[184.67993164 86.40543365]
[199.60585022 84.91651154]
[211.62724304 93.88792419]
[214.44731140 108.62044525]
[206.58889771 121.39719391]
[192.16824341 125.52571869]
[178.73953247 118.84422302]
[163.74848938 118.32586670]
[165.15870667 125.69209290]
[178.06605530 133.33409119]
[190.97341919 140.97607422]
[203.88078308 148.61807251]
[218.07073975 142.33914185]
[233.23419189 145.63291931]
[243.54051208 157.23291016]
[245.02668762 172.67864990]
[237.12126160 186.03094482]
[222.86402893 192.15557861]
[207.73719788 188.69747925]
[197.55732727 176.98638916]
[196.23878479 161.52542114]
[183.33143616 153.88343811]
[170.42407227 146.24143982]
[157.51670837 138.59945679]
[150.61747742 141.54066467]
[158.28099060 154.43525696]
[169.30558777 164.60670471]
[166.75134277 179.38761902]
[152.95263672 185.26942444]
[140.52040100 176.87660217]
[140.81604004 161.88072205]
[136.81903076 147.42306519]
[129.91979980 150.36427307]
[126.49614716 164.96833801]
[123.07247925 179.57238770]
[119.64881897 194.17645264]
[120.73721313 203.26336670]
[116.04688263 208.99159241]
[112.38349152 223.53736877]
[108.83983612 238.11277771]
[105.41617584 252.71684265]
[101.99251556 267.32089233]
[115.47912598 274.04458618]
[127.05122375 283.69772339]
[136.08474731 295.75973511]
[142.09252930 309.58013916]
[144.75056458 324.41360474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 185]
[21 184]
[22 183]
[24 182]
[25 181]
[26 179]
[27 178]
[28 177]
[29 176]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 74]
[38 73]
[39 72]
[40 71]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[50 59]
[51 58]
[52 57]
[90 141]
[91 140]
[92 139]
[93 138]
[94 137]
[95 136]
[96 135]
[97 134]
[99 130]
[100 129]
[101 128]
[102 127]
[103 126]
[110 123]
[111 122]
[112 121]
[152 167]
[153 166]
[154 165]
[155 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
