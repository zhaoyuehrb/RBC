%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGAGGCCCGCGCGGCGGCACCGCGAAGGGAGGAGUGGCAACAUGGCGUCUUCGGGAGCUGGUGACCCUCUGGAUUCUAAGCGUGGAGAGGCCCCGUUCGCUCAGCGUAUCGACCCGACUCGGGAGAAGCUGACACCCGAGC\
) } def
/len { sequence length } bind def

/coor [
[109.79244995 209.00431824]
[101.87844086 221.74670410]
[89.58379364 230.33982849]
[74.89786530 233.39326477]
[60.19692230 230.41296387]
[47.85966110 221.88113403]
[39.88232803 209.17829895]
[37.55569839 194.35983276]
[41.25737000 179.82113647]
[29.61724281 189.28196716]
[17.97711563 198.74281311]
[11.85144615 216.07183838]
[-5.53002167 218.24975586]
[-16.96245193 227.96054077]
[-28.39488411 237.67134094]
[-39.82731247 247.38212585]
[-51.25974655 257.09292603]
[-53.98966599 272.90200806]
[-68.12057495 280.49786377]
[-82.81244659 274.05358887]
[-86.79492950 258.51269531]
[-77.01301575 245.79682922]
[-60.97053909 245.66049194]
[-49.53810883 235.94970703]
[-38.10567856 226.23890686]
[-26.67324638 216.52810669]
[-15.24081612 206.81732178]
[-13.92893887 194.74548340]
[-4.41905689 186.56430054]
[8.51627827 187.10267639]
[20.15640450 177.64184570]
[31.79653168 168.18101501]
[34.89873123 159.20320129]
[44.59535217 154.66946411]
[53.41213226 142.53419495]
[54.80944061 135.21989441]
[62.55371094 130.23432922]
[71.63132477 118.29293823]
[80.70893860 106.35154724]
[90.86843872 86.69930267]
[90.21865845 71.71337891]
[89.40657043 56.73538208]
[88.43228149 41.76705551]
[87.45799255 26.79873085]
[75.86331940 16.39674568]
[75.08847809 1.20285630]
[85.07663727 -9.78678989]
[84.10234070 -24.75511551]
[83.12805176 -39.72343826]
[74.51073456 -52.99191284]
[81.40502167 -66.19487000]
[80.43073273 -81.16319275]
[79.45644379 -96.13151550]
[78.48215485 -111.09984589]
[77.50785828 -126.06816864]
[76.53356934 -141.03649902]
[67.88925171 -147.79080200]
[64.49903107 -157.99186707]
[67.26529694 -168.15115356]
[75.02747345 -174.93472290]
[74.70250702 -189.93119812]
[74.37754059 -204.92768860]
[73.89013672 -219.91975403]
[73.24035645 -234.90568542]
[60.47017670 -243.52128601]
[55.28241348 -257.83703613]
[59.46950531 -272.29153442]
[71.22439575 -281.39978027]
[70.57461548 -296.38571167]
[61.31588364 -309.92114258]
[68.65154266 -324.58810425]
[85.03530121 -325.29849243]
[93.61294556 -311.32153320]
[85.56053925 -297.03549194]
[86.21031952 -282.04956055]
[98.70947266 -273.99295044]
[104.13197327 -259.95510864]
[100.20279694 -245.24406433]
[88.22627258 -235.55546570]
[88.87606049 -220.56954956]
[92.33379364 -213.97441101]
[89.37402344 -205.25265503]
[89.69898987 -190.25616455]
[90.02395630 -175.25968933]
[101.27397156 -159.58641052]
[91.50189209 -142.01078796]
[92.47618866 -127.04245758]
[93.45047760 -112.07413483]
[94.42476654 -97.10580444]
[95.39905548 -82.13748169]
[96.37335205 -67.16915894]
[104.92098236 -54.97132111]
[98.09637451 -40.69773102]
[99.07067108 -25.72940445]
[100.04496002 -10.76107979]
[111.37343597 -1.15893769]
[112.57473755 14.00719357]
[102.42631531 25.82444000]
[103.40060425 40.79276657]
[104.37490082 55.76108932]
[107.97470093 62.27975845]
[105.20457458 71.06359863]
[105.85435486 86.04952240]
[114.00121307 98.64431000]
[127.40299988 105.38167572]
[140.80479431 112.11904144]
[154.20657349 118.85640717]
[167.60836792 125.59377289]
[177.80934143 121.55828857]
[188.32292175 123.79879761]
[195.68380737 131.32743835]
[197.60437012 141.45561218]
[210.70172119 148.76719666]
[223.35038757 146.00601196]
[234.12872314 152.42453003]
[237.50288391 164.08921814]
[250.43875122 171.68284607]
[263.37463379 179.27645874]
[276.31051636 186.87008667]
[293.03094482 189.67419434]
[294.96511841 206.51745605]
[279.31552124 213.03869629]
[268.71688843 199.80596924]
[255.78102112 192.21234131]
[242.84513855 184.61871338]
[229.90925598 177.02510071]
[212.41262817 177.87747192]
[203.39013672 161.86454773]
[190.29278564 154.55296326]
[171.08103943 156.32041931]
[160.87100220 138.99555969]
[147.46920776 132.25819397]
[134.06742859 125.52082825]
[120.66564178 118.78346252]
[107.26384735 112.04609680]
[92.65032959 115.42915344]
[83.57272339 127.37055206]
[74.49510956 139.31195068]
[65.54738617 151.35098267]
[56.73060608 163.48623657]
[71.04499817 159.00314331]
[85.96779633 160.52307129]
[99.08439636 167.80007935]
[108.27246094 179.65669250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 32]
[10 31]
[11 30]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[34 140]
[35 139]
[37 138]
[38 137]
[39 136]
[40 103]
[41 102]
[42 100]
[43 99]
[44 98]
[47 95]
[48 94]
[49 93]
[51 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[60 84]
[61 83]
[62 82]
[63 80]
[64 79]
[68 75]
[69 74]
[104 135]
[105 134]
[106 133]
[107 132]
[108 131]
[112 129]
[113 128]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
