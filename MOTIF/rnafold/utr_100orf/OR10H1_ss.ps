%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAAUCCAGGUAUGGGGAAGGCUGAGAACUUUUCUUCAUGCAGUAACUGACAUCUCCCUGUCACAUCUCACCCCAGGCACAGCCUCCAUGCAGAGAGCCAAUCACUCCACAGUGACCCAAUUCAUCCUCGUCGGCUUCUCUGUCUUCCCCCACCUCCAGCUGAUGCUCUUCCUGCUGUUCCUGCUGA\
) } def
/len { sequence length } bind def

/coor [
[158.75395203 399.04574585]
[158.25799561 384.05395508]
[157.76203918 369.06216431]
[157.26609802 354.07037354]
[149.84988403 345.08715820]
[145.97750854 334.81506348]
[145.67454529 324.51129150]
[148.55577087 315.31127930]
[153.90551758 308.10452271]
[160.79243469 303.44860840]
[155.22447205 289.52029419]
[149.65652466 275.59197998]
[144.08856201 261.66369629]
[133.08946228 256.60214233]
[128.34228516 245.02906799]
[132.90103149 232.95083618]
[127.56412506 218.93235779]
[122.22721863 204.91389465]
[116.89031219 190.89543152]
[111.55340576 176.87696838]
[106.21649170 162.85848999]
[100.87958527 148.84002686]
[86.86112213 143.50312805]
[73.55278015 150.42323303]
[60.30210114 157.45314026]
[47.10999680 164.59236145]
[33.91788864 171.73156738]
[20.78525543 178.97959900]
[7.71299171 186.33595276]
[-5.35927200 193.69230652]
[-16.19755936 206.72947693]
[-31.72557068 199.92379761]
[-29.48444557 183.11862183]
[-12.71562481 180.62004089]
[0.35663891 173.26368713]
[13.42890263 165.90733337]
[17.72398376 159.87619019]
[26.77867889 158.53945923]
[39.97078323 151.40025330]
[53.16289139 144.26103210]
[57.55710220 138.30174255]
[66.63265991 137.11489868]
[79.94100189 130.19477844]
[79.38346863 122.71553040]
[64.42497253 123.83059692]
[49.46646118 124.94542694]
[48.35186005 109.98689270]
[63.30991364 108.87209320]
[78.26840973 107.75703430]
[77.71087646 100.27778625]
[63.52362061 95.40729523]
[49.33636093 90.53680420]
[35.14910126 85.66630554]
[20.96184349 80.79581451]
[6.87527561 87.96130371]
[-8.12611294 82.98798370]
[-15.14226341 68.82644653]
[-10.01061916 53.87847519]
[4.22430658 47.01243973]
[19.11718559 52.30183792]
[25.83233643 66.60855865]
[40.01959610 71.47904968]
[54.20685196 76.34954071]
[68.39411163 81.22003174]
[82.58136749 86.09052277]
[87.61518860 80.53079224]
[76.49571991 70.46315002]
[65.37625122 60.39551163]
[54.25677872 50.32786942]
[40.57053757 44.18891144]
[42.17994308 29.27549934]
[56.86080933 26.19781876]
[64.32441711 39.20840073]
[75.44389343 49.27603912]
[86.56336212 59.34368134]
[97.68283081 69.41132355]
[102.71665192 63.85158539]
[96.46492004 50.21648788]
[90.21319580 36.58139038]
[83.96146393 22.94629097]
[71.86383820 11.06842136]
[79.92856598 -3.84454560]
[96.49126434 -0.22331579]
[97.59656525 16.69456291]
[103.84828949 30.32966232]
[110.10002136 43.96475983]
[116.35174561 57.59985733]
[123.73899841 58.89543533]
[126.33038330 44.12097168]
[141.10479736 46.71257782]
[138.51350403 61.48658752]
[145.90075684 62.78216171]
[156.41931152 52.08823395]
[166.93785095 41.39431000]
[177.45640564 30.70038223]
[187.97496033 20.00645447]
[198.49351501 9.31252861]
[209.01206970 -1.38139856]
[219.44184875 -12.16191959]
[229.78215027 -23.02829742]
[240.12245178 -33.89467621]
[241.20274353 -41.47574615]
[245.52180481 -46.86211777]
[251.29176331 -49.00365067]
[258.64813232 -62.07591629]
[266.00448608 -75.14817810]
[273.36083984 -88.22044373]
[280.71719360 -101.29270935]
[279.99545288 -117.67596436]
[293.96649170 -126.26327515]
[308.25811768 -118.22074890]
[308.16827393 -101.82184601]
[293.78942871 -93.93635559]
[286.43307495 -80.86408997]
[279.07675171 -67.79182434]
[271.72039795 -54.71956253]
[264.36404419 -41.64730072]
[277.30404663 -49.23384857]
[291.98013306 -52.33427811]
[306.88296509 -50.62973785]
[320.47994995 -44.29552841]
[331.37274170 -33.98305893]
[338.44113159 -20.75287247]
[340.95822144 -5.96556759]
[338.66510010 8.85811806]
[331.79763794 22.19370651]
[321.06207275 32.66976166]
[307.56246948 39.20891571]
[292.68710327 41.13867569]
[277.96582031 38.26058960]
[264.91250610 30.87063980]
[254.86962891 19.72881126]
[248.86994934 5.98093843]
[247.53053284 -8.95913887]
[250.98883057 -23.55437469]
[240.64852905 -12.68799591]
[230.30822754 -1.82161820]
[227.97061157 5.20389652]
[219.70599365 9.13715363]
[209.18743896 19.83107948]
[198.66888428 30.52500725]
[188.15032959 41.21893311]
[177.63179016 51.91286087]
[167.11323547 62.60678864]
[156.59468079 73.30071259]
[114.89805603 143.50312805]
[120.23496246 157.52159119]
[125.57186890 171.54005432]
[130.90878296 185.55851746]
[136.24568176 199.57699585]
[141.58259583 213.59545898]
[146.91949463 227.61392212]
[161.46217346 238.89605713]
[158.01687622 256.09573364]
[163.58482361 270.02404785]
[169.15278625 283.95233154]
[174.72074890 297.88064575]
[200.50944519 303.11462402]
[211.82084656 333.30105591]
[221.42037964 344.82708740]
[231.01989746 356.35308838]
[240.61943054 367.87911987]
[258.03744507 373.82797241]
[260.36352539 391.21438599]
[270.15231323 402.58010864]
[285.92953491 403.50488281]
[296.36923218 415.37030029]
[295.27770996 431.13687134]
[283.30255127 441.45050049]
[267.54843140 440.19235229]
[257.36196899 428.10885620]
[258.78659058 412.36889648]
[248.99781799 401.00317383]
[236.95120239 399.78729248]
[228.70347595 390.38269043]
[229.09341431 377.47863770]
[219.49388123 365.95263672]
[209.89434814 354.42660522]
[200.29483032 342.90060425]
[193.28559875 345.56906128]
[198.62228394 359.58761597]
[184.60365295 364.92407227]
[179.26712036 350.90594482]
[172.25788879 353.57440186]
[172.75384521 368.56622314]
[173.24980164 383.55801392]
[173.74574280 398.54980469]
[180.31246948 414.18035889]
[167.11061096 424.81744385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 184]
[10 157]
[11 156]
[12 155]
[13 154]
[16 152]
[17 151]
[18 150]
[19 149]
[20 148]
[21 147]
[22 146]
[23 43]
[24 42]
[25 40]
[26 39]
[27 38]
[28 36]
[29 35]
[30 34]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[77 87]
[78 86]
[79 85]
[80 84]
[92 145]
[93 144]
[94 143]
[95 142]
[96 141]
[97 140]
[98 139]
[99 137]
[100 136]
[101 135]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[159 179]
[160 178]
[161 177]
[162 176]
[164 173]
[165 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
