%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGACACUUCCGUCCGGCGCGCGGCGUCCUCCUCCCGCUCGGAAGGUCCCAGGUGUGACACCUUCAGCAGGUCUCAGGGAAGAUGGCAGCCCUAGGGGACAUUCAGGAGUCCCCUUCUGUCCCGUCCCCUGUCAGUCUCUCAUCACCAGGGACACCUGGAACCCAGCACCACGAGCCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[52.03905106 263.44058228]
[48.03934479 266.08663940]
[42.35766220 279.96896362]
[36.67597961 293.85125732]
[30.99429703 307.73358154]
[25.31261253 321.61587524]
[19.63092995 335.49819946]
[13.94924641 349.38049316]
[20.28926659 363.85736084]
[14.45791149 378.54650879]
[-0.08517718 384.73312378]
[-14.71184444 378.74679565]
[-20.74434662 364.13909912]
[-14.60370922 349.57653809]
[0.06693889 343.69882202]
[5.74862194 329.81649780]
[11.43030548 315.93420410]
[17.11198807 302.05187988]
[22.79367256 288.16958618]
[28.47535515 274.28729248]
[34.15703964 260.40496826]
[39.60344696 246.42868042]
[44.81302643 232.36239624]
[37.14356613 217.40623474]
[42.76470566 201.20840454]
[58.66391754 193.93730164]
[63.63518143 179.78504944]
[68.60644531 165.63278198]
[67.85523224 158.26383972]
[73.78302765 151.28469849]
[78.99260712 137.21841431]
[72.83041382 125.99288177]
[71.05049133 114.69070435]
[56.46790314 118.20470428]
[41.88531494 121.71869659]
[36.08397675 136.11050415]
[22.91347313 144.31523132]
[7.43812895 143.17797852]
[-4.39146948 133.13604736]
[-8.02659988 118.05078125]
[-2.06948018 103.72275543]
[11.18925476 95.66139221]
[26.65135193 96.96645355]
[38.37131882 107.13611603]
[52.95390701 103.62211609]
[67.53649139 100.10811615]
[72.33476257 83.01396179]
[85.40808868 71.00056458]
[102.84606934 67.66130829]
[107.57759857 53.42710114]
[112.30912781 39.19289780]
[117.04065704 24.95869064]
[121.77218628 10.72448349]
[118.78295898 -4.81176710]
[130.13987732 -14.44865704]
[134.87141418 -28.68286324]
[139.60293579 -42.91706848]
[144.33447266 -57.15127563]
[148.94561768 -71.42493439]
[153.43606567 -85.73702240]
[157.92651367 -100.04911041]
[142.15390015 -121.33686829]
[146.17921448 -147.20204163]
[135.30732727 -157.53654480]
[124.43542480 -167.87104797]
[113.56353760 -178.20555115]
[97.55374908 -179.23818970]
[88.49772644 -192.48085022]
[93.34246826 -207.77490234]
[108.37151337 -213.38804626]
[122.05585480 -205.01438904]
[123.89804077 -189.07745361]
[134.76992798 -178.74295044]
[145.64183044 -168.40844727]
[156.51371765 -158.07392883]
[164.59043884 -162.00454712]
[173.41822815 -163.66383362]
[182.37092590 -162.93408203]
[188.74844360 -176.51080322]
[195.12596130 -190.08750916]
[201.50347900 -203.66423035]
[207.88099670 -217.24095154]
[207.70362854 -223.88537598]
[210.50140381 -228.86366272]
[214.71005249 -231.16291809]
[221.54246521 -244.51649475]
[228.37489319 -257.87008667]
[235.20730591 -271.22366333]
[242.03973389 -284.57723999]
[238.82389832 -297.08282471]
[244.80673218 -308.07098389]
[256.29525757 -311.90139771]
[263.35223389 -325.13766479]
[256.73330688 -339.04794312]
[259.54150391 -354.01348877]
[270.49395752 -364.33377075]
[285.24664307 -366.20346069]
[292.30364990 -379.43975830]
[299.36062622 -392.67602539]
[306.41760254 -405.91229248]
[313.47457886 -419.14859009]
[320.53155518 -432.38485718]
[327.58856201 -445.62112427]
[320.68118286 -459.51602173]
[323.29339600 -474.81161499]
[334.42074585 -485.62649536]
[349.78454590 -487.80209351]
[363.47711182 -480.50186157]
[370.23333740 -466.53286743]
[367.45535278 -451.26647949]
[356.21133423 -440.57293701]
[340.82482910 -438.56414795]
[333.76785278 -425.32788086]
[326.71084595 -412.09158325]
[319.65386963 -398.85531616]
[312.59689331 -385.61904907]
[305.53991699 -372.38275146]
[298.48294067 -359.14648438]
[305.15255737 -345.85537720]
[302.68777466 -331.00985718]
[291.82702637 -320.33755493]
[276.58850098 -318.08068848]
[269.53152466 -304.84442139]
[271.07791138 -287.37301636]
[255.39331055 -277.74481201]
[248.56088257 -264.39123535]
[241.72846985 -251.03765869]
[234.89604187 -237.68408203]
[228.06362915 -224.33050537]
[221.45770264 -210.86343384]
[215.08018494 -197.28671265]
[208.70266724 -183.70999146]
[202.32514954 -170.13327026]
[195.94763184 -156.55656433]
[202.65194702 -149.70362854]
[207.17257690 -141.21994019]
[209.13230896 -131.78230286]
[208.35891724 -122.14835358]
[204.90016174 -113.09567261]
[199.02116394 -105.35903168]
[191.18408203 -99.57076263]
[182.01184082 -96.20909882]
[172.23860168 -95.55866241]
[167.74815369 -81.24657440]
[163.25770569 -66.93448639]
[164.25737000 -59.59511185]
[158.56867981 -52.41974640]
[153.83714294 -38.18553925]
[149.10562134 -23.95133209]
[144.37408447 -9.71712685]
[147.70173645 4.80099869]
[136.00639343 15.45601368]
[131.27485657 29.69021988]
[126.54333496 43.92442703]
[121.81180573 58.15863419]
[117.08026886 72.39283752]
[132.23696899 84.22804260]
[139.08943176 104.18772888]
[133.53962708 126.48800659]
[143.68902588 137.53289795]
[153.83843994 148.57777405]
[163.98785400 159.62266541]
[179.15711975 167.19430542]
[176.08064270 183.86679077]
[159.20808411 185.52595520]
[152.94296265 169.77206421]
[142.79354858 158.72718811]
[132.64414978 147.68229675]
[122.49473572 136.63742065]
[115.13577271 138.08505249]
[125.00204468 149.38359070]
[120.15026855 163.57725525]
[105.43228149 166.47221375]
[95.56625366 155.17347717]
[100.41784668 140.98034668]
[93.05889130 142.42799377]
[87.84931183 156.49427795]
[82.75870514 170.60404968]
[77.78744507 184.75631714]
[72.81617737 198.90856934]
[80.00936127 210.31144714]
[79.32467651 223.58117676]
[71.23659515 233.87683105]
[58.87930679 237.57197571]
[53.66972733 251.63825989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[22 185]
[23 184]
[26 180]
[27 179]
[28 178]
[30 177]
[31 176]
[33 46]
[34 45]
[35 44]
[49 156]
[50 155]
[51 154]
[52 153]
[53 152]
[55 150]
[56 149]
[57 148]
[58 147]
[59 145]
[60 144]
[61 143]
[63 75]
[64 74]
[65 73]
[66 72]
[78 134]
[79 133]
[80 132]
[81 131]
[82 130]
[85 129]
[86 128]
[87 127]
[88 126]
[89 125]
[92 123]
[93 122]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
[159 169]
[160 168]
[161 167]
[162 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
