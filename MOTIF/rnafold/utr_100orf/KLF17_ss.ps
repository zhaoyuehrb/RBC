%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGUGGUGGCUGGUUCCCUGUCUCUUCAGUAGAGAGUCUAGACCCCACCCAGUCUUCAUGUACGGCCGACCGCAGGCUGAGAUGGAACAGGAGGCUGGGGAGCUGAGCCGGUGGCAGGCGGCGCACCAGGCUGCCCAGGAUAACGAGAACUCAGCGC\
) } def
/len { sequence length } bind def

/coor [
[102.95389557 157.64550781]
[88.49761963 153.64347839]
[79.51595306 141.62976074]
[79.76757812 126.63186646]
[89.14825439 114.92551422]
[76.15787506 122.42551422]
[63.16749191 129.92550659]
[57.26097107 136.96463013]
[49.84553528 137.44245911]
[36.70951080 144.68434143]
[23.64567184 152.05563354]
[10.65529060 159.55563354]
[-2.33509088 167.05563354]
[-15.32547188 174.55563354]
[-28.24112511 182.18360901]
[-41.08079147 189.93879700]
[-53.92045975 197.69398499]
[-61.73281860 211.45181274]
[-76.62736511 211.40901184]
[-89.46702576 219.16419983]
[-102.30669403 226.91938782]
[-108.07299042 234.07382202]
[-115.47753906 234.69807434]
[-128.46792603 242.19807434]
[-136.19444275 256.66296387]
[-152.59135437 256.93353271]
[-160.79092407 242.73146057]
[-152.35813904 228.66659546]
[-135.96792603 229.20768738]
[-122.97753906 221.70768738]
[-110.06188202 214.07972717]
[-97.22222137 206.32452393]
[-84.38255310 198.56933594]
[-77.48857117 185.36622620]
[-61.67564774 184.85432434]
[-48.83598328 177.09913635]
[-35.99631500 169.34393311]
[-31.87478828 163.16090393]
[-22.82547188 161.56526184]
[-9.83509064 154.06526184]
[3.15529013 146.56526184]
[16.14567184 139.06526184]
[20.38855171 132.96485901]
[29.46762848 131.54830933]
[42.60365295 124.30643463]
[55.66749191 116.93512726]
[68.65787506 109.43512726]
[81.64825439 101.93512726]
[87.83042145 88.26835632]
[84.88590240 73.56019592]
[81.94138336 58.85204697]
[78.99686432 44.14389038]
[76.05234528 29.43573761]
[73.10781860 14.72758293]
[70.16329956 0.01942853]
[67.21878052 -14.68872547]
[64.27426147 -29.39687920]
[61.32974243 -44.10503387]
[56.55307770 -51.95485687]
[58.47536087 -59.13272476]
[55.82201004 -73.89618683]
[53.16865540 -88.65964508]
[36.00682068 -105.22811890]
[44.00237274 -126.94403839]
[39.62152100 -141.29005432]
[35.24066925 -155.63606262]
[30.85981750 -169.98208618]
[26.47896576 -184.32809448]
[12.01672077 -190.27600098]
[4.80706644 -204.15240479]
[8.25418091 -219.40531921]
[20.73044205 -228.83277893]
[36.34494400 -227.98341370]
[47.72499084 -217.25828552]
[49.49727631 -201.72145081]
[40.82498169 -188.70895386]
[45.20583344 -174.36293030]
[49.58668518 -160.01692200]
[53.96753693 -145.67089844]
[58.34838867 -131.32489014]
[64.84941101 -129.96437073]
[70.64195251 -126.61006165]
[75.12677765 -121.57147217]
[77.82830048 -115.33413696]
[78.44487762 -108.51290894]
[76.88216400 -101.79133606]
[73.26583099 -95.85321808]
[67.93211365 -91.31299591]
[70.58546448 -76.54953766]
[73.23882294 -61.78607941]
[76.03789520 -47.04955292]
[78.98241425 -32.34140015]
[81.92693329 -17.63324547]
[84.87145233 -2.92509174]
[87.81597900 11.78306293]
[90.76049805 26.49121666]
[93.70501709 41.19937134]
[96.64953613 55.90752411]
[99.59405518 70.61567688]
[102.53857422 85.32383728]
[109.34277344 87.29588318]
[114.81101227 92.40416718]
[117.51968384 99.80634308]
[131.30593872 105.71729279]
[145.09219360 111.62823486]
[158.87843323 117.53917694]
[172.66468811 123.45012665]
[186.45094299 129.36106873]
[201.69207764 119.62113953]
[219.57542419 120.92713165]
[233.00325012 132.57286072]
[236.75866699 149.78579712]
[250.76768494 155.14747620]
[264.63226318 143.04953003]
[282.62649536 139.63018799]
[299.80297852 145.74263000]
[311.48306274 159.63122559]
[314.53118896 177.43475342]
[328.83322144 181.95712280]
[343.13525391 186.47949219]
[357.43728638 191.00184631]
[371.73931885 195.52421570]
[386.04135132 200.04656982]
[399.13891602 191.50325012]
[414.65747070 193.42893982]
[425.26965332 204.91438293]
[425.96472168 220.53651428]
[416.41445923 232.91903687]
[401.12823486 236.21530151]
[387.32373047 228.86891174]
[381.51901245 214.34861755]
[367.21694946 209.82624817]
[352.91491699 205.30387878]
[338.61288452 200.78152466]
[324.31085205 196.25915527]
[310.00881958 191.73680115]
[302.45324707 200.88336182]
[292.21444702 206.94458008]
[280.49301147 209.18234253]
[268.67276001 207.30847168]
[258.15728760 201.52165222]
[250.20335388 192.48658752]
[245.77062988 181.25779724]
[245.40600586 169.15649414]
[231.39698792 163.79481506]
[222.26655579 171.88574219]
[210.48709106 175.32713318]
[198.29393005 173.40158081]
[188.02848816 166.41632080]
[181.68864441 155.65609741]
[180.53999329 143.14732361]
[166.75373840 137.23637390]
[152.96749878 131.32543945]
[139.18124390 125.41448975]
[125.39498901 119.50354004]
[111.60874176 113.59259796]
[122.30755615 124.10617065]
[124.33206940 138.96891785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[9 45]
[10 44]
[11 42]
[12 41]
[13 40]
[14 39]
[15 37]
[16 36]
[17 35]
[19 33]
[20 32]
[21 31]
[23 30]
[24 29]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[56 93]
[57 92]
[58 91]
[60 90]
[61 89]
[62 88]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[103 156]
[104 155]
[105 154]
[106 153]
[107 152]
[108 151]
[112 145]
[113 144]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
[123 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
