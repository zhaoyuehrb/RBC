%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAGUGCAGCCCUGGUUACGCCUCCUCUGGCUCAGUCACACAGCGACGUAGAGGUGACUGGAGGUAUAUACUUGUCCUCACCUGGAUCAUGCUGAUGUGGCCCCAACCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCCCUACCCAUCCCCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[202.22781372 285.60876465]
[194.60983276 272.68719482]
[187.83184814 259.30590820]
[181.92150879 245.51939392]
[176.90289307 231.38386536]
[172.79644775 216.95690918]
[169.61891174 202.29731750]
[167.38311768 187.46371460]
[157.30972290 198.57798767]
[153.85760498 207.05276489]
[146.97944641 209.78996277]
[136.72555542 220.73793030]
[126.47167969 231.68588257]
[116.21779633 242.63385010]
[117.11435699 260.09655762]
[105.34158325 272.56494141]
[88.53132629 272.66680908]
[78.45794678 283.78106689]
[81.76613617 298.94140625]
[75.50067902 313.13729858]
[62.07078552 320.91018677]
[46.64051056 319.27117920]
[35.14311600 308.85055542]
[31.99958420 293.65524292]
[38.41866684 279.52813721]
[51.93209076 271.90139771]
[67.34367371 273.70770264]
[77.41706085 262.59341431]
[74.99081421 249.92915344]
[80.38681793 238.00389099]
[91.83702087 231.26914978]
[105.26982880 232.37995911]
[115.52371979 221.43200684]
[125.77760315 210.48403931]
[136.03147888 199.53608704]
[146.19546509 188.50459290]
[156.26884460 177.39033508]
[155.65542603 162.40287781]
[144.70745850 152.14898682]
[133.75950623 141.89511108]
[122.81153870 131.64122009]
[111.86357880 121.38733673]
[100.91561890 111.13345337]
[89.88413239 100.96948242]
[78.76986694 90.89609528]
[67.65560150 80.82271576]
[56.54133224 70.74932861]
[45.42706680 60.67594147]
[31.68106842 67.10425568]
[16.56191635 67.77823639]
[2.37491465 62.62628174]
[-8.72869015 52.46274185]
[-15.07790947 38.85935211]
[-15.73343945 23.90222168]
[-10.62649727 9.87195396]
[-21.74076462 -0.20142993]
[-32.85503006 -10.27481461]
[-43.96929932 -20.34819794]
[-55.08356476 -30.42158318]
[-66.19783020 -40.49496841]
[-72.59397888 -42.26847076]
[-76.53257751 -46.39341736]
[-77.50405121 -51.08439255]
[-88.28277588 -61.51603317]
[-99.06149292 -71.94766998]
[-110.00946045 -82.20156097]
[-121.12372589 -92.27494049]
[-132.23799133 -102.34832764]
[-148.37303162 -105.27960205]
[-153.64651489 -120.80772400]
[-142.63351440 -132.95869446]
[-126.66327667 -129.23263550]
[-122.16460419 -113.46259308]
[-111.05033875 -103.38920593]
[-99.93607330 -93.31582642]
[-95.19160461 -92.65323639]
[-90.81789398 -88.99285889]
[-88.62985992 -82.72639465]
[-77.85113525 -72.29476166]
[-67.07241058 -61.86311722]
[-56.12444687 -51.60923386]
[-45.01018143 -41.53585052]
[-33.89591217 -31.46246529]
[-22.78164673 -21.38908195]
[-11.66737938 -11.31569672]
[-0.55311292 -1.24231255]
[12.90902710 -7.69987011]
[27.85838699 -8.51355171]
[42.01860809 -3.52827144]
[53.22154999 6.52566576]
[59.73926544 20.13937378]
[60.55046844 35.25178528]
[55.50045013 49.56167603]
[66.61471558 59.63505936]
[77.72898102 69.70844269]
[88.84325409 79.78182983]
[99.95751953 89.85521698]
[107.58296204 92.51062012]
[111.16950226 100.18549347]
[122.11746216 110.43937683]
[133.06542969 120.69326019]
[144.01338196 130.94714355]
[154.96134949 141.20103455]
[165.90930176 151.45491028]
[166.92530823 136.48936462]
[168.89413452 121.61913300]
[171.80778503 106.90483856]
[175.65437317 92.40643311]
[180.41822815 78.18300629]
[186.07992554 64.29254150]
[192.61640930 50.79162979]
[200.00100708 37.73530960]
[208.20365906 25.17678261]
[217.19091797 13.16723537]
[226.92614746 1.75561106]
[237.36968994 -9.01158142]
[248.47897339 -19.09046173]
[260.20874023 -28.43995094]
[272.51113892 -37.02194595]
[285.33605957 -44.80147171]
[298.63125610 -51.74682236]
[312.34252930 -57.82969284]
[326.41397095 -63.02529144]
[340.78826904 -67.31244659]
[355.40682983 -70.67367554]
[370.21005249 -73.09529877]
[385.13763428 -74.56742859]
[400.12875366 -75.08406830]
[415.12225342 -74.64311981]
[430.05709839 -73.24637604]
[444.87237549 -70.89953613]
[459.50769043 -67.61215210]
[473.90347290 -63.39762497]
[488.00097656 -58.27313995]
[501.74276733 -52.25957489]
[515.07287598 -45.38143539]
[527.93688965 -37.66676331]
[540.28247070 -29.14698982]
[552.05926514 -19.85684013]
[563.21929932 -9.83417988]
[573.71710205 0.88014680]
[583.50982666 12.24247360]
[592.55761719 24.20649147]
[600.82354736 36.72344208]
[608.27398682 49.74231720]
[614.87854004 63.21004868]
[620.61029053 77.07175446]
[625.44592285 91.27094269]
[629.36566162 105.74974060]
[632.35351562 120.44914246]
[634.39746094 135.30924988]
[635.48895264 150.26947021]
[635.62371826 165.26887512]
[634.80114746 180.24629211]
[633.02453613 195.14071655]
[630.30120850 209.89143372]
[626.64221191 224.43830872]
[622.06250000 238.72207642]
[616.58068848 252.68452454]
[610.21917725 266.26873779]
[603.00384521 279.41937256]
[594.96411133 292.08279419]
[586.13275146 304.20742798]
[576.54571533 315.74386597]
[566.24212646 326.64508057]
[555.26397705 336.86660767]
[543.65594482 346.36682129]
[531.46545410 355.10702515]
[518.74206543 363.05157471]
[505.53768921 370.16809082]
[491.90615845 376.42755127]
[477.90298462 381.80450439]
[463.58526611 386.27697754]
[449.01135254 389.82675171]
[434.24063110 392.43939209]
[419.33331299 394.10421753]
[404.35012817 394.81448364]
[389.35217285 394.56723022]
[374.40054321 393.36352539]
[359.55618286 391.20825195]
[344.87960815 388.11019897]
[330.43060303 384.08197021]
[316.26809692 379.14001465]
[302.44976807 373.30447388]
[289.03195190 366.59909058]
[276.06930542 359.05123901]
[263.61468506 350.69165039]
[251.71887207 341.55441284]
[240.43029785 331.67672729]
[229.79501343 321.09890747]
[219.85632324 309.86404419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[11 35]
[12 34]
[13 33]
[14 32]
[17 28]
[18 27]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[44 97]
[45 96]
[46 95]
[47 94]
[48 93]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 81]
[63 80]
[64 79]
[65 78]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
