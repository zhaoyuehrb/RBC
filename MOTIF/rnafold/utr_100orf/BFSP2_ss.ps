%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGACCAGGCCACAGGGAUGCUGGGGCUGUAAACCAAAAGCCACUGGACUCUGUAAACCCACUGGGCACCACAGAGGCAGAAGGGGUGAUGAGUGAGAGGCGAGUGGUAGUGGACUUGCCCACCAGUGCCAGCUCCAGCAUGCCCCUCCAGAGGCGCAGGGCGUCCUUCAGGGGGCCACGGUCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[171.77690125 474.72888184]
[181.64587402 462.08044434]
[181.14991760 447.08865356]
[180.65396118 432.09683228]
[180.15802002 417.10504150]
[179.66206360 402.11325073]
[179.16610718 387.12145996]
[169.10197449 372.75442505]
[177.88778687 356.58081055]
[177.14402771 341.59927368]
[176.40026855 326.61770630]
[175.65650940 311.63616943]
[175.92904663 302.80914307]
[178.72399902 295.31115723]
[183.30833435 289.77532959]
[188.81768799 286.53063965]
[182.11856079 273.10971069]
[175.41943359 259.68878174]
[168.60957336 246.32366943]
[161.68945312 233.01533508]
[154.76933289 219.70698547]
[147.84922791 206.39863586]
[140.92910767 193.09030151]
[134.00898743 179.78195190]
[127.08886719 166.47361755]
[120.16874695 153.16526794]
[113.24863434 139.85693359]
[106.32851410 126.54859161]
[99.40840149 113.24024963]
[99.10101318 128.23709106]
[99.20526123 143.23674011]
[92.91590118 156.85450745]
[81.42896271 166.50076294]
[66.92889404 170.34109497]
[52.17314529 167.64517212]
[39.96779251 158.92568970]
[32.63389969 145.84082031]
[31.56613350 130.87887573]
[36.96755600 116.88513184]
[47.81098557 106.52076721]
[62.03319931 101.75686646]
[77.02684021 102.19346619]
[64.07799530 94.62197876]
[45.67515564 94.95539856]
[37.57139587 79.39816284]
[24.49913216 72.04180908]
[11.42686939 64.68545532]
[-1.19378030 67.40305328]
[-11.93510532 60.99247742]
[-15.30993938 49.36450577]
[-28.25878716 41.79302216]
[-41.20763397 34.22153854]
[-54.15648270 26.65005493]
[-67.10533142 19.07857323]
[-80.05417633 11.50708961]
[-95.44070435 18.51142883]
[-111.80924225 15.00585842]
[-122.75814056 2.56371903]
[-124.12610626 -13.78669739]
[-137.19837952 -21.14304924]
[-150.27062988 -28.49940300]
[-167.03945923 -30.99799538]
[-169.28057861 -47.80316544]
[-153.75256348 -54.60883713]
[-142.91427612 -41.57166672]
[-129.84202576 -34.21531296]
[-116.76975250 -26.85896111]
[-105.19289398 -33.52857590]
[-91.72412872 -33.60290527]
[-79.88548279 -26.95543861]
[-72.82562256 -15.23138046]
[-72.48268890 -1.44175792]
[-59.53384399 6.12972498]
[-46.58499908 13.70120811]
[-33.63615036 21.27269173]
[-20.68730354 28.84417534]
[-7.73845673 36.41565704]
[9.78192902 35.55852127]
[18.78322220 51.61319351]
[31.85548592 58.96954346]
[44.92774963 66.32589722]
[56.66917038 63.36984634]
[67.62499237 69.40652466]
[71.64948273 81.67313385]
[84.59832764 89.24461365]
[98.93886566 84.84586334]
[105.41517639 71.31599426]
[111.89149475 57.78612900]
[106.87147522 43.04037476]
[113.63211823 29.41142273]
[127.72087860 24.71647835]
[134.19718933 11.18661022]
[135.08331299 2.07677197]
[140.89407349 -2.51207161]
[147.59320068 -15.93301201]
[154.29232788 -29.35395241]
[153.97024536 -34.59984970]
[155.54562378 -38.99821091]
[158.37359619 -41.96575165]
[161.67091370 -43.26184845]
[169.02726746 -56.33411407]
[176.38362122 -69.40637970]
[183.73997498 -82.47863770]
[191.09632874 -95.55090332]
[198.45268250 -108.62316895]
[205.80903625 -121.69543457]
[199.21961975 -135.74389648]
[202.17922974 -150.97612000]
[213.54978943 -161.53498840]
[228.95912170 -163.36039734]
[242.48200989 -155.75045776]
[248.91862488 -141.63134766]
[245.79396057 -126.43212891]
[234.30952454 -115.99723053]
[218.88128662 -114.33908081]
[211.52494812 -101.26681519]
[204.16859436 -88.19454956]
[196.81224060 -75.12228394]
[189.45588684 -62.05002213]
[182.09953308 -48.97776031]
[174.74317932 -35.90549469]
[167.71327209 -22.65481949]
[161.01414490 -9.23387909]
[154.31500244 4.18706036]
[147.72706604 17.66292572]
[141.25074768 31.19279289]
[146.43009949 45.11076355]
[140.05493164 58.92423248]
[125.42136383 64.26244354]
[118.94504547 77.79231262]
[112.46873474 91.32218170]
[112.71674347 106.32012939]
[119.63685608 119.62847137]
[126.55697632 132.93681335]
[133.47709656 146.24516296]
[140.39721680 159.55349731]
[147.31732178 172.86184692]
[154.23744202 186.17018127]
[161.15756226 199.47853088]
[168.07768250 212.78686523]
[174.99780273 226.09521484]
[181.91790771 239.40354919]
[188.66575623 245.58747864]
[188.84037781 252.98963928]
[195.53950500 266.41058350]
[202.23863220 279.83151245]
[212.12104797 291.11593628]
[224.54118347 299.52664185]
[236.96131897 307.93737793]
[252.28837585 305.15908813]
[264.76434326 313.86569214]
[267.31854248 328.49484253]
[279.73867798 336.90557861]
[292.15881348 345.31628418]
[304.57894897 353.72702026]
[317.06817627 362.03475952]
[329.62570190 370.23898315]
[342.18319702 378.44320679]
[358.75021362 382.04461670]
[359.87576294 398.96115112]
[343.93191528 404.72570801]
[333.97897339 391.00070190]
[321.42147827 382.79647827]
[308.86398315 374.59228516]
[301.53152466 373.56399536]
[296.16821289 366.14715576]
[283.74807739 357.73641968]
[271.32797241 349.32568359]
[258.90783691 340.91497803]
[244.37576294 343.97354126]
[231.66017151 335.62081909]
[228.55058289 320.35751343]
[216.13046265 311.94677734]
[203.71032715 303.53607178]
[190.63806152 310.89239502]
[191.38182068 325.87396240]
[192.12557983 340.85549927]
[192.86932373 355.83706665]
[201.89588928 365.06677246]
[202.19738770 377.57199097]
[194.15791321 386.62548828]
[194.65386963 401.61730957]
[195.14981079 416.60910034]
[195.64576721 431.60089111]
[196.14170837 446.59268188]
[196.63766479 461.58450317]
[207.32099915 473.55303955]
[204.48263550 489.34301758]
[190.29992676 496.84170532]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 186]
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[9 178]
[10 177]
[11 176]
[12 175]
[16 146]
[17 145]
[18 144]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[42 85]
[43 84]
[45 81]
[46 80]
[47 79]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[59 67]
[60 66]
[61 65]
[86 131]
[87 130]
[88 129]
[91 126]
[92 125]
[94 124]
[95 123]
[96 122]
[100 121]
[101 120]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[147 174]
[148 173]
[149 172]
[152 169]
[153 168]
[154 167]
[155 166]
[156 164]
[157 163]
[158 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
