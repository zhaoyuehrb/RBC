%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:28:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCGUGCCGAGUUUCCUGUUUAAGAUGGCGUCCCCCGUAGCAGCGCAGGCCGGGAAGCUUCUGCGAGCCCUAGCGCUGCGGCCCCGCUUCCUGGCGGCCGGGUCCCAGGCAGUUCAAUUAACCU\
) } def
/len { sequence length } bind def

/coor [
[163.01725769 272.74282837]
[158.69577026 258.37881470]
[154.37428284 244.01481628]
[150.05279541 229.65080261]
[145.73130798 215.28678894]
[140.37284851 201.27655029]
[134.00599670 187.69482422]
[127.63914490 174.11309814]
[121.89211273 169.34284973]
[121.28712463 160.12225342]
[115.25289154 146.38951111]
[109.21865845 132.65676880]
[103.18442535 118.92404175]
[100.73303223 133.72236633]
[88.15402985 141.89358521]
[73.63703156 138.11776733]
[66.63339996 124.85317993]
[71.70288086 110.73580170]
[85.54451752 104.95680237]
[70.79403687 102.23225403]
[56.04354858 99.50769806]
[41.29306412 96.78314972]
[26.54257774 94.05859375]
[17.08305740 107.23684692]
[2.88634825 114.96504211]
[-13.20040226 115.75066376]
[-27.97584534 109.48783875]
[-38.52151108 97.46833801]
[-42.77824783 82.11551666]
[-57.59070587 79.75096130]
[-72.40316010 77.38640594]
[-87.21562195 75.02185059]
[-99.86418152 84.49758148]
[-115.49633789 82.17138672]
[-124.83780670 69.42334747]
[-122.34646606 53.81665802]
[-109.50038147 44.61048508]
[-93.92090607 47.26669312]
[-84.85106659 60.20939255]
[-70.03860474 62.57394791]
[-55.22615051 64.93850708]
[-40.41369247 67.30306244]
[-33.03327179 55.49250031]
[-21.66181564 47.37695694]
[-8.00881577 44.21728516]
[5.85755873 46.52622223]
[17.82375526 53.98551941]
[26.05298233 65.48934174]
[29.26713181 79.30810547]
[44.01761627 82.03266144]
[58.76810074 84.75721741]
[73.51858521 87.48176575]
[88.26907349 90.20632172]
[102.00180817 84.17208862]
[109.97123718 71.46428680]
[117.94066620 58.75648880]
[125.91010284 46.04868698]
[133.87953186 33.34088898]
[141.84896851 20.63308907]
[149.81838989 7.92529011]
[157.78782654 -4.78250933]
[165.75726318 -17.49030876]
[160.78010559 -35.68553543]
[170.42584229 -51.52712250]
[188.25624084 -55.32598495]
[195.59750366 -68.40673065]
[202.93878174 -81.48747253]
[210.28004456 -94.56820679]
[211.77896118 -103.68624878]
[217.96269226 -107.87494659]
[225.62031555 -120.77304077]
[233.27793884 -133.67112732]
[229.13128662 -148.92173767]
[237.05537415 -162.59596252]
[252.34896851 -166.58113098]
[265.93865967 -158.51290894]
[269.76190186 -143.17803955]
[261.55047607 -129.67442322]
[246.17602539 -126.01351166]
[238.51840210 -113.11541748]
[230.86077881 -100.21732330]
[223.36077881 -87.22694397]
[216.01951599 -74.14620209]
[208.67825317 -61.06546021]
[201.33697510 -47.98471832]
[206.77334595 -37.81741714]
[206.57716370 -26.16909409]
[200.68077087 -15.98197556]
[190.47106934 -9.88614655]
[178.46505737 -9.52087688]
[170.49562073 3.18692231]
[162.52619934 15.89472198]
[154.55676270 28.60251999]
[146.58732605 41.31032181]
[138.61790466 54.01811981]
[130.64846802 66.72592163]
[122.67903900 79.43371582]
[114.70960999 92.14151764]
[116.91716003 112.88980865]
[122.95139313 126.62254333]
[128.98562622 140.35527039]
[135.01986694 154.08801270]
[141.22087097 167.74626160]
[147.58772278 181.32797241]
[153.95455933 194.90969849]
[160.68162537 181.50273132]
[174.84606934 176.56631470]
[188.44879150 182.88818359]
[193.80787659 196.89817810]
[187.89688110 210.68441772]
[174.05392456 216.46133423]
[160.09532166 210.96530151]
[164.41679382 225.32931519]
[168.73828125 239.69332886]
[173.05976868 254.05732727]
[177.38125610 268.42135620]
[192.49349976 270.30288696]
[205.53056335 278.17401123]
[214.23371887 290.67102051]
[217.09507751 305.62869263]
[213.61891174 320.45556641]
[204.40745544 332.58276367]
[191.05667114 339.90921021]
[175.87966919 341.16549683]
[161.50593567 336.13403320]
[150.42582703 325.68649292]
[144.55902100 311.63299561]
[144.92199707 296.40841675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 105]
[7 104]
[8 103]
[10 102]
[11 101]
[12 100]
[13 99]
[19 53]
[20 52]
[21 51]
[22 50]
[23 49]
[29 42]
[30 41]
[31 40]
[32 39]
[54 98]
[55 97]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[65 85]
[66 84]
[67 83]
[68 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
