%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCGUGUGACCAGGGUUGACUAAACUCCUGCCAGCAUGUCUUGCCAGCAAAACCAGCAGCAGUGCCAGCCCCCUCCCAAGUGUCCUCCCAAGUGUACCCCAAAAUGUCCACCUAAGUGUCCCCCCAAAUGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[93.31534576 275.93527222]
[103.87777710 264.17898560]
[102.83911133 249.21498108]
[101.80044556 234.25099182]
[100.76177979 219.28698730]
[92.16175842 207.12603760]
[98.92490387 192.82322693]
[97.88623810 177.85922241]
[70.35160065 172.02429199]
[46.68861771 156.78401184]
[29.98735428 134.12852478]
[22.42875481 107.01634979]
[24.99986649 78.98793030]
[11.01278210 73.56930542]
[-2.97430110 68.15068054]
[-16.96138382 62.73205185]
[-30.94846725 57.31342697]
[-44.93555069 51.89480209]
[-32.23645782 59.87809753]
[-24.12865639 72.49806213]
[-22.14645767 87.36651611]
[-26.66497040 101.66976929]
[-36.82911682 112.70109558]
[-50.71544647 118.37294006]
[-65.69612885 117.61196899]
[-78.93624878 110.56219482]
[-87.93025208 98.55769348]
[-90.97612762 83.87019348]
[-87.49654388 69.27722168]
[-102.09812164 65.84296417]
[-116.69969177 62.40870285]
[-130.03140259 70.46494293]
[-144.79055786 66.77410889]
[-152.38879395 54.01470184]
[-166.99035645 50.58044434]
[-181.59193420 47.14618683]
[-195.93405151 54.33527374]
[-210.43583679 47.47394943]
[-213.97276306 31.82563400]
[-203.83158875 19.39437485]
[-187.79176331 19.71637154]
[-178.15766907 32.54461670]
[-163.55610657 35.97887421]
[-148.95452881 39.41313171]
[-136.46551514 31.37820244]
[-121.60852051 34.65302277]
[-113.26543427 47.80713272]
[-98.66385651 51.24139023]
[-84.06228638 54.67564774]
[-79.07392120 49.07509232]
[-90.27503204 39.09836197]
[-101.47599030 29.12145996]
[-91.49890900 17.92065811]
[-80.29830170 27.89725304]
[-69.09719086 37.87398529]
[-64.10882568 32.27342987]
[-69.20293427 18.16491890]
[-74.29704285 4.05640841]
[-87.17446136 -6.09761143]
[-84.55207825 -22.28572845]
[-69.12757111 -27.85499573]
[-56.76836014 -17.07622910]
[-60.18852997 -1.03769898]
[-55.09442520 13.07081127]
[-50.00031662 27.17932320]
[-39.51692581 37.90771866]
[-25.52984238 43.32634354]
[-11.54275990 48.74496841]
[2.44432402 54.16359329]
[16.43140793 59.58221817]
[30.41849136 65.00084686]
[35.18266678 56.81156921]
[40.90589142 49.26131821]
[47.50348663 42.46181107]
[54.87783051 36.51364517]
[62.91981125 31.50484085]
[71.51043701 27.50950241]
[80.52259827 24.58675003]
[89.82295990 22.77982712]
[99.27389526 22.11546898]
[108.73557281 22.60350800]
[118.06800079 24.23672104]
[127.13309479 26.99094200]
[135.79672241 30.82542038]
[143.93067932 35.68342209]
[151.41464233 41.49306107]
[158.13786316 48.16838455]
[164.00085449 55.61061859]
[168.91688538 63.70964813]
[172.81320190 72.34563446]
[175.63217163 81.39080048]
[177.33206177 90.71131134]
[192.32806396 90.36484528]
[207.32405090 90.01837921]
[220.94183350 81.96438599]
[233.84442139 89.40564728]
[248.84042358 89.05918121]
[257.55764771 76.22214508]
[272.16683960 70.99231720]
[287.05047607 75.38066101]
[296.48544312 87.69978333]
[296.84387207 103.21271515]
[287.98788452 115.95442963]
[273.32281494 121.02547455]
[258.48767090 116.47592163]
[249.18688965 104.05517578]
[234.19088745 104.40164948]
[221.64573669 112.43085480]
[207.67053223 105.01437378]
[192.67453003 105.36084747]
[177.67852783 105.70731354]
[176.78529358 113.05934143]
[175.19779968 120.29328918]
[172.93041992 127.34375763]
[170.00363159 134.14700317]
[166.44392395 140.64151001]
[162.28346252 146.76855469]
[157.55986023 152.47274780]
[152.31584167 157.70251465]
[146.59881592 162.41055298]
[140.46046448 166.55432129]
[133.95628357 170.09634399]
[127.14510345 173.00459290]
[120.08848572 175.25277710]
[112.85023499 176.82055664]
[113.88890076 191.78456116]
[122.56321716 205.01583862]
[115.72577667 218.24832153]
[116.76444244 233.21232605]
[117.80310822 248.17631531]
[118.84177399 263.14031982]
[130.92712402 273.32461548]
[132.18811035 289.07852173]
[121.87661743 301.05551147]
[106.11026764 302.14987183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 129]
[5 128]
[7 126]
[8 125]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[18 66]
[29 49]
[30 48]
[31 47]
[34 44]
[35 43]
[36 42]
[56 65]
[57 64]
[58 63]
[92 111]
[93 110]
[94 109]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
