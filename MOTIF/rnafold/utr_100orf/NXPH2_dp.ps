%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:28 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (NXPH2)
} def

/sequence { (\
AUGCGCCUGCGGCCGCUGCCCCUCGUGGUGGUCCCUGGCUUGCUGCAGCUGCUAUUUUGUGACAGUAAGGAAGUGGUGCAUGCCACGGAGGGGCUGGAUU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 99 0.018666552 ubox
2 11 0.143181016 ubox
2 15 0.148858265 ubox
2 18 0.003226031 ubox
2 96 0.006229112 ubox
2 98 0.021424742 ubox
3 10 0.203619529 ubox
3 13 0.039375647 ubox
3 14 0.210332949 ubox
3 16 0.932138242 ubox
3 17 0.011556789 ubox
3 94 0.003874557 ubox
4 9 0.203435596 ubox
4 11 0.043952037 ubox
4 12 0.040346144 ubox
4 15 0.934875215 ubox
4 93 0.003873127 ubox
4 96 0.014730642 ubox
5 10 0.043774307 ubox
5 13 0.709976763 ubox
5 14 0.664808326 ubox
5 16 0.023730326 ubox
5 95 0.003646126 ubox
6 12 0.968114244 ubox
6 15 0.023762753 ubox
6 91 0.003777045 ubox
6 97 0.013685780 ubox
7 11 0.961123627 ubox
7 90 0.003777501 ubox
7 96 0.013703086 ubox
7 97 0.003421070 ubox
8 89 0.003753055 ubox
8 96 0.003272886 ubox
9 16 0.029135591 ubox
10 15 0.029176880 ubox
10 87 0.003503993 ubox
11 17 0.003621863 ubox
11 33 0.003324364 ubox
11 100 0.023956679 ubox
12 16 0.003819869 ubox
12 32 0.003471267 ubox
12 99 0.037894291 ubox
13 31 0.003718198 ubox
13 97 0.213048920 ubox
14 30 0.003718475 ubox
14 96 0.217540813 ubox
15 29 0.003717060 ubox
15 95 0.176557976 ubox
16 28 0.003718434 ubox
16 97 0.192730768 ubox
17 27 0.003703613 ubox
17 96 0.196428923 ubox
18 26 0.003705773 ubox
18 94 0.997937280 ubox
18 95 0.025812199 ubox
19 25 0.003709601 ubox
19 92 0.003601571 ubox
19 93 0.999961167 ubox
20 91 0.004036728 ubox
20 92 0.999976217 ubox
21 90 0.004366661 ubox
21 91 0.999975562 ubox
22 90 0.999934224 ubox
23 88 0.320949793 ubox
23 89 0.945182066 ubox
24 87 0.741385177 ubox
24 88 0.670508881 ubox
25 86 0.996838609 ubox
26 85 0.999433953 ubox
26 87 0.007189104 ubox
27 84 0.999715914 ubox
27 86 0.005792522 ubox
28 81 0.025120473 ubox
28 83 0.999340466 ubox
28 86 0.021694025 ubox
29 80 0.118817662 ubox
29 82 0.987219651 ubox
29 85 0.022494880 ubox
30 77 0.004438488 ubox
30 79 0.204357115 ubox
30 81 0.693472130 ubox
30 84 0.022564134 ubox
31 77 0.030098963 ubox
31 79 0.917436876 ubox
31 81 0.018325637 ubox
31 83 0.022559922 ubox
32 76 0.019022593 ubox
32 78 0.891712896 ubox
32 80 0.023857633 ubox
32 82 0.022470937 ubox
33 75 0.032872599 ubox
33 76 0.971770132 ubox
34 75 0.972308851 ubox
34 76 0.228543614 ubox
35 73 0.968921769 ubox
35 75 0.227464656 ubox
35 76 0.008299850 ubox
36 72 0.960330461 ubox
36 75 0.007811352 ubox
37 74 0.006609421 ubox
38 74 0.041685865 ubox
39 69 0.997166494 ubox
39 70 0.037137087 ubox
39 73 0.043429728 ubox
40 68 0.997908760 ubox
40 69 0.027911749 ubox
40 72 0.043221854 ubox
41 67 0.997727733 ubox
41 68 0.019726177 ubox
41 71 0.042187264 ubox
42 66 0.998803227 ubox
43 65 0.999088736 ubox
43 69 0.041426429 ubox
43 70 0.007784582 ubox
44 61 0.007573571 ubox
44 64 0.998771449 ubox
44 67 0.006426299 ubox
44 68 0.040472298 ubox
44 69 0.007741214 ubox
45 52 0.007328723 ubox
45 60 0.036320474 ubox
45 63 0.997640090 ubox
45 66 0.008960916 ubox
46 51 0.008298323 ubox
46 59 0.067856197 ubox
46 61 0.368618793 ubox
46 65 0.009077479 ubox
47 53 0.005642521 ubox
47 56 0.004682534 ubox
47 57 0.004536349 ubox
47 58 0.067755487 ubox
47 60 0.325166856 ubox
48 52 0.007382451 ubox
48 55 0.008767177 ubox
48 56 0.008402932 ubox
48 57 0.065861395 ubox
48 60 0.929811293 ubox
48 66 0.039641612 ubox
49 59 0.950932780 ubox
49 65 0.040854317 ubox
50 59 0.022504797 ubox
50 61 0.063806195 ubox
50 64 0.040849738 ubox
51 58 0.069120398 ubox
51 60 0.126934887 ubox
51 63 0.040560971 ubox
51 66 0.003169815 ubox
52 59 0.141392099 ubox
52 65 0.003176293 ubox
53 59 0.010006755 ubox
53 61 0.034906425 ubox
54 58 0.013282733 ubox
54 60 0.035621242 ubox
55 59 0.033075308 ubox
55 62 0.007618314 ubox
56 61 0.007530393 ubox
73 86 0.003620989 ubox
74 85 0.003683058 ubox
75 84 0.003704924 ubox
76 83 0.003704090 ubox
77 82 0.003553332 ubox
3 16 0.9500000 lbox
4 15 0.9500000 lbox
5 14 0.9500000 lbox
6 12 0.9500000 lbox
7 11 0.9500000 lbox
18 94 0.9500000 lbox
19 93 0.9500000 lbox
20 92 0.9500000 lbox
21 91 0.9500000 lbox
22 90 0.9500000 lbox
23 89 0.9500000 lbox
24 88 0.9500000 lbox
25 86 0.9500000 lbox
26 85 0.9500000 lbox
27 84 0.9500000 lbox
28 83 0.9500000 lbox
29 82 0.9500000 lbox
31 79 0.9500000 lbox
32 78 0.9500000 lbox
33 76 0.9500000 lbox
34 75 0.9500000 lbox
35 73 0.9500000 lbox
36 72 0.9500000 lbox
39 69 0.9500000 lbox
40 68 0.9500000 lbox
41 67 0.9500000 lbox
42 66 0.9500000 lbox
43 65 0.9500000 lbox
44 64 0.9500000 lbox
45 63 0.9500000 lbox
48 60 0.9500000 lbox
49 59 0.9500000 lbox
showpage
end
%%EOF
