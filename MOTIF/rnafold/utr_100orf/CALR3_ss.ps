%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCCGCAGAGAGAGCUGGGAGCUAAGGGGUGGCGGCGACCGGAAGCGCAGUGCACACCCCCAUGGCCCGGGCUUUGGUCCAGCUCUGGGCCAUAUGCAUGCUGCGAGUGGCGCUGGCUACCGUCUAUUUCCAAGAGGAAUUUCUAGACGGAGAGCAUUGGA\
) } def
/len { sequence length } bind def

/coor [
[196.99787903 186.49192810]
[185.24485779 177.17170715]
[170.46504211 175.32608032]
[164.45967102 160.68893433]
[152.70664978 151.36871338]
[140.95362854 142.04849243]
[129.20060730 132.72827148]
[117.44759369 123.40805817]
[101.61038971 132.20396423]
[81.83626556 130.26045227]
[65.30364227 116.31869507]
[59.07913971 93.77627563]
[67.22706604 69.98509216]
[52.40285873 67.69535065]
[37.57865143 65.40561676]
[22.75444603 63.11587524]
[7.93023872 60.82613754]
[-6.89396763 58.53639603]
[-21.71350098 64.07643127]
[-33.11052322 54.48699951]
[-47.93472672 52.19726181]
[-56.94128418 53.98450089]
[-63.01985931 49.71906281]
[-77.79748535 47.14579010]
[-92.57511139 44.57251358]
[-107.35273743 41.99923706]
[-124.46389771 48.74429321]
[-137.50262451 37.02840805]
[-152.32682800 34.73866653]
[-167.15103149 32.44892883]
[-181.97523499 30.15918922]
[-196.79943848 27.86944962]
[-211.62365723 25.57971191]
[-226.46910095 23.43206215]
[-241.33445740 21.42669868]
[-256.19979858 19.42133522]
[-271.10083008 17.70108414]
[-286.03207397 16.26657486]
[-300.96331787 14.83206749]
[-311.14151001 26.54463005]
[-326.26785278 30.00489426]
[-340.52597046 23.88231659]
[-348.43331909 10.53115368]
[-346.94934082 -4.91480064]
[-336.64471436 -16.51626015]
[-321.48171997 -19.81222916]
[-307.29086304 -13.53533840]
[-299.52880859 -0.09918159]
[-284.59756470 1.33532667]
[-269.66632080 2.76983500]
[-265.44564819 0.44553396]
[-259.71359253 0.78056645]
[-254.19444275 4.55598879]
[-239.32908630 6.56135225]
[-224.46374512 8.56671524]
[-217.38148499 6.33409262]
[-209.33390808 10.75550461]
[-194.50970459 13.04524422]
[-179.68550110 15.33498383]
[-164.86129761 17.62472343]
[-150.03707886 19.91446114]
[-135.21287537 22.20420074]
[-125.24320984 15.30206680]
[-112.84867859 17.12025642]
[-104.77946472 27.22161102]
[-90.00183868 29.79488754]
[-75.22421265 32.36816025]
[-60.44658279 34.94143677]
[-45.64498901 37.37305450]
[-30.82078171 39.66279602]
[-17.06157494 33.95898056]
[-4.60422850 43.71218872]
[10.21997833 46.00193024]
[25.04418373 48.29166794]
[39.86838913 50.58140945]
[54.69259644 52.87114716]
[69.51679993 55.16088486]
[81.53274536 46.18218231]
[83.53810883 31.31683540]
[85.54347229 16.45148849]
[87.54883575 1.58614206]
[89.55419922 -13.27920437]
[91.55956268 -28.14455032]
[84.83511353 -43.10161972]
[94.64427185 -56.24363327]
[110.89620209 -54.05121613]
[116.87232208 -38.77973938]
[106.42490387 -26.13918686]
[104.41954041 -11.27384090]
[102.41417694 3.59150529]
[100.40882111 18.45685196]
[98.40345764 33.32219696]
[96.39809418 48.18754578]
[103.15090179 51.45091629]
[109.67786407 37.94540787]
[123.18326569 44.47259903]
[116.65651703 57.97765732]
[123.40932465 61.24102783]
[133.81080627 50.43320465]
[144.21229553 39.62538147]
[150.83914185 24.02021408]
[167.66894531 26.06814575]
[170.36000061 42.80715942]
[155.02012634 50.02686691]
[144.61863708 60.83469009]
[134.21714783 71.64251709]
[137.30502319 87.45232391]
[134.24510193 101.47671509]
[126.76780701 111.65502930]
[138.52082825 120.97525024]
[150.27384949 130.29547119]
[162.02687073 139.61569214]
[173.77989197 148.93591309]
[189.40037537 151.44816589]
[194.56507874 165.41868591]
[206.31809998 174.73890686]
[230.14659119 175.84507751]
[238.45452881 197.44123840]
[251.19888306 205.35208130]
[263.94323730 213.26293945]
[282.33529663 213.40332031]
[290.04913330 229.14393616]
[302.94268799 236.80921936]
[315.83621216 244.47448730]
[328.72976685 252.13977051]
[341.62332153 259.80505371]
[354.51684570 267.47033691]
[367.41040039 275.13562012]
[388.78067017 274.02929688]
[398.24761963 292.34078979]
[411.56015015 299.25286865]
[424.87268066 306.16491699]
[438.18521118 313.07699585]
[454.53488159 311.80407715]
[463.58767700 325.47808838]
[456.03088379 340.03237915]
[439.63827515 340.49472046]
[431.27313232 326.38952637]
[417.96060181 319.47744751]
[404.64807129 312.56536865]
[391.33554077 305.65332031]
[383.34521484 309.70712280]
[374.24795532 309.60092163]
[366.11117554 305.23114014]
[360.84292603 297.47760010]
[359.74511719 288.02914429]
[346.85156250 280.36389160]
[333.95803833 272.69860840]
[321.06448364 265.03332520]
[308.17092896 257.36804199]
[295.27740479 249.70275879]
[282.38385010 242.03747559]
[270.55682373 244.71238708]
[259.74053955 238.39273071]
[256.03237915 226.00729370]
[243.28802490 218.09643555]
[230.54368591 210.18559265]
[224.77203369 213.43309021]
[218.22354126 214.72291565]
[211.54873657 213.89398193]
[205.42106628 210.99729919]
[200.46891785 206.29414368]
[197.21122742 200.23272705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[4 113]
[5 112]
[6 111]
[7 110]
[8 109]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[18 72]
[20 70]
[21 69]
[23 68]
[24 67]
[25 66]
[26 65]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 55]
[35 54]
[36 53]
[37 50]
[38 49]
[39 48]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
[98 106]
[99 105]
[100 104]
[118 157]
[119 156]
[120 155]
[122 152]
[123 151]
[124 150]
[125 149]
[126 148]
[127 147]
[128 146]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
