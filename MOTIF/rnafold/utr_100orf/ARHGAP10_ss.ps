%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGCUGCAGCCCCUGGAGUUCAGCGACUGCUACCUCGACAGCCCGUGGUUCCGGGAGAGGAUCCGCGCUCACGAAGCGGAACUCGAGAGGACCAACA\
) } def
/len { sequence length } bind def

/coor [
[49.31185150 292.85699463]
[35.86752701 286.20492554]
[30.79425430 272.08819580]
[22.43647003 284.54400635]
[14.07868576 296.99984741]
[5.72090197 309.45565796]
[-2.63688207 321.91146851]
[-3.20078993 338.30093384]
[-17.80160522 345.76739502]
[-31.41926003 336.63003540]
[-30.04507828 320.28857422]
[-15.09270191 313.55368042]
[-6.73491764 301.09786987]
[1.62286639 288.64205933]
[9.98065090 276.18621826]
[18.33843422 263.73040771]
[25.49923325 250.55000305]
[31.40073586 236.75971985]
[37.30224228 222.96942139]
[31.54207039 209.28161621]
[37.33058548 195.21221924]
[51.72667313 189.26322937]
[57.62817764 175.47294617]
[63.52967834 161.68264771]
[59.31476212 150.22610474]
[64.26042175 138.62588501]
[76.18345642 133.41070557]
[82.51098633 119.81061554]
[88.83850861 106.21052551]
[94.52483368 92.33011627]
[99.55758667 78.19960785]
[104.59033966 64.06909180]
[109.62308502 49.93857574]
[114.65583801 35.80806351]
[113.62705231 30.32272530]
[114.80621338 25.52741623]
[117.51652527 22.17944908]
[120.87258911 20.63288116]
[127.20011139 7.03279209]
[133.52763367 -6.56729698]
[128.34619141 -21.25710106]
[134.95693970 -34.95938492]
[148.99334717 -39.80857849]
[155.32087708 -53.40866852]
[161.64840698 -67.00875854]
[161.43786621 -73.90620422]
[164.40570068 -79.01519012]
[168.81552124 -81.23875427]
[175.97631836 -94.41915894]
[183.13711548 -107.59955597]
[190.29791260 -120.77996063]
[190.08721924 -136.59976196]
[202.96176147 -144.08944702]
[210.12255859 -157.26985168]
[217.28335571 -170.45025635]
[212.55885315 -185.53184509]
[219.95635986 -199.49797058]
[235.08706665 -204.06274414]
[248.97419739 -196.51799011]
[253.37875366 -181.33987427]
[245.68759155 -167.53329468]
[230.46374512 -163.28945923]
[223.30294800 -150.10905457]
[216.14215088 -136.92864990]
[216.86503601 -122.05159760]
[203.47831726 -113.61916351]
[196.31752014 -100.43875885]
[189.15670776 -87.25836182]
[181.99591064 -74.07795715]
[175.24848938 -60.68123245]
[168.92095947 -47.08114243]
[162.59344482 -33.48105240]
[167.92514038 -19.62072945]
[161.70185852 -5.73816633]
[147.12773132 -0.23977135]
[140.80020142 13.36031723]
[134.47267151 26.96040726]
[128.78634644 40.84081268]
[123.75360107 54.97132874]
[118.72084808 69.10184479]
[113.68810272 83.23235321]
[108.65534973 97.36286926]
[109.90415192 101.22303009]
[109.34981537 105.62332916]
[106.79065704 109.70129395]
[102.43859863 112.53804779]
[96.11107635 126.13813782]
[89.78354645 139.73823547]
[91.89535522 157.94776917]
[77.31997681 167.58415222]
[71.41847229 181.37443542]
[65.51696777 195.16473389]
[71.15276337 209.68629456]
[64.97135162 223.58753967]
[51.09253693 228.87092590]
[45.19103241 242.66122437]
[39.28952789 256.45150757]
[53.89297867 253.02526855]
[66.79049683 260.68386841]
[70.77183533 275.14584351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[17 97]
[18 96]
[19 95]
[22 92]
[23 91]
[24 90]
[27 88]
[28 87]
[29 86]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[38 77]
[39 76]
[40 75]
[43 72]
[44 71]
[45 70]
[48 69]
[49 68]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
