%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:25:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCGGCUCGCCUCGCGGCGGGCGCCCUCGUCGCCAGCGGCGCACCAUGGACGGGCUGCCCGGUCGGGCGCUGGGGGCCGCCUGCCUUCUGCUGCUGGCGGCCGGCUGGCUGGGGCCUGAGGCCUGGGGCUCACCCACGCCCCCGC\
) } def
/len { sequence length } bind def

/coor [
[93.54919434 178.29902649]
[78.57956696 177.34484863]
[70.98106384 164.41184998]
[77.43517303 150.87052917]
[79.79586792 136.05744934]
[82.15655518 121.24437714]
[74.67175293 120.76709747]
[65.49829102 132.63500977]
[56.32482529 144.50292969]
[47.15135956 156.37086487]
[37.97789383 168.23878479]
[28.80442810 180.10670471]
[19.63096237 191.97462463]
[17.97033691 208.28947449]
[2.90211940 214.76101685]
[-10.07279873 204.73187256]
[-7.60693455 188.51918030]
[7.76304293 182.80114746]
[16.93650818 170.93322754]
[26.10997391 159.06530762]
[35.28343964 147.19738770]
[44.45690536 135.32946777]
[53.63037109 123.46154785]
[62.80383682 111.59362793]
[65.18179321 96.78331757]
[60.18470001 82.64015961]
[55.18760300 68.49699402]
[45.04090118 64.34284973]
[39.01197815 55.45021057]
[38.91372681 44.92742538]
[44.53525925 36.29342270]
[40.14291763 21.95092010]
[35.75057602 7.60841894]
[31.35823631 -6.73408175]
[26.96589470 -21.07658386]
[22.57355309 -35.41908264]
[18.18121147 -49.76158524]
[13.78886986 -64.10408783]
[9.39652824 -78.44658661]
[5.00418711 -92.78908539]
[0.61184537 -107.13159180]
[-3.78049612 -121.47409058]
[-8.17283821 -135.81658936]
[-19.61173248 -137.62635803]
[-29.48743629 -143.57637024]
[-36.37161255 -152.76081848]
[-39.28565598 -163.80949402]
[-37.83967209 -175.09217834]
[-32.28416443 -184.95907593]
[-23.46765327 -191.98214722]
[-26.93836403 -206.57510376]
[-32.00142670 -214.26303101]
[-30.32438087 -221.51458740]
[-33.48456955 -236.17791748]
[-36.64476013 -250.84124756]
[-39.80495071 -265.50457764]
[-42.96513748 -280.16790771]
[-53.43618774 -292.02822876]
[-48.55392075 -306.09994507]
[-51.71411133 -320.76327515]
[-54.87429810 -335.42660522]
[-58.03448868 -350.08993530]
[-62.25259399 -355.32595825]
[-63.02324677 -361.04476929]
[-61.00363922 -365.44219971]
[-63.53865051 -380.22644043]
[-66.07366180 -395.01068115]
[-68.60868073 -409.79492188]
[-77.24487305 -424.38439941]
[-65.61630249 -436.72183228]
[-50.54189682 -428.96307373]
[-53.82444000 -412.32992554]
[-51.28942490 -397.54568481]
[-48.75441360 -382.76144409]
[-46.21940231 -367.97720337]
[-43.37115860 -353.25012207]
[-40.21097183 -338.58679199]
[-37.05078125 -323.92346191]
[-33.89059067 -309.26013184]
[-23.64558029 -298.44860840]
[-28.30180931 -283.32809448]
[-25.14162064 -268.66476440]
[-21.98143196 -254.00143433]
[-18.82124138 -239.33810425]
[-15.66105270 -224.67477417]
[-12.34541607 -210.04580688]
[-8.87470436 -195.45286560]
[8.71613789 -189.35003662]
[19.22580528 -173.80039978]
[18.31529617 -154.90538025]
[6.16966343 -140.20893860]
[10.56200504 -125.86643219]
[14.95434666 -111.52393341]
[19.34668732 -97.18142700]
[23.73902893 -82.83892822]
[28.13137054 -68.49642944]
[32.52371216 -54.15392685]
[36.91605377 -39.81142426]
[41.30839539 -25.46892548]
[45.70073700 -11.12642384]
[50.09307861 3.21607757]
[54.48542023 17.55857849]
[58.87776184 31.90107918]
[73.96629333 43.92857742]
[69.33076477 63.49990082]
[74.32785797 77.64305878]
[79.32495880 91.78622437]
[82.12109375 83.99883270]
[87.91111755 77.27507019]
[96.24551392 72.77059937]
[106.23274231 71.43840790]
[116.63254547 73.86292267]
[126.00996399 80.13673401]
[132.93083191 89.80154419]
[146.84918213 95.39438629]
[160.76751709 100.98723602]
[174.68585205 106.58008575]
[188.60418701 112.17292786]
[205.55555725 112.46832275]
[209.96430969 128.83900452]
[195.45387268 137.60731506]
[183.01133728 126.09126282]
[169.09300232 120.49842072]
[155.17466736 114.90557098]
[141.25633240 109.31272125]
[127.33798981 103.71987915]
[117.54793549 115.08450317]
[125.13966370 128.02149963]
[132.73138428 140.95848083]
[140.32312012 153.89547729]
[147.91484070 166.83245850]
[163.37055969 168.21112061]
[175.04196167 178.43647766]
[178.44119263 193.57664490]
[172.26115417 207.80995178]
[158.87820435 215.66337585]
[143.43835449 214.11712646]
[131.87855530 203.76576233]
[128.64378357 188.58961487]
[134.97785950 174.42419434]
[127.38613129 161.48719788]
[119.79440308 148.55021667]
[112.20267487 135.61322021]
[104.61094666 122.67623138]
[97.12615204 122.19895172]
[97.58619690 137.19189453]
[98.04624176 152.18482971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[25 107]
[26 106]
[27 105]
[31 103]
[32 102]
[33 101]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[40 94]
[41 93]
[42 92]
[43 91]
[50 87]
[51 86]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[59 79]
[60 78]
[61 77]
[62 76]
[65 75]
[66 74]
[67 73]
[68 72]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
