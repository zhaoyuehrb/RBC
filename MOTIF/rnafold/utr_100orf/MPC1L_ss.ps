%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGGAUGGCGGUACUGUGGCGGAAGAUGAGAGAUAACUUCCAGAGCAAGGAGUUCCGGGAAUACGUGAGCAGCACUCACUUCUGGGGUCCCGCGU\
) } def
/len { sequence length } bind def

/coor [
[85.34056091 246.14086914]
[74.57923126 234.56636047]
[75.23773193 218.77578735]
[86.92536926 208.13743591]
[87.39186859 193.14469910]
[87.85836792 178.15194702]
[84.86742401 171.24690247]
[88.57973480 162.70222473]
[89.51227570 147.73124695]
[90.44482422 132.76025391]
[91.37736511 117.78927612]
[85.28243256 113.41871643]
[66.99762726 100.30704498]
[53.11722183 105.99337006]
[50.42021942 121.18315887]
[39.92238235 132.48797607]
[24.97352791 136.30050659]
[10.34378338 131.40415955]
[0.70144814 119.36136627]
[-0.87664479 104.01493073]
[6.11306858 90.26184082]
[19.44019508 82.49066162]
[34.85210037 83.18114471]
[47.43089676 92.11296844]
[61.31130219 86.42663574]
[63.40403366 71.57334137]
[51.63512039 62.27319717]
[39.86620712 52.97305298]
[28.09729195 43.67291260]
[16.32837868 34.37276840]
[2.37116218 40.65406418]
[-12.90569878 39.71806335]
[-25.99169350 31.77984238]
[-33.87975693 18.66355324]
[-34.75727081 3.38322163]
[-28.42258453 -10.54984570]
[-16.33136749 -19.93392944]
[-1.26209128 -22.61263847]
[13.32243538 -17.97042465]
[24.07079506 -7.07403231]
[28.51309204 7.57262516]
[25.62852097 22.60385323]
[37.39743423 31.90399742]
[49.16634750 41.20413971]
[60.93526459 50.50428391]
[72.70417786 59.80442810]
[71.96790314 44.82250595]
[76.39964294 30.49213219]
[85.46498108 18.54141235]
[98.07070923 10.41149426]
[112.69670105 7.08277321]
[127.57919312 8.95666027]
[140.92349243 15.80718327]
[151.12039185 26.80823135]
[156.94026184 40.63317871]
[157.68125916 55.61486816]
[153.25402832 69.94664001]
[144.19245911 81.90021515]
[131.58929443 90.03409576]
[116.96620178 93.36733246]
[131.96438599 93.13405609]
[145.64256287 85.18307495]
[158.48863220 92.72151184]
[173.48681641 92.48822784]
[188.48500061 92.25495148]
[203.48318481 92.02167511]
[208.26110840 89.13745117]
[213.16574097 88.56301117]
[217.25074768 89.92955017]
[219.87446594 92.53169250]
[234.82913208 93.69694519]
[249.78379822 94.86220551]
[264.73846436 96.02746582]
[279.69314575 97.19271851]
[292.76989746 87.89871979]
[308.14904785 92.46611023]
[314.03305054 107.39119720]
[305.90820312 121.22471619]
[290.00717163 123.35478210]
[278.52789307 112.14739227]
[263.57321167 110.98213196]
[248.61854553 109.81687927]
[233.66387939 108.65161896]
[218.70921326 107.48635864]
[203.71646118 107.01985931]
[188.71827698 107.25314331]
[173.72009277 107.48641968]
[158.72190857 107.71969604]
[146.11650085 115.65399170]
[132.19766235 108.13224792]
[117.19948578 108.36552429]
[106.34835052 118.72182465]
[105.41580963 133.69281006]
[104.48326111 148.66378784]
[103.55072021 163.63478088]
[102.85111237 178.61845398]
[102.38461304 193.61119080]
[101.91811371 208.60394287]
[112.92176819 219.94833374]
[112.59729767 235.74928284]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 98]
[5 97]
[6 96]
[8 95]
[9 94]
[10 93]
[11 92]
[13 25]
[14 24]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[60 91]
[61 90]
[63 88]
[64 87]
[65 86]
[66 85]
[70 84]
[71 83]
[72 82]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
