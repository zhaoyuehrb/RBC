%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCAAUCAGACACAGAUGAUGGAAUUCUUGCUUGUGAGAUUUACUGAGAAUUGGGUGCUCCUGAGGCUGCAUGCUUUGCUCUUCUCACUGAUCUACC\
) } def
/len { sequence length } bind def

/coor [
[-2.69448113 216.51425171]
[-20.19020081 220.82159424]
[-38.16127396 219.75662231]
[-54.99673462 213.42404175]
[-69.19013977 202.40029907]
[-81.24259949 211.32992554]
[-93.29505157 220.25956726]
[-98.44337463 228.02406311]
[-105.86406708 229.27255249]
[-118.18840790 237.82304382]
[-130.51274109 246.37351990]
[-130.71592712 261.88928223]
[-140.02719116 274.30218506]
[-154.86614990 278.83920288]
[-169.52693176 273.75579834]
[-178.37217712 261.00662231]
[-178.00068665 245.49400330]
[-168.55531311 233.18284607]
[-153.66799927 228.80705261]
[-139.06321716 234.04919434]
[-126.73889160 225.49870300]
[-114.41455078 216.94822693]
[-102.22468567 208.20710754]
[-90.17223358 199.27748108]
[-78.11977386 190.34783936]
[-83.04479980 179.08424377]
[-85.57228851 167.04707336]
[-85.59361267 154.74105835]
[-83.10528564 142.68272400]
[-78.20919037 131.37869263]
[-71.10845947 121.30450439]
[-62.09901047 112.88448334]
[-51.55721283 106.47394562]
[-39.92420197 102.34419250]
[-27.68737793 100.67101288]
[-15.36001492 101.52720642]
[-3.45971084 104.87943268]
[7.51333141 110.58948517]
[17.09733772 118.42001343]
[24.88838577 128.04434204]
[38.38842773 121.50607300]
[51.88846588 114.96781158]
[65.38850403 108.42954254]
[78.88854218 101.89127350]
[81.63728333 89.41316223]
[91.05878448 80.78216553]
[103.72940063 79.13467407]
[115.04480743 85.06935120]
[128.74165344 78.95410156]
[142.43850708 72.83884430]
[156.13534546 66.72358704]
[169.83219910 60.60833740]
[183.52905273 54.49308014]
[187.89436340 49.14863205]
[193.48568726 47.23893738]
[198.27281189 48.45306778]
[212.32334900 43.20117188]
[226.37388611 37.94927597]
[240.42442322 32.69737625]
[227.86332703 24.49866486]
[224.49893188 9.88084030]
[232.21205139 -2.98413825]
[246.69076538 -6.90422535]
[259.84085083 0.31206653]
[264.31091309 14.63053799]
[257.60144043 28.04705429]
[272.38247681 25.49340248]
[287.16351318 22.93974876]
[301.94451904 20.38609505]
[316.72555542 17.83244133]
[327.11059570 5.60417795]
[343.14093018 6.24333286]
[352.51943970 19.25960159]
[348.05172729 34.66801453]
[333.16506958 40.64855957]
[319.27920532 32.61347198]
[304.49819946 35.16712570]
[289.71716309 37.72077942]
[274.93612671 40.27443314]
[260.15509033 42.82808685]
[245.67631531 46.74791336]
[231.62577820 51.99980927]
[217.57524109 57.25170898]
[203.52470398 62.50360489]
[189.64430237 68.18993378]
[175.94744873 74.30518341]
[162.25061035 80.42044067]
[148.55375671 86.53569031]
[134.85690308 92.65094757]
[121.16005707 98.76620483]
[115.68866730 114.25257874]
[100.79702759 121.18100739]
[85.42681122 115.39131927]
[71.92677307 121.92958069]
[58.42673111 128.46784973]
[44.92669296 135.00611877]
[31.42665291 141.54438782]
[34.55084610 159.36848450]
[32.25960541 177.30300903]
[24.76752281 193.74089050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 25]
[6 24]
[7 23]
[9 22]
[10 21]
[11 20]
[40 97]
[41 96]
[42 95]
[43 94]
[44 93]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[56 84]
[57 83]
[58 82]
[59 81]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
