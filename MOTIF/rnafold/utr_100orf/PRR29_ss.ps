%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGGCGCCAGCCAUGGCCUCUGGGGCGGGCGGAAGCUGGGGUCGCUCCCCACCGCAGAGCGCAGUCCCGACGCCCUGGGUCACCUUCCUGCAGCCCCUCUCGUGGGCCGUCC\
) } def
/len { sequence length } bind def

/coor [
[39.99570847 461.33795166]
[29.60911369 472.16009521]
[14.72257519 474.00155640]
[2.01201653 466.03652954]
[-2.82246852 451.83715820]
[-10.26324558 464.86157227]
[-17.70402145 477.88595581]
[-17.08831787 494.27355957]
[-31.11463356 502.77029419]
[-45.35389709 494.63546753]
[-45.15797424 478.23748779]
[-30.72841644 470.44519043]
[-23.28763962 457.42077637]
[-15.84686279 444.39639282]
[-9.68348503 430.72113037]
[-4.85381031 416.51992798]
[-0.02413515 402.31872559]
[4.80554008 388.11752319]
[9.63521481 373.91632080]
[14.46489048 359.71511841]
[19.29456520 345.51388550]
[16.06720543 330.97314453]
[27.83582687 320.39910889]
[32.66550446 306.19790649]
[37.49517822 291.99670410]
[42.32485199 277.79550171]
[47.15452957 263.59429932]
[43.92716599 249.05354309]
[55.69578934 238.47952271]
[60.52546692 224.27832031]
[65.35514069 210.07710266]
[70.18481445 195.87590027]
[74.23176575 181.43214417]
[77.48391724 166.78894043]
[80.73606873 152.14572144]
[83.98822021 137.50251770]
[87.24037170 122.85931396]
[73.98405457 111.46869659]
[70.13298798 92.96636200]
[78.95806885 74.66141510]
[70.14128876 62.52616119]
[61.32450867 50.39090729]
[52.50772858 38.25565338]
[36.95089722 34.33589554]
[30.44741058 19.67014694]
[37.98619080 5.50870848]
[53.78413010 2.71502662]
[65.72240448 13.43217373]
[64.64298248 29.43887329]
[73.45976257 41.57412720]
[82.27654266 53.70938110]
[91.09332275 65.84463501]
[106.08072662 65.23014832]
[113.87448883 52.41386032]
[121.66825104 39.59756851]
[123.49469757 30.50550461]
[129.85400391 26.54175949]
[137.99491882 13.94313431]
[146.13584900 1.34451056]
[147.12696838 -14.44562054]
[160.53305054 -20.93610954]
[168.67398071 -33.53473282]
[176.81489563 -46.13335800]
[170.34751892 -60.13965607]
[172.50180054 -75.41586304]
[182.59034729 -87.08740234]
[197.39393616 -91.42991638]
[212.18878174 -87.05773926]
[222.25392151 -75.36599731]
[224.37759399 -60.08550262]
[217.88214111 -46.09219742]
[204.84024048 -37.85129166]
[189.41352844 -37.99243164]
[181.27259827 -25.39380836]
[173.13166809 -12.79518414]
[172.72283936 2.09380984]
[158.73448181 9.48543644]
[150.59355164 22.08406067]
[142.45262146 34.68268585]
[134.48454285 47.39132690]
[126.69078064 60.20761871]
[118.89701843 73.02391052]
[129.40484619 89.42938995]
[128.49072266 107.87057495]
[117.66706085 121.55302429]
[101.88357544 126.11146545]
[98.63142395 140.75466919]
[95.37927246 155.39787292]
[92.12712097 170.04109192]
[88.87497711 184.68429565]
[90.45658875 189.06512451]
[90.46998596 193.27764893]
[89.17983246 196.82502747]
[86.99132538 199.35725403]
[84.38602448 200.70558167]
[79.55634308 214.90678406]
[74.72666931 229.10798645]
[69.89699554 243.30918884]
[72.77890778 258.86572266]
[61.35573196 268.42398071]
[56.52605820 282.62518311]
[51.69638443 296.82638550]
[46.86670685 311.02758789]
[42.03703308 325.22879028]
[44.91894150 340.78530884]
[33.49576950 350.34356689]
[28.66609573 364.54476929]
[23.83642006 378.74597168]
[19.00674629 392.94720459]
[14.17707062 407.14840698]
[9.34739494 421.34960938]
[4.51772022 435.55081177]
[18.35824394 429.76809692]
[32.74431992 434.01553345]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 14]
[6 13]
[7 12]
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[23 104]
[24 103]
[25 102]
[26 101]
[27 100]
[29 98]
[30 97]
[31 96]
[32 95]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[40 52]
[41 51]
[42 50]
[43 49]
[53 82]
[54 81]
[55 80]
[57 79]
[58 78]
[59 77]
[61 75]
[62 74]
[63 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
