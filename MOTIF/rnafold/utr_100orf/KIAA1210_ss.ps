%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAGGGCCGGCUGGACGCCUCGAGGCUUCUCUGCCUUUCACGCUUCUCUCCUUCCUGGCCGGCACCCCUACCUGGCUCACCUGGGCCCCAGGGACCGAG\
) } def
/len { sequence length } bind def

/coor [
[125.19037628 171.92314148]
[115.51504517 161.47007751]
[110.00424957 148.30322266]
[109.34671021 134.01473999]
[113.64292145 120.34012604]
[101.87400818 111.03997803]
[89.96188354 101.92398834]
[77.90943146 92.99435425]
[65.85697937 84.06472015]
[53.80452347 75.13508606]
[41.75206757 66.20545959]
[29.69961357 57.27582550]
[17.64715958 48.34619141]
[4.46675873 41.18539429]
[-9.58377838 35.93349457]
[-23.63431549 30.68159866]
[-39.27000427 33.09734344]
[-48.48263550 21.39363861]
[-62.53317261 16.14174271]
[-76.41805267 25.65153694]
[-93.07260132 25.08293343]
[-106.01750946 14.85294342]
[-110.33276367 -0.90086281]
[-124.53984070 -5.71324921]
[-138.74691772 -10.52563572]
[-152.95397949 -15.33802223]
[-167.16105652 -20.15040970]
[-181.21818542 -12.92733288]
[-196.23980713 -17.83921242]
[-203.31385803 -31.97191811]
[-198.24342346 -46.94076538]
[-184.03672791 -53.86500168]
[-169.12231445 -48.63660049]
[-162.34867859 -34.35748291]
[-148.14160156 -29.54509544]
[-133.93452454 -24.73270988]
[-119.72745514 -19.92032242]
[-105.52037811 -15.10793591]
[-95.29792786 -23.84624863]
[-81.97745514 -26.36825180]
[-69.06242371 -21.90053940]
[-60.00453949 -11.52270794]
[-57.28127670 2.09120584]
[-43.23073959 7.34310246]
[-28.60004044 4.55170918]
[-18.38241768 16.63106155]
[-4.33188152 21.88295937]
[9.71865559 27.13485527]
[3.38564157 13.53732204]
[5.19094181 -1.35364509]
[14.58971500 -13.04394245]
[28.74540710 -18.00543404]
[43.38582230 -14.74073696]
[54.09247589 -4.23514032]
[57.63409424 10.34076214]
[52.94181442 24.58795547]
[41.43177032 34.20663071]
[26.57679176 36.29373550]
[38.62924576 45.22336960]
[50.68170166 54.15300369]
[62.73415375 63.08263397]
[74.78661346 72.01226807]
[86.83906555 80.94190216]
[98.89151764 89.87153625]
[106.87516785 91.80967712]
[111.17415619 99.27106476]
[122.94306946 108.57120514]
[136.84761047 100.66542816]
[152.67887878 98.66927338]
[168.03678894 102.85592651]
[180.60420227 112.56343079]
[188.49661255 126.29916382]
[190.54464722 141.96934509]
[186.46725464 157.19808960]
[198.51971436 166.12771606]
[210.57215881 175.05735779]
[219.49938965 177.72138977]
[222.85479736 184.45687866]
[234.62371826 193.75701904]
[243.46377563 196.69741821]
[246.60807800 203.53399658]
[258.08206177 213.19564819]
[269.55606079 222.85731506]
[281.03005981 232.51896667]
[292.50402832 242.18061829]
[308.51440430 247.75773621]
[307.58737183 264.68630981]
[291.06372070 268.48181152]
[282.84237671 253.65461731]
[271.36837769 243.99295044]
[259.89440918 234.33129883]
[248.42041016 224.66964722]
[236.94642639 215.00798035]
[225.32356262 205.52593994]
[213.55465698 196.22579956]
[201.64253235 187.10980225]
[189.59007263 178.18017578]
[177.53762817 169.25053406]
[165.70509338 176.96176147]
[151.91525269 180.14944458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 48]
[15 47]
[16 46]
[18 44]
[19 43]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[74 98]
[75 97]
[76 96]
[78 95]
[79 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
