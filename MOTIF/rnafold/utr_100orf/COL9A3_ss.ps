%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUGGCCGGGCCGCGCGCGUGCGCCCCGCUCCUGCUCCUGCUCCUGCUCGGGGAGCUUCUGGCGGCCGCCGGGGCGCAGAGAGUGGGACUCCCCGGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.22569275 261.58859253]
[75.71656036 256.34564209]
[66.36341858 244.07688904]
[65.15081787 228.69725037]
[72.46570587 215.11431885]
[85.97391510 207.66235352]
[86.87959290 192.68972778]
[87.78527069 177.71708679]
[88.69094849 162.74446106]
[89.59662628 147.77182007]
[90.50230408 132.79919434]
[91.40798187 117.82656097]
[83.54135132 113.43600464]
[77.98847198 105.56403351]
[76.27102661 95.45005035]
[62.09152985 100.34309387]
[47.91203308 105.23613739]
[33.73253250 110.12917328]
[23.39649010 122.86095428]
[7.24728489 120.00872803]
[1.89783704 104.50661469]
[12.85120010 92.30186462]
[28.83949280 95.94967651]
[43.01898956 91.05664062]
[57.19848633 86.16359711]
[71.37798309 81.27055359]
[82.14356995 70.82535553]
[87.46264648 56.80011368]
[92.78171539 42.77486801]
[98.10079193 28.74962425]
[103.41986084 14.72438145]
[108.73893738 0.69913745]
[114.05800629 -13.32610607]
[119.16464996 -27.43008614]
[124.05769348 -41.60958099]
[128.95072937 -55.78908157]
[133.84378052 -69.96857452]
[131.03135681 -85.53780365]
[142.49710083 -95.04496765]
[147.39013672 -109.22446442]
[129.52737427 -115.51119995]
[119.13917542 -138.58470154]
[117.33112335 -153.47534180]
[115.52307892 -168.36596680]
[113.71502686 -183.25660706]
[111.90697479 -198.14723206]
[110.09892273 -213.03787231]
[98.40768433 -224.02397156]
[99.85115814 -240.00195312]
[113.32203674 -248.71487427]
[128.48661804 -243.47892761]
[133.71192932 -228.31068420]
[124.98955536 -214.84591675]
[126.79760742 -199.95529175]
[128.60565186 -185.06465149]
[130.41371155 -170.17402649]
[132.22175598 -155.28338623]
[134.02981567 -140.39276123]
[140.91476440 -137.41830444]
[154.68467712 -131.46940613]
[161.56964111 -128.49494934]
[173.65141296 -137.38488770]
[185.73316956 -146.27482605]
[197.81494141 -155.16474915]
[209.89671326 -164.05468750]
[215.97700500 -179.28498840]
[232.24353027 -181.36633301]
[241.96269226 -168.15762329]
[235.13623047 -153.24684143]
[218.78663635 -151.97291565]
[206.70487976 -143.08299255]
[194.62310791 -134.19305420]
[182.54133606 -125.30312347]
[170.45957947 -116.41318512]
[161.56964111 -104.33142090]
[156.67660522 -90.15192413]
[159.83898926 -75.59690857]
[148.02326965 -65.07553864]
[143.13023376 -50.89603806]
[138.23718262 -36.71654129]
[133.34414673 -22.53704262]
[134.15107727 -15.06296539]
[128.08325195 -8.00703335]
[122.76418304 6.01821089]
[117.44510651 20.04345512]
[112.12602997 34.06869888]
[106.80696106 48.09394073]
[101.48788452 62.11918640]
[96.16881561 76.14443207]
[109.81896210 78.88449860]
[119.21153259 88.45735168]
[121.50717163 101.15142822]
[116.47497559 112.47225189]
[106.38061523 118.73223877]
[105.47493744 133.70486450]
[104.56925964 148.67750549]
[103.66358185 163.65013123]
[102.75790405 178.62277222]
[101.85222626 193.59539795]
[100.94654846 208.56803894]
[113.45803833 217.59390259]
[119.08235168 231.95950317]
[116.02478790 247.08084106]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[12 94]
[15 26]
[16 25]
[17 24]
[18 23]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 81]
[35 80]
[36 79]
[37 78]
[39 76]
[40 75]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[47 53]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
