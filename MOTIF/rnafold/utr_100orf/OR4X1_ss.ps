%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:51:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUUGCUACAAACAAUGUGACUGAAAUAAUUUUCGUGGGAUUUUCCCAGAAUUGGAGUGAGCAGAGGGUCAUUUCUGUGAUGUUUCUCCUCAUGUACA\
) } def
/len { sequence length } bind def

/coor [
[101.01122284 127.09101868]
[85.81011200 125.27691650]
[73.06887054 115.07881165]
[61.90090561 125.09263611]
[50.73294449 135.10646057]
[39.56498337 145.12028503]
[28.39702225 155.13410950]
[17.22906113 165.14791870]
[20.46966934 180.16105652]
[15.75427914 194.77818298]
[4.35130692 205.06739807]
[-10.67190552 208.26092529]
[-25.27418900 203.49974060]
[-35.52760315 192.06457520]
[-38.67403030 177.03143311]
[-33.86709976 162.44413757]
[-22.39984894 152.22662354]
[-7.35691071 149.12733459]
[7.21523809 153.97996521]
[18.38319969 143.96614075]
[29.55116081 133.95231628]
[40.71912384 123.93849945]
[51.88708496 113.92467499]
[63.05504608 103.91085052]
[51.39436340 113.34634399]
[36.53109360 115.36703491]
[22.77464485 109.38706207]
[14.11351585 97.14023590]
[13.05888748 82.17735291]
[19.91653442 68.83671570]
[32.69817352 60.98625565]
[47.69793701 60.90211487]
[60.56684494 68.60868835]
[67.57320404 81.86916351]
[61.24568176 68.26907349]
[54.91815567 54.66898346]
[48.34563446 48.06636047]
[48.61269379 40.54611206]
[42.71118927 26.75581551]
[36.80968475 12.96551991]
[30.90818214 -0.82477540]
[25.00667763 -14.61507130]
[13.21631050 -26.79799271]
[21.65921974 -41.50015640]
[38.12404633 -37.45716095]
[38.79697418 -20.51657486]
[44.69847870 -6.72627926]
[50.59998322 7.06401634]
[56.50148392 20.85431099]
[62.40298843 34.64460754]
[68.51824188 48.34145737]
[74.84577179 61.94154358]
[81.17329407 75.54163361]
[109.25409698 74.51848602]
[122.80156708 94.94752502]
[137.71276855 96.57730865]
[151.05317688 85.39355469]
[168.03070068 87.19427490]
[178.31585693 100.39862823]
[193.27052307 101.56388092]
[208.22518921 102.72914124]
[223.17987061 103.89440155]
[238.13453674 105.05965424]
[252.49406433 98.41778564]
[264.58181763 107.12041473]
[279.53649902 108.28566742]
[294.49114990 109.45092773]
[309.44583130 110.61618805]
[325.76333618 102.26241302]
[339.89300537 112.54125214]
[354.87667847 113.24085999]
[369.86035156 113.94046021]
[384.84402466 114.64006805]
[399.82769775 115.33967590]
[414.14041138 107.33480835]
[428.08880615 115.95888519]
[427.32394409 132.34017944]
[412.63265991 139.62702942]
[399.12808228 130.32334900]
[384.14440918 129.62374878]
[369.16073608 128.92413330]
[354.17706299 128.22453308]
[339.19338989 127.52492523]
[329.93777466 135.48428345]
[317.34020996 134.91322327]
[308.28057861 125.57085419]
[293.32589722 124.40559387]
[278.37121582 123.24034119]
[263.41656494 122.07508087]
[250.12667847 128.80029297]
[236.96926880 120.01432800]
[222.01460266 118.84906769]
[207.05993652 117.68381500]
[192.10527039 116.51855469]
[177.15058899 115.35329437]
[168.54101562 125.07733917]
[155.69883728 128.05754089]
[143.32460022 122.97039795]
[136.08297729 111.48851013]
[121.17178345 109.85872650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[34 53]
[35 52]
[36 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
[55 100]
[56 99]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[65 89]
[66 88]
[67 87]
[68 86]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
