%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUCAUUGCUGCAGACGCUCACCCCAGACACUCACUGCACCGGAGUGAGCGCGACCAUCAUGUCCAUGCUCGUGGUCUUUCUCUUGCUGUGGGGUGUCACCUGGGGCCCAGUGACAGAAGCAGCCAUAUUUUAUGAGACGCAGCCCAGCCUGUGGGCAG\
) } def
/len { sequence length } bind def

/coor [
[283.41854858 491.23852539]
[279.69940186 476.70687866]
[275.98025513 462.17526245]
[272.26110840 447.64364624]
[267.84634399 433.30804443]
[262.74624634 419.20169067]
[257.64614868 405.09533691]
[252.54603577 390.98901367]
[247.44593811 376.88265991]
[227.41894531 364.14468384]
[231.12097168 339.99511719]
[224.16983032 326.70297241]
[217.21867371 313.41079712]
[210.26753235 300.11865234]
[203.31637573 286.82647705]
[184.74490356 285.21585083]
[170.74742126 272.67990112]
[167.04846191 254.10502625]
[175.30482483 236.89413452]
[167.59715271 224.02587891]
[159.88949585 211.15763855]
[152.18182373 198.28938293]
[135.72763062 194.91716003]
[126.60425568 180.41490173]
[130.85108948 163.46846008]
[122.89685822 150.75114441]
[114.94261932 138.03382874]
[106.98838806 125.31650543]
[99.03414917 112.59918976]
[90.71562195 100.11711884]
[82.03976440 87.88072205]
[73.36390686 75.64431763]
[64.68804932 63.40792084]
[56.01219177 51.17152023]
[47.33633041 38.93511963]
[38.66047287 26.69872093]
[29.86709976 14.54649544]
[20.95702934 2.47957277]
[6.53529978 -4.02614117]
[5.19959974 -18.86073494]
[-3.71047211 -30.92765808]
[-12.62054348 -42.99457932]
[-27.99792099 -45.47933578]
[-36.86210251 -57.84383774]
[-34.39850616 -72.48850250]
[-43.30857849 -84.55542755]
[-52.21864700 -96.62235260]
[-61.12871933 -108.68927002]
[-75.55044556 -115.19498444]
[-76.88614655 -130.02958679]
[-85.79621887 -142.09649658]
[-100.21794891 -148.60221863]
[-101.55364990 -163.43681335]
[-110.46372223 -175.50373840]
[-119.37379456 -187.57064819]
[-128.28385925 -199.63757324]
[-137.19393921 -211.70449829]
[-151.61566162 -218.21022034]
[-152.95137024 -233.04481506]
[-161.86143494 -245.11172485]
[-170.77151489 -257.17864990]
[-186.38912964 -257.96853638]
[-197.80995178 -268.65023804]
[-199.64140320 -284.18020630]
[-191.01872253 -297.22564697]
[-176.01330566 -301.62692261]
[-161.71022034 -295.30584717]
[-154.86296082 -281.24707031]
[-158.70458984 -266.08871460]
[-149.79450989 -254.02180481]
[-140.88444519 -241.95487976]
[-127.10002136 -236.31227112]
[-125.12701416 -220.61457825]
[-116.21694183 -208.54765320]
[-107.30686951 -196.48072815]
[-98.39679718 -184.41380310]
[-89.48672485 -172.34687805]
[-75.70230865 -166.70426941]
[-73.72930145 -151.00657654]
[-64.81922913 -138.93965149]
[-51.03480530 -133.29704285]
[-49.06179810 -117.59934235]
[-40.15172577 -105.53241730]
[-31.24165344 -93.46549988]
[-22.33158302 -81.39857483]
[-7.61047983 -79.44288635]
[1.59749806 -67.33223724]
[-0.55362117 -51.90465164]
[8.35645103 -39.83773041]
[17.26652145 -27.77080727]
[31.05094337 -22.12820053]
[33.02395248 -6.43049908]
[41.93402100 5.63642359]
[48.46834946 9.16629791]
[50.89687347 18.02286148]
[59.57273102 30.25926208]
[68.24858856 42.49566269]
[76.92444611 54.73206329]
[85.60031128 66.96846008]
[94.27616882 79.20486450]
[102.95202637 91.44126129]
[106.67848206 92.62543488]
[109.85252380 95.46805573]
[111.73611450 99.67892456]
[111.75146484 104.64495850]
[119.70570374 117.36227417]
[127.65993500 130.07958984]
[135.61418152 142.79690552]
[143.56840515 155.51422119]
[156.98226929 157.01617432]
[166.92652893 165.85224915]
[169.90684509 178.61685181]
[165.05007935 190.58171082]
[172.75773621 203.44996643]
[180.46540833 216.31822205]
[188.17306519 229.18646240]
[199.67561340 228.19752502]
[210.66026306 231.57948303]
[219.53485107 238.80177307]
[225.02821350 248.78010559]
[226.37225342 260.03921509]
[223.40908813 270.93090820]
[216.60853577 279.87533569]
[223.55969238 293.16751099]
[230.51083374 306.45965576]
[237.46199036 319.75183105]
[244.41313171 333.04397583]
[250.87486267 333.17562866]
[256.99649048 335.11849976]
[262.28433228 338.69189453]
[266.31875610 343.58453369]
[268.78753662 349.38174438]
[269.50985718 355.60040283]
[268.44937134 361.72927856]
[265.71548462 367.27102661]
[261.55227661 371.78256226]
[266.65237427 385.88888550]
[271.75247192 399.99523926]
[276.85260010 414.10159302]
[281.95269775 428.20791626]
[290.81167603 416.10345459]
[305.78933716 415.28506470]
[315.91439819 426.35226440]
[313.77020264 441.19821167]
[300.92733765 448.94815063]
[286.79272461 443.92449951]
[290.51187134 458.45611572]
[294.23101807 472.98773193]
[297.95016479 487.51937866]
[312.68914795 501.22549438]
[306.79251099 519.61132812]
[311.06890869 533.98883057]
[315.34530640 548.36633301]
[327.61904907 559.24237061]
[324.07235718 575.25335693]
[308.35379028 579.92864990]
[296.63323975 568.45867920]
[300.96780396 552.64276123]
[296.69140625 538.26525879]
[292.41500854 523.88775635]
[282.97781372 519.81945801]
[277.23916626 511.03005981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[4 146]
[5 140]
[6 139]
[7 138]
[8 137]
[9 136]
[11 127]
[12 126]
[13 125]
[14 124]
[15 123]
[19 116]
[20 115]
[21 114]
[22 113]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[36 95]
[37 93]
[38 92]
[40 90]
[41 89]
[42 88]
[45 85]
[46 84]
[47 83]
[48 82]
[50 80]
[51 79]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[59 71]
[60 70]
[61 69]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
