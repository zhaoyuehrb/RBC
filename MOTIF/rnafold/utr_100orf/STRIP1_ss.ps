%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGCGCGAGUUAAGCUGGGGGUGUGGAGCAGCCAAGAUGGAGCCGGCAGUCGGCGGUCCGGGCCCACUGAUCGUGAACAACAAACAGCCCCAGCCCCCGCCACCUCCGCCGCCGGCAGCCGCACAGCCACCACCCG\
) } def
/len { sequence length } bind def

/coor [
[102.40856934 334.57696533]
[90.65349579 343.89459229]
[75.83721161 346.23507690]
[61.78242493 340.99456787]
[52.11535645 329.52514648]
[49.33025360 314.78472900]
[42.12789917 327.94244385]
[47.97756195 342.44470215]
[43.08766556 357.29809570]
[29.76706505 365.48928833]
[14.30534363 363.15066528]
[4.00305223 351.38644409]
[3.72461843 335.75134277]
[13.60151005 323.62774658]
[28.97016144 320.74011230]
[36.17251587 307.58236694]
[41.83380127 293.69171143]
[45.88075256 279.24795532]
[49.92770767 264.80419922]
[53.80998993 250.31532288]
[57.52710724 235.78317261]
[53.18505859 221.53552246]
[64.10081482 210.08314514]
[67.81793213 195.55101013]
[71.53504944 181.01887512]
[75.25216675 166.48672485]
[67.46124268 153.84407043]
[71.02391052 139.05345154]
[84.33752441 130.96733093]
[88.05464172 116.43520355]
[84.67539215 113.34030151]
[82.07563782 109.56684875]
[80.38761902 105.30676270]
[65.48468781 103.60305786]
[50.58175278 101.89936066]
[34.15837097 106.10755920]
[25.56818581 91.49095917]
[37.23556519 79.19020081]
[52.28545380 86.99642181]
[67.18838501 88.70012665]
[82.09131622 90.40383148]
[90.65255737 81.96025085]
[102.48780060 79.83522797]
[109.69015503 66.67748260]
[116.89250946 53.51974869]
[124.09486389 40.36200714]
[131.29721069 27.20426941]
[138.49957275 14.04652977]
[138.33879089 -1.77385974]
[151.23690796 -9.22288322]
[158.43925476 -22.38062096]
[156.98915100 -42.42981720]
[173.78347778 -51.91085052]
[180.37950134 -65.38276672]
[179.49882507 -81.17944336]
[192.04454041 -89.20780182]
[198.64056396 -102.67971802]
[205.23657227 -116.15163422]
[200.34750366 -130.94131470]
[207.22871399 -144.50978088]
[221.35855103 -149.07963562]
[227.95455933 -162.55154419]
[234.55058289 -176.02346802]
[241.14660645 -189.49537659]
[232.18478394 -205.17498779]
[234.34373474 -222.94822693]
[246.58349609 -235.80012512]
[263.92254639 -238.77043152]
[269.89855957 -252.52861023]
[275.87457275 -266.28677368]
[268.16458130 -279.62326050]
[269.76715088 -294.76544189]
[279.85931396 -305.92840576]
[294.41528320 -308.97177124]
[300.39129639 -322.72991943]
[295.86715698 -338.12185669]
[305.19787598 -351.17242432]
[321.22573853 -351.87033081]
[331.65551758 -339.68023682]
[328.48641968 -323.95330811]
[314.14947510 -316.75390625]
[308.17346191 -302.99572754]
[315.88449097 -290.28048706]
[314.61462402 -275.28543091]
[304.64202881 -263.77886963]
[289.63275146 -260.31076050]
[283.65673828 -246.55258179]
[277.68072510 -232.79441833]
[285.37927246 -223.28344727]
[288.28768921 -211.32321167]
[285.78683472 -199.19711304]
[278.29653931 -189.24763489]
[267.20642090 -183.42373657]
[254.61853027 -182.89935303]
[248.02250671 -169.42744446]
[241.42648315 -155.95552063]
[234.83045959 -142.48361206]
[239.88619995 -128.52026367]
[233.38880920 -114.76386261]
[218.70849609 -109.55561066]
[212.11247253 -96.08369446]
[205.51644897 -82.61177826]
[206.86891174 -67.77870178]
[193.85140991 -58.78674698]
[187.25538635 -45.31483078]
[191.45292664 -35.88343048]
[189.68341064 -25.48901367]
[182.29911804 -17.65644455]
[171.59700012 -15.17826748]
[164.39465332 -2.02052879]
[165.07058716 12.85873127]
[151.65731812 21.24888420]
[144.45495605 34.40662384]
[137.25260925 47.56436157]
[130.05024719 60.72209930]
[122.84789276 73.87983704]
[115.64553833 87.03758240]
[118.90108490 107.45362091]
[102.58678436 120.15231323]
[98.86966705 134.68444824]
[106.66553497 148.17008972]
[102.68883514 162.85478210]
[89.78430176 170.20384216]
[86.06718445 184.73599243]
[82.35006714 199.26812744]
[78.63295746 213.80026245]
[82.70912933 229.08735657]
[72.05924988 239.50028992]
[68.34213257 254.03244019]
[69.24699402 263.21054077]
[64.37146759 268.85116577]
[60.32451248 283.29492188]
[56.27756119 297.73867798]
[68.57176208 289.14492798]
[83.50198364 287.69979858]
[97.21614075 293.77612305]
[106.17588806 305.80621338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[23 126]
[24 125]
[25 124]
[26 123]
[29 120]
[30 119]
[33 41]
[34 40]
[35 39]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[50 110]
[51 109]
[53 105]
[54 104]
[56 102]
[57 101]
[58 100]
[61 97]
[62 96]
[63 95]
[64 94]
[68 88]
[69 87]
[70 86]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
