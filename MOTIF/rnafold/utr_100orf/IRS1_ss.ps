%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:26:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUUUUUCGGAGCCUCCCUCUGCUCAGCGUUGGUGGUGGCGGUGGCAGCAUGGCGAGCCCUCCGGAGAGCGAUGGCUUCUCGGACGUGCGCAAGGUGGGCUACCUGCGCAAACCCAAGAGCAUGCACAAACGCUUCUUCGUACUGCGCG\
) } def
/len { sequence length } bind def

/coor [
[80.61225891 115.28629303]
[76.25775146 106.77206421]
[61.26486588 106.31014252]
[46.27198029 105.84821320]
[31.27909279 105.38629150]
[16.28620720 104.92436218]
[1.29332185 104.46244049]
[-13.69956398 104.00051117]
[-28.69244957 103.53858948]
[-43.68533707 103.07666016]
[-58.67822266 102.61473846]
[-73.67110443 102.15280914]
[-88.66399384 101.69087982]
[-103.65687561 101.22895813]
[-118.64976501 100.76702881]
[-134.62846375 109.86164093]
[-149.19429016 100.12095642]
[-164.19351196 99.96695709]
[-179.19271851 99.81295776]
[-194.19271851 99.81295776]
[-209.19192505 99.96695709]
[-225.99668884 111.02713776]
[-242.46186829 100.95760345]
[-257.44210815 101.72726440]
[-272.42233276 102.49692535]
[-287.40258789 103.26658630]
[-295.87304688 106.85085297]
[-302.69766235 103.89505005]
[-317.69055176 104.35697937]
[-331.24591064 112.51558685]
[-344.20541382 105.17389679]
[-359.19830322 105.63581848]
[-374.19119263 106.09774780]
[-389.18408203 106.55966949]
[-404.17697144 107.02159882]
[-417.82736206 116.10997772]
[-432.40124512 108.59108734]
[-432.90628052 92.19971466]
[-418.82287598 83.79790497]
[-404.63888550 92.02870941]
[-389.64599609 91.56678772]
[-374.65310669 91.10485840]
[-359.66024780 90.64293671]
[-344.66735840 90.18100739]
[-332.18438721 82.05544281]
[-318.15249634 89.36408997]
[-303.15960693 88.90216827]
[-288.17224121 88.28633881]
[-273.19201660 87.51668549]
[-258.21176147 86.74702454]
[-243.23152161 85.97736359]
[-237.04292297 77.75189209]
[-227.12982178 74.24864960]
[-216.71966553 76.86643219]
[-209.34591675 84.96775055]
[-194.34671021 84.81375122]
[-187.64920044 81.58026123]
[-179.03871155 84.81375122]
[-164.03950500 84.96775055]
[-149.04029846 85.12174225]
[-140.14718628 76.86495209]
[-127.61045074 76.90746307]
[-118.18783569 85.77414703]
[-103.19495392 86.23606873]
[-88.20206451 86.69799805]
[-73.20918274 87.15991974]
[-58.21629715 87.62184906]
[-43.22341156 88.08377838]
[-28.23052406 88.54570007]
[-13.23763847 89.00762939]
[1.75524771 89.46955109]
[16.74813271 89.93148041]
[31.74102020 90.39340210]
[46.73390579 90.85533142]
[61.72679138 91.31725311]
[76.71967316 91.77918243]
[93.48764038 76.18520355]
[115.85749817 81.07660675]
[128.52902222 73.04960632]
[141.20053101 65.02260590]
[146.81909180 57.74060822]
[154.21565247 56.96398926]
[167.04930115 49.19885254]
[174.85099792 35.43498230]
[189.74557495 35.46623993]
[202.57922363 27.70110512]
[204.00550842 12.36252975]
[214.07247925 0.93845314]
[228.76228333 -2.32863021]
[242.39588928 3.60962319]
[255.22953796 -4.15551233]
[268.06320190 -11.92064762]
[280.89685059 -19.68578339]
[293.73049927 -27.45091820]
[306.56414795 -35.21605301]
[312.33105469 -42.38116074]
[319.74200439 -43.00575256]
[332.73236084 -50.50575256]
[345.72274780 -58.00575256]
[358.71313477 -65.50575256]
[369.40704346 -78.66159821]
[385.00912476 -72.02750397]
[382.95339966 -55.19865417]
[366.21313477 -52.51536942]
[353.22274780 -45.01536942]
[340.23236084 -37.51536942]
[327.24200439 -30.01536942]
[314.32928467 -22.38240051]
[301.49563599 -14.61726475]
[288.66198730 -6.85212946]
[275.82833862 0.91300607]
[262.99468994 8.67814159]
[250.16102600 16.44327736]
[249.09494019 31.27572441]
[239.38447571 42.77227783]
[224.59346008 46.38878632]
[210.34436035 40.53475952]
[197.51071167 48.29989243]
[190.62696838 61.50835037]
[174.81443787 62.03250885]
[161.98078918 69.79764557]
[149.22752380 77.69412231]
[136.55601501 85.72112274]
[123.88449860 93.74812317]
[124.64708710 101.44093323]
[122.99327850 108.99246979]
[119.08519745 115.66239166]
[127.24186707 128.25082397]
[141.23945618 135.62496948]
[141.66690063 150.51344299]
[149.82356262 163.10188293]
[166.39781189 171.05958557]
[166.68338013 188.57995605]
[175.09680176 200.99826050]
[183.51020813 213.41658020]
[199.07565308 216.15380859]
[208.07801819 229.14353943]
[205.17637634 244.67916870]
[192.09219360 253.54370117]
[176.58810425 250.47796631]
[167.86239624 237.30079651]
[171.09188843 221.82998657]
[162.67848206 209.41166687]
[154.26507568 196.99336243]
[142.41386414 194.38357544]
[135.31085205 184.05310059]
[137.23512268 171.25854492]
[129.07846069 158.67010498]
[115.66428375 152.19638062]
[114.65342712 136.40750122]
[106.49675751 123.81905365]
[96.95796204 124.50104523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[14 64]
[15 63]
[17 60]
[18 59]
[19 58]
[20 56]
[21 55]
[23 51]
[24 50]
[25 49]
[26 48]
[28 47]
[29 46]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[78 124]
[79 123]
[80 122]
[82 121]
[83 120]
[85 118]
[86 117]
[90 113]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[97 107]
[98 106]
[99 105]
[100 104]
[127 151]
[128 150]
[130 148]
[131 147]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
