%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUCGGCCGCCGUGGCGUGCCUGGACUACUUCGCCGCCGAGUGCCUGGUGUCCAUGUCCGCGGGCGCCGUGGUUCACCGCCGCCCGCCGGACCCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[100.32798767 178.77664185]
[88.28974915 169.82785034]
[80.75154877 156.85960388]
[78.93310547 141.97023010]
[83.12864685 127.56893921]
[92.66134644 115.98429108]
[81.18735504 125.64595032]
[69.71337128 135.30760193]
[58.39102554 145.14653015]
[47.22306061 155.16035461]
[36.05509949 165.17417908]
[31.47218513 180.91993713]
[15.48225594 184.56056213]
[4.53437948 172.35089111]
[9.89079380 156.85118103]
[26.04127884 154.00621033]
[37.20923996 143.99240112]
[48.37720108 133.97857666]
[51.30736923 127.04750824]
[60.05171204 123.83361816]
[71.52570343 114.17195892]
[82.99968719 104.51030731]
[84.16494751 89.55563354]
[74.32601929 78.23329163]
[64.48709106 66.91094208]
[54.64815903 55.58860016]
[44.80923080 44.26625824]
[36.66825485 39.73667145]
[34.84706116 32.43538666]
[25.36501503 20.81252861]
[15.88296795 9.18967247]
[-3.20795250 3.09695029]
[-5.89043522 -15.94555855]
[-16.07672882 -26.95643616]
[-26.26302147 -37.96731567]
[-42.06312180 -38.33112717]
[-52.91765213 -49.81827927]
[-52.38681412 -65.61365509]
[-40.78553772 -76.34613037]
[-24.99666405 -75.64831543]
[-14.38744450 -63.93422318]
[-15.25214386 -48.15360641]
[-5.06585026 -37.14273071]
[5.12044239 -26.13185120]
[15.54267979 -26.63504791]
[24.66129494 -21.12096214]
[29.24378395 -11.25528336]
[27.50582504 -0.29237351]
[36.98786926 11.33048344]
[46.46991730 22.95334053]
[56.13157272 34.42732620]
[65.97050476 45.74967194]
[75.80943298 57.07201767]
[85.64836121 68.39436340]
[95.48728943 79.71670532]
[107.27526093 83.77363586]
[112.91248322 92.79595947]
[127.89615631 92.09635162]
[142.87983704 91.39674377]
[157.86351013 90.69713593]
[172.84718323 89.99753571]
[187.81816101 89.06498718]
[202.77284241 87.89972687]
[217.72750854 86.73447418]
[232.68217468 85.56921387]
[247.63685608 84.40395355]
[262.59152222 83.23870087]
[268.49694824 79.66867828]
[274.40490723 79.74566650]
[278.50717163 82.49557495]
[293.50537109 82.26229858]
[308.50354004 82.02902222]
[323.50173950 81.79574585]
[337.28912354 72.91654968]
[351.74667358 80.65677643]
[352.00170898 97.05393982]
[337.79187012 105.24004364]
[323.73501587 96.79393005]
[308.73681641 97.02720642]
[293.73864746 97.26049042]
[278.74044800 97.49376678]
[263.75677490 98.19336700]
[248.80210876 99.35862732]
[233.84744263 100.52388763]
[218.89276123 101.68914032]
[203.93809509 102.85440063]
[188.98342896 104.01966095]
[182.44422913 107.74314117]
[173.54678345 104.98120880]
[158.56311035 105.68081665]
[143.57943726 106.38041687]
[128.59576416 107.08002472]
[113.61208344 107.77963257]
[128.47416687 109.80905914]
[141.33419800 117.53041840]
[150.11137390 129.69435120]
[153.38546753 144.33267212]
[150.62672424 159.07679749]
[142.28152466 171.54106140]
[129.70016479 179.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 22]
[7 21]
[8 20]
[9 18]
[10 17]
[11 16]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[33 44]
[34 43]
[35 42]
[57 93]
[58 92]
[59 91]
[60 90]
[61 89]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
