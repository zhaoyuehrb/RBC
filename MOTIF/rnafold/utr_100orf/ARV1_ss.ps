%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUCUGACGUCUUACCCUCCACAGAAUCGGAAGUUCUGGACUGCAGUUGAGUGGAAAUGGGCAACGGCGGGCGGAGCGGCCUGCAGCAGGGGAAGGGGAACGUGGAUGGGGUGGCAGCGACUCCUACUGCUGCCUCGGCCUCCUGCCAGUACAGGU\
) } def
/len { sequence length } bind def

/coor [
[88.34144592 106.17898560]
[92.80083466 102.10559082]
[80.73608398 93.19257355]
[68.67134094 84.27955627]
[56.60659027 75.36653900]
[44.54184341 66.45352936]
[35.72800827 63.85000992]
[32.32818604 57.24141312]
[20.44303322 48.09028625]
[8.55788040 38.93915939]
[-3.32727289 29.78803062]
[-14.65658092 33.60026169]
[-26.29590034 31.46650124]
[-35.35028458 24.03587532]
[-39.62522125 13.26001644]
[-38.15795898 1.88159382]
[-49.66989899 -7.73481083]
[-61.18183899 -17.35121536]
[-72.69377899 -26.96761894]
[-84.30075073 -36.46910095]
[-96.00160980 -45.85472488]
[-110.60587311 -43.63016510]
[-122.80208588 -51.12818527]
[-136.95329285 -46.15389633]
[-151.10449219 -41.17960739]
[-165.25569153 -36.20531845]
[-179.40689087 -31.23102951]
[-193.55809021 -26.25674057]
[-201.76679993 -12.47281647]
[-217.68046570 -10.43935490]
[-229.09147644 -21.71625519]
[-227.24627686 -37.65284348]
[-213.56034851 -46.02392960]
[-198.53237915 -40.40793991]
[-184.38117981 -45.38222885]
[-170.22998047 -50.35651779]
[-156.07878113 -55.33080673]
[-141.92758179 -60.30509567]
[-127.77637482 -65.27938843]
[-127.14887238 -69.61528778]
[-125.61413574 -73.71874237]
[-123.24230194 -77.40224457]
[-130.65603638 -90.44204712]
[-138.06977844 -103.48184967]
[-145.48352051 -116.52165985]
[-166.20361328 -116.40389252]
[-181.80236816 -137.98284912]
[-193.50321960 -147.36848450]
[-205.20408630 -156.75410461]
[-216.90495300 -166.13972473]
[-230.65299988 -159.50994873]
[-245.91610718 -159.51036072]
[-259.66378784 -166.14089966]
[-269.16644287 -178.08505249]
[-272.53726196 -192.97129822]
[-269.10702515 -207.84396362]
[-259.55676270 -219.75006104]
[-245.78269958 -226.32565308]
[-230.51971436 -226.26512146]
[-216.79824829 -219.58050537]
[-207.34271240 -207.59901428]
[-204.03053284 -192.69961548]
[-207.51931763 -177.84057617]
[-195.81846619 -168.45495605]
[-184.11759949 -159.06933594]
[-172.41674805 -149.68371582]
[-165.82443237 -153.26022339]
[-146.04748535 -163.98974609]
[-147.53630066 -178.91567993]
[-149.02510071 -193.84159851]
[-150.51391602 -208.76753235]
[-152.00271606 -223.69346619]
[-153.49153137 -238.61940002]
[-165.87808228 -248.43515015]
[-167.61289978 -264.14392090]
[-157.66673279 -276.42602539]
[-141.94049072 -277.99465942]
[-129.76425171 -267.91918945]
[-128.36196899 -252.17724609]
[-138.56559753 -240.10821533]
[-137.07678223 -225.18228149]
[-135.58798218 -210.25634766]
[-134.09916687 -195.33041382]
[-132.61036682 -180.40447998]
[-131.12155151 -165.47854614]
[-121.63561249 -141.15985107]
[-132.44371033 -123.93539429]
[-125.02996826 -110.89559174]
[-117.61623383 -97.85578918]
[-110.20249939 -84.81598663]
[-91.03005219 -78.06150055]
[-86.61598969 -57.55558395]
[-74.91513062 -48.16996002]
[-67.69023132 -46.42836380]
[-63.07737732 -38.47956085]
[-51.56543732 -28.86315536]
[-40.05349731 -19.24674988]
[-28.54155540 -9.63034630]
[-10.48486042 -12.39125824]
[4.14018631 -0.92435068]
[5.82385445 17.90287781]
[17.70900726 27.05400467]
[29.59416199 36.20513153]
[41.47931290 45.35625839]
[53.45485687 54.38877869]
[65.51960754 63.30179214]
[77.58435059 72.21480560]
[89.64910126 81.12782288]
[101.71385193 90.04084015]
[115.10592651 96.79749298]
[129.44369507 101.20524597]
[143.78146362 105.61299896]
[158.11924744 110.02075958]
[172.58207703 113.99898529]
[187.15711975 117.54415131]
[201.73216248 121.08931732]
[216.30720520 124.63448334]
[230.88223267 128.17965698]
[245.45727539 131.72482300]
[260.03231812 135.26998901]
[271.77398682 125.12540436]
[287.23886108 123.85340881]
[300.48031616 131.94309998]
[306.40679932 146.28382874]
[302.73941040 161.36129761]
[290.88836670 171.37789917]
[275.41064453 172.48205566]
[262.25772095 164.24920654]
[256.48715210 149.84503174]
[241.91210938 146.29986572]
[227.33706665 142.75469971]
[212.76203918 139.20951843]
[198.18699646 135.66435242]
[183.61195374 132.11918640]
[169.03691101 128.57402039]
[165.81483459 130.12872314]
[161.66854858 130.16702271]
[157.33450317 128.26695251]
[153.71148682 124.35852814]
[139.37371826 119.95077515]
[125.03594208 115.54302216]
[110.69817352 111.13526917]
[100.30455017 121.95065308]
[105.27883911 136.10185242]
[110.25312805 150.25305176]
[115.22741699 164.40425110]
[129.58294678 171.01441956]
[134.98129272 185.86814880]
[128.21972656 200.15298462]
[113.30974579 205.39399719]
[99.09719086 198.48178101]
[94.01411438 183.51722717]
[101.07621765 169.37854004]
[96.10192871 155.22734070]
[91.12763977 141.07614136]
[86.15335083 126.92494202]
[84.58439636 119.14865875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[8 104]
[9 103]
[10 102]
[11 101]
[16 98]
[17 97]
[18 96]
[19 95]
[20 93]
[21 92]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[42 90]
[43 89]
[44 88]
[45 87]
[47 66]
[48 65]
[49 64]
[50 63]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[110 142]
[111 141]
[112 140]
[113 139]
[114 135]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
[120 129]
[143 156]
[144 155]
[145 154]
[146 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
