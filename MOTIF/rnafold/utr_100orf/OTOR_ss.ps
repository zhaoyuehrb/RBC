%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:27:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUCCCCGCUUCCAGUCAGAGUUCAAGUUAAAACAGAAAAAAGGAAGAUGGCAAGAAUAUUGUUACUUUUCCUCCCGGGUCUUGUGGCUGUAUGUGCUGUGCAUGGAAUAUUUAUGGACCGUCUAGCUUCCAAGAAGCUCUGUGCAG\
) } def
/len { sequence length } bind def

/coor [
[235.96099854 377.16424561]
[239.13633728 367.24856567]
[244.47229004 358.29565430]
[251.69792175 350.76953125]
[244.19792175 337.77917480]
[236.69792175 324.78878784]
[229.19792175 311.79840088]
[211.17071533 312.66833496]
[195.09375000 304.28250122]
[185.40147400 288.85791016]
[184.81564331 270.56588745]
[193.58154297 254.40432739]
[185.28067017 241.91052246]
[176.97979736 229.41670227]
[168.67892456 216.92288208]
[160.37805176 204.42906189]
[145.77200317 201.74594116]
[137.17576599 189.19369507]
[140.08908081 173.89172363]
[131.78820801 161.39790344]
[118.30049133 155.07884216]
[117.10815430 139.30262756]
[108.80727386 126.80880737]
[100.50640106 114.31498718]
[88.06928253 107.92675018]
[86.99977875 93.98588562]
[78.69890594 81.49206543]
[70.00968933 69.26514435]
[60.94070053 57.31719971]
[51.87171173 45.36925125]
[42.80272675 33.42130280]
[33.73373795 21.47335243]
[21.78733826 22.18016243]
[11.10569477 17.05630875]
[4.31916189 7.49291039]
[3.03587651 -4.04234076]
[7.46199322 -14.64142036]
[-1.09871030 -26.95865822]
[-9.65941429 -39.27589798]
[-27.07338524 -37.37751770]
[-42.98590851 -44.48708725]
[-53.08706665 -58.58108902]
[-54.69045258 -75.75778961]
[-47.44709778 -91.31718445]
[-56.51608276 -103.26512909]
[-65.58506775 -115.21308136]
[-74.65405273 -127.16102600]
[-83.72304535 -139.10897827]
[-92.79203033 -151.05693054]
[-101.86101532 -163.00488281]
[-111.05461884 -174.85720825]
[-120.37184143 -186.61260986]
[-129.68905640 -198.36801147]
[-139.00627136 -210.12341309]
[-148.32348633 -221.87881470]
[-157.64070129 -233.63421631]
[-173.34803772 -236.89907837]
[-180.45996094 -251.27961731]
[-173.52079773 -265.74432373]
[-157.85371399 -269.19711304]
[-145.47712708 -258.98928833]
[-145.88529968 -242.95143127]
[-136.56808472 -231.19602966]
[-127.25086975 -219.44062805]
[-117.93365479 -207.68522644]
[-108.61643982 -195.92982483]
[-99.29921722 -184.17442322]
[-92.63554382 -180.86412048]
[-89.91307068 -172.07386780]
[-80.84407806 -160.12591553]
[-71.77509308 -148.17796326]
[-62.70610809 -136.23001099]
[-53.63711929 -124.28206635]
[-44.56813431 -112.33412170]
[-35.49914551 -100.38616943]
[-23.13589287 -103.31727600]
[-10.53965282 -101.32486725]
[0.39554164 -94.67246246]
[8.01174068 -84.32699585]
[11.13842106 -71.81835938]
[9.27227020 -59.01325989]
[2.65782428 -47.83660126]
[11.21852779 -35.51936340]
[19.77923203 -23.20212364]
[37.91597748 -21.10085297]
[49.00071716 -6.19504499]
[45.68169022 12.40436554]
[54.75067520 24.35231400]
[63.81966019 36.30026245]
[72.88864899 48.24821091]
[81.95763397 60.19615936]
[85.45010376 61.02106857]
[88.70168304 63.61824036]
[90.86547089 67.84840393]
[91.19272614 73.19119263]
[99.49359894 85.68501282]
[111.93071747 92.07324982]
[113.00022125 106.01411438]
[121.30109406 118.50793457]
[129.60197449 131.00175476]
[143.68342590 138.21444702]
[144.28202820 153.09703064]
[152.58290100 165.59085083]
[167.81819153 168.83489990]
[176.05847168 181.62367249]
[172.87187195 196.12818909]
[181.17274475 208.62200928]
[189.47361755 221.11582947]
[197.77449036 233.60963440]
[206.07536316 246.10345459]
[217.98382568 243.80514526]
[229.93103027 245.68022156]
[240.50189209 251.48271179]
[248.45245361 260.50286865]
[252.85629272 271.65393066]
[253.21238708 283.60299683]
[249.50204468 294.93041992]
[242.18830872 304.29840088]
[249.68830872 317.28878784]
[257.18829346 330.27917480]
[264.68829346 343.26953125]
[284.73965454 340.59320068]
[303.95236206 346.77902222]
[318.60971069 360.58956909]
[325.89382935 379.31634521]
[324.42730713 399.31091309]
[314.53347778 416.69586182]
[323.85070801 428.45126343]
[333.16790771 440.20666504]
[342.48513794 451.96206665]
[351.80233765 463.71746826]
[361.11956787 475.47286987]
[375.69647217 484.13021851]
[371.41275024 500.53405762]
[354.46411133 500.95877075]
[349.36416626 484.79006958]
[340.04693604 473.03466797]
[330.72973633 461.27926636]
[321.41250610 449.52386475]
[312.09530640 437.76846313]
[302.77807617 426.01306152]
[293.26690674 429.97698975]
[283.09609985 431.69479370]
[272.78918457 431.07315063]
[262.87792969 428.13922119]
[253.87472534 423.03964233]
[246.24613953 416.03314209]
[240.38882446 407.47738647]
[236.60876465 397.81076050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 121]
[5 120]
[6 119]
[7 118]
[12 110]
[13 109]
[14 108]
[15 107]
[16 106]
[19 103]
[20 102]
[22 100]
[23 99]
[24 98]
[26 96]
[27 95]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[37 84]
[38 83]
[39 82]
[44 75]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
