%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUGUAAUCACAACAUGAUCUCGUGUGCUGAGCAGCGAAGCCGGCAGGGAGAGGCCGGCAGAGGCCCGGCUCCGGUGGCUCCAGCUUUCCUCCCACUCUGGCUCCCCAGGGGCU\
) } def
/len { sequence length } bind def

/coor [
[66.46514130 128.79306030]
[64.65672302 113.90247345]
[76.64863586 104.89089966]
[69.74879456 101.95115662]
[55.87141037 107.64485931]
[41.99403000 113.33856201]
[28.11664772 119.03227234]
[21.72180176 135.24748230]
[5.91377878 141.75381470]
[-9.42727280 135.00822449]
[-23.14678764 141.07244873]
[-36.86630249 147.13668823]
[-42.64456558 161.60214233]
[-56.64449310 167.55670166]
[-70.39948273 161.95886230]
[-84.11899567 168.02310181]
[-97.83851624 174.08732605]
[-111.55802917 180.15156555]
[-125.27754211 186.21578979]
[-134.51014709 199.76905823]
[-150.84158325 198.28034973]
[-157.47146606 183.28112793]
[-147.57954407 170.20130920]
[-131.34178162 172.49627686]
[-117.62226105 166.43205261]
[-103.90274811 160.36781311]
[-90.18323517 154.30357361]
[-76.46371460 148.23934937]
[-71.34489441 134.29899597]
[-57.51774597 127.95356750]
[-42.93053436 133.41717529]
[-29.21102142 127.35294342]
[-15.49150562 121.28871155]
[-12.53380108 108.66976166]
[-2.67409682 99.95912933]
[10.60176754 98.53793335]
[22.42294312 105.15489197]
[36.30032349 99.46118164]
[50.17770386 93.76747894]
[64.05508423 88.07376862]
[103.62356567 82.97124481]
[114.15872955 72.29367828]
[124.69389343 61.61611938]
[135.22906494 50.93855667]
[145.76422119 40.26099396]
[156.29939270 29.58343124]
[160.16741943 21.16068649]
[167.26364136 18.76539612]
[178.08168030 8.37452984]
[188.75924683 -2.16063309]
[199.29440308 -12.83819580]
[203.16244507 -21.26094055]
[210.25866699 -23.65623283]
[221.07670593 -34.04709625]
[231.89474487 -44.43796158]
[242.71276855 -54.82882690]
[243.19508362 -70.39819336]
[254.31413269 -80.78189850]
[269.15417480 -80.22614288]
[279.97222900 -90.61700439]
[290.79025269 -101.00786591]
[288.81759644 -116.28578949]
[296.13378906 -129.63967896]
[309.74935913 -136.04913330]
[324.35342407 -133.24572754]
[335.17144775 -143.63659668]
[345.98950195 -154.02746582]
[356.80752563 -164.41831970]
[359.08074951 -170.85273743]
[363.62918091 -174.52970886]
[368.49630737 -175.05715942]
[379.85647583 -184.85235596]
[384.74411011 -200.50622559]
[400.80166626 -203.83586121]
[411.51052856 -191.41603088]
[405.85433960 -176.02319336]
[389.65170288 -173.49217224]
[378.29150391 -163.69696045]
[367.19839478 -153.60028076]
[356.38037109 -143.20942688]
[345.56231689 -132.81855774]
[334.74429321 -122.42768860]
[336.95736694 -107.72257996]
[330.00488281 -94.37616730]
[316.36721802 -87.60359955]
[301.18112183 -90.18983459]
[290.36306763 -79.79896545]
[279.54504395 -69.40810394]
[279.50280762 -54.55772018]
[268.67980957 -43.86579895]
[253.10363770 -44.01079178]
[242.28559875 -33.61992645]
[231.46757507 -23.22906113]
[220.64953613 -12.83819580]
[209.97196960 -2.30303216]
[199.43681335 8.37452984]
[196.94645691 15.43796062]
[188.47254944 19.19256592]
[177.65451050 29.58343124]
[166.97694397 40.11859512]
[156.44178772 50.79615784]
[145.90661621 61.47372055]
[135.37145996 72.15128326]
[124.83629608 82.82884216]
[114.30113220 93.50640869]
[111.30074310 108.20326996]
[116.80763245 122.15583801]
[122.31451416 136.10841370]
[133.75360107 148.62174988]
[124.89594269 163.07781982]
[108.55276489 158.56816101]
[108.36194611 141.61529541]
[102.85506439 127.66271973]
[97.34817505 113.71015167]
[90.44833374 110.77040100]
[92.25646973 125.66102600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 40]
[5 39]
[6 38]
[7 37]
[10 33]
[11 32]
[12 31]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[41 105]
[42 104]
[43 103]
[44 102]
[45 101]
[46 100]
[48 99]
[49 98]
[50 96]
[51 95]
[53 94]
[54 93]
[55 92]
[56 91]
[59 88]
[60 87]
[61 86]
[65 82]
[66 81]
[67 80]
[68 79]
[71 78]
[72 77]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
