%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGCCAACACAAUCUAACAGUGCUAACUGAAUUCAUUCUGAUGGAACUCACAAGGCGGCCUGAGCUGCAGAUUCCCCUUUUUGGAGUCUUCCUCGUCA\
) } def
/len { sequence length } bind def

/coor [
[60.25680161 112.70121765]
[58.78273010 103.03964996]
[43.87153625 101.40986633]
[28.96033669 99.78008270]
[14.04913902 98.15030670]
[-0.90553117 96.98504639]
[-15.88920784 96.28543854]
[-30.87288284 95.58583069]
[-45.01890945 102.67106628]
[-57.37145996 94.34858704]
[-72.35513306 93.64897919]
[-86.50115967 100.73421478]
[-98.85371399 92.41172791]
[-113.83738708 91.71212006]
[-128.82106018 91.01251221]
[-137.53451538 104.96539307]
[-151.98847961 112.62241364]
[-168.24018860 112.00076294]
[-181.90928650 103.36162567]
[-189.35848999 89.11450958]
[-204.35667419 88.88122559]
[-219.35485840 88.64794922]
[-234.35305786 88.41467285]
[-248.40991211 96.86078644]
[-262.61975098 88.67468262]
[-262.36471558 72.27751923]
[-247.90715027 64.53729248]
[-234.11978149 73.41648865]
[-219.12158203 73.64976501]
[-204.12339783 73.88304138]
[-189.12521362 74.11631775]
[-182.84289551 61.88392258]
[-171.82720947 53.54198456]
[-158.21945190 50.78435898]
[-144.69625854 54.21228790]
[-133.94322205 63.20448303]
[-128.12145996 76.02883911]
[-113.13777924 76.72844696]
[-98.15410614 77.42805481]
[-85.07981110 70.29277802]
[-71.65553284 78.66529846]
[-56.67185211 79.36490631]
[-43.59756088 72.22962952]
[-30.17327690 80.60215759]
[-15.18960190 81.30176544]
[-0.20592535 82.00137329]
[3.97989416 79.38036346]
[9.88737488 79.48715973]
[15.67892170 83.23910522]
[30.59011841 84.86888885]
[45.50131607 86.49867249]
[60.41251373 88.12845612]
[68.39657593 71.92109680]
[82.79849243 60.34905243]
[101.13690948 55.84713745]
[120.06074524 59.59203720]
[135.96130371 71.22013092]
[146.81243896 60.86383438]
[157.66355896 50.50753403]
[168.51469421 40.15123367]
[179.36582947 29.79493332]
[183.45683289 13.91426182]
[199.32580566 9.77811146]
[210.64810181 21.64139748]
[205.77632141 37.30018997]
[189.72212219 40.64606476]
[178.87100220 51.00236511]
[168.01986694 61.35866547]
[157.16873169 71.71496582]
[146.31759644 82.07126617]
[149.55787659 96.71710968]
[163.76493835 101.52949524]
[177.97201538 106.34188080]
[192.17909241 111.15426636]
[206.38616943 115.96665192]
[220.59323120 120.77903748]
[234.80030823 125.59142303]
[248.06895447 117.31632996]
[263.54513550 119.55732727]
[273.92144775 131.25628662]
[274.29855347 146.88932800]
[264.49838257 159.07499695]
[249.14825439 162.05958557]
[235.49604797 154.43388367]
[229.98793030 139.79849243]
[215.78085327 134.98611450]
[201.57377625 130.17372131]
[187.36669922 125.36133575]
[173.15963745 120.54895020]
[158.95256042 115.73656464]
[144.74548340 110.92417908]
[140.60650635 120.89134216]
[134.30613708 129.53942871]
[126.22867584 136.41439819]
[116.85010529 141.16793823]
[106.71008301 143.57504272]
[96.38095093 143.54431152]
[86.43545532 141.12072754]
[77.41496277 136.48072815]
[69.80003357 129.92018127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 46]
[7 45]
[8 44]
[10 42]
[11 41]
[13 39]
[14 38]
[15 37]
[20 31]
[21 30]
[22 29]
[23 28]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[71 91]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
