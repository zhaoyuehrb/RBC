%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCACAUAGCGACUUGGUGGGCGCGUCCAGUGAUGACUGGGGGAUCCCGGCAAGUAACAUGACUAAAAAGAAGCGGGAGAAUCUGGGCGUCGCUCUAGAGAUCGAUGGGCUAGAGGAGAAGCUGUCCCAGUGUCGGAGAGACCUGGAGGCCGUGAACU\
) } def
/len { sequence length } bind def

/coor [
[34.99052429 171.31628418]
[27.72585869 174.24780273]
[19.84366798 175.45405579]
[11.75539494 174.80737305]
[6.62509251 188.90275574]
[1.49479043 202.99815369]
[6.94443798 218.08724976]
[-1.57731807 231.67987061]
[-17.53331566 233.34890747]
[-28.68347931 221.81402588]
[-26.47435570 205.92379761]
[-12.60059929 197.86784363]
[-7.47029686 183.77246094]
[-2.33999467 169.67706299]
[-11.86994076 158.09346008]
[-26.68978882 160.41123962]
[-41.50963593 162.72901917]
[-56.32948303 165.04679871]
[-71.14933014 167.36457825]
[-83.58820343 177.14134216]
[-97.35817719 171.46357727]
[-112.17802429 173.78135681]
[-126.99787140 176.09913635]
[-141.81771851 178.41691589]
[-147.42242432 192.64837646]
[-159.31947327 202.10127258]
[-174.25146484 204.31530762]
[-188.19352722 198.79492188]
[-197.43820190 187.11579895]
[-212.25804138 189.43357849]
[-227.07789612 191.75135803]
[-241.89773560 194.06915283]
[-256.71759033 196.38693237]
[-271.53744507 198.70471191]
[-283.95532227 209.41584778]
[-299.34918213 203.76246643]
[-301.88314819 187.56027222]
[-288.95050049 177.47669983]
[-273.85522461 183.88485718]
[-259.03536987 181.56707764]
[-244.21551514 179.24929810]
[-229.39567566 176.93151855]
[-214.57582092 174.61373901]
[-199.75598145 172.29595947]
[-194.51870728 158.35189819]
[-182.92791748 148.83825684]
[-168.03295898 146.38743591]
[-153.81781006 151.75645447]
[-144.13549805 163.59707642]
[-129.31565857 161.27928162]
[-114.49580383 158.96150208]
[-99.67595673 156.64372253]
[-88.29710388 147.03274536]
[-73.46710968 152.54473877]
[-58.64726639 150.22695923]
[-43.82741928 147.90916443]
[-29.00757027 145.59138489]
[-14.18772221 143.27360535]
[-3.40154815 117.60282898]
[21.43658447 108.73452759]
[43.43823242 120.40071869]
[56.70965958 113.41006470]
[69.98108673 106.41941071]
[83.25251007 99.42875671]
[68.31353760 100.78040314]
[54.45193481 95.04838562]
[44.83057022 83.54058838]
[41.64478302 68.88280487]
[45.62148666 54.41954422]
[55.85330200 43.45095444]
[70.00559235 38.47977829]
[84.84918213 40.64030838]
[96.99714661 49.43956757]
[103.67763519 62.86979675]
[103.36701965 77.86404419]
[113.66064453 66.95343781]
[123.95426941 56.04283142]
[117.73818970 43.20014954]
[116.29032135 29.03592682]
[119.76480103 15.25918579]
[127.72308350 3.52516389]
[139.18919373 -4.76354456]
[152.76934814 -8.62463570]
[166.82142639 -7.61248016]
[179.65344238 -1.86945033]
[190.15670776 -12.57839680]
[200.65995789 -23.28734207]
[211.16322327 -33.99628830]
[221.66648865 -44.70523453]
[225.81900024 -62.62171173]
[242.86256409 -66.71414948]
[253.15618896 -77.62475586]
[263.44982910 -88.53536224]
[273.74343872 -99.44596100]
[284.03707886 -110.35656738]
[287.87939453 -125.70410919]
[302.24130249 -129.65193176]
[312.53491211 -140.56253052]
[315.78826904 -156.63574219]
[331.41873169 -161.59764099]
[343.34704590 -150.34385681]
[339.30236816 -134.45132446]
[323.44552612 -130.26890564]
[313.15191650 -119.35830688]
[310.04583740 -104.79116821]
[294.94766235 -100.06294250]
[284.65405273 -89.15234375]
[274.36041260 -78.24173737]
[264.06680298 -67.33113098]
[253.77316284 -56.42052460]
[253.80288696 -44.29319763]
[245.27339172 -35.11607361]
[232.37542725 -34.20197296]
[221.87216187 -23.49302864]
[211.36891174 -12.78408241]
[200.86564636 -2.07513618]
[190.36238098 8.63381004]
[196.78785706 23.09490204]
[197.18293762 38.95279694]
[191.45787048 53.78770447]
[180.45901489 65.32463837]
[165.84385681 71.78227997]
[149.83132935 72.14798737]
[134.86486816 66.33645630]
[124.57125092 77.24706268]
[114.27762604 88.15766907]
[115.00456238 103.14003754]
[126.30609894 113.00286102]
[137.60763550 122.86568451]
[149.00427246 132.61845398]
[160.49494934 142.26026917]
[171.98561096 151.90208435]
[183.47627258 161.54389954]
[192.10733032 164.68489075]
[195.09391785 171.48580933]
[206.39546204 181.34861755]
[217.69699097 191.21144104]
[233.73620605 191.56231689]
[243.34719849 204.40788269]
[239.15722656 219.89411926]
[224.38047791 226.14132690]
[210.35243225 218.35716248]
[207.83418274 202.51298523]
[196.53263855 192.65016174]
[185.23109436 182.78733826]
[173.83445740 173.03456116]
[162.34379578 163.39274597]
[150.85313416 153.75093079]
[139.36245728 144.10913086]
[132.18174744 142.20927429]
[127.74481964 134.16722107]
[116.44327545 124.30439758]
[105.14173889 114.44158173]
[90.24316406 112.70018768]
[76.97174072 119.69084167]
[63.70030975 126.68148804]
[50.42888260 133.67214966]
[51.84589386 140.52061462]
[51.64616013 147.65135193]
[49.77647781 154.68049622]
[46.27518463 161.21520996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 14]
[5 13]
[6 12]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[21 52]
[22 51]
[23 50]
[24 49]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[61 157]
[62 156]
[63 155]
[64 154]
[75 126]
[76 125]
[77 124]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[91 110]
[92 109]
[93 108]
[94 107]
[95 106]
[97 104]
[98 103]
[127 153]
[128 152]
[129 151]
[130 149]
[131 148]
[132 147]
[133 146]
[135 145]
[136 144]
[137 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
