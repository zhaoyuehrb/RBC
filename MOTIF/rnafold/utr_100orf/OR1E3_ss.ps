%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:33:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUAUGUAUUUGUGUCUCAGCAACUUGUCCUUCUCUGACCUCUGCUUUUCCUCGGUCACAAUGCCCAAAUUGCUGCAGAACAUGCAGAGCCAAAACC\
) } def
/len { sequence length } bind def

/coor [
[101.43657684 291.57907104]
[112.20755768 280.24243164]
[110.34607697 265.35836792]
[101.08914948 253.68966675]
[107.05405426 239.03598022]
[105.19257355 224.15193176]
[95.93564606 212.48323059]
[101.90055084 197.82955933]
[100.03907013 182.94551086]
[98.17758942 168.06146240]
[96.31610870 153.17741394]
[93.02075195 149.49890137]
[92.12027740 143.65948486]
[94.83148193 137.31373596]
[93.89893341 122.34275055]
[92.96639252 107.37176514]
[89.30658722 100.01643372]
[92.24502563 91.92204285]
[91.77852631 76.92929840]
[91.31202698 61.93655396]
[90.61242676 46.95287704]
[89.67987823 31.98189163]
[88.74733734 17.01090813]
[87.81478882 2.03992462]
[86.88224792 -12.93105984]
[85.94969940 -27.90204430]
[77.36941528 -41.19449615]
[84.30049896 -54.37817383]
[83.36795807 -69.34915924]
[82.43540955 -84.32013702]
[68.51936340 -88.09043884]
[56.48040009 -95.98432922]
[47.50178909 -107.20993042]
[42.46102142 -120.64871216]
[41.84407043 -134.96691895]
[45.69857025 -148.74795532]
[53.63042450 -160.63253784]
[64.84406281 -169.45272827]
[78.22221375 -174.34680176]
[77.75571442 -189.33955383]
[77.28922272 -204.33229065]
[76.82272339 -219.32504272]
[76.35622406 -234.31777954]
[62.24210739 -240.03718567]
[51.67918396 -251.00735474]
[46.49754715 -265.32763672]
[47.59494781 -280.51696777]
[54.78125381 -293.94369507]
[66.81139374 -303.28155518]
[81.60106659 -306.91271973]
[96.58788300 -304.20803833]
[109.17528534 -295.63613892]
[117.18241882 -282.68215942]
[119.22201538 -267.59045410]
[114.94068909 -252.97572327]
[105.08020782 -241.37008667]
[91.34896851 -234.78428650]
[91.81546783 -219.79153442]
[92.28196716 -204.79879761]
[92.74845886 -189.80604553]
[93.21495819 -174.81330872]
[108.15846252 -170.12115479]
[120.63217163 -160.60446167]
[129.13401794 -147.38641357]
[132.63243103 -132.03718567]
[130.69151306 -116.38756561]
[123.52524567 -102.31047821]
[111.97408295 -91.49689484]
[97.40639496 -85.25268555]
[98.33893585 -70.28170013]
[99.27148438 -55.31071854]
[107.78506470 -43.08908844]
[100.92068481 -28.83458710]
[101.85322571 -13.86360359]
[102.78577423 1.10737991]
[103.71831512 16.07836342]
[104.65086365 31.04934883]
[105.58340454 46.02033234]
[109.20474243 52.61664963]
[106.30477142 61.47005463]
[106.77127075 76.46279907]
[107.23777008 91.45554352]
[107.93737793 106.43921661]
[108.86991882 121.41020203]
[109.80246735 136.38117981]
[111.20015717 151.31593323]
[113.06163788 166.19998169]
[114.92311859 181.08403015]
[116.78459930 195.96807861]
[126.17467499 208.70137024]
[120.07662201 222.29045105]
[121.93810272 237.17449951]
[131.32817078 249.90780640]
[125.23012543 263.49688721]
[127.09160614 278.38092041]
[140.32281494 286.71575928]
[145.05172729 301.62118530]
[139.04550171 316.05929565]
[125.14010620 323.21289062]
[109.90122986 319.70425415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[5 92]
[6 91]
[8 89]
[9 88]
[10 87]
[11 86]
[14 85]
[15 84]
[16 83]
[18 82]
[19 81]
[20 80]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 73]
[28 71]
[29 70]
[30 69]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
