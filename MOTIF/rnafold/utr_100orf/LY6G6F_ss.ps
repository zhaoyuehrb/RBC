%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACACCAGGUCUUGGAGCAAGAGAACUUGGCAGGCUCUCCCCAUGGCAGUCUUAUUCCUCCUCCUGUUCCUAUGUGGAACUCCCCAGGCUGCAGACAACAUGCAGGCCAUCUAUGUGGCCUUGGGGGAGGCAGUAGAGCUGC\
) } def
/len { sequence length } bind def

/coor [
[-169.99050903 279.99044800]
[-182.22056580 288.67526245]
[-194.45060730 297.36004639]
[-206.68066406 306.04486084]
[-208.54609680 327.70989990]
[-225.47233582 340.91210938]
[-246.38858032 337.53500366]
[-257.60794067 347.49121094]
[-268.82730103 357.44738770]
[-280.04669189 367.40359497]
[-291.26605225 377.35977173]
[-302.48541260 387.31597900]
[-313.59628296 397.39312744]
[-324.59732056 407.59002686]
[-335.59835815 417.78695679]
[-334.64627075 433.39550781]
[-343.99145508 445.93353271]
[-359.22134399 449.48092651]
[-373.14489746 442.36273193]
[-379.18780518 427.93991089]
[-374.49682617 413.02252197]
[-361.28686523 404.65408325]
[-345.79525757 406.78591919]
[-334.79421997 396.58898926]
[-323.79318237 386.39205933]
[-321.00512695 379.48712158]
[-312.44161987 376.09658813]
[-301.22222900 366.14041138]
[-290.00286865 356.18420410]
[-278.78350830 346.22802734]
[-267.56414795 336.27182007]
[-256.34475708 326.31564331]
[-258.81320190 317.85513306]
[-258.35607910 309.00997925]
[-254.99562073 300.76806641]
[-249.07992554 294.05938721]
[-241.24713135 289.65109253]
[-232.35661316 288.05987549]
[-223.39474487 289.49154663]
[-215.36546326 293.81478882]
[-203.13542175 285.13000488]
[-190.90536499 276.44519043]
[-178.67530823 267.76040649]
[-178.62789917 258.75296021]
[-174.33804321 250.67555237]
[-166.67362976 245.43597412]
[-157.31521606 244.33860779]
[-148.38822937 247.76190186]
[-135.61990356 239.88981628]
[-122.85157013 232.01773071]
[-110.08323669 224.14564514]
[-97.31491089 216.27354431]
[-90.54175568 203.00804138]
[-74.73416901 202.35179138]
[-61.96583939 194.47970581]
[-49.19750977 186.60762024]
[-36.42918015 178.73553467]
[-23.66084862 170.86344910]
[-10.97854614 162.85350037]
[1.61624229 154.70664978]
[14.21103096 146.55978394]
[26.80581856 138.41291809]
[39.40060806 130.26606750]
[51.99539566 122.11920929]
[64.59018707 113.97235107]
[77.18497467 105.82549286]
[72.61333466 79.72682953]
[97.93441010 55.44706726]
[99.55619812 40.53499985]
[101.17798615 25.62293053]
[102.79976654 10.71086025]
[104.42155457 -4.20120859]
[95.53156281 -17.55589676]
[100.56687164 -32.78826904]
[115.66482544 -38.21335602]
[129.24356079 -29.66949463]
[130.88662720 -13.71080208]
[119.33362579 -2.57942343]
[117.71183777 12.33264542]
[116.09004974 27.24471474]
[114.46826935 42.15678406]
[112.84648132 57.06885529]
[118.91410828 61.47724152]
[127.48658752 49.16819763]
[136.05906677 36.85914993]
[138.08325195 21.99635506]
[151.87829590 16.10594559]
[164.01354980 24.92272949]
[162.67431641 39.86282730]
[149.16447449 46.38079071]
[140.10691833 58.33740616]
[131.04936218 70.29402161]
[137.11698914 74.70240784]
[150.79804993 68.55191803]
[164.47911072 62.40142822]
[168.56071472 47.30591583]
[181.42010498 38.40814972]
[196.98545837 39.90938950]
[207.90730286 51.10078812]
[209.02867126 66.69811249]
[199.82008362 79.33678436]
[184.62956238 83.04920959]
[170.62960815 76.08248901]
[156.94854736 82.23297882]
[143.26748657 88.38347626]
[144.56582642 103.32717896]
[159.10261536 107.02603912]
[173.63941956 110.72489929]
[188.17620850 114.42375946]
[202.71301270 118.12261963]
[217.24980164 121.82148743]
[231.78660583 125.52034760]
[247.41682434 120.55766296]
[259.34570312 131.81083679]
[255.30181885 147.70358276]
[239.44517517 151.88679504]
[228.08773804 140.05714417]
[213.55094910 136.35827637]
[199.01414490 132.65942383]
[184.47735596 128.96055603]
[169.94055176 125.26169586]
[155.40376282 121.56283569]
[140.86695862 117.86397552]
[108.20229340 133.07194519]
[85.33183289 118.42028046]
[72.73704529 126.56713867]
[60.14225388 134.71398926]
[47.54746628 142.86085510]
[34.95267868 151.00770569]
[22.35788918 159.15457153]
[9.76310062 167.30143738]
[-2.83168721 175.44828796]
[-8.38960934 182.79260254]
[-15.78876209 183.63177490]
[-28.55709076 191.50386047]
[-41.32542038 199.37594604]
[-54.09375000 207.24803162]
[-66.86208344 215.12011719]
[-74.54850769 228.94869995]
[-89.44282532 229.04188538]
[-102.21115112 236.91397095]
[-114.97948456 244.78605652]
[-127.74781036 252.65814209]
[-140.51614380 260.53024292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[12 27]
[13 25]
[14 24]
[15 23]
[48 144]
[49 143]
[50 142]
[51 141]
[52 140]
[54 138]
[55 137]
[56 136]
[57 135]
[58 134]
[59 132]
[60 131]
[61 130]
[62 129]
[63 128]
[64 127]
[65 126]
[66 125]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[93 105]
[94 104]
[95 103]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
