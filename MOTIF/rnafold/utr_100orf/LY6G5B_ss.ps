%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAGGUCCAUAUGCUUGUAGGUGUGCUGGUCAUGGUGGGCUUCACAGUAGGAAAGGUUCCUGUUCCCGACAUCCGGACGUGCCACUUCUGCCUCGUAG\
) } def
/len { sequence length } bind def

/coor [
[76.79182434 116.76967621]
[73.03298187 109.62398529]
[58.07830811 110.78924561]
[43.12363815 111.95449829]
[28.16896629 113.11975861]
[13.21429634 114.28501892]
[4.72839260 118.12976074]
[-2.22233939 115.24656677]
[-17.20601654 115.94617462]
[-32.18969345 116.64577484]
[-47.17336655 117.34538269]
[-62.15704346 118.04499054]
[-77.12802887 118.97753143]
[-92.08269501 120.14279175]
[-107.03736877 121.30805206]
[-121.97210693 122.70574188]
[-136.88330078 124.33551788]
[-149.76110840 133.52642822]
[-163.25370789 127.21778107]
[-178.16490173 128.84756470]
[-193.07609558 130.47735596]
[-205.97613525 140.60261536]
[-221.09202576 134.24320984]
[-222.87382507 117.94114685]
[-209.48858643 108.46659088]
[-194.70588684 115.56615448]
[-179.79467773 113.93637085]
[-164.88348389 112.30658722]
[-153.07223511 103.23224640]
[-138.51309204 109.42432404]
[-123.60189056 107.79454041]
[-117.18165588 103.86949158]
[-108.20262909 106.35337830]
[-93.24795532 105.18811798]
[-78.29328918 104.02286530]
[-71.75408173 100.29937744]
[-62.85665131 103.06130981]
[-47.87297440 102.36170959]
[-32.88929749 101.66210175]
[-17.90562057 100.96249390]
[-2.92194533 100.26289368]
[12.04903889 99.33034515]
[27.00370979 98.16508484]
[41.95838165 96.99983215]
[56.91305161 95.83457184]
[71.86772156 94.66931152]
[84.17471313 76.13786316]
[106.03425598 72.01019287]
[124.25135803 84.77788544]
[138.60122681 80.40966797]
[152.95109558 76.04144287]
[167.30096436 71.67322540]
[181.65081787 67.30500031]
[196.00068665 62.93678284]
[203.47862244 49.27229309]
[218.09365845 45.04671478]
[231.07456970 52.25999451]
[245.42443848 47.89177322]
[259.77429199 43.52355194]
[264.43951416 33.45171738]
[273.74176025 27.81267548]
[284.38610840 28.31460571]
[292.76025391 34.53957367]
[307.35391235 31.07192993]
[321.94760132 27.60428429]
[327.22875977 23.16261482]
[333.07733154 22.32353783]
[337.55606079 24.40482712]
[352.33709717 21.85117340]
[367.11810303 19.29751968]
[377.50314331 7.06925583]
[393.53347778 7.70841074]
[402.91198730 20.72467804]
[398.44427490 36.13309479]
[383.55761719 42.11363983]
[369.67175293 34.07854843]
[354.89074707 36.63220215]
[340.10971069 39.18585587]
[325.41525269 42.19796371]
[310.82156372 45.66560745]
[296.22787476 49.13325119]
[283.39016724 63.45128250]
[264.14251709 57.87342072]
[249.79266357 62.24163818]
[235.44279480 66.60986328]
[228.68273926 79.83245850]
[214.19215393 84.46687317]
[200.36891174 77.28665161]
[186.01904297 81.65486908]
[171.66917419 86.02308655]
[157.31932068 90.39131165]
[142.96945190 94.75952911]
[128.61958313 99.12775421]
[127.72524261 107.15208435]
[124.62631989 114.60771942]
[119.56923676 120.90182495]
[112.95610809 125.53391266]
[105.31276703 128.13566589]
[97.24697876 128.50021362]
[89.40010071 126.59856415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[8 41]
[9 40]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 31]
[17 30]
[19 28]
[20 27]
[21 26]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[57 85]
[58 84]
[59 83]
[63 81]
[64 80]
[65 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
