%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUGGGGGUCCCCAGCACUUGCCUGGGCCGUCUGGCUUGCCUGUGUUCAGCCCACGGUGUUCCCAUGGAGCCUCUCCUUCAGGUCAGACACGGACAAGC\
) } def
/len { sequence length } bind def

/coor [
[118.56153870 115.66052246]
[110.24445343 122.01894379]
[100.02355957 124.28543091]
[89.79829407 122.03878021]
[81.46888733 115.69651031]
[67.58847809 121.38283539]
[57.75146484 133.77410889]
[43.04103088 131.43908691]
[29.16062355 137.12541199]
[22.25864410 143.38282776]
[14.75903320 142.76531982]
[0.70849675 148.01721191]
[-13.34204006 153.26910400]
[-19.95599365 167.37205505]
[-34.28005219 172.49807739]
[-47.68430328 166.10577393]
[-61.73484039 171.35766602]
[-71.74391174 184.34806824]
[-87.96039581 181.90727234]
[-93.70217133 166.54614258]
[-83.06259155 154.06690979]
[-66.98674011 157.30712891]
[-52.93620300 152.05523682]
[-47.01126099 138.43794250]
[-32.83683395 132.91162109]
[-18.59393692 139.21856689]
[-4.54339981 133.96667480]
[9.50713634 128.71478271]
[23.47429848 123.24500275]
[37.35470581 117.55867767]
[46.19889832 105.57412720]
[61.90215302 107.50243378]
[75.78256226 101.81610107]
[81.93447876 83.76979065]
[99.22117615 75.72705078]
[116.98789978 82.64506531]
[130.27807617 75.69010925]
[143.56823730 68.73516083]
[156.85841370 61.78020477]
[170.14859009 54.82525253]
[178.78819275 41.57127762]
[193.65220642 42.52544403]
[206.94236755 35.57049179]
[220.23254395 28.61553764]
[233.52270508 21.66058350]
[246.81288147 14.70563126]
[260.10305786 7.75067806]
[273.39321899 0.79572511]
[278.20590210 -14.01899624]
[291.78308105 -20.88298416]
[305.87701416 -16.20354271]
[319.16717529 -23.15849495]
[332.45733643 -30.11344910]
[334.64639282 -46.79979324]
[346.18811035 -58.82002640]
[362.44653320 -61.62849045]
[377.05651855 -54.32427597]
[390.12396240 -61.68918610]
[399.57101440 -80.78880310]
[420.10537720 -80.39549255]
[432.42968750 -88.94597626]
[444.75402832 -97.49645996]
[457.07836914 -106.04694366]
[469.40270996 -114.59743500]
[478.96987915 -128.59405518]
[495.06796265 -123.27542114]
[494.41357422 -106.33410645]
[477.95318604 -102.27309418]
[465.62884521 -93.72261047]
[453.30450439 -85.17212677]
[440.98019409 -76.62164307]
[428.65585327 -68.07115936]
[428.49459839 -58.88529968]
[423.96475220 -50.73258591]
[416.01614380 -45.59210205]
[406.44503784 -44.78151321]
[397.48889160 -48.62174225]
[384.42144775 -41.25683212]
[384.10299683 -27.81230927]
[377.08810425 -16.21114540]
[365.13983154 -9.57810307]
[351.36630249 -9.76234245]
[339.41229248 -16.82327843]
[326.12213135 -9.86832523]
[312.83197021 -2.91337252]
[308.64270020 11.33393478]
[295.26367188 18.57656860]
[280.34817505 14.08589554]
[267.05801392 21.04084778]
[253.76783752 27.99580193]
[240.47766113 34.95075607]
[227.18750000 41.90570831]
[213.89732361 48.86066055]
[200.60714722 55.81561279]
[192.91815186 68.57212067]
[177.10353088 68.11542511]
[163.81336975 75.07037354]
[150.52319336 82.02532959]
[137.23303223 88.98027802]
[123.94285583 95.93523407]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 33]
[6 32]
[8 30]
[9 29]
[11 28]
[12 27]
[13 26]
[16 23]
[17 22]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[51 85]
[52 84]
[53 83]
[57 78]
[58 77]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
