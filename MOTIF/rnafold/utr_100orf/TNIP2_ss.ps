%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAGUUCCGGGAAGGGCGGCAGCCGGCGGGGCCCGGGCGCGGAAGUUGCCGGCGGCCGCGCGGCCUCCCGGGCGGGCCUACAGCCAUGUCCCGGGACCCGGGGUCGGGCGGCUGGGAGGAGGCCCCGCGCGCAGCUGCCGCGCUCUGCACCCUGUACCACGAGGCCGGACAGCGGCUGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[241.53042603 562.42864990]
[237.06143188 556.23718262]
[234.41235352 549.04681396]
[233.79190063 541.38214111]
[235.26022339 533.80633545]
[238.72343445 526.88018799]
[243.93943787 521.12017822]
[250.53486633 516.96032715]
[248.28742981 502.12966919]
[246.03999329 487.29898071]
[243.79255676 472.46829224]
[241.54512024 457.63760376]
[218.45602417 443.73968506]
[212.44703674 419.04214478]
[224.97665405 398.70465088]
[218.43615723 385.20568848]
[205.92361450 377.12573242]
[206.86930847 361.33282471]
[200.32881165 347.83386230]
[193.78831482 334.33489990]
[187.24780273 320.83593750]
[180.70730591 307.33700562]
[174.16680908 293.83804321]
[167.62631226 280.33908081]
[161.08581543 266.84011841]
[154.32066345 253.45233154]
[147.33274841 240.17947388]
[140.23417664 226.96545410]
[133.02545166 213.81120300]
[125.81672668 200.65695190]
[118.60799408 187.50270081]
[111.39926910 174.34844971]
[104.19054413 161.19419861]
[96.98181915 148.03996277]
[89.77309418 134.88571167]
[76.55907440 127.78713989]
[61.61140060 129.03897095]
[46.66372681 130.29081726]
[36.47865295 142.07647705]
[21.30175591 143.13308716]
[10.12868690 133.35055542]
[-4.81898499 134.60238647]
[-17.97117805 144.39788818]
[-32.92125702 137.65791321]
[-34.28985977 121.31597900]
[-20.66908836 112.18325806]
[-6.07082224 119.65471649]
[8.87685013 118.40287781]
[18.26715660 106.89819336]
[33.40839005 105.41571808]
[45.41189194 115.34313965]
[60.35956192 114.09130096]
[75.30723572 112.83946228]
[75.29957581 94.02074432]
[86.70774078 81.23447418]
[82.50362396 66.83567810]
[78.29950714 52.43687820]
[74.09538269 38.03808212]
[69.89126587 23.63928223]
[65.68714905 9.24048519]
[61.48302841 -5.15831327]
[50.18799973 -16.23680305]
[54.04805756 -30.62253380]
[49.84394073 -45.02133179]
[45.63982010 -59.42012787]
[41.43569946 -73.81892395]
[37.23158264 -88.21772766]
[32.42977524 -102.42837524]
[27.03865623 -116.42608643]
[21.64754105 -130.42379761]
[16.25642395 -144.42150879]
[10.86530685 -158.41921997]
[5.47419024 -172.41693115]
[0.08307378 -186.41462708]
[-5.42480850 -200.36680603]
[-11.04907131 -214.27247620]
[-16.78932381 -228.13067627]
[-22.64516258 -241.94041443]
[-28.50100136 -255.75016785]
[-42.77464294 -263.07427979]
[-45.80651855 -278.82824707]
[-35.27083206 -290.92697144]
[-19.24965858 -290.08932495]
[-10.03307533 -276.95791626]
[-14.69125271 -261.60601807]
[-8.83541393 -247.79626465]
[-2.97957468 -233.98651123]
[2.53720427 -229.04597473]
[2.85659885 -219.89674377]
[8.48086166 -205.99107361]
[13.91431522 -200.95903015]
[14.08078289 -191.80575562]
[19.47189903 -177.80804443]
[24.86301613 -163.81033325]
[30.25413322 -149.81262207]
[35.64524841 -135.81491089]
[41.03636551 -121.81719971]
[46.42748260 -107.81949615]
[54.90127945 -120.19667816]
[69.84801483 -121.45964050]
[80.27851868 -110.67980957]
[78.52404022 -95.78276825]
[65.87451935 -87.72115326]
[51.63037872 -92.42184448]
[55.83449936 -78.02304840]
[60.03861618 -63.62424850]
[64.24273682 -49.22545242]
[68.44685364 -34.82665253]
[79.44117737 -24.77806091]
[75.88182831 -9.36243248]
[80.08594513 5.03636551]
[84.29006195 19.43516350]
[88.49418640 33.83396149]
[92.69830322 48.23275757]
[96.90242004 62.63155746]
[101.10654449 77.03035736]
[110.83309174 78.93537140]
[119.12409973 84.88237000]
[124.33765411 93.99115753]
[125.32051086 104.73361969]
[121.65408325 115.18875885]
[113.77302551 123.38626862]
[102.92733765 127.67697906]
[110.13607025 140.83122253]
[117.34479523 153.98547363]
[124.55352020 167.13972473]
[131.76225281 180.29397583]
[138.97097778 193.44822693]
[146.17970276 206.60247803]
[153.38842773 219.75672913]
[160.27087402 225.79345703]
[160.60560608 233.19155884]
[167.59352112 246.46441650]
[172.99925232 250.32653809]
[175.28489685 255.55703735]
[174.58476257 260.29962158]
[181.12527466 273.79858398]
[187.66577148 287.29754639]
[194.20626831 300.79650879]
[200.74676514 314.29544067]
[207.28726196 327.79440308]
[213.82777405 341.29336548]
[220.36827087 354.79232788]
[233.34863281 363.83779907]
[231.93511963 378.66519165]
[238.47561646 392.16415405]
[247.79785156 390.89389038]
[257.32064819 392.58059692]
[266.10455322 397.21975708]
[273.23483276 404.50857544]
[277.91595459 413.86181641]
[279.55813599 424.45742798]
[277.84695435 435.30828857]
[290.07000732 444.00296021]
[302.29302979 452.69763184]
[316.95840454 447.62741089]
[331.79327393 452.17776489]
[341.09338379 464.59902954]
[341.28262329 480.11495972]
[332.28823853 492.75933838]
[317.56875610 497.67019653]
[302.78408813 492.95916748]
[293.61929321 480.43774414]
[293.59838867 464.92068481]
[281.37533569 456.22601318]
[269.15228271 447.53134155]
[256.37579346 455.39016724]
[258.62322998 470.22085571]
[260.87066650 485.05154419]
[263.11810303 499.88223267]
[265.36553955 514.71289062]
[285.13388062 526.58880615]
[289.67153931 548.92687988]
[276.41772461 567.14276123]
[280.38064575 581.60980225]
[284.34359741 596.07678223]
[288.30651855 610.54382324]
[292.26943970 625.01086426]
[302.28558350 638.68981934]
[291.91397095 652.10125732]
[276.15551758 645.84759521]
[277.80239868 628.97381592]
[273.83947754 614.50677490]
[269.87655640 600.03973389]
[265.91360474 585.57269287]
[261.95068359 571.10565186]
[254.45846558 570.13427734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 171]
[9 170]
[10 169]
[11 168]
[12 167]
[15 146]
[16 145]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 133]
[27 132]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[35 123]
[36 53]
[37 52]
[38 51]
[41 48]
[42 47]
[55 116]
[56 115]
[57 114]
[58 113]
[59 112]
[60 111]
[61 110]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[74 92]
[75 90]
[76 89]
[77 87]
[78 86]
[79 85]
[153 166]
[154 165]
[155 164]
[174 186]
[175 185]
[176 184]
[177 183]
[178 182]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
