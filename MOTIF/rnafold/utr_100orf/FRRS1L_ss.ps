%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAGACCGAGGCAGGGAGGCGGGGGUGCGGGAGGCUCCGCGGCUGCGCGGGCGCGUGCUGGUGGCCUCGGCGGAGGCUCAGUCCCGGCCCGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[97.34320068 110.58216858]
[92.69672394 109.32149506]
[88.71553040 105.98416901]
[73.86223602 103.89144135]
[59.00893402 101.79870605]
[44.15563583 99.70597839]
[29.30233765 97.61325073]
[14.44903851 95.52051544]
[5.33295870 97.44138336]
[-0.83084100 93.12477875]
[-15.61187172 90.57112122]
[-30.39290237 88.01747131]
[-45.30884552 93.29243469]
[-56.53310013 83.50134277]
[-71.31412506 80.94769287]
[-80.48553467 82.58411407]
[-86.51210785 78.07790375]
[-101.20657349 75.06580353]
[-110.49639893 87.12650299]
[-124.04627228 93.93002319]
[-139.14462280 94.17479706]
[-152.79591370 87.86582184]
[-162.31497192 76.30307007]
[-165.85505676 61.81399918]
[-180.54953003 58.80189133]
[-193.60160828 67.71360779]
[-209.11666870 64.70385742]
[-217.88989258 51.55828094]
[-214.71627808 36.07591248]
[-201.47868347 27.44216728]
[-186.03073120 30.77929115]
[-177.53741455 44.10742950]
[-162.84295654 47.11953735]
[-153.88786316 35.19175720]
[-140.58732605 28.30662155]
[-125.55480957 27.87732315]
[-111.77039337 34.04255295]
[-101.99000549 45.62836456]
[-98.19446564 60.37133789]
[-83.50000763 63.38344574]
[-68.76047516 66.16666412]
[-53.97944641 68.72031403]
[-40.12073898 63.26269913]
[-27.83924866 73.23644257]
[-13.05821800 75.79009247]
[1.72281229 78.34375000]
[16.54176903 80.66722107]
[31.39506721 82.75994873]
[46.24836731 84.85268402]
[61.10166550 86.94541168]
[75.95496368 89.03813934]
[90.80826569 91.13086700]
[105.74300385 92.52855682]
[120.72667694 93.22816467]
[135.71035767 93.92777252]
[150.69403076 94.62738037]
[165.67770386 95.32698059]
[180.66137695 96.02658844]
[195.64506531 96.72619629]
[209.79109192 89.64096069]
[222.14363098 97.96344757]
[237.12730408 98.66304779]
[252.11099243 99.36265564]
[267.09466553 100.06226349]
[282.07833862 100.76187134]
[297.07833862 100.76187134]
[312.06201172 100.06226349]
[327.03298950 99.12971497]
[341.98767090 97.96446228]
[356.94235229 96.79920197]
[371.89700317 95.63394165]
[386.85168457 94.46868896]
[400.06036377 84.74951172]
[414.97119141 91.57594299]
[416.24511719 107.92552948]
[402.57168579 116.97922516]
[388.01693726 109.42335510]
[373.06225586 110.58861542]
[358.10760498 111.75387573]
[343.15292358 112.91912842]
[328.19827271 114.08438873]
[321.65905762 117.80787659]
[312.76162720 115.04593658]
[297.77795410 115.74554443]
[295.07455444 118.26483154]
[290.94903564 119.50366211]
[286.06463623 118.77696991]
[281.37872314 115.74554443]
[266.39505005 115.04593658]
[251.41137695 114.34633636]
[236.42770386 113.64672852]
[221.44403076 112.94712067]
[208.36973572 120.08239746]
[194.94544983 111.70986938]
[179.96177673 111.01026154]
[164.97810364 110.31066132]
[149.99443054 109.61105347]
[135.01074219 108.91144562]
[120.02706909 108.21184540]
[105.04339600 107.51223755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 52]
[4 51]
[5 50]
[6 49]
[7 48]
[8 47]
[10 46]
[11 45]
[12 44]
[14 42]
[15 41]
[17 40]
[18 39]
[24 33]
[25 32]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 84]
[67 83]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
