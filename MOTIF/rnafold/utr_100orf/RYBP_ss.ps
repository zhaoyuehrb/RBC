%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCAAAAAGACAAGCGAAACCUGCCGCAGACGAAGGGUUUUGGGAUUGUAGCGUCUGCACCUUCAGAAACAGUGCUGAAGCCUUUAAAUGCAGCAUCU\
) } def
/len { sequence length } bind def

/coor [
[62.29494858 263.58193970]
[57.11643219 277.72396851]
[49.01848221 290.42190552]
[38.37986374 301.08181763]
[25.69815445 309.20513916]
[11.56650829 314.41192627]
[-3.35411525 316.45864868]
[-18.36585045 315.24957275]
[-32.76657104 310.84124756]
[-45.88273239 303.43984985]
[-57.10086441 293.39160156]
[-65.89627838 281.16644287]
[-71.85758972 267.33615112]
[-74.70597839 252.54760742]
[-74.30822754 237.49250793]
[-70.68293762 222.87501526]
[-63.99966812 209.37879944]
[-54.57101059 197.63510132]
[-42.83795547 188.19319153]
[-29.34928131 181.49470520]
[-14.73587799 177.85293579]
[0.31875828 177.43820190]
[15.11049557 180.26991272]
[28.94749641 186.21562195]
[37.68861389 174.02575684]
[46.42972946 161.83587646]
[47.55865479 146.98411560]
[61.88835907 140.27813721]
[70.62947083 128.08827209]
[79.37059021 115.89840698]
[74.20603180 103.60596466]
[75.80153656 90.36846924]
[83.73897552 79.65519714]
[95.93808746 74.27388763]
[109.20174408 75.63486481]
[118.31773376 63.72274017]
[127.43372345 51.81061554]
[136.54971313 39.89849091]
[145.66571045 27.98636627]
[154.78169250 16.07424164]
[163.89768982 4.16211653]
[173.01367188 -7.75000811]
[182.12966919 -19.66213226]
[191.24566650 -31.57425690]
[200.36164856 -43.48638153]
[202.60395813 -59.14788437]
[216.48324585 -64.55293274]
[225.59924316 -76.46505737]
[234.71522522 -88.37718201]
[243.83122253 -100.28930664]
[252.94720459 -112.20143127]
[250.39405823 -121.60575104]
[252.53202820 -130.97015381]
[258.73120117 -138.12387085]
[267.43615723 -141.47198486]
[276.55468750 -140.35008240]
[286.74096680 -151.36096191]
[296.92727661 -162.37184143]
[307.11355591 -173.38272095]
[306.24887085 -189.16333008]
[316.85806274 -200.87742615]
[332.64694214 -201.57524109]
[344.24822998 -190.84275818]
[344.77905273 -175.04739380]
[333.92453003 -163.56024170]
[318.12445068 -163.19642639]
[307.93814087 -152.18554688]
[297.75186157 -141.17466736]
[287.56555176 -130.16378784]
[285.09014893 -109.77539062]
[264.85934448 -103.08544159]
[255.74334717 -91.17331696]
[246.62734985 -79.26119232]
[237.51136780 -67.34906769]
[228.39537048 -55.43693924]
[226.80509949 -40.62747192]
[212.27377319 -34.37039185]
[203.15779114 -22.45826721]
[194.04179382 -10.54614258]
[184.92579651 1.36598241]
[175.80981445 13.27810669]
[166.69381714 25.19023132]
[157.57783508 37.10235596]
[148.46183777 49.01448059]
[139.34585571 60.92660522]
[130.22985840 72.83872986]
[121.11386871 84.75085449]
[126.04432678 100.15831757]
[120.92692566 115.50470734]
[107.73594666 124.86940002]
[91.56045532 124.63951874]
[82.81934357 136.82939148]
[74.07822418 149.01925659]
[72.32408142 164.74291992]
[58.61959839 170.57699585]
[49.87848282 182.76686096]
[41.13736725 194.95674133]
[51.20804214 206.15475464]
[58.63563156 219.25608826]
[63.07273865 233.64796448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 97]
[25 96]
[26 95]
[28 93]
[29 92]
[30 91]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
