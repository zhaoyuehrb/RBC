%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGUGUCUGUGCUCCUGUGUGUGACCAGGGUUGAAAAAGUCGCACUGAGAUGUCCUGCCAGCAAAACCAGCAGCAGUGCCAGCCCCCUCCCAAGUGCCCCCCAAAAUGCCCACCCAAGUGUCCUCCAAAGUGCCGACCUCAGUGCCCAG\
) } def
/len { sequence length } bind def

/coor [
[-29.06982422 242.07713318]
[-28.40353012 227.09086609]
[-40.42851639 236.05744934]
[-52.45350647 245.02403259]
[-52.00153351 261.90219116]
[-61.58443451 275.60156250]
[-77.27989197 280.85910034]
[-92.86572266 275.79849243]
[-104.70283508 285.01168823]
[-105.43392181 295.94372559]
[-111.95582581 304.47183228]
[-121.89802551 307.89715576]
[-131.86209106 305.30648804]
[-144.06982422 314.02264404]
[-149.27763367 321.60565186]
[-156.62113953 322.78970337]
[-169.00639343 331.25167847]
[-181.39164734 339.71368408]
[-193.77691650 348.17568970]
[-199.14033508 355.64944458]
[-206.50672913 356.68145752]
[-219.06422424 364.88568115]
[-229.01718140 378.61065674]
[-244.96102905 372.84613037]
[-243.83546448 355.92959595]
[-227.26844788 352.32818604]
[-214.71095276 344.12396240]
[-202.23890686 335.79043579]
[-189.85365295 327.32843018]
[-177.46838379 318.86642456]
[-165.08312988 310.40444946]
[-152.78598022 301.81491089]
[-140.57824707 293.09875488]
[-133.95239258 274.97247314]
[-113.91602325 273.17456055]
[-102.07891846 263.96136475]
[-103.75379181 250.68098450]
[-98.59163666 238.21337891]
[-87.84772491 229.87094116]
[-74.27522278 227.92742920]
[-61.42009354 232.99903870]
[-49.39510345 224.03245544]
[-37.37011719 215.06587219]
[-25.92385674 205.37138367]
[-15.10031414 194.98625183]
[-4.27677250 184.60112000]
[6.54676962 174.21598816]
[17.37031174 163.83085632]
[28.19385338 153.44572449]
[39.01739502 143.06059265]
[49.84093857 132.67547607]
[50.82978439 127.94424438]
[54.84056854 123.80625153]
[61.33295059 122.09632874]
[72.57640839 112.16735077]
[83.81987000 102.23837280]
[87.50215149 87.69736481]
[82.33949280 73.61380005]
[77.17683411 59.53022766]
[72.01418304 45.44665527]
[60.62936020 39.29730606]
[56.63914871 27.41146469]
[61.67474365 16.36939049]
[56.80424881 2.18213177]
[42.14644623 -3.26605463]
[34.46492767 -16.88693237]
[37.38667679 -32.24913788]
[49.53213120 -42.09910965]
[65.16658020 -41.78599167]
[76.90791321 -31.45762825]
[79.21223450 -15.99075603]
[70.99150848 -2.68836021]
[75.86199951 11.49889851]
[89.69465637 22.25436401]
[86.09774780 40.28399658]
[91.26040649 54.36756897]
[96.42306519 68.45114136]
[101.58572388 82.53470612]
[103.80709076 67.70010376]
[98.88153839 53.53186798]
[98.95508575 38.53204727]
[104.01934052 24.41279221]
[113.49623871 12.78573704]
[126.30404663 4.97804832]
[140.98081970 1.88092899]
[155.85130310 3.84789896]
[169.21809387 10.65443993]
[179.55543518 21.52362061]
[185.68341064 35.21478653]
[186.90252686 50.16516495]
[183.07360840 64.66825104]
[174.63374329 77.06859589]
[162.54626465 85.95076752]
[148.19091797 90.30091858]
[133.20726013 89.62271881]
[119.62320709 95.98458862]
[134.59437561 96.91407013]
[149.56555176 97.84355164]
[164.53672791 98.77303314]
[170.13156128 84.73183441]
[179.77938843 73.12313080]
[192.52569580 65.07575989]
[207.11546326 61.36718750]
[222.11679077 62.34840775]
[236.06135559 67.91076660]
[247.58821106 77.49784088]
[255.57650757 90.16105652]
[259.25460815 104.65356445]
[274.22576904 105.58304596]
[289.19696045 106.51252747]
[304.16812134 107.44200897]
[313.94497681 95.39241791]
[328.94586182 91.42333221]
[343.40258789 97.06093597]
[351.75625610 110.13746643]
[350.79473877 125.62472534]
[340.88772583 137.56753540]
[325.84469604 141.37365723]
[311.44998169 135.57955933]
[303.23864746 122.41317749]
[288.26745605 121.48369598]
[273.29629517 120.55422211]
[258.32510376 119.62474060]
[252.88265991 133.55099487]
[243.38935852 145.12887573]
[230.76518250 153.21653748]
[216.23966980 157.01133728]
[201.23217773 156.12947083]
[187.21316528 150.64472961]
[175.56015015 141.08253479]
[167.42231750 128.36961365]
[163.60725403 113.74420929]
[148.63607788 112.81472778]
[133.66490173 111.88524628]
[118.69372559 110.95576477]
[105.45425415 117.43065643]
[93.74884796 113.48183441]
[82.50538635 123.41081238]
[71.26192474 133.33978271]
[60.22606659 143.49900818]
[49.40252686 153.88414001]
[38.57898331 164.26927185]
[27.75544167 174.65440369]
[16.93190002 185.03953552]
[6.10835838 195.42466736]
[-4.71518373 205.80979919]
[-15.53872585 216.19493103]
[-0.64819449 218.00381470]
[8.75169277 229.69322205]
[7.32298231 244.62503052]
[-4.12299681 254.31983948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[4 41]
[8 36]
[9 35]
[13 33]
[14 32]
[16 31]
[17 30]
[18 29]
[19 28]
[21 27]
[22 26]
[44 147]
[45 146]
[46 145]
[47 144]
[48 143]
[49 142]
[50 141]
[51 140]
[54 139]
[55 138]
[56 137]
[57 78]
[58 77]
[59 76]
[60 75]
[63 73]
[64 72]
[96 135]
[97 134]
[98 133]
[99 132]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
