%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGUGACUGCCUCUUCCAGGGCGGGCGGUGUGGUGCACGCAUUGCUGUGCUCCAACUCCCUCAGGGCCUGUGUUGCCGCACUCUGCUGCUAUGAGCUUCCUCAAAAGUUUCCCGCCGCCUGGGCCAGCGGAGGGGCUCCUGCGGCAGCAGCCAGACACUGAGGCUGUGCUGAACGGGAAGGGCCUCGGCA\
) } def
/len { sequence length } bind def

/coor [
[305.99551392 474.76370239]
[305.26330566 459.78158569]
[304.53112793 444.79946899]
[303.79891968 429.81735229]
[303.06671143 414.83523560]
[302.33450317 399.85311890]
[293.58221436 391.48925781]
[292.85809326 379.00317383]
[301.09585571 369.06546021]
[300.60760498 354.07342529]
[295.12210083 340.11242676]
[285.27404785 328.79803467]
[275.42599487 317.48361206]
[265.57794189 306.16918945]
[255.72988892 294.85479736]
[245.88183594 283.54037476]
[236.03378296 272.22595215]
[226.18574524 260.91156006]
[211.38981628 262.40109253]
[198.40026855 254.80268860]
[192.30439758 240.84942627]
[195.63197327 225.80836487]
[185.78392029 214.49395752]
[175.93588257 203.17955017]
[165.90496826 192.02693176]
[155.69386292 181.03906250]
[145.48274231 170.05119324]
[135.27163696 159.06332397]
[125.06052399 148.07545471]
[114.84941101 137.08760071]
[104.63829803 126.09973145]
[94.42719269 115.11186218]
[80.33644867 109.96881866]
[65.44808960 111.79550934]
[50.55973053 113.62220001]
[37.80451584 122.98249817]
[24.22972488 116.85270691]
[9.34136772 118.67939758]
[-5.54698944 120.50608826]
[-20.43534660 122.33278656]
[-35.30834579 124.28059387]
[-50.16499710 126.34938049]
[-65.01885223 134.52246094]
[-76.98448181 122.51162720]
[-68.75545502 107.68869019]
[-52.23378372 111.49272919]
[-37.37713242 109.42394257]
[-31.17639923 105.38143158]
[-22.26204109 107.44442749]
[-7.37368345 105.61773682]
[7.51467419 103.79103851]
[22.40303230 101.96434784]
[34.09333038 92.73471069]
[48.73303604 98.73384857]
[63.62139511 96.90715027]
[78.50975037 95.08045959]
[81.30923462 88.12252045]
[67.36771393 82.58773804]
[52.40696716 81.50322723]
[48.77603149 66.94931030]
[61.47412872 58.96442795]
[73.01828003 68.54360962]
[86.90820312 74.20664978]
[89.70769501 67.24871063]
[80.23313904 55.61974335]
[70.75859070 43.99077606]
[61.28403473 32.36180878]
[51.80948639 20.73284340]
[45.75378799 18.01904869]
[42.47985840 13.35045242]
[42.22323990 8.56766129]
[33.13222885 -3.36353636]
[24.04121590 -15.29473400]
[14.95020294 -27.22593307]
[-0.37978545 -33.05031967]
[-2.73325372 -49.27971268]
[10.31084442 -59.21870422]
[25.33385849 -52.64291000]
[26.88140106 -36.31694412]
[35.97241211 -24.38574791]
[45.06342697 -12.45454979]
[54.15443802 -0.52335137]
[63.43844986 11.25829220]
[72.91300201 22.88725853]
[82.38755798 34.51622391]
[91.86210632 46.14519119]
[101.33665466 57.77415848]
[108.53441620 55.66648865]
[122.92993164 51.45115280]
[130.12770081 49.34348297]
[131.83316040 34.44075012]
[133.53862000 19.53801918]
[125.81142426 2.83131504]
[136.78170776 -10.85785675]
[138.24436951 -25.78637314]
[139.70703125 -40.71488953]
[141.16969299 -55.64340591]
[133.90499878 -70.34566498]
[143.22903442 -83.83618927]
[159.55003357 -82.23709869]
[166.07835388 -67.19338989]
[156.09820557 -54.18074417]
[154.63554382 -39.25222778]
[153.17288208 -24.32370949]
[151.71022034 -9.39519310]
[159.14781189 0.15670498]
[158.04153442 12.61474419]
[148.44134521 21.24348068]
[146.73588562 36.14621353]
[145.03042603 51.04894257]
[147.59161377 73.09380341]
[141.95800781 91.40636444]
[130.79812622 103.41753387]
[117.45748138 107.85995483]
[105.41505432 104.90074921]
[115.62616730 115.88861847]
[125.83728027 126.87648773]
[136.04838562 137.86434937]
[146.25950623 148.85221863]
[156.47061157 159.84008789]
[166.68171692 170.82795715]
[176.89283752 181.81581116]
[183.11227417 184.12985229]
[186.68302917 188.57553101]
[187.25028992 193.33149719]
[197.09834290 204.64590454]
[206.94638062 215.96031189]
[222.30264282 214.73899841]
[235.28182983 222.70103455]
[241.01611328 236.61441040]
[237.50015259 251.06349182]
[247.34820557 262.37789917]
[257.19625854 273.69232178]
[267.04431152 285.00674438]
[276.89236450 296.32113647]
[286.74038696 307.63555908]
[296.58843994 318.94998169]
[306.43649292 330.26437378]
[335.22512817 332.29370117]
[348.52871704 339.22296143]
[361.83230591 346.15219116]
[375.13592529 353.08142090]
[388.43951416 360.01065063]
[401.85412598 366.72244263]
[415.37622070 373.21496582]
[428.89831543 379.70751953]
[442.42041016 386.20004272]
[455.94250488 392.69259644]
[465.04843140 393.58905029]
[469.63052368 399.40243530]
[483.04516602 406.11419678]
[496.45977783 412.82598877]
[509.87438965 419.53778076]
[523.28900146 426.24954224]
[536.50250244 418.28671265]
[551.92279053 418.75457764]
[564.62927246 427.50381470]
[570.56732178 441.74258423]
[567.84222412 456.92736816]
[557.32348633 468.21270752]
[542.36761475 471.99755859]
[527.74694824 467.07412720]
[518.12689209 455.01348877]
[516.57727051 439.66415405]
[503.16262817 432.95239258]
[489.74798584 426.24060059]
[476.33337402 419.52883911]
[462.91876221 412.81704712]
[449.44995117 406.21469116]
[435.92785645 399.72213745]
[422.40576172 393.22961426]
[408.88366699 386.73706055]
[395.36160278 380.24453735]
[390.62561035 380.95965576]
[385.39175415 378.69665527]
[381.51028442 373.31423950]
[368.20666504 366.38500977]
[354.90307617 359.45578003]
[341.59948730 352.52655029]
[328.29589844 345.59732056]
[315.59967041 353.58517456]
[316.08792114 368.57720947]
[326.17111206 383.97698975]
[317.31661987 399.12091064]
[318.04882812 414.10302734]
[318.78103638 429.08514404]
[319.51324463 444.06726074]
[320.24542236 459.04937744]
[320.97763062 474.03149414]
[330.31069946 487.51580811]
[323.05581665 502.22290039]
[306.67620850 503.02340698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 189]
[2 188]
[3 187]
[4 186]
[5 185]
[6 184]
[9 182]
[10 181]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[22 127]
[23 126]
[24 125]
[25 122]
[26 121]
[27 120]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 56]
[34 55]
[35 54]
[37 52]
[38 51]
[39 50]
[40 49]
[41 47]
[42 46]
[64 87]
[65 86]
[66 85]
[67 84]
[68 83]
[71 82]
[72 81]
[73 80]
[74 79]
[90 110]
[91 109]
[92 108]
[94 105]
[95 104]
[96 103]
[97 102]
[139 180]
[140 179]
[141 178]
[142 177]
[143 176]
[144 173]
[145 172]
[146 171]
[147 170]
[148 169]
[150 168]
[151 167]
[152 166]
[153 165]
[154 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
