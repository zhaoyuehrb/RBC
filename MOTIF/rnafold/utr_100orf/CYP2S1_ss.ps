%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACUAGCCCAGCCGCGCGGAGCGCCUGGGAGAGGAGAAGGAGCCGACCUGCCGAGAUGGAGGCGACCGGCACCUGGGCGCUGCUGCUGGCGCUGGCGCUGCUCCUGCUGCUGACGCUGGCGCUGUCCGGGACCAGGGCCCGAGGCCACCUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[79.45061493 127.17635345]
[67.99176025 136.85595703]
[56.53290939 146.53555298]
[55.70203400 165.42073059]
[41.60860825 177.53666687]
[23.44486427 175.59197998]
[12.37736607 185.71673584]
[11.51661396 201.26976013]
[0.14836517 211.38003540]
[-14.67377090 210.46359253]
[-25.74127007 220.58833313]
[-36.80876923 230.71307373]
[-47.87627029 240.83782959]
[-58.94376755 250.96257019]
[-63.90344620 265.98629761]
[-78.51660156 268.86813354]
[-89.58409882 278.99288940]
[-100.65159607 289.11764526]
[-102.79816437 305.01641846]
[-116.64010620 313.12692261]
[-131.55906677 307.22744751]
[-136.11050415 291.84356689]
[-126.80294800 278.77645874]
[-110.77634430 278.05014038]
[-99.70883942 267.92538452]
[-88.64134216 257.80065918]
[-84.47328186 243.50111389]
[-69.06851196 239.89506531]
[-58.00101471 229.77032471]
[-46.93351364 219.64558411]
[-35.86601639 209.52082825]
[-24.79851532 199.39608765]
[-24.39519501 184.55113220]
[-13.31540775 174.12553406]
[2.25262070 174.64923096]
[13.32011986 164.52449036]
[11.34233093 153.22523499]
[15.12665367 142.26913452]
[23.83525848 134.43852234]
[35.36469650 131.78135681]
[46.85330963 135.07670593]
[58.31216049 125.39710236]
[69.77101898 115.71749878]
[65.94398499 98.99036407]
[70.75521851 82.51931763]
[59.88991928 72.17788696]
[49.02461624 61.83646011]
[38.15931320 51.49502563]
[24.78981972 53.37378311]
[12.95980835 47.28291321]
[6.90266848 35.65493774]
[8.63932037 22.85612297]
[-2.01954389 12.30204391]
[-12.67840862 1.74796355]
[-23.33727264 -8.80611610]
[-38.62882996 -6.17022896]
[-52.53438950 -13.05608940]
[-59.70697784 -26.81594467]
[-57.38858795 -42.15884781]
[-46.47069168 -53.18514252]
[-31.15143967 -55.65499115]
[-17.32139778 -48.61868668]
[-10.29850006 -34.78183365]
[-12.78319263 -19.46498108]
[-2.12432837 -8.91090107]
[8.53453636 1.64317894]
[19.19340134 12.19725895]
[35.96735382 11.38098335]
[48.40412903 23.16204643]
[48.50074387 40.62972641]
[59.36604691 50.97115707]
[70.23134613 61.31258774]
[81.09664917 71.65401459]
[102.68995667 66.03537750]
[123.12963104 74.98297882]
[135.48731995 66.48078156]
[147.84501648 57.97858047]
[160.20271301 49.47637939]
[172.56040955 40.97418213]
[184.91810608 32.47198486]
[197.27580261 23.96978378]
[209.63349915 15.46758556]
[212.85804749 9.59729195]
[217.83044434 6.70944357]
[222.65159607 6.88495350]
[235.33554077 -1.12239695]
[240.95936584 -8.38936710]
[248.35012817 -9.15977859]
[261.18978882 -16.91496658]
[274.02947998 -24.67015648]
[286.86914062 -32.42534637]
[299.70880127 -40.18053436]
[312.54846191 -47.93572235]
[325.38812256 -55.69091415]
[333.20050049 -69.44873047]
[348.09503174 -69.40593719]
[360.93469238 -77.16112518]
[373.77438354 -84.91631317]
[386.61404419 -92.67150116]
[399.37646484 -100.55315399]
[412.06039429 -108.56050873]
[413.98590088 -124.07909393]
[425.47119141 -134.69142151]
[441.09332275 -135.38668823]
[453.47595215 -125.83660126]
[456.77243042 -110.55041504]
[449.42620850 -96.74581146]
[434.90597534 -90.94089508]
[420.06774902 -95.87657166]
[407.38381958 -87.86921692]
[403.38525391 -81.60595703]
[394.36923218 -79.83183289]
[381.52957153 -72.07664490]
[368.68988037 -64.32145691]
[355.85021973 -56.56626892]
[348.95623779 -43.36315155]
[333.14331055 -42.85124588]
[320.30364990 -35.09605789]
[307.46398926 -27.34086800]
[294.62432861 -19.58567810]
[281.78466797 -11.83048916]
[268.94497681 -4.07530069]
[256.10531616 3.67988873]
[243.34289551 11.56154346]
[230.65895081 19.56889343]
[218.13569641 27.82527924]
[205.77799988 36.32748032]
[193.42030334 44.82967758]
[181.06260681 53.33187485]
[168.70491028 61.83407593]
[156.34721375 70.33627319]
[143.98953247 78.83847046]
[131.63183594 87.34067535]
[133.80229187 95.72963715]
[133.78634644 104.39482117]
[131.58499146 112.77573395]
[127.34064484 120.33028412]
[121.32782745 126.56980896]
[127.91227722 140.04739380]
[134.49671936 153.52496338]
[141.08116150 167.00254822]
[145.50321960 169.97206116]
[148.05375671 173.95547485]
[148.66204834 178.05528259]
[147.62973022 181.47930908]
[153.40419006 195.32327271]
[159.17864990 209.16725159]
[170.85650635 221.45806885]
[162.27877808 236.08198547]
[145.85182190 231.88777161]
[145.33468628 214.94171143]
[139.56021118 201.09773254]
[133.78575134 187.25376892]
[127.60359192 173.58699036]
[121.01914215 160.10940552]
[114.43470001 146.63183594]
[107.85025024 133.15425110]
[97.92942810 134.00799561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[6 36]
[7 35]
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[16 26]
[17 25]
[18 24]
[45 73]
[46 72]
[47 71]
[48 70]
[52 67]
[53 66]
[54 65]
[55 64]
[75 133]
[76 132]
[77 131]
[78 130]
[79 129]
[80 128]
[81 127]
[82 126]
[85 125]
[86 124]
[88 123]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[94 117]
[96 115]
[97 114]
[98 113]
[99 112]
[100 110]
[101 109]
[138 157]
[139 156]
[140 155]
[141 154]
[145 153]
[146 152]
[147 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
