%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAACUCACACUUCUUCCUGGCAAAGAAGUGCCCAGGACGGGAGCUGGGGAGCCAGGGCUGAUCUAGGAGGCUGGGAGCCAGGUGACAGGAUGGCCCCAAAGAGAGUUGUGCAGCUGUCCCUGAAGAUGCCUACCCAUGCCGUGUGUGUGGUGGGAGUCGAGGCACAUGUGGACAUUCACAGUGAUGUGC\
) } def
/len { sequence length } bind def

/coor [
[118.25753784 202.30438232]
[103.36944580 200.47557068]
[93.04001617 189.59886169]
[91.98159027 174.63624573]
[100.67701721 162.41374207]
[115.15941620 158.50732422]
[128.82272339 164.69993591]
[123.56516266 150.65151978]
[118.30760193 136.60308838]
[101.74889374 143.74351501]
[82.53663635 143.23716736]
[64.23932648 134.20140076]
[50.64844513 117.41825867]
[38.35727692 126.01634979]
[26.06610680 134.61444092]
[13.77493668 143.21252441]
[1.48376679 151.81062317]
[-10.73701763 160.50845337]
[-22.88660812 169.30546570]
[-35.03619766 178.10249329]
[-47.18579102 186.89950562]
[-59.33538055 195.69651794]
[-71.48497009 204.49353027]
[-83.56256104 213.38912964]
[-95.56735229 222.38273621]
[-97.56237793 238.06060791]
[-110.10996246 247.66963196]
[-125.76586151 245.50897217]
[-135.24169922 232.86048889]
[-132.91563416 217.22831726]
[-120.16767120 207.88673401]
[-104.56095886 210.37794495]
[-92.55616760 201.38433838]
[-89.08267975 194.84783936]
[-80.28198242 192.34393311]
[-68.13239288 183.54692078]
[-55.98280334 174.74990845]
[-43.83321381 165.95289612]
[-31.68362236 157.15588379]
[-19.53403091 148.35887146]
[-15.95460701 141.87977600]
[-7.11432314 139.51945496]
[5.17684650 130.92135620]
[17.46801567 122.32327271]
[29.75918579 113.72518158]
[42.05035400 105.12709045]
[38.54273987 90.54296875]
[23.68608665 88.47417450]
[8.82943535 86.40538788]
[-6.02721643 84.33660126]
[-21.01284790 90.99714661]
[-34.11288071 81.13199615]
[-31.85112000 64.88956451]
[-16.55427551 58.97867966]
[-3.95842767 69.47994995]
[10.89822483 71.54873657]
[25.75487709 73.61752319]
[40.61153030 75.68631744]
[46.88311005 62.06033707]
[35.64922333 52.12052917]
[24.41533661 42.18072128]
[13.18144894 32.24090958]
[6.76600599 30.54436874]
[2.77876782 26.46805573]
[1.75044930 21.79007530]
[-9.15394783 11.48987579]
[-20.05834389 1.18967485]
[-30.96274185 -9.11052513]
[-41.86713791 -19.41072655]
[-57.93837357 -22.67375946]
[-62.89085007 -38.30721664]
[-51.62988281 -50.22874069]
[-35.73979187 -46.17448425]
[-31.56693840 -30.31512260]
[-20.66254044 -20.01492310]
[-9.75814438 -9.71472168]
[1.14625287 0.58547848]
[12.05064964 10.88567924]
[23.12125778 21.00702477]
[34.35514450 30.94683266]
[45.58903122 40.88664246]
[56.82291794 50.82645035]
[71.11122894 46.26091385]
[74.50003052 31.64872742]
[77.88883972 17.03654099]
[76.77880096 7.95416403]
[81.45354462 2.21502495]
[85.07974243 -12.34006691]
[88.70594025 -26.89515877]
[92.33213806 -41.45025253]
[95.95832825 -56.00534439]
[87.95648193 -64.82222748]
[85.23908997 -76.29132843]
[88.37002563 -87.53002167]
[96.45800018 -95.77082825]
[107.40625000 -99.04283142]
[111.50428772 -113.47218323]
[105.91326141 -125.10657501]
[109.63438416 -137.04725647]
[120.14899445 -143.04721069]
[124.48136139 -157.40794373]
[128.81372070 -171.76867676]
[121.12245178 -185.57519531]
[125.52687836 -200.75335693]
[139.41394043 -208.29823303]
[154.54469299 -203.73356628]
[161.94230652 -189.76751709]
[157.21794128 -174.68588257]
[143.17445374 -167.43632507]
[138.84208679 -153.07559204]
[134.50973511 -138.71485901]
[139.44059753 -121.87956238]
[125.93363953 -109.37414551]
[121.83560181 -94.94479370]
[131.70010376 -79.53679657]
[127.10573578 -61.49847412]
[110.51342010 -52.37914658]
[106.88722992 -37.82405472]
[103.26103210 -23.26896286]
[99.63483429 -8.71387100]
[96.00863647 5.84122086]
[92.50102234 20.42534256]
[89.11222076 35.03752899]
[85.72341919 49.64971924]
[110.30854034 51.60272980]
[129.89805603 64.21552277]
[140.51396179 83.41169739]
[140.73170471 103.98529053]
[155.73121643 103.86321259]
[170.73071289 103.74113464]
[184.46746826 95.89176941]
[197.25727844 103.52523041]
[212.25679016 103.40315247]
[227.25628662 103.28106689]
[242.25579834 103.15898895]
[257.25531006 103.03690338]
[272.25479126 102.91482544]
[287.25280762 102.67066956]
[302.24835205 102.30445862]
[317.24386597 101.93824768]
[332.23941040 101.57203674]
[347.23492432 101.20582581]
[362.92172241 94.77458954]
[373.44415283 108.06799316]
[363.58316040 121.85919189]
[347.60113525 116.20135498]
[332.60562134 116.56756592]
[317.61007690 116.93377686]
[302.61456299 117.29998779]
[287.61901855 117.66619873]
[280.99887085 120.97748566]
[272.37689209 117.91432953]
[257.37738037 118.03640747]
[242.37786865 118.15849304]
[227.37837219 118.28057098]
[212.37886047 118.40265656]
[197.37936401 118.52473450]
[184.71548462 126.36536407]
[170.85279846 118.74063110]
[155.85330200 118.86271667]
[140.85379028 118.98479462]
[132.35601807 131.34553528]
[137.61358643 145.39395142]
[142.87113953 159.44238281]
[148.92008972 173.16862488]
[155.74082947 186.52818298]
[162.56156921 199.88774109]
[169.38229370 213.24728394]
[176.20303345 226.60684204]
[183.45500183 239.73728943]
[191.13050842 252.62475586]
[198.80603027 265.51220703]
[206.48153687 278.39965820]
[214.15705872 291.28710938]
[228.72541809 298.81671143]
[229.21838379 315.20843506]
[215.12884521 323.59991455]
[200.95089722 315.35867310]
[201.26960754 298.96261597]
[193.59408569 286.07516479]
[185.91857910 273.18771362]
[178.24305725 260.30026245]
[170.56753540 247.41281128]
[167.87023926 246.59814453]
[165.33578491 244.65782166]
[163.39756775 241.64939880]
[162.45976257 237.78723145]
[162.84347534 233.42756653]
[156.02275085 220.06802368]
[149.20201111 206.70846558]
[142.38127136 193.34892273]
[135.56054688 179.98936462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 164]
[8 163]
[9 162]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 35]
[24 33]
[25 32]
[47 58]
[48 57]
[49 56]
[50 55]
[59 82]
[60 81]
[61 80]
[62 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[83 124]
[84 123]
[85 122]
[87 121]
[88 120]
[89 119]
[90 118]
[91 117]
[96 114]
[97 113]
[100 111]
[101 110]
[102 109]
[128 161]
[129 160]
[130 159]
[132 157]
[133 156]
[134 155]
[135 154]
[136 153]
[137 152]
[138 150]
[139 149]
[140 148]
[141 147]
[142 146]
[165 192]
[166 191]
[167 190]
[168 189]
[169 188]
[170 183]
[171 182]
[172 181]
[173 180]
[174 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
