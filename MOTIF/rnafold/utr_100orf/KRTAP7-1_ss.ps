%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCCAUCUAAAUCCUUCUCAAUUGCUGCCACCAUGACUCGUUACUUCUGCUGUGGAAGCUACUUCCCAGGAUACCCUAUCUAUGGGACCAACUUCCAUGGGACCUUCAGAGCCACCCCCUUGAACUGUGUUG\
) } def
/len { sequence length } bind def

/coor [
[58.76372528 457.82424927]
[44.87418747 463.53045654]
[30.43308067 467.64559937]
[15.62202263 470.11798096]
[0.62727475 470.91644287]
[-14.36258698 470.03097534]
[-29.15904999 467.47271729]
[-43.57603455 463.27383423]
[-57.43222427 457.48712158]
[-70.55337524 450.18536377]
[-82.77446747 441.46041870]
[-93.94180298 431.42196655]
[-103.91494751 420.19625854]
[-112.56848145 407.92449951]
[-119.79357147 394.76098633]
[-125.49935913 380.87127686]
[-129.61407471 366.43002319]
[-132.08599854 351.61889648]
[-132.88401794 336.62414551]
[-131.99809265 321.63430786]
[-129.43939209 306.83792114]
[-125.24008179 292.42105103]
[-119.45296478 278.56503296]
[-112.15082550 265.44409180]
[-103.42549896 253.22328186]
[-93.38671112 242.05622864]
[-82.16071320 232.08341980]
[-69.88867950 223.43025208]
[-56.72495270 216.20556641]
[-42.83507156 210.50019836]
[-28.39372063 206.38589478]
[-13.58251476 203.91442871]
[1.41228080 203.11686707]
[16.40209007 204.00321960]
[31.19840050 206.56236267]
[45.61513138 210.76211548]
[51.39567184 196.92068481]
[49.16067886 182.19471741]
[61.61853027 172.44215393]
[67.39907074 158.60070801]
[73.17961121 144.75927734]
[62.44342804 136.22471619]
[54.30191040 125.18750763]
[49.31752396 112.41017151]
[47.83462143 98.77546692]
[49.95566177 85.22535706]
[55.53409958 72.69597626]
[64.18453979 62.05294418]
[75.30935669 54.03155136]
[88.13997650 49.18597031]
[101.78995514 47.85096359]
[115.31627655 50.11876678]
[121.73453522 36.56126022]
[128.15278625 23.00375175]
[134.57104492 9.44624519]
[140.98930359 -4.11126089]
[147.40756226 -17.66876793]
[153.82582092 -31.22627449]
[160.24407959 -44.78377914]
[166.66233826 -58.34128571]
[158.09571838 -69.46193695]
[155.18975830 -83.12768555]
[158.45904541 -96.64284515]
[167.20579529 -107.36671448]
[179.66786194 -113.22949219]
[193.37342834 -113.13170624]
[200.10540771 -126.53619385]
[206.83740234 -139.94068909]
[213.56938171 -153.34516907]
[220.30137634 -166.74966431]
[226.87693787 -180.23156738]
[233.29519653 -193.78907776]
[239.71345520 -207.34658813]
[246.13171387 -220.90409851]
[252.54997253 -234.46159363]
[253.86239624 -251.36466980]
[270.46820068 -254.78277588]
[278.34967041 -239.77215576]
[266.10748291 -228.04335022]
[259.68920898 -214.48583984]
[253.27096558 -200.92832947]
[246.85270691 -187.37081909]
[240.43444824 -173.81332397]
[240.41548157 -166.35346985]
[233.70587158 -160.01766968]
[226.97387695 -146.61318970]
[220.24188232 -133.20869446]
[213.50990295 -119.80420685]
[206.77790833 -106.39971924]
[215.97329712 -93.16358948]
[217.27265930 -77.00540924]
[210.22970581 -62.30117416]
[196.67022705 -53.08063507]
[180.21983337 -51.92303085]
[173.80157471 -38.36552429]
[167.38333130 -24.80801773]
[160.96507263 -11.25051117]
[154.54681396 2.30699539]
[148.12855530 15.86450195]
[141.71029663 29.42200851]
[135.29203796 42.97951508]
[128.87377930 56.53702164]
[140.81620789 67.49209595]
[148.82147217 81.58289337]
[152.11741638 97.45021057]
[150.38609314 113.56348419]
[143.79450989 128.36842346]
[132.97850037 140.43692017]
[118.98136902 148.60487366]
[103.15328979 152.08438110]
[87.02104950 150.53981018]
[81.24050903 164.38125610]
[75.45996857 178.22268677]
[77.28149414 193.93869019]
[65.23710632 202.70121765]
[59.45656586 216.54264832]
[72.57815552 223.84361267]
[84.79976654 232.56784058]
[95.96770477 242.60563660]
[105.94152069 253.83073425]
[114.59578705 266.10198975]
[121.82166290 279.26507568]
[127.52828217 293.15444946]
[131.64387512 307.59542847]
[134.11666870 322.40640259]
[134.91558838 337.40112305]
[134.03056335 352.39102173]
[131.47274780 367.18756104]
[127.27429199 381.60467529]
[121.48800659 395.46102905]
[114.18665314 408.58239746]
[105.46205902 420.80374146]
[95.42393494 431.97137451]
[84.19853973 441.94488525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[36 116]
[37 115]
[39 113]
[40 112]
[41 111]
[52 102]
[53 101]
[54 100]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[66 89]
[67 88]
[68 87]
[69 86]
[70 85]
[71 83]
[72 82]
[73 81]
[74 80]
[75 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
