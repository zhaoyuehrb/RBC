%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:32:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUUACCAGUUUCAACUUACUAUGCUCAAGUCCAGGCAACGUACAGGCAGGGGAAAUGUCUCUUCCAAGGUUGCUAAAAGUAAACAUCAGAACAUAUGAUAAUUCCAUUCCAAUCAGUGAAUCAAGCAGAAAAUCAUGGAAUCAAAAACACUUUG\
) } def
/len { sequence length } bind def

/coor [
[102.87439728 128.32086182]
[91.27589417 128.80009460]
[79.82432556 124.47464752]
[71.64640045 137.04928589]
[63.46847916 149.62393188]
[70.31170654 163.30300903]
[69.39525604 178.47064209]
[61.06521225 191.05940247]
[47.64221954 197.74365234]
[32.77586365 196.81790161]
[24.59794235 209.39254761]
[16.42002106 221.96717834]
[16.09169960 238.36303711]
[1.59969103 246.03857422]
[-12.14786816 237.09783936]
[-11.00866890 220.73831177]
[3.84537935 213.78926086]
[12.02330112 201.21461487]
[20.20122337 188.63998413]
[13.32632351 175.42630005]
[13.99293327 160.44592285]
[22.12206268 147.72650146]
[35.61490250 140.73794556]
[50.89383698 141.44599915]
[59.07175827 128.87136841]
[67.24967957 116.29672241]
[54.04427719 123.41130066]
[43.61482620 134.19215393]
[29.06662750 137.84590149]
[14.78092384 133.27220154]
[5.05991220 121.84845734]
[2.83111453 107.01496887]
[8.76574230 93.23889160]
[21.07655907 84.66896057]
[36.05611038 83.88603210]
[49.19373703 91.12637329]
[63.90676498 94.04644012]
[52.39482498 84.43003845]
[40.88288498 74.81363678]
[29.37094307 65.19722748]
[17.85900307 55.58082581]
[6.34706402 45.96442032]
[-5.32789135 50.60376740]
[-17.79395294 49.82152939]
[-28.67057419 43.82897949]
[-35.90715408 33.82643890]
[-38.16957474 21.76334190]
[-35.08580780 9.95844555]
[-46.20632935 -0.10803068]
[-54.71823502 -3.57349753]
[-57.44533920 -10.48690701]
[-68.36351776 -20.77249336]
[-79.28170013 -31.05808067]
[-90.19988251 -41.34366608]
[-101.11806488 -51.62925339]
[-112.03624725 -61.91484070]
[-128.11184692 -65.15634918]
[-133.08525085 -80.78315735]
[-121.84026337 -92.71974945]
[-105.94475555 -88.68678284]
[-101.75066376 -72.83302307]
[-90.83248138 -62.54743576]
[-79.91429901 -52.26184845]
[-68.99611664 -41.97626495]
[-58.07793427 -31.69067574]
[-47.15975189 -21.40508842]
[-36.13985443 -11.22855473]
[-25.01933098 -1.16207814]
[-7.97137356 -5.60250902]
[8.48964977 1.10010362]
[17.74844551 16.45438957]
[15.96346855 34.45248032]
[27.47540855 44.06888580]
[38.98734665 53.68529129]
[50.49928665 63.30169296]
[62.01123047 72.91809845]
[73.52317047 82.53450012]
[103.03283691 72.51351166]
[122.04809570 91.61681366]
[137.03623962 91.02046967]
[152.02436829 90.42411804]
[167.01251221 89.82777405]
[182.00065613 89.23142242]
[187.28698730 73.93340302]
[197.82353210 61.71235657]
[212.08859253 54.27708435]
[228.04267883 52.64927292]
[243.42005920 57.02325058]
[252.33306885 44.95850372]
[261.24609375 32.89375305]
[270.15908813 20.82900620]
[266.32116699 5.66970825]
[273.17187500 -8.38739109]
[287.47650146 -14.70496178]
[302.48083496 -10.30003834]
[311.10034180 2.74750829]
[309.26507568 18.27702522]
[297.84167480 28.95594978]
[282.22384644 29.74202156]
[273.31082153 41.80677032]
[264.39782715 53.87151718]
[255.48480225 65.93626404]
[264.36682129 80.18900299]
[267.01779175 96.77223206]
[281.66043091 100.02691650]
[296.30307007 103.28159332]
[310.94570923 106.53627777]
[325.58834839 109.79096222]
[340.23101807 113.04563904]
[354.87365723 116.30032349]
[364.36163330 104.39488983]
[378.02215576 97.81636047]
[393.12249756 97.82128906]
[406.66760254 104.35514069]
[415.99414062 116.07371521]
[419.29415894 130.61933899]
[433.93682861 133.87402344]
[449.08703613 129.31539917]
[459.83227539 139.62991333]
[474.47491455 142.88459778]
[486.77542114 133.22892761]
[502.40289307 133.79052734]
[513.97857666 144.30421448]
[516.03674316 159.80577087]
[507.60562134 172.97581482]
[492.66610718 177.59585571]
[478.27218628 171.48446655]
[471.22024536 157.52725220]
[456.57760620 154.27256775]
[442.47470093 159.06398010]
[430.68212891 148.51667786]
[416.03948975 145.26199341]
[406.88839722 157.04005432]
[393.47579956 163.70431519]
[378.43826294 163.88497925]
[364.75765991 157.49264526]
[355.17019653 145.74668884]
[351.61895752 130.94296265]
[336.97631836 127.68828583]
[322.33367920 124.43360901]
[307.69104004 121.17892456]
[293.04840088 117.92424011]
[278.40573120 114.66955566]
[263.76309204 111.41487885]
[256.79293823 122.81875610]
[246.60177612 131.50582886]
[234.19015503 136.60206604]
[220.78320312 137.58695984]
[207.70977783 134.34675598]
[196.27066040 127.18722534]
[187.60919189 116.80495453]
[182.59700012 104.21956635]
[167.60887146 104.81591797]
[152.62072754 105.41226196]
[137.63258362 106.00861359]
[122.64443970 106.60495758]
[119.62028503 115.83659363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[10 19]
[11 18]
[12 17]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[48 68]
[49 67]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[79 156]
[80 155]
[81 154]
[82 153]
[83 152]
[88 102]
[89 101]
[90 100]
[91 99]
[104 144]
[105 143]
[106 142]
[107 141]
[108 140]
[109 139]
[110 138]
[116 132]
[117 131]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
