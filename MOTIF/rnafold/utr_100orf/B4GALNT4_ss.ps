%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGAUGCCGCGGCUCCCGGUGAAGAAGAUCCGUAAGCAGAUGAAGCUGCUGCUGCUGCUGCUGCUGCUGAGCUGCGCCGCGUGGCUCACCUACGUGCACCUGG\
) } def
/len { sequence length } bind def

/coor [
[-15.55826569 265.61038208]
[-18.91026306 268.25653076]
[-22.49497414 269.03536987]
[-31.65469360 280.91390991]
[-40.81441116 292.79241943]
[-49.97412872 304.67095947]
[-59.13384628 316.54949951]
[-68.29356384 328.42803955]
[-77.45328522 340.30654907]
[-79.09501648 356.62332153]
[-94.15573120 363.11230469]
[-107.14225769 353.09820557]
[-104.69516754 336.88265991]
[-89.33181763 331.14685059]
[-80.17209625 319.26831055]
[-71.01238251 307.38977051]
[-61.85266495 295.51123047]
[-52.69294357 283.63272095]
[-43.53322601 271.75418091]
[-34.37350845 259.87564087]
[-25.73091316 247.61572266]
[-17.62130165 234.99691772]
[-17.24945068 220.10696411]
[-3.27948260 212.68061829]
[4.83012962 200.06181335]
[12.93974209 187.44300842]
[21.04935455 174.82420349]
[16.49635696 168.22972107]
[13.94814968 160.60336304]
[13.62013721 152.54196167]
[15.55334187 144.68083191]
[19.60997963 137.64376831]
[25.48316574 131.99345398]
[32.72008896 128.18656921]
[40.75690460 126.53685760]
[48.96265411 127.18928528]
[56.68881607 130.10751343]
[67.14288330 119.35054016]
[77.59694672 108.59355927]
[88.05101013 97.83658600]
[94.66932678 84.37561035]
[96.80404663 69.52828979]
[98.93876648 54.68096542]
[101.07349396 39.83364487]
[103.20821381 24.98632240]
[91.24901581 15.45087624]
[85.70497894 1.30306578]
[87.97180939 -13.62100506]
[97.34169769 -25.32831383]
[111.22005463 -30.73726654]
[113.35478210 -45.58458710]
[115.48950195 -60.43191147]
[109.79492950 -75.19274902]
[119.26474762 -86.68934631]
[121.39947510 -101.53666687]
[114.80551910 -116.55171967]
[124.72872925 -129.60781860]
[140.96095276 -127.27397919]
[146.80387878 -111.95104980]
[136.24679565 -99.40193939]
[134.11207581 -84.55461884]
[139.95933533 -70.85575867]
[130.33682251 -58.29718781]
[128.20210266 -43.44986725]
[126.06737518 -28.60254478]
[137.85968018 -19.50270653]
[143.55169678 -5.62982225]
[141.52210999 9.32835674]
[132.21675110 21.34114838]
[118.05553436 27.12104416]
[115.92081451 41.96836472]
[113.78609467 56.81568909]
[111.65136719 71.66300964]
[109.51664734 86.51033020]
[118.84504700 98.25685883]
[133.79002380 99.54048157]
[148.73500061 100.82410431]
[163.67997742 102.10773468]
[178.62495422 103.39135742]
[193.56993103 104.67498016]
[208.51490784 105.95861053]
[223.45988464 107.24223328]
[239.75833130 102.57350922]
[248.75645447 116.94257355]
[237.43986511 129.56680298]
[222.17625427 122.18721008]
[207.23127747 120.90358734]
[192.28630066 119.61995697]
[177.34132385 118.33633423]
[162.39634705 117.05271149]
[147.45137024 115.76908112]
[132.50639343 114.48545837]
[117.56142426 113.20183563]
[111.37091827 114.68363190]
[105.79230499 114.02396393]
[101.46148682 111.68343353]
[98.80798340 108.29064941]
[88.35391998 119.04762268]
[77.89985657 129.80459595]
[67.44579315 140.56158447]
[70.34009552 163.35522461]
[56.05621719 181.02723694]
[33.66815567 182.93382263]
[25.55854416 195.55262756]
[17.44893265 208.17143250]
[9.33932018 220.79022217]
[8.38741493 236.58277893]
[-5.00249863 243.10653687]
[-13.11211109 255.72534180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[21 109]
[22 108]
[24 106]
[25 105]
[26 104]
[27 103]
[37 100]
[38 99]
[39 98]
[40 97]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[75 93]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
