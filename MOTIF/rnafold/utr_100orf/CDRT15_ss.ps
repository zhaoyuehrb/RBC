%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGUGGGAGUCGCUCAAGAGAGCAAGAUGUUCUCGUGUUGCUUCCCCACUUCGAGAGGUUGCUGCUUCAGGAAUGGAGGGAGUGAGAGCCUUUUCCGACGAUGCCGAAGAAGGCUCAUCCCUCACC\
) } def
/len { sequence length } bind def

/coor [
[90.78512573 132.49693298]
[82.26930237 128.75042725]
[75.09856415 122.82286835]
[69.81688690 115.16392517]
[55.25276184 118.75366211]
[40.68863297 122.34339905]
[33.01303101 127.48457336]
[25.72922325 125.83938599]
[11.08260727 129.07614136]
[-3.56400847 132.31291199]
[-18.21062469 135.54966736]
[-32.85724258 138.78643799]
[-47.50385666 142.02319336]
[-59.30932617 152.55607605]
[-73.40634155 147.74740601]
[-88.05296326 150.98416138]
[-92.42952728 162.16741943]
[-101.59853363 169.73503113]
[-113.17175293 171.86781311]
[-124.20762634 168.14280701]
[-131.95883179 159.61099243]
[-146.74472046 162.13635254]
[-161.53062439 164.66169739]
[-176.31651306 167.18705750]
[-191.10240173 169.71241760]
[-205.88829041 172.23776245]
[-220.67417908 174.76312256]
[-235.26928711 183.38978577]
[-247.59913635 171.75315857]
[-239.83053589 156.68382263]
[-223.19953918 159.97723389]
[-208.41365051 157.45187378]
[-193.62776184 154.92651367]
[-178.84185791 152.40116882]
[-164.05596924 149.87580872]
[-149.27008057 147.35044861]
[-134.48419189 144.82510376]
[-124.91952515 129.30328369]
[-106.75724030 125.53681946]
[-91.28972626 136.33755493]
[-76.64310455 133.10078430]
[-65.88526154 122.79942322]
[-50.74061966 127.37658691]
[-36.09400558 124.13982391]
[-21.44738770 120.90306091]
[-6.80077124 117.66629791]
[7.84584475 114.42953491]
[22.49246025 111.19277191]
[37.09889984 107.77927399]
[51.66302490 104.18953705]
[66.22714996 100.59980011]
[73.16062164 79.49115753]
[91.70635986 67.25583649]
[91.34390259 52.26021194]
[90.98144531 37.26459503]
[79.82105255 26.39797211]
[79.66709137 11.18511772]
[90.09552765 0.61235917]
[89.73307800 -14.38326073]
[89.37062073 -29.37888145]
[89.00816345 -44.37450027]
[88.64570618 -59.37012100]
[79.64807892 -73.08051300]
[87.26348877 -87.60420227]
[103.65784454 -88.00046539]
[111.96604919 -73.86166382]
[103.64132690 -59.73257828]
[104.00378418 -44.73695755]
[104.36624146 -29.74133682]
[104.72869110 -14.74571705]
[105.09114838 0.24990296]
[116.01821899 10.30648232]
[116.59941864 25.50901031]
[105.97706604 36.90213776]
[106.33952332 51.89775848]
[106.70198059 66.89337921]
[120.78130341 73.37102509]
[130.48590088 85.45439911]
[133.77284241 100.59980011]
[148.33697510 104.18953705]
[162.90110779 107.77927399]
[177.46522522 111.36900330]
[192.02935791 114.95874023]
[206.59347534 118.54847717]
[214.08418274 112.52914429]
[223.38063049 110.71960449]
[232.31672668 113.41002655]
[238.87113953 119.85706329]
[241.62437439 128.48347473]
[255.89022827 133.11872864]
[270.15606689 137.75398254]
[284.42190552 142.38925171]
[298.68777466 147.02450562]
[312.95361328 151.65975952]
[327.21945190 156.29501343]
[341.48532104 160.93026733]
[355.75115967 165.56552124]
[371.26684570 162.47138977]
[380.98025513 173.76295471]
[395.24609375 178.39820862]
[408.41076660 169.95866394]
[423.91360474 172.00694275]
[434.43469238 183.57589722]
[435.00628662 199.20303345]
[425.35845947 211.50968933]
[410.04666138 214.68504333]
[396.30062866 207.22978210]
[390.61083984 192.66404724]
[376.34500122 188.02879333]
[361.84970093 191.45446777]
[351.11590576 179.83135986]
[336.85006714 175.19610596]
[322.58419800 170.56085205]
[308.31835938 165.92559814]
[294.05252075 161.29034424]
[279.78665161 156.65509033]
[265.52081299 152.01983643]
[251.25497437 147.38458252]
[236.98912048 142.74932861]
[217.35705566 148.93389893]
[203.00375366 133.11260986]
[188.43962097 129.52287292]
[173.87548828 125.93313599]
[159.31137085 122.34339905]
[144.74723816 118.75366211]
[130.18310547 115.16392517]
[124.90143585 122.82286835]
[117.73069763 128.75042725]
[109.21487427 132.49693298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 51]
[5 50]
[6 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[15 41]
[16 40]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
[53 76]
[54 75]
[55 74]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[79 126]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
