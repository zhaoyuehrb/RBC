%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGGUCUUCUCCAUGCGGCUCGGGCUAUGACAGCCUCCGUGCUCCUCCACCCCCGCUGGAUCGAGCCCACCGUCAUGUUUCUCUACGACAACGGCGGCGGCCUGGUGGCCGACGAGCUCAACAAGA\
) } def
/len { sequence length } bind def

/coor [
[59.94441605 244.91957092]
[51.42550278 245.87083435]
[42.94334412 244.74938965]
[36.29546738 258.19580078]
[29.64759636 271.64221191]
[22.99972343 285.08862305]
[16.35185051 298.53500366]
[17.94731522 314.85635376]
[4.45471096 324.17739868]
[-10.24592590 316.90942383]
[-11.03184223 300.52914429]
[2.90544558 291.88714600]
[9.55331898 278.44073486]
[16.20119286 264.99432373]
[22.84906578 251.54792786]
[29.49693871 238.10151672]
[17.25502396 219.83866882]
[18.15613747 197.74853516]
[31.99708176 180.35215759]
[53.55545425 174.44517517]
[57.49606323 159.97204590]
[61.43667603 145.49890137]
[65.37728882 131.02577209]
[69.31789398 116.55264282]
[65.20269775 102.12817383]
[54.21866608 91.91294098]
[43.23463821 81.69770050]
[32.25060654 71.48246002]
[21.26657677 61.26722336]
[5.56269360 66.28615570]
[-10.44425774 62.75011826]
[-22.43487930 51.70960236]
[-27.22205734 36.22702026]
[-23.59776878 20.52769470]
[-34.82542801 10.58085537]
[-46.05309296 0.63401586]
[-57.28075409 -9.31282425]
[-71.82112122 -4.56678486]
[-86.68666077 -7.71521187]
[-97.90579224 -17.81459236]
[-102.53246307 -32.07817841]
[-99.41936493 -46.64437866]
[-110.64702606 -56.59122086]
[-121.87468719 -66.53806305]
[-137.63302612 -65.33376312]
[-149.57284546 -75.68829346]
[-150.61047363 -91.45848083]
[-140.13029480 -103.28816223]
[-124.35001373 -104.15898895]
[-112.63179779 -93.55432129]
[-111.92784882 -77.76572418]
[-100.70018768 -67.81887817]
[-89.47252655 -57.87203979]
[-75.38777161 -62.71820068]
[-60.67050171 -59.84454727]
[-49.29243851 -49.92456055]
[-44.37512589 -35.54691315]
[-47.33391190 -20.54048538]
[-36.10625076 -10.59364510]
[-24.87858963 -0.64680547]
[-13.65092850 9.30003452]
[-0.95618278 4.11949253]
[12.79686546 4.93959856]
[24.90206718 11.65645599]
[32.95268631 23.00024414]
[35.31984711 36.77490616]
[31.48181534 50.28319550]
[42.46584702 60.49843216]
[53.44987488 70.71366882]
[64.43390656 80.92890930]
[75.41793823 91.14414978]
[93.79386139 72.84925842]
[120.70510101 78.88400269]
[133.63464355 71.27960205]
[146.56419373 63.67520523]
[159.49374390 56.07080841]
[172.42327881 48.46641159]
[181.06695557 32.26029587]
[198.56739807 32.68759537]
[211.30941772 24.77299309]
[224.05143738 16.85838890]
[236.79345703 8.94378662]
[238.83210754 -6.56033945]
[250.39453125 -17.08860207]
[266.02130127 -17.66987801]
[278.33395386 -8.02970600]
[281.51879883 7.28011894]
[274.07208252 21.03076553]
[259.50988770 26.72959900]
[244.70805359 21.68580437]
[231.96603394 29.60040855]
[219.22401428 37.51501083]
[206.48199463 45.42961502]
[203.39146423 57.19029999]
[192.75344849 63.87164307]
[180.02767944 61.39595413]
[167.09812927 69.00035095]
[154.16859436 76.60475159]
[141.23904419 84.20914459]
[128.30949402 91.81354523]
[128.67195129 106.80916595]
[141.95379639 113.78001404]
[155.23564148 120.75086212]
[168.51747131 127.72171021]
[181.79931641 134.69255066]
[198.15446472 133.49194336]
[207.14674377 147.20584106]
[199.52568054 161.72656250]
[183.13116455 162.11643982]
[174.82847595 147.97439575]
[161.54663086 141.00355530]
[148.26478577 134.03269958]
[134.98295593 127.06185150]
[121.70111084 120.09100342]
[109.10887909 126.92613983]
[95.34508514 126.87674713]
[83.79103088 120.49324799]
[79.85041809 134.96638489]
[75.90980530 149.43951416]
[71.96920013 163.91264343]
[68.02858734 178.38578796]
[75.21520996 183.34338379]
[80.98957825 189.87063599]
[85.01906586 197.58004761]
[87.07435608 206.01635742]
[87.04244232 214.68347168]
[84.93282318 223.07359314]
[80.87650299 230.69700623]
[75.11790466 237.11064148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[20 121]
[21 120]
[22 119]
[23 118]
[24 117]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[34 61]
[35 60]
[36 59]
[37 58]
[42 53]
[43 52]
[44 51]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[79 93]
[80 92]
[81 91]
[82 90]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
