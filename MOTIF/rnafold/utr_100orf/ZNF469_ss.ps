%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCCUGGGGAGCGCCCCCGAGGAGCGCCGCCCCCCACCAUGACUGGAGACCUGCAGCCCCGCCAAGUUGCCAGCAGCCCGGGGCACCCCUCCCAGCCGC\
) } def
/len { sequence length } bind def

/coor [
[79.66421509 113.27548981]
[65.18544006 117.19531250]
[50.70666504 121.11514282]
[45.10074234 135.46365356]
[32.27084732 143.66409302]
[17.25002289 142.74822998]
[5.78598595 133.27648926]
[-8.69279003 137.19631958]
[-23.17156601 141.11614990]
[-37.65034103 145.03598022]
[-50.99680328 159.98443604]
[-69.47856140 154.67054749]
[-83.68563843 159.48294067]
[-97.89270782 164.29533386]
[-112.09978485 169.10771179]
[-126.23030090 174.14045715]
[-140.28083801 179.39236450]
[-150.28990173 192.38276672]
[-166.50639343 189.94195557]
[-172.24816895 174.58084106]
[-161.60858154 162.10160828]
[-145.53273010 165.34182739]
[-131.48219299 160.08992004]
[-126.22636414 154.70460510]
[-116.91217041 154.90063477]
[-102.70510101 150.08825684]
[-88.49802399 145.27586365]
[-74.29095459 140.46348572]
[-70.50145721 130.74154663]
[-61.74890518 124.66313171]
[-50.87211990 124.50083160]
[-41.57017136 130.55720520]
[-27.09139442 126.63736725]
[-12.61261845 122.71754456]
[1.86615705 118.79771423]
[6.98612404 104.83619690]
[19.49339294 96.46767426]
[34.70798492 97.07564545]
[46.78683472 106.63636780]
[61.26560974 102.71653748]
[75.74438477 98.79671478]
[84.08827972 81.65334320]
[102.23944092 75.81803131]
[119.01030731 84.88739777]
[133.06085205 79.63549805]
[147.11138916 74.38360596]
[161.16192627 69.13170624]
[168.25517273 63.09196472]
[175.73194885 63.94242096]
[189.93901062 59.13003159]
[191.14668274 44.95505142]
[197.67578125 32.36448288]
[208.49919128 23.26655579]
[221.94180298 19.02569389]
[235.93981934 20.25798416]
[248.35755920 26.74190331]
[257.31326294 37.45724487]
[271.66314697 33.08902359]
[286.01300049 28.72080231]
[300.36288452 24.35258293]
[314.71273804 19.98436165]
[329.06259155 15.61614132]
[332.46804810 6.48581696]
[339.66250610 0.12164464]
[348.86907959 -2.07936716]
[357.89431763 0.27250406]
[364.65078735 6.49795580]
[379.34524536 3.48584962]
[394.03970337 0.47374344]
[408.73416138 -2.53836274]
[420.63461304 -13.82159042]
[436.27731323 -8.89834118]
[439.57037354 7.16676855]
[427.12619019 17.84733200]
[411.74627686 12.15609932]
[397.05181885 15.16820526]
[382.35733032 18.18031120]
[367.66287231 21.19241714]
[353.77008057 36.31869888]
[333.43081665 29.96600723]
[319.08096313 34.33422852]
[304.73107910 38.70244980]
[290.38122559 43.07066727]
[276.03137207 47.43888855]
[261.68148804 51.80710983]
[259.57897949 67.56522369]
[250.81835938 80.90058899]
[237.09136963 89.14669800]
[221.08863831 90.62873077]
[205.97235107 85.00347137]
[194.75140381 73.33710480]
[180.54432678 78.14949036]
[166.41381836 83.18224335]
[152.36328125 88.43414307]
[138.31274414 93.68603516]
[124.26220703 98.93793488]
[122.45487976 109.24991608]
[116.47460175 117.84292603]
[107.43273926 123.12005615]
[97.00959015 124.10062408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 41]
[2 40]
[3 39]
[7 35]
[8 34]
[9 33]
[10 32]
[12 28]
[13 27]
[14 26]
[15 25]
[16 23]
[17 22]
[44 96]
[45 95]
[46 94]
[47 93]
[49 92]
[50 91]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
