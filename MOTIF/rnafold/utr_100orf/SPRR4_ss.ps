%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCUCAGCCUCCUCUCCUGGGGUCCAGCUUGUCGCCUCUGGCUCACCUGUUCCUAGAGCAAUGUCUUCCCAGCAGCAGCAGCGGCAGCAGCAGCAGUGCCCACCCCAGAGGGCCCAGCAGCAGCAAGUGAAGCAGCCUUGUCAGCCACCCCCUGUUAAAU\
) } def
/len { sequence length } bind def

/coor [
[254.06863403 298.09359741]
[257.13540649 286.96340942]
[245.88566589 277.04156494]
[234.63591003 267.11972046]
[223.38615417 257.19787598]
[212.13639832 247.27601624]
[200.88664246 237.35417175]
[203.37289429 252.14668274]
[198.96461487 266.48431396]
[188.59716797 277.32476807]
[174.47036743 282.36795044]
[159.58171082 280.54370117]
[147.09033203 272.23913574]
[139.64674377 259.21636963]
[138.83033752 244.23858643]
[144.81434631 230.48390198]
[156.32905579 220.87081909]
[170.93122864 217.43908691]
[185.52230835 220.91679382]
[176.38133240 209.02383423]
[167.24035645 197.13087463]
[158.09938049 185.23791504]
[148.95840454 173.34495544]
[139.81742859 161.45198059]
[130.67645264 149.55902100]
[112.32443237 143.55790710]
[109.86079407 123.58228302]
[100.26828003 112.05042267]
[90.45530701 100.70557404]
[80.42551422 89.55195618]
[70.39571381 78.39833832]
[60.15282822 67.44009399]
[49.70064926 56.68128204]
[39.24847031 45.92247391]
[24.08273697 41.41569138]
[20.76383209 26.89556122]
[10.31165218 16.13675308]
[-0.14052595 5.37794447]
[-15.30625916 0.87115997]
[-18.62516403 -13.64896870]
[-29.07734299 -24.40777779]
[-39.52952194 -35.16658401]
[-47.79586029 -39.16709518]
[-50.07697678 -46.23490906]
[-60.31986618 -57.19315720]
[-71.25409698 -56.93452072]
[-80.32479095 -62.64230728]
[-84.64151764 -72.21055603]
[-82.98849487 -82.35349274]
[-92.80147552 -93.69834137]
[-102.61444855 -105.04318237]
[-112.42742157 -116.38803101]
[-122.24040222 -127.73287201]
[-139.04920959 -126.06351471]
[-153.40763855 -134.64147949]
[-159.77639771 -149.92750549]
[-155.83583069 -165.84069824]
[-165.86563110 -176.99430847]
[-175.89541626 -188.14793396]
[-191.68881226 -188.73481750]
[-202.38005066 -200.37409973]
[-201.62622070 -216.16040039]
[-189.87455750 -226.72798157]
[-174.09710693 -225.80729675]
[-163.65435791 -213.94456482]
[-164.74180603 -198.17771912]
[-154.71200562 -187.02410889]
[-144.68222046 -175.87048340]
[-131.56269836 -178.48342896]
[-118.76650238 -174.22686768]
[-109.68135834 -164.11466980]
[-106.76826477 -150.72550964]
[-110.89555359 -137.54585266]
[-101.08258057 -126.20100403]
[-91.26959991 -114.85616302]
[-81.45662689 -103.51131439]
[-71.64365387 -92.16647339]
[-52.97550201 -87.23592377]
[-49.36161804 -67.43604279]
[-39.11872864 -56.47779846]
[-28.77071381 -45.61876297]
[-18.31853485 -34.85995483]
[-7.86635637 -24.10114670]
[6.55176735 -20.36390495]
[10.61828232 -5.07423401]
[21.07046127 5.68457460]
[31.52264023 16.44338226]
[45.94076157 20.18062592]
[50.00727844 35.47029495]
[60.45945740 46.22910309]
[70.91163635 56.98791504]
[75.63447571 57.94837189]
[79.78747559 61.91574097]
[81.54933167 68.36854553]
[91.57913208 79.52216339]
[101.60892487 90.67578125]
[106.69906616 92.14220428]
[110.58679962 96.37687683]
[111.80014038 102.45790863]
[121.39265442 113.98976898]
[132.32356262 114.36343384]
[141.04925537 120.58586884]
[144.80581665 130.38758850]
[142.56942749 140.41804504]
[151.71040344 152.31100464]
[160.85136414 164.20397949]
[169.99234009 176.09693909]
[179.13331604 187.98989868]
[188.27429199 199.88285828]
[197.41526794 211.77581787]
[207.81326294 216.43928528]
[210.80848694 226.10441589]
[222.05824280 236.02626038]
[233.30799866 245.94810486]
[244.55775452 255.86996460]
[255.80751038 265.79180908]
[267.05725098 275.71365356]
[285.48376465 270.72900391]
[303.07464600 277.74822998]
[312.85238647 293.79421997]
[311.05465698 312.34854126]
[322.85897827 321.60369873]
[334.66329956 330.85885620]
[346.46765137 340.11401367]
[358.27197266 349.36917114]
[373.12268066 345.27499390]
[387.37005615 350.64767456]
[395.62429810 363.23065186]
[394.89511108 378.08346558]
[406.69943237 387.33865356]
[418.50375366 396.59381104]
[425.06063843 397.91668701]
[429.29891968 401.79281616]
[430.57553101 406.44018555]
[442.01443481 416.14337158]
[456.44775391 410.89218140]
[471.57015991 413.57699585]
[483.31381226 423.47558594]
[488.51971436 437.92529297]
[485.78753662 453.03921509]
[475.85217285 464.75180054]
[461.38623047 469.91238403]
[446.28094482 467.13284302]
[434.59957886 457.16079712]
[429.48434448 442.67874146]
[432.31121826 427.58224487]
[420.87234497 417.87905884]
[409.24859619 408.39813232]
[397.44427490 399.14297485]
[385.63995361 389.88781738]
[371.39007568 394.13977051]
[357.20104980 389.12619019]
[348.58419800 376.57217407]
[349.01681519 361.17349243]
[337.21246338 351.91833496]
[325.40814209 342.66317749]
[313.60382080 333.40802002]
[301.79949951 324.15286255]
[291.76638794 329.21115112]
[280.51724243 330.14163208]
[269.69104004 326.77005005]
[260.87969971 319.55166626]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[6 113]
[7 112]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[25 104]
[27 100]
[28 99]
[29 96]
[30 95]
[31 94]
[32 91]
[33 90]
[34 89]
[36 87]
[37 86]
[38 85]
[40 83]
[41 82]
[42 81]
[44 80]
[45 79]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[57 68]
[58 67]
[59 66]
[121 158]
[122 157]
[123 156]
[124 155]
[125 154]
[129 150]
[130 149]
[131 148]
[134 147]
[135 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
