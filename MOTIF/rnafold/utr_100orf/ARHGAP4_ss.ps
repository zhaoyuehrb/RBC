%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGCUCACGGCCGCGUGGGAGCAGUGGGGUUCGACGGCGCGGCCGCGAGGCCGCCAUGGCCGCUCACGGGAAGCUGCGGCGGGAGCGGGGGCUGCAGGCUGAGUAUGAGACGCAAGUCAAAGAGAUGCGCUGGCAGCUGAGCGAGCAGCUGCGCU\
) } def
/len { sequence length } bind def

/coor [
[172.68571472 154.50364685]
[180.02059937 141.41932678]
[193.57894897 135.00733948]
[179.27691650 130.48497009]
[164.97488403 125.96261597]
[150.67283630 121.44024658]
[136.37080383 116.91788483]
[122.06877136 112.39552307]
[107.76673126 107.87316132]
[102.08351898 119.55439758]
[84.83245087 123.85761261]
[71.04619598 129.76855469]
[57.25994492 135.67950439]
[43.47369385 141.59043884]
[29.68744278 147.50138855]
[15.90119076 153.41233826]
[2.11493874 159.32327271]
[-11.67131233 165.23422241]
[-25.45756531 171.14517212]
[-31.76775742 188.96429443]
[-48.78526306 196.43591309]
[-65.58912659 189.27117920]
[-79.13109589 195.72215271]
[-92.67306519 202.17312622]
[-106.21503448 208.62411499]
[-111.26109314 223.60118103]
[-125.45651245 230.54853821]
[-140.37939453 225.34440613]
[-147.17626953 211.07632446]
[-141.81466675 196.20928955]
[-127.47552490 189.56365967]
[-112.66600800 195.08213806]
[-99.12404633 188.63116455]
[-85.58207703 182.18019104]
[-72.04010773 175.72920227]
[-70.63164520 164.34495544]
[-63.81251144 154.97177124]
[-53.19660950 150.02597046]
[-41.39380264 150.85192871]
[-31.36850929 157.35891724]
[-17.58225822 151.44796753]
[-3.79600573 145.53701782]
[9.99024582 139.62608337]
[23.77649689 133.71513367]
[37.56274796 127.80419159]
[51.34899902 121.89324951]
[65.13525391 115.98229980]
[78.92150116 110.07135773]
[64.02985382 111.87101746]
[52.65715408 102.09033966]
[52.20764923 87.09707642]
[62.97399521 76.65266418]
[77.94670868 77.55698395]
[87.37762451 89.22084045]
[81.60316467 75.37686920]
[75.82870483 61.53289413]
[70.05424500 47.68891907]
[64.27977753 33.84494781]
[51.82621002 24.08691597]
[54.06766891 9.36193180]
[48.29320526 -4.48204184]
[42.51874542 -18.32601547]
[36.74428558 -32.16998672]
[22.40350533 -38.25109100]
[16.74459267 -52.37310791]
[22.63037109 -66.00737000]
[16.85590935 -79.85134888]
[3.49974108 -89.36685181]
[5.33145952 -105.66337585]
[20.46675110 -111.97646332]
[33.33572388 -101.81173706]
[30.69988251 -85.62580872]
[36.47434235 -71.78182983]
[50.30399323 -66.37107086]
[56.35733032 -52.41357422]
[50.58825684 -37.94445038]
[56.36272049 -24.10047531]
[62.13718033 -10.25650215]
[67.91164398 3.58747077]
[79.95217896 12.35528946]
[78.12375641 28.07048607]
[83.89821625 41.91445923]
[89.67267609 55.75843430]
[95.44713593 69.60240936]
[101.22159576 83.44638062]
[112.28910065 93.57112885]
[126.59113312 98.09349060]
[140.89317322 102.61585236]
[155.19520569 107.13821411]
[169.49723816 111.66057587]
[183.79927063 116.18293762]
[198.10131836 120.70529938]
[212.71575928 124.08438110]
[227.55136108 126.29907990]
[242.38696289 128.51377869]
[257.22256470 130.72846985]
[272.05816650 132.94317627]
[286.89376831 135.15786743]
[299.51342773 126.02648926]
[314.52728271 128.48384094]
[323.15487671 140.57102966]
[337.99047852 142.78573608]
[352.82608032 145.00042725]
[367.61740112 139.38546753]
[379.06280518 148.91711426]
[393.89840698 151.13180542]
[408.73400879 153.34651184]
[420.39675903 141.13105774]
[436.87554932 138.28286743]
[451.66552734 145.72592163]
[459.04733276 160.36102295]
[473.92379761 162.28218079]
[482.88998413 160.27119446]
[489.07409668 164.39108276]
[503.90969849 166.60577393]
[518.74530029 168.82046509]
[533.58093262 171.03517151]
[546.20056152 161.90379333]
[561.21441650 164.36114502]
[569.84204102 176.44833374]
[584.67761230 178.66302490]
[601.23590088 175.02154541]
[609.31884766 189.92463684]
[597.23577881 201.81729126]
[582.46295166 193.49862671]
[567.62731934 191.28393555]
[555.84576416 200.32437134]
[540.76879883 198.28968811]
[531.36621094 185.87077332]
[516.53063965 183.65608215]
[501.69500732 181.44137573]
[486.85940552 179.22668457]
[472.00265503 177.15864563]
[457.12619019 175.23748779]
[448.87747192 185.77247620]
[436.39514160 190.88438416]
[422.91137695 189.13359070]
[411.97543335 180.87272644]
[406.51931763 168.18211365]
[391.68371582 165.96742249]
[376.84811401 163.75271606]
[363.11791992 169.52607727]
[350.61138916 159.83602905]
[335.77578735 157.62133789]
[320.94018555 155.40663147]
[309.15859985 164.44708252]
[294.08163452 162.41239929]
[284.67907715 149.99346924]
[269.84347534 147.77877808]
[255.00785828 145.56408691]
[240.17225647 143.34938049]
[225.33665466 141.13468933]
[210.50105286 138.91998291]
[219.86940002 150.63467407]
[220.71507263 165.61082458]
[212.72508240 178.30569458]
[198.85653687 184.02090454]
[184.24223328 180.64123535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[8 87]
[9 86]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[19 40]
[22 35]
[23 34]
[24 33]
[25 32]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[60 79]
[61 78]
[62 77]
[63 76]
[66 73]
[67 72]
[93 153]
[94 152]
[95 151]
[96 150]
[97 149]
[98 148]
[101 145]
[102 144]
[103 143]
[105 141]
[106 140]
[107 139]
[111 134]
[112 133]
[114 132]
[115 131]
[116 130]
[117 129]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
