%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCGGGCCAGUGCGGGAGCCGGAGCGGAGCCGGGGCCGGAGCGGGCGGAAUGGAGCCCCUGCGCGCGCCCGCGCUGCGCCGCCUGCUGCCGCCGCUGCUGCUCCUGCUGCUGUCACUGCCCCCCCGCGCCCGGGCCAAGUACGUGCGGG\
) } def
/len { sequence length } bind def

/coor [
[351.53131104 664.87274170]
[345.81765747 661.24060059]
[341.50009155 655.95837402]
[339.04031372 649.53948975]
[338.71728516 642.62109375]
[340.59622192 635.90112305]
[344.51846313 630.06744385]
[337.97058105 616.57208252]
[331.42269897 603.07672119]
[324.87484741 589.58129883]
[319.08975220 584.90747070]
[318.33425903 575.74096680]
[312.06488037 562.11395264]
[305.79547119 548.48699951]
[299.52606201 534.86004639]
[293.11706543 521.29809570]
[286.56921387 507.80273438]
[280.02133179 494.30734253]
[267.50439453 486.23425293]
[268.44146729 470.44082642]
[261.89358521 456.94543457]
[255.34571838 443.45004272]
[242.82875061 435.37695312]
[243.76582336 419.58352661]
[237.21795654 406.08813477]
[230.67008972 392.59274292]
[224.12222290 379.09735107]
[217.57434082 365.60198975]
[211.02647400 352.10659790]
[204.47860718 338.61120605]
[197.79252625 325.18374634]
[190.96894836 311.82565308]
[184.14538574 298.46755981]
[178.26553345 293.91348267]
[177.32202148 284.76440430]
[170.77415466 271.26901245]
[164.08807373 257.84158325]
[157.26449585 244.48347473]
[150.44091797 231.12536621]
[147.15296936 229.69830322]
[144.41297913 226.57385254]
[143.02670288 222.03692627]
[143.63722229 216.72819519]
[137.64892578 202.97537231]
[131.66062927 189.22253418]
[125.67232513 175.46971130]
[119.68402863 161.71688843]
[113.69573212 147.96405029]
[107.70743561 134.21122742]
[101.71913910 120.45839691]
[95.73084259 106.70556641]
[89.76132202 110.45414734]
[82.26083374 111.81999969]
[73.99442291 110.37843323]
[65.82619476 105.92496490]
[55.72076035 94.83982849]
[39.93779755 90.38671112]
[36.16564178 74.42729950]
[48.28475952 63.37926483]
[63.82804108 68.60787964]
[66.80589294 84.73439026]
[76.91132355 95.81952667]
[90.33877563 89.13345337]
[87.58253479 74.38885498]
[84.82629395 59.64425659]
[81.91881561 44.92873764]
[78.86042023 30.24383736]
[75.80202484 15.55894089]
[72.74362946 0.87404299]
[61.42295837 -10.99079704]
[66.29689026 -26.64892006]
[82.35154724 -29.99259186]
[93.07126617 -17.58212852]
[87.42852783 -2.18435240]
[90.48692322 12.50054550]
[93.54531860 27.18544197]
[96.60371399 41.87033844]
[101.07407379 47.81408310]
[99.57088470 56.88801575]
[102.32713318 71.63261414]
[105.08337402 86.37720490]
[109.48367310 100.71726990]
[115.47196960 114.47010040]
[121.46026611 128.22293091]
[127.44856262 141.97575378]
[133.43685913 155.72859192]
[139.42515564 169.48141479]
[145.41345215 183.23423767]
[151.40174866 196.98707581]
[157.39004517 210.73989868]
[163.79902649 224.30180359]
[170.62260437 237.65989685]
[177.44616699 251.01799011]
[184.17869568 257.28448486]
[184.26953125 264.72116089]
[190.81739807 278.21652222]
[197.50347900 291.64398193]
[204.32705688 305.00207520]
[211.15063477 318.36016846]
[217.88314819 324.62667847]
[217.97398376 332.06332397]
[224.52186584 345.55871582]
[231.06973267 359.05410767]
[237.61759949 372.54949951]
[244.16546631 386.04486084]
[250.71334839 399.54025269]
[257.26119995 413.03564453]
[270.24652100 422.07403564]
[268.84109497 436.90219116]
[275.38897705 450.39755249]
[281.93682861 463.89294434]
[294.92214966 472.93133545]
[293.51672363 487.75949097]
[300.06460571 501.25485229]
[306.61245728 514.75024414]
[313.21490479 521.15362549]
[313.15304565 528.59063721]
[319.42245483 542.21759033]
[325.69183350 555.84454346]
[331.96124268 569.47155762]
[338.37023926 583.03344727]
[344.91809082 596.52880859]
[351.46597290 610.02423096]
[358.01382446 623.51959229]
[379.03384399 634.79907227]
[377.28378296 657.87640381]
[385.44046021 670.46484375]
[393.59710693 683.05328369]
[401.75378418 695.64172363]
[409.91043091 708.23016357]
[418.06710815 720.81860352]
[426.22378540 733.40704346]
[441.26101685 730.99847412]
[455.97619629 734.92059326]
[467.81982422 744.49389648]
[474.73992920 758.05975342]
[475.53753662 773.26776123]
[470.07449341 787.48309326]
[459.29727173 798.24279785]
[445.07308960 803.68273926]
[429.86639404 802.86035156]
[416.31182861 795.91821289]
[406.75781250 784.05902100]
[402.85961914 769.33746338]
[405.29263306 754.30413818]
[413.63534546 741.56372070]
[405.47866821 728.97528076]
[397.32199097 716.38684082]
[389.16534424 703.79840088]
[381.00866699 691.20996094]
[372.85202026 678.62152100]
[364.69534302 666.03308105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 124]
[8 123]
[9 122]
[10 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 115]
[17 114]
[18 113]
[20 111]
[21 110]
[22 109]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[31 99]
[32 98]
[33 97]
[35 96]
[36 95]
[37 93]
[38 92]
[39 91]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[55 62]
[56 61]
[63 81]
[64 80]
[65 79]
[66 77]
[67 76]
[68 75]
[69 74]
[126 152]
[127 151]
[128 150]
[129 149]
[130 148]
[131 147]
[132 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
