%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:06:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCUAAGCCAUCCUUCAGACAGAGAGGGAGCGGCUGCAAGAGGUAAUGAGAGAUGGCAAGAAAGAAGCUGAAAAAAUUUACUACUUUGGAGAUUGUGCUCAGUGUUCUUCUGCUUGUGUUGUUUAUCAUCAGUAUUGUUCUAAUUGUGCUUU\
) } def
/len { sequence length } bind def

/coor [
[76.84494019 109.51991272]
[69.46937561 108.15937805]
[57.98957443 117.81412506]
[46.50977325 127.46887207]
[35.02996826 137.12361145]
[32.38325500 143.28594971]
[27.70476723 146.64114380]
[22.88369560 146.92555237]
[11.02206039 156.10714722]
[-0.83957601 165.28872681]
[-12.70121193 174.47032166]
[-19.24552727 191.65322876]
[-36.68207932 193.40095520]
[-48.35519791 202.82106018]
[-60.02831268 212.24116516]
[-71.70143127 221.66127014]
[-83.37454987 231.08137512]
[-95.04766846 240.50148010]
[-95.16606903 256.13861084]
[-105.34741974 268.00765991]
[-120.78440094 270.50439453]
[-134.18812561 262.44995117]
[-139.22979736 247.64739990]
[-133.52885437 233.08604431]
[-119.77713013 225.64129639]
[-104.46776581 228.82835388]
[-92.79465485 219.40824890]
[-81.12153625 209.98815918]
[-69.44841766 200.56805420]
[-57.77529907 191.14794922]
[-46.10218430 181.72784424]
[-44.49095535 169.70195007]
[-34.79161072 161.76168823]
[-21.88280106 162.60868835]
[-10.02116585 153.42709351]
[1.84047031 144.24551392]
[13.70210648 135.06391907]
[25.37522316 125.64381409]
[36.85502625 115.98906708]
[48.33482742 106.33432007]
[59.81463242 96.67957306]
[97.27389526 85.71496582]
[102.90865326 71.81354523]
[108.40223694 57.85573196]
[113.75409698 43.84296799]
[119.10595703 29.83020210]
[124.45781708 15.81743622]
[129.80967712 1.80467010]
[123.60434723 -12.48279572]
[129.23150635 -26.61749268]
[142.89067078 -32.44527435]
[148.24252319 -46.45804214]
[138.67669678 -58.39295959]
[136.38426208 -73.41432953]
[141.88188171 -87.47286987]
[153.59983826 -96.82943726]
[168.32862854 -99.04945374]
[173.68048096 -113.06221771]
[179.03234863 -127.07498169]
[184.38420105 -141.08775330]
[184.52973938 -150.28123474]
[189.98913574 -155.32846069]
[195.62388611 -169.22987366]
[201.25865173 -183.13130188]
[201.59046936 -192.31994629]
[207.15104675 -197.25549316]
[213.06639099 -211.03985596]
[218.98171997 -224.82421875]
[224.75706482 -238.66783142]
[230.39181519 -252.56924438]
[236.02658081 -266.47067261]
[241.66133118 -280.37210083]
[247.29608154 -294.27352905]
[238.15957642 -308.47460938]
[239.25515747 -325.15914917]
[249.95588684 -337.79049683]
[265.91058350 -341.53765869]
[271.26245117 -355.55044556]
[276.61431885 -369.56320190]
[281.96615601 -383.57595825]
[287.31802368 -397.58874512]
[287.46356201 -406.78219604]
[292.92294312 -411.82943726]
[298.55770874 -425.73086548]
[304.19247437 -439.63229370]
[304.53894043 -456.58270264]
[320.92282104 -460.94210815]
[329.64736938 -446.40530396]
[318.09390259 -433.99752808]
[312.45913696 -420.09609985]
[306.82437134 -406.19467163]
[301.33078003 -392.23687744]
[295.97894287 -378.22412109]
[290.62707520 -364.21133423]
[285.27520752 -350.19857788]
[279.92333984 -336.18582153]
[288.23486328 -325.69635010]
[290.27960205 -312.36059570]
[285.41513062 -299.66024780]
[274.81719971 -290.96505737]
[261.19750977 -288.63876343]
[255.56275940 -274.73733521]
[249.92799377 -260.83590698]
[244.29324341 -246.93449402]
[238.65849304 -233.03306580]
[239.06283569 -225.60905457]
[232.76608276 -218.90888977]
[226.85075378 -205.12451172]
[220.93540955 -191.34014893]
[215.16006470 -177.49655151]
[209.52531433 -163.59512329]
[203.89056396 -149.69369507]
[198.39697266 -135.73588562]
[193.04510498 -121.72312927]
[187.69325256 -107.71035767]
[182.34140015 -93.69759369]
[191.84034729 -82.22434235]
[194.33767700 -67.43856049]
[189.06394958 -53.29450989]
[177.34167480 -43.62574387]
[162.25529480 -41.10618210]
[156.90342712 -27.09341621]
[163.20008850 -13.64396477]
[157.97215271 0.64321172]
[143.82244873 7.15652895]
[138.47058105 21.16929436]
[133.11872864 35.18206024]
[127.76686859 49.19482803]
[122.41500854 63.20759201]
[122.96973419 70.62189484]
[116.81007385 77.44830322]
[111.17531586 91.34972382]
[112.08683014 106.32199860]
[119.36636353 119.43720245]
[126.64588928 132.55239868]
[133.92541504 145.66760254]
[141.20494080 158.78279114]
[156.56278992 158.96197510]
[169.76530457 166.80986023]
[177.26106262 180.21542358]
[177.03375244 195.57263184]
[169.14451599 208.75048828]
[155.71551514 216.20417786]
[140.35908508 215.92872620]
[127.20604706 207.99822998]
[119.79447174 194.54592896]
[120.11805725 179.19044495]
[128.08975220 166.06233215]
[120.81021881 152.94712830]
[113.53069305 139.83192444]
[106.25115967 126.71672821]
[98.97163391 113.60153198]
[91.59606934 112.24098969]
[88.87474823 126.99207306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[8 37]
[9 36]
[10 35]
[11 34]
[13 31]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[42 132]
[43 131]
[44 129]
[45 128]
[46 127]
[47 126]
[48 125]
[51 122]
[52 121]
[57 116]
[58 115]
[59 114]
[60 113]
[62 112]
[63 111]
[64 110]
[66 109]
[67 108]
[68 107]
[69 105]
[70 104]
[71 103]
[72 102]
[73 101]
[77 96]
[78 95]
[79 94]
[80 93]
[81 92]
[83 91]
[84 90]
[85 89]
[133 152]
[134 151]
[135 150]
[136 149]
[137 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
