%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUACUGAGUGAGCCCUGAGAAGCAGUCUCAGAUCCUGACGGUGCAGCAGCCCGCAGCCUCAGCCAGGGAGUCCCAGCCGCUUUCAAUGGAGGAGAAGCCCGGCCAGCCACAGCCUCAGCACCAUCACAGCCACCACCAUCCGCACCAUCACCCUCAGCAGCAGCAGCAGCAGCCGCACCACCACC\
) } def
/len { sequence length } bind def

/coor [
[281.34582520 247.00552368]
[289.73260498 227.47120667]
[277.31246948 219.06048584]
[264.89233398 210.64974976]
[249.65217590 216.72802734]
[233.62995911 212.48849487]
[223.18309021 199.40870667]
[222.57832336 182.51373291]
[210.02082825 174.30950928]
[197.46333313 166.10528564]
[184.90582275 157.90106201]
[172.08393860 150.11651611]
[159.01167297 142.76016235]
[145.93940735 135.40380859]
[138.55502319 134.86238098]
[132.71328735 127.81622314]
[119.76443481 120.24474335]
[99.87718964 139.52359009]
[64.31935120 136.09622192]
[52.63619232 145.50386047]
[40.95303345 154.91151428]
[29.26987457 164.31915283]
[17.58671570 173.72680664]
[5.90355730 183.13444519]
[2.75999045 198.86650085]
[-11.56525421 206.08917236]
[-26.08307457 199.26184082]
[-29.65664101 183.62185669]
[-19.54462051 171.16687012]
[-3.50408816 171.45129395]
[8.17907047 162.04364014]
[19.86223030 152.63600159]
[31.54538918 143.22834778]
[43.22854996 133.82070923]
[54.91170883 124.41306305]
[52.65312958 117.26122284]
[38.00719452 114.02137756]
[48.13597107 102.95753479]
[45.87739182 95.80569458]
[30.91018867 94.81433868]
[15.94298458 93.82298279]
[7.15508032 96.38171387]
[0.73715609 92.68948364]
[-14.21161175 91.45079041]
[-29.16037941 90.21209717]
[-37.98938751 92.62518311]
[-44.34538651 88.82734680]
[-59.27162933 87.34165955]
[-73.98506927 94.58367157]
[-87.46120453 85.23884583]
[-85.83694458 68.92033386]
[-70.78318787 62.41522598]
[-57.78594971 72.41542053]
[-42.85970306 73.90110016]
[-27.92168808 75.26333618]
[-12.97292137 76.50202179]
[1.97584629 77.74071503]
[16.93434334 78.85577393]
[31.90154839 79.84713745]
[46.86875153 80.83849335]
[51.57257462 74.99691772]
[37.55417633 69.65982819]
[38.29830551 54.67829895]
[52.77658463 50.75664139]
[60.98022079 63.31375504]
[65.68404388 57.47217560]
[61.52299881 43.06087112]
[57.36195755 28.64956474]
[51.96546555 21.25684738]
[53.25336838 13.96550751]
[49.33116913 -0.51262635]
[45.40896988 -14.99075985]
[31.98236084 -22.88784409]
[28.21093941 -37.62660217]
[35.82234573 -50.37815475]
[31.90014648 -64.85629272]
[27.85838699 -79.30150604]
[23.69734383 -93.71280670]
[12.79404354 -100.62541962]
[9.63158035 -112.72791290]
[15.37952709 -123.38438416]
[11.45732784 -137.86251831]
[7.53512859 -152.34065247]
[-6.73055649 -158.74566650]
[-13.49506760 -172.84443665]
[-9.56440926 -187.97996521]
[3.20548177 -197.00569153]
[18.78505325 -195.65997314]
[29.81810760 -184.57820129]
[31.09517479 -168.99284363]
[22.01326180 -156.26284790]
[25.93546104 -141.78471375]
[29.85766029 -127.30657959]
[42.94949722 -115.63172150]
[38.10865021 -97.87384796]
[42.26969147 -83.46254730]
[47.15456390 -77.89834595]
[46.37828064 -68.77848816]
[50.30047989 -54.30035400]
[63.30762100 -47.13447189]
[67.49153137 -32.50745773]
[59.88710403 -18.91296005]
[63.80930328 -4.43482542]
[67.73149872 10.04330826]
[71.77326202 24.48852158]
[75.93430328 38.89982605]
[80.09534454 53.31113052]
[114.50564575 59.23656464]
[131.66958618 83.34906006]
[127.33591461 107.29589844]
[140.28475952 114.86737823]
[153.29576111 122.33155060]
[166.36802673 129.68789673]
[179.44029236 137.04425049]
[183.81828308 136.83665466]
[187.64419556 137.93272400]
[190.57385254 139.99581909]
[192.40901184 142.61177063]
[193.11004639 145.34356689]
[205.66754150 153.54779053]
[218.22505188 161.75201416]
[230.78254700 169.95623779]
[243.27368164 164.10449219]
[256.91653442 165.18508911]
[268.15145874 172.80865479]
[274.10021973 184.89276123]
[273.30303955 198.22961426]
[285.72317505 206.64035034]
[298.14331055 215.05107117]
[304.76489258 207.59120178]
[312.12194824 200.85696411]
[320.13537598 194.92045593]
[328.71911621 189.84521484]
[337.78091431 185.68553162]
[347.22351074 182.48585510]
[356.94552612 180.28031921]
[366.84259033 179.09242249]
[376.80847168 178.93469238]
[386.73626709 179.80863953]
[396.51950073 181.70469666]
[406.05319214 184.60231018]
[415.23510742 188.47021484]
[423.96682739 193.26672363]
[432.15478516 198.94021606]
[439.71118164 205.42962646]
[446.55511475 212.66520691]
[452.61328125 220.56918335]
[457.82083130 229.05664062]
[462.12207031 238.03637695]
[465.47100830 247.41200256]
[467.83190918 257.08282471]
[469.17962646 266.94506836]
[469.49987793 276.89285278]
[468.78945923 286.81945801]
[467.05618286 296.61837769]
[464.31881714 306.18453979]
[460.60693359 315.41534424]
[455.96054077 324.21179199]
[450.42962646 332.47964478]
[444.07376099 340.13027954]
[436.96127319 347.08172607]
[445.97747803 359.06954956]
[460.45605469 365.44775391]
[461.92263794 380.26995850]
[470.93884277 392.25778198]
[485.41741943 398.63598633]
[486.88400269 413.45819092]
[495.90020752 425.44601440]
[511.19348145 431.36618042]
[513.44537354 447.60995483]
[500.33938599 457.46719360]
[485.35781860 450.79757690]
[483.91238403 434.46224976]
[474.89617920 422.47442627]
[461.06250000 416.95367432]
[458.95101929 401.27401733]
[449.93481445 389.28619385]
[436.10113525 383.76544189]
[433.98965454 368.08578491]
[424.97344971 356.09796143]
[405.95126343 365.45587158]
[385.33404541 370.41293335]
[364.12619019 370.72528076]
[343.36141968 366.37530518]
[324.05230713 357.57272339]
[307.14105225 344.74444580]
[293.45333862 328.51388550]
[283.65823364 309.67065430]
[278.23516846 289.13211060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[8 122]
[9 121]
[10 120]
[11 119]
[12 114]
[13 113]
[14 112]
[16 111]
[17 110]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[47 54]
[48 53]
[66 107]
[67 106]
[68 105]
[70 104]
[71 103]
[72 102]
[75 99]
[76 98]
[77 96]
[78 95]
[81 93]
[82 92]
[83 91]
[161 180]
[162 179]
[164 177]
[165 176]
[167 174]
[168 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
