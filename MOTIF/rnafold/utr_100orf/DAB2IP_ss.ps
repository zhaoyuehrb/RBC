%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUACAAAAGGAGGAACCCAGACGCUCAUGGAGACAGCCUCGGUUCAUAAAUCAGGUGGGGCCAGGGGCUGGGGGCCCACACGCCAUGGAGCCCGACUCCCUUCUGGACCAAGACGACUCCUACGAGUCGCCUCAAGAAAGGCCGGGCUCUCGGCGCAGCCUGCCUGGCAGCCUUUCCGAGAAGA\
) } def
/len { sequence length } bind def

/coor [
[99.95458221 227.06831360]
[98.20397186 212.17082214]
[96.45335388 197.27333069]
[94.70274353 182.37583923]
[84.48358154 193.35621643]
[69.49958801 194.04910278]
[58.31069183 184.05868530]
[57.30877686 169.09217834]
[67.06620789 157.69952393]
[82.00885010 156.38902283]
[93.60044098 165.90936279]
[93.34979248 150.91145325]
[93.09914398 135.91355896]
[74.35768127 126.07444000]
[64.20677185 107.50000000]
[49.20677185 107.50000000]
[38.07364655 118.39455414]
[22.86151505 118.18087006]
[12.54383278 107.50000000]
[-2.45616746 107.50000000]
[-17.45616722 107.50000000]
[-32.45616913 107.50000000]
[-37.00921249 110.13314056]
[-41.65138245 110.68732452]
[-45.57130814 109.47978210]
[-48.20311737 107.10520935]
[-63.18427277 106.35354614]
[-78.16542816 105.60188293]
[-93.14658356 104.85021973]
[-107.31713867 111.88626099]
[-119.64070129 103.52090454]
[-134.62185669 102.76924896]
[-149.60301208 102.01758575]
[-156.58226013 114.15248108]
[-168.05673218 122.05516815]
[-181.75175476 124.22832489]
[-194.98205566 120.30364227]
[-205.17843628 111.10279846]
[-210.38650513 98.46622467]
[-225.35301208 97.46433258]
[-240.31951904 96.46244049]
[-255.28602600 95.46055603]
[-264.07766724 98.01345825]
[-270.49359131 94.31481934]
[-285.44125366 93.06298065]
[-300.38891602 91.81114197]
[-315.33660889 90.55931091]
[-329.93487549 98.03076172]
[-343.55563354 88.89804077]
[-342.18704224 72.55610657]
[-327.23693848 65.81613159]
[-314.08474731 75.61163330]
[-299.13708496 76.86347198]
[-284.18942261 78.11531067]
[-269.24172974 79.36714935]
[-254.28413391 80.49404907]
[-239.31762695 81.49594116]
[-224.35112000 82.49783325]
[-209.38462830 83.49971771]
[-200.72702026 69.86656952]
[-186.29502869 62.41175461]
[-169.97914124 63.25131989]
[-156.23155212 72.25086212]
[-148.85134888 87.03643036]
[-133.87019348 87.78809357]
[-118.88903809 88.53975677]
[-105.79003143 81.44995117]
[-92.39492035 89.86906433]
[-77.41376495 90.62072754]
[-62.43260956 91.37239075]
[-47.45145416 92.12405396]
[-32.45616913 92.50000000]
[-17.45616722 92.50000000]
[-2.45616746 92.50000000]
[12.54383278 92.50000000]
[22.86151505 81.81912994]
[38.07364655 81.60544586]
[49.20677185 92.50000000]
[64.20677185 92.50000000]
[70.20551300 78.79402161]
[81.19088745 68.63724518]
[95.32431030 63.72958374]
[110.24029541 64.89242554]
[123.44238281 71.93115234]
[135.21437073 62.63490677]
[146.98635864 53.33865738]
[158.75834656 44.04241180]
[161.04093933 31.33460426]
[171.05395508 23.83514977]
[183.09310913 25.13401985]
[195.01879883 16.03577614]
[206.94448853 6.93753433]
[218.87017822 -2.16070819]
[230.79585266 -11.25895023]
[242.72154236 -20.35719299]
[254.64723206 -29.45543671]
[266.57290649 -38.55367661]
[267.40115356 -49.42421341]
[273.94958496 -57.86386108]
[283.85739136 -61.22491837]
[293.76397705 -58.62298203]
[305.98699951 -67.31764984]
[312.74746704 -81.62172699]
[327.60342407 -82.69412994]
[339.82644653 -91.38879395]
[352.04949951 -100.08345795]
[364.27255249 -108.77812195]
[363.04370117 -118.44716644]
[365.41775513 -127.84063721]
[371.02548218 -135.67047119]
[379.05731201 -140.87905884]
[388.37997437 -142.78193665]
[397.69628906 -141.15757751]
[405.72579956 -136.27226257]
[418.50228882 -144.13108826]
[426.20303345 -157.95169067]
[441.09744263 -158.02941895]
[453.87393188 -165.88825989]
[466.65042114 -173.74710083]
[479.42691040 -181.60594177]
[492.20339966 -189.46478271]
[504.97988892 -197.32362366]
[512.30059814 -211.99806213]
[528.68359375 -212.72514343]
[537.27551270 -198.75691223]
[529.23767090 -184.46267700]
[512.83874512 -184.54713440]
[500.06222534 -176.68829346]
[487.28576660 -168.82945251]
[474.50927734 -160.97061157]
[461.73278809 -153.11177063]
[448.95629883 -145.25292969]
[442.16937256 -131.99446106]
[426.36111450 -131.35461426]
[413.58462524 -123.49576569]
[410.56768799 -103.29651642]
[393.40588379 -91.69349670]
[372.96722412 -96.55508423]
[360.74417114 -87.86041260]
[348.52111816 -79.16574860]
[336.29806519 -70.47108459]
[330.41189575 -56.78890228]
[314.68167114 -55.09460068]
[302.45861816 -46.39993668]
[295.74893188 -28.27752113]
[275.67117310 -26.62799263]
[263.74548340 -17.52975082]
[251.81979370 -8.43150711]
[239.89410400 0.66673517]
[227.96841431 9.76497746]
[216.04272461 18.86322021]
[204.11705017 27.96146202]
[192.19136047 37.05970383]
[186.32466125 53.59003448]
[168.05459595 55.81439972]
[156.28260803 65.11064911]
[144.51062012 74.40689850]
[132.73863220 83.70314789]
[136.39416504 96.41248322]
[135.29049683 109.59095764]
[129.57194519 121.51523590]
[139.63371277 132.64001465]
[149.69548035 143.76480103]
[165.58184814 146.00155640]
[173.61364746 159.88931274]
[167.62959290 174.77455139]
[152.22012329 179.23861694]
[139.20606995 169.85704041]
[138.57070923 153.82656860]
[128.50892639 142.70179749]
[118.44715881 131.57701111]
[115.14201355 133.28849792]
[111.68002319 134.65519714]
[108.09705353 135.66290283]
[108.34770203 150.66081238]
[108.59834290 165.65872192]
[109.60023499 180.62522888]
[111.35085297 195.52272034]
[113.10146332 210.42021179]
[114.85208130 225.31770325]
[128.44970703 232.79325867]
[135.02592468 246.84790039]
[132.05204773 262.07733154]
[120.67156982 272.62551880]
[105.26052856 274.43649292]
[91.74478912 266.81387329]
[85.32142639 252.68870544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 180]
[2 179]
[3 178]
[4 177]
[11 176]
[12 175]
[13 174]
[15 79]
[16 78]
[19 75]
[20 74]
[21 73]
[22 72]
[26 71]
[27 70]
[28 69]
[29 68]
[31 66]
[32 65]
[33 64]
[39 59]
[40 58]
[41 57]
[42 56]
[44 55]
[45 54]
[46 53]
[47 52]
[84 158]
[85 157]
[86 156]
[87 155]
[90 153]
[91 152]
[92 151]
[93 150]
[94 149]
[95 148]
[96 147]
[97 146]
[101 144]
[102 143]
[104 141]
[105 140]
[106 139]
[107 138]
[114 135]
[115 134]
[117 132]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
[161 171]
[162 170]
[163 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
