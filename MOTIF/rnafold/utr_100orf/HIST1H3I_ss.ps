%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCCAUGGCACGAACAAAGCAAACAGCUCGCAAGUCCACCGGCGGCAAAGCGCCGCGCAAGCAGCUGGCCACCAAGGCGGCUCGCAAGAGCGCUCCGGCCACCG\
) } def
/len { sequence length } bind def

/coor [
[83.00795746 332.96148682]
[67.82109833 334.86358643]
[53.49393463 329.47924805]
[43.31873703 318.04580688]
[39.63369751 303.19052124]
[43.28561020 288.32708740]
[53.43528748 276.87097168]
[67.75041199 271.45471191]
[69.50801086 256.55804443]
[71.26560211 241.66136169]
[73.02319336 226.76469421]
[70.64382172 219.64109802]
[75.05729675 211.45886230]
[77.25144958 196.62020874]
[71.05934906 191.20645142]
[67.55706024 183.65928650]
[67.41733551 175.24505615]
[70.74141693 167.41050720]
[77.02833557 161.53398132]
[85.24897003 158.68312073]
[89.16669464 144.20378113]
[93.08441925 129.72444153]
[76.02716064 118.62439728]
[69.81051636 99.35929108]
[77.08460999 80.58345795]
[94.47096252 70.64186096]
[89.29470062 56.56327820]
[84.11844635 42.48470306]
[78.94218445 28.40612411]
[73.76593018 14.32754612]
[67.77549744 7.21822453]
[68.65100861 -0.24102896]
[63.89027786 -14.46549511]
[50.02554321 -21.56527710]
[45.40011978 -36.05872726]
[52.25411987 -49.23287964]
[47.49339294 -63.45734787]
[38.30491638 -66.59903717]
[31.75953484 -73.58277893]
[29.29216385 -82.68672943]
[31.35369873 -91.74839783]
[37.33493042 -98.67813873]
[33.84395599 -113.26625061]
[30.35298347 -127.85437012]
[26.86200905 -142.44248962]
[23.37103653 -157.03059387]
[9.77231121 -165.08355713]
[5.93185568 -180.41413879]
[14.12814331 -193.92695618]
[29.49846268 -197.60511780]
[42.92387390 -189.26641846]
[46.43932343 -173.85807800]
[37.95915222 -160.52157593]
[41.45012283 -145.93345642]
[44.94109726 -131.34533691]
[48.43207169 -116.75722504]
[51.92304611 -102.16911316]
[67.48289490 -88.74591827]
[61.71785736 -68.21807861]
[66.47858429 -53.99361038]
[79.88188171 -47.59929276]
[84.91257477 -33.24147797]
[78.11474609 -19.22622490]
[82.87547302 -5.00175905]
[87.84450531 9.15128803]
[93.02075958 23.22986603]
[98.19702148 37.30844498]
[103.37327576 51.38702011]
[108.54953766 65.46559906]
[122.02285767 72.05875397]
[136.31567383 67.50734711]
[150.60848999 62.95594406]
[159.22335815 49.42214203]
[175.19042969 47.86265945]
[186.26115417 59.47380066]
[183.94300842 75.34848785]
[170.01428223 83.30902863]
[155.15989685 77.24876404]
[140.86708069 81.80017090]
[126.57425690 86.35157776]
[130.19563293 99.80253601]
[127.32720184 113.58644104]
[140.98826599 119.78121948]
[154.64932251 125.97600555]
[168.31039429 132.17079163]
[184.56930542 130.03076172]
[194.33605957 143.20431519]
[187.56344604 158.13963318]
[171.21855164 159.47254944]
[162.11561584 145.83184814]
[148.45454407 139.63706970]
[134.79348755 133.44229126]
[121.13241577 127.24750519]
[107.56376648 133.64216614]
[103.64604187 148.12150574]
[99.72831726 162.60084534]
[107.37078857 183.57408142]
[92.09010315 198.81436157]
[89.89595032 213.65301514]
[87.91986847 228.52227783]
[86.16227722 243.41896057]
[84.40467834 258.31564331]
[82.64708710 273.21231079]
[95.30860138 281.81140137]
[102.51338196 295.31509399]
[102.60581970 310.62033081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 103]
[9 102]
[10 101]
[11 100]
[13 99]
[14 98]
[20 96]
[21 95]
[22 94]
[26 69]
[27 68]
[28 67]
[29 66]
[30 65]
[32 64]
[33 63]
[36 60]
[37 59]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[70 80]
[71 79]
[72 78]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
