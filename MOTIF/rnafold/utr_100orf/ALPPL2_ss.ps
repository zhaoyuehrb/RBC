%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:26:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUACUCCAUACCUGGGAUUUCCGCCUCGCCGCUCUCCGACUGCUUCCAGACAUGCAGGGGCCCUGGGUGCUGCUCCUGCUGGGCCUGAGGCUACAGCUCUCCCUGGGCAUCAUCCCAGUUGAGGAGGAGAACCCGGACUUCUGGAACCGCC\
) } def
/len { sequence length } bind def

/coor [
[81.34230042 511.68472290]
[69.02757263 502.72549438]
[61.42717743 489.52877808]
[59.85792160 474.38092041]
[64.59169006 459.90640259]
[74.80833435 448.61303711]
[88.73775482 442.45745850]
[88.73775482 427.45745850]
[88.73775482 412.45745850]
[88.73775482 397.45745850]
[74.00715637 387.80337524]
[67.92419434 371.10827637]
[73.08145142 353.94100952]
[87.60923767 343.17578125]
[86.99741364 328.18826294]
[86.38558197 313.20074463]
[85.77375031 298.21322632]
[85.16192627 283.22570801]
[76.91193390 270.82461548]
[84.07991028 256.72033691]
[83.46807861 241.73281860]
[82.85624695 226.74530029]
[82.24442291 211.75778198]
[81.63259125 196.77026367]
[73.38260651 184.36917114]
[80.55057526 170.26489258]
[79.93874359 155.27737427]
[79.32691956 140.28985596]
[78.71508789 125.30234528]
[69.72592163 113.29422760]
[55.51787949 108.48471069]
[41.30983353 103.67519379]
[25.75742531 106.57917786]
[16.18295860 95.16957855]
[1.97491431 90.36006165]
[-8.07044601 101.73400116]
[-21.66846848 108.37754822]
[-36.73336411 109.30632782]
[-50.96755981 104.40987396]
[-62.21212006 94.46378326]
[-68.77417755 81.00701141]
[-69.68177795 66.10380554]
[-83.88981628 61.29428482]
[-98.09786224 56.48476791]
[-114.06441498 60.22660446]
[-125.08940887 48.08652115]
[-119.83127594 32.55319977]
[-103.69913483 29.60598755]
[-93.28834534 42.27672195]
[-79.08029938 47.08623886]
[-64.87226105 51.89575577]
[-55.09889221 40.60812759]
[-41.71227264 33.90411377]
[-26.73836517 32.83314514]
[-12.45674038 37.58948517]
[-1.05353153 47.47788620]
[5.71319103 61.01503754]
[6.78443098 76.15201569]
[20.99247551 80.96153259]
[35.52863312 77.71354675]
[46.11935043 89.46714783]
[60.32739639 94.27666473]
[74.53543854 99.08618164]
[86.37509918 81.89449310]
[104.80585480 80.75312805]
[113.67207336 68.65394592]
[122.53829193 56.55476761]
[131.40451050 44.45558548]
[140.27072144 32.35640335]
[149.01307678 20.16741753]
[157.63063049 7.88989592]
[159.22590637 -7.85067892]
[172.87077332 -13.82285595]
[181.48834229 -26.10037804]
[190.10591125 -38.37789917]
[198.72346497 -50.65542221]
[207.34103394 -62.93294525]
[201.87176514 -83.99262238]
[213.46600342 -102.07269287]
[234.33570862 -105.79003143]
[241.65835571 -118.88120270]
[248.98100281 -131.97238159]
[256.30364990 -145.06355286]
[263.49237061 -158.22874451]
[270.54644775 -171.46656799]
[277.60052490 -184.70439148]
[284.65460205 -197.94221497]
[286.76727295 -214.76400757]
[303.51654053 -217.39064026]
[310.67715454 -202.02308655]
[297.89242554 -190.88813782]
[290.83834839 -177.65031433]
[283.78427124 -164.41249084]
[276.73019409 -151.17466736]
[276.35791016 -143.74787903]
[269.39480591 -137.74092102]
[262.07217407 -124.64974213]
[254.74952698 -111.55856323]
[247.42689514 -98.46738434]
[252.51840210 -91.31933594]
[254.99232483 -82.85374451]
[254.54669189 -74.00164032]
[251.20230103 -65.74637604]
[245.30358887 -59.01444244]
[237.48327637 -54.57146835]
[228.59468079 -52.93521500]
[219.61856079 -54.31537628]
[211.00099182 -42.03785706]
[202.38342285 -29.76033401]
[193.76585388 -17.48281097]
[185.14830017 -5.20528984]
[184.16941833 9.65711403]
[169.90815735 16.50746155]
[161.29058838 28.78498459]
[160.01432800 36.11075592]
[152.36990356 41.22262192]
[143.50369263 53.32180405]
[134.63746643 65.42098236]
[125.77125549 77.52016449]
[116.90503693 89.61934662]
[121.09781647 105.15660095]
[112.14725494 120.23362732]
[93.70260620 124.69051361]
[94.31443787 139.67803955]
[94.92626190 154.66555786]
[95.53809357 169.65306091]
[103.83184052 183.12615967]
[96.62010956 196.15843201]
[97.23194122 211.14595032]
[97.84376526 226.13346863]
[98.45559692 241.12098694]
[99.06742859 256.10848999]
[107.36117554 269.58160400]
[100.14944458 282.61386108]
[100.76126862 297.60137939]
[101.37310028 312.58889771]
[101.98493195 327.57641602]
[102.59675598 342.56393433]
[113.88245392 348.09771729]
[121.68025208 357.86343384]
[124.54574585 369.95306396]
[121.99053955 382.03805542]
[114.56426239 391.81774902]
[103.73775482 397.45745850]
[103.73775482 412.45745850]
[103.73775482 427.45745850]
[103.73775482 442.45745850]
[117.66716766 448.61303711]
[127.88381195 459.90640259]
[132.61758423 474.38092041]
[131.04832458 489.52877808]
[123.44792938 502.72549438]
[111.13320923 511.68472290]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 147]
[8 146]
[9 145]
[10 144]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[26 126]
[27 125]
[28 124]
[29 123]
[30 63]
[31 62]
[32 61]
[34 59]
[35 58]
[42 51]
[43 50]
[44 49]
[65 120]
[66 119]
[67 118]
[68 117]
[69 116]
[70 114]
[71 113]
[73 111]
[74 110]
[75 109]
[76 108]
[77 107]
[80 99]
[81 98]
[82 97]
[83 96]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
