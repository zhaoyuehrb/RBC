%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCCCUGGGCUAAACAGCAUCACCAUGUCUGUUCGAUACAGCUCAAGCAAGCACUACUCUUCCUCCCGCAGUGGAGGAGGAGGAGGAGGAGGAGGAUGUGGAGGAGGAGGAGGAGUGUCAUCCC\
) } def
/len { sequence length } bind def

/coor [
[173.69082642 562.92492676]
[171.10641479 548.14923096]
[168.52198792 533.37359619]
[165.93757629 518.59790039]
[163.35314941 503.82220459]
[160.76873779 489.04653931]
[158.00177002 474.30392456]
[155.05267334 459.59671021]
[143.38438416 453.98498535]
[137.01307678 442.48977661]
[138.48121643 429.23272705]
[147.47270203 419.11816406]
[144.88827515 404.34249878]
[130.50804138 400.38342285]
[119.22639465 390.53283691]
[113.31622314 376.70422363]
[113.99903107 361.61932373]
[121.19288635 348.27258301]
[133.51809692 339.33666992]
[130.93367004 324.56097412]
[128.34925842 309.78530884]
[125.76483154 295.00961304]
[123.18041229 280.23394775]
[111.20422363 267.46975708]
[117.52566528 250.22782898]
[114.57656860 235.52058411]
[105.49008179 230.56584167]
[100.57984924 221.20500183]
[101.71472931 210.47340393]
[108.75661469 202.00674438]
[106.53845978 187.17166138]
[104.32029724 172.33656311]
[94.78598785 160.89340210]
[100.39748383 146.10076904]
[98.17932892 131.26568604]
[95.96116638 116.43060303]
[88.88378906 129.65599060]
[74.76493835 134.72137451]
[60.89421082 129.01147461]
[54.43308640 115.47434998]
[58.71746445 101.09922791]
[71.53530884 93.30802155]
[86.27047729 96.12443542]
[76.13282776 85.06875610]
[65.99517822 74.01307678]
[50.19683075 73.57961273]
[39.39304733 62.04471588]
[39.99351883 46.25183868]
[51.64199448 35.57061386]
[67.42764282 36.33802414]
[77.98511505 48.09877396]
[77.05084991 63.87542725]
[87.18850708 74.93110657]
[97.32615662 85.98677826]
[104.71399689 84.69457245]
[102.12980652 69.91884613]
[116.90557098 67.33488464]
[119.48967743 82.11015320]
[126.87751770 80.81793976]
[132.66059875 66.97756195]
[138.44366455 53.13718796]
[144.22674561 39.29681015]
[150.00982666 25.45643425]
[155.79289246 11.61605644]
[161.57597351 -2.22432089]
[167.35905457 -16.06469917]
[173.14212036 -29.90507507]
[178.92520142 -43.74545288]
[172.69123840 -58.26830673]
[178.62988281 -72.91439819]
[193.21783447 -78.99446869]
[207.80032349 -72.90130615]
[213.72581482 -58.24988556]
[207.47882080 -43.73263550]
[192.76557922 -37.96237564]
[186.98249817 -24.12199974]
[181.19943237 -10.28162289]
[175.41635132 3.55875421]
[169.63327026 17.39913177]
[163.85020447 31.23950768]
[158.06712341 45.07988739]
[152.28404236 58.92026138]
[146.50097656 72.76064301]
[140.71789551 86.60102081]
[110.79624939 114.21244049]
[113.01441193 129.04753113]
[115.23257446 143.88261414]
[124.92553711 156.38688660]
[119.15538025 170.11840820]
[121.37354279 184.95349121]
[123.59170532 199.78857422]
[136.87496948 214.85661316]
[129.28379822 232.57148743]
[132.23289490 247.27873230]
[142.56335449 255.11846924]
[144.67047119 267.50668335]
[137.95610046 277.64950562]
[140.54051208 292.42520142]
[143.12493896 307.20086670]
[145.70935059 321.97656250]
[148.29377747 336.75225830]
[162.92039490 340.97402954]
[174.21751404 351.08648682]
[179.98013306 365.04400635]
[179.11479187 380.05773926]
[171.84658813 393.15289307]
[159.66395569 401.75805664]
[162.24838257 416.53375244]
[176.72007751 426.26953125]
[179.66847229 443.11898804]
[169.75990295 456.64761353]
[172.70899963 471.35482788]
[177.51220703 479.25384521]
[175.54441833 486.46209717]
[178.12882996 501.23779297]
[180.71325684 516.01348877]
[183.29766846 530.78912354]
[185.88209534 545.56481934]
[188.46650696 560.34051514]
[202.46247864 567.04071045]
[209.81756592 580.70385742]
[207.70356750 596.07629395]
[196.93338013 607.24688721]
[181.64836121 609.92041016]
[167.72590637 603.06878662]
[160.51947021 589.32659912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 119]
[2 118]
[3 117]
[4 116]
[5 115]
[6 114]
[7 112]
[8 111]
[12 108]
[13 107]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[25 94]
[26 93]
[30 91]
[31 90]
[32 89]
[34 87]
[35 86]
[36 85]
[43 54]
[44 53]
[45 52]
[59 84]
[60 83]
[61 82]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
