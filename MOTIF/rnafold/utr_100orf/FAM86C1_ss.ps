%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 05:24:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAAGGCUGAGGCCCCGCCCCCGUCAUGGCGCCCGAGGAGAACGCGGGGAGCGAACUCUUGCUGCAGAGUUUCAAGCGCCGCUUCCUGGCAGCGCGCGCCCUGCGCUCCUUCCGCUGGCAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[-96.92826080 466.00161743]
[-104.37464142 479.02279663]
[-111.82102203 492.04400635]
[-107.89044952 507.11676025]
[-115.62763214 520.21600342]
[-130.02143860 523.87036133]
[-137.46781921 536.89154053]
[-144.91418457 549.91271973]
[-144.30554199 566.30059814]
[-158.33551025 574.79125977]
[-172.57127380 566.65032959]
[-172.36828613 550.25244141]
[-157.93537903 542.46636963]
[-150.48899841 529.44512939]
[-143.04261780 516.42395020]
[-147.19250488 502.16513062]
[-139.82630920 488.85372925]
[-124.84221649 484.59762573]
[-117.39583588 471.57641602]
[-109.94945526 458.55523682]
[-119.21077728 441.46615601]
[-116.42217255 422.08703613]
[-102.51885986 408.10202026]
[-82.87673187 405.15795898]
[-76.75308990 391.46484375]
[-70.62945557 377.77175903]
[-64.50581360 364.07864380]
[-65.38734436 359.28472900]
[-63.18968964 353.89639282]
[-57.72576523 349.87152100]
[-50.93244553 336.49801636]
[-44.13912201 323.12448120]
[-48.20449829 313.60681152]
[-46.26213455 303.21627808]
[-38.72463608 295.49349976]
[-27.95215416 293.20739746]
[-20.50577545 280.18621826]
[-13.05939579 267.16503906]
[-5.61301708 254.14382935]
[1.83336246 241.12265015]
[9.27974224 228.10145569]
[8.87609768 223.24391174]
[11.59529686 218.09899902]
[17.43009758 214.63359070]
[25.51131248 201.99658203]
[33.59252548 189.35957336]
[41.67374039 176.72256470]
[49.75495529 164.08555603]
[57.83617020 151.44854736]
[65.91738129 138.81153870]
[66.25575256 123.92078400]
[80.20898438 116.46304321]
[88.29019928 103.82603455]
[92.50000000 89.42889404]
[92.50000000 74.42889404]
[92.50000000 59.42889786]
[92.50000000 44.42889786]
[92.50000000 29.42889595]
[92.50000000 14.42889690]
[92.50000000 -0.57110345]
[81.14886475 -11.56779385]
[80.98176575 -27.37119865]
[92.09785461 -38.60543823]
[107.90214539 -38.60543823]
[119.01823425 -27.37119865]
[118.85113525 -11.56779385]
[107.50000000 -0.57110345]
[107.50000000 14.42889690]
[107.50000000 29.42889595]
[107.50000000 44.42889786]
[107.50000000 59.42889786]
[107.50000000 74.42889404]
[107.50000000 89.42889404]
[113.81850433 93.46950531]
[127.13539886 86.56586456]
[126.45551300 101.55072021]
[132.77401733 105.59132385]
[146.39033508 99.29879761]
[160.00665283 93.00626373]
[173.62297058 86.71373749]
[182.90431213 73.90097046]
[197.70336914 75.58541870]
[211.31968689 69.29289246]
[224.93600464 63.00036240]
[233.94094849 49.29478455]
[250.29498291 50.51051331]
[257.17443848 65.39691162]
[247.50236511 78.64012909]
[231.22853088 76.61667633]
[217.61221313 82.90921021]
[203.99589539 89.20173645]
[195.68847656 101.56442261]
[179.91549683 100.33005524]
[166.29917908 106.62258148]
[152.68286133 112.91511536]
[139.06654358 119.20764160]
[100.92720795 111.90724945]
[92.84599304 124.54425812]
[91.92960358 140.33889771]
[78.55438995 146.89276123]
[70.47317505 159.52976990]
[62.39196396 172.16677856]
[54.31074905 184.80378723]
[46.22953415 197.44079590]
[38.14831924 210.07780457]
[30.06710625 222.71481323]
[22.30093384 235.54783630]
[14.85455418 248.56903076]
[7.40817499 261.59020996]
[-0.03820444 274.61141968]
[-7.48458385 287.63259888]
[-14.93096352 300.65377808]
[-13.83412361 320.71090698]
[-30.76561165 329.91781616]
[-37.55893326 343.29132080]
[-44.35225677 356.66482544]
[-50.81271362 370.20230103]
[-56.93635178 383.89538574]
[-63.05998993 397.58850098]
[-69.18363190 411.28158569]
[-61.95680618 419.37326050]
[-57.90192795 429.39450073]
[-57.47138214 440.15783691]
[-60.68974304 450.39736938]
[-67.15396118 458.91754150]
[-76.08361816 464.73284912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 20]
[2 19]
[3 18]
[6 15]
[7 14]
[8 13]
[24 120]
[25 119]
[26 118]
[27 117]
[30 116]
[31 115]
[32 114]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[41 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[52 98]
[53 97]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[77 96]
[78 95]
[79 94]
[80 93]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
