%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:47:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGGGGGGAGGGGCCGGGGCGGUGGCGGCUGUGGCCGGUACUGGACCCGGCGGGAUGAGCGAGGUGGAGGCGGCAGCGGGGGCUACAGCGGUCCCCGCGGCGACGGUGCCCGCGACGGCGGCAGGGGUGGUAGCGGUGGUGGUACCGGUGCCCG\
) } def
/len { sequence length } bind def

/coor [
[89.00850677 124.50939178]
[80.52468872 117.01016998]
[76.15943146 107.02738953]
[61.16239548 106.72915649]
[46.16535950 106.43092346]
[31.16832542 106.13269043]
[26.09907532 124.91179657]
[16.15672684 141.61759949]
[2.08365703 155.01405334]
[-15.07238674 164.11180115]
[-34.03628159 168.24119568]
[-53.40030670 167.10165405]
[-71.72864532 160.78349304]
[-87.66383362 149.76078796]
[-100.02731323 134.85580444]
[-107.90660095 117.17772675]
[-122.66706085 119.84769440]
[-137.42752075 122.51766968]
[-152.18798828 125.18763733]
[-166.94845581 127.85760498]
[-181.70890808 130.52757263]
[-195.44822693 142.74980164]
[-211.72283936 136.24685669]
[-226.42729187 139.20977783]
[-241.13175964 142.17268372]
[-255.83621216 145.13558960]
[-270.54067993 148.09851074]
[-282.54061890 158.40927124]
[-296.54547119 153.33840942]
[-311.24990845 156.30131531]
[-325.95437622 159.26422119]
[-340.65884399 162.22714233]
[-352.59698486 173.47047424]
[-368.22311401 168.49490356]
[-371.46240234 152.41885376]
[-358.98254395 141.77999878]
[-343.62176514 147.52267456]
[-328.91729736 144.55976868]
[-314.21282959 141.59684753]
[-299.50836182 138.63394165]
[-288.56018066 128.53509521]
[-273.50360107 133.39404297]
[-258.79913330 130.43113708]
[-244.09466553 127.46822357]
[-229.39021301 124.50531006]
[-214.68574524 121.54240417]
[-207.70387268 111.62232208]
[-195.43670654 109.05828857]
[-184.37887573 115.76710510]
[-169.61842346 113.09713745]
[-154.85795593 110.42716980]
[-140.09748840 107.75720215]
[-125.33702850 105.08723450]
[-110.57656860 102.41726685]
[-110.54022217 91.30969238]
[-108.77285004 80.34044647]
[-105.31668854 69.77770233]
[-100.25527191 59.87985992]
[-93.71142578 50.88920593]
[-85.84426117 43.02599335]
[-76.84532928 36.48303223]
[-66.93395996 31.42097855]
[-56.35188293 27.96437645]
[-45.35737610 26.19860268]
[-34.21893692 26.16774940]
[-23.20871925 27.87353516]
[-12.59590435 31.27523041]
[-2.64010739 36.29062653]
[6.41497421 42.79804230]
[14.34752083 50.63924026]
[20.96302795 59.62331772]
[26.09907532 69.53131866]
[29.62930870 80.12158203]
[31.46655655 91.13565063]
[46.46359253 91.43388367]
[61.46062851 91.73211670]
[76.45766449 92.03034973]
[90.75366211 73.71443939]
[116.60574341 73.97194672]
[122.96002960 60.38433838]
[129.31431580 46.79673004]
[135.66860962 33.20912552]
[142.02288818 19.62152100]
[148.37718201 6.03391409]
[154.73146057 -7.55369186]
[161.08575439 -21.14129829]
[167.44003296 -34.72890472]
[163.34336853 -50.24008560]
[173.03149414 -63.02756500]
[189.07254028 -63.28187943]
[199.16116333 -50.80794144]
[195.55825806 -35.17469025]
[181.02764893 -28.37461662]
[174.67335510 -14.78701019]
[168.31907654 -1.19940448]
[161.96478271 12.38820171]
[155.61050415 25.97580719]
[149.25621033 39.56341171]
[142.90191650 53.15102005]
[136.54763794 66.73862457]
[130.19334412 80.32623291]
[135.58743286 94.32279968]
[149.41691589 100.13186646]
[163.24639893 105.94093323]
[177.72990417 100.20806885]
[191.67222595 106.29629517]
[197.04838562 120.13943481]
[210.87786865 125.94850159]
[224.70735168 131.75756836]
[238.53684998 137.56663513]
[252.36633301 143.37570190]
[266.19583130 149.18476868]
[280.02529907 154.99383545]
[289.20477295 155.44049072]
[294.07015991 161.05833435]
[307.78143311 167.14122009]
[323.53359985 165.66499329]
[332.02972412 177.89877319]
[345.74099731 183.98164368]
[361.49316406 182.50543213]
[369.98928833 194.73919678]
[383.70056152 200.82208252]
[399.87585449 194.22917175]
[415.51821899 201.21205139]
[421.18212891 217.02127075]
[435.01159668 222.83035278]
[451.20407104 220.23500061]
[461.33657837 233.12934875]
[454.98565674 248.24880981]
[438.68460083 250.03976440]
[429.20254517 236.65983582]
[415.37304688 230.85076904]
[404.21209717 237.35299683]
[391.15057373 236.20567322]
[380.99652100 227.60537720]
[377.61767578 214.53334045]
[363.90643311 208.45045471]
[349.13494873 210.36177063]
[339.65811157 197.69290161]
[325.94686890 191.61003113]
[311.17538452 193.52133179]
[301.69854736 180.85247803]
[287.98730469 174.76959229]
[274.21624756 168.82333374]
[260.38674927 163.01426697]
[246.55726624 157.20520020]
[232.72776794 151.39611816]
[218.89828491 145.58705139]
[205.06880188 139.77798462]
[191.23931885 133.96891785]
[177.59036255 139.82058716]
[163.48254395 134.12637329]
[157.43733215 119.77042389]
[143.60784912 113.96135712]
[129.77835083 108.15229034]
[122.87522888 119.20919037]
[112.32205200 126.10570526]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[5 75]
[6 74]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[31 38]
[32 37]
[79 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[102 155]
[103 154]
[104 153]
[107 150]
[108 149]
[109 148]
[110 147]
[111 146]
[112 145]
[113 144]
[115 143]
[116 142]
[118 140]
[119 139]
[121 137]
[122 136]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
