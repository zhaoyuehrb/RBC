%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGGGUUUCGUUGACCCGCGGCGUUCACGGGAAUUGUUCGCUUUAGUGCCGGCGCCAUGGGGUCGGAGCUGAUCGGGCGCCUAGCCCCGCGCCUGGGCCUCGCCGAGCCCGACAUGCUGAGGAAAGCAGAGGAGUACUUGCGCCUGUCCCGGGUGA\
) } def
/len { sequence length } bind def

/coor [
[68.74934387 115.43933868]
[61.20714188 128.40525818]
[59.58284378 137.44668579]
[53.38916397 141.54853821]
[45.59540176 154.36482239]
[37.80164337 167.18112183]
[30.00788498 179.99740601]
[22.21412468 192.81369019]
[14.42036629 205.62998962]
[6.62660694 218.44627380]
[-1.16715252 231.26257324]
[1.21899712 247.12718201]
[-9.80186749 258.78564453]
[-25.77548218 257.29461670]
[-34.44825745 243.79785156]
[-29.16718102 228.64894104]
[-13.98344326 223.46881104]
[-6.18968439 210.65252686]
[1.60407495 197.83622742]
[9.39783382 185.01994324]
[17.19159317 172.20364380]
[24.98535347 159.38735962]
[32.77911377 146.57106018]
[40.57287216 133.75477600]
[48.24121857 120.86305237]
[55.78342819 107.89713287]
[61.52058792 97.60472107]
[69.25649261 90.45372772]
[77.84583282 86.72074127]
[86.14554596 86.32482910]
[93.11694336 88.84877777]
[97.91697693 93.58778381]
[102.24497986 79.22573090]
[106.57298279 64.86368561]
[110.90098572 50.50164032]
[107.47457123 35.05592346]
[118.55504608 25.10241508]
[122.88304901 10.74036980]
[127.21105194 -3.62167716]
[123.78463745 -19.06739616]
[134.86511230 -29.02090263]
[139.19311523 -43.38294983]
[143.52111816 -57.74499512]
[147.70880127 -72.14858246]
[151.75575256 -86.59234619]
[155.80270386 -101.03610229]
[159.84965515 -115.47985840]
[163.89660645 -129.92361450]
[154.87886047 -138.66389465]
[150.47752380 -150.34841919]
[151.47619629 -162.72180176]
[157.62242126 -173.42367554]
[167.68772888 -180.43901062]
[179.71269226 -182.47737122]
[184.32009888 -196.75222778]
[188.92750549 -211.02709961]
[193.53491211 -225.30195618]
[198.14231873 -239.57682800]
[189.16987610 -252.09886169]
[189.28982544 -267.32513428]
[198.24661255 -279.41809082]
[212.43690491 -283.86486816]
[217.04431152 -298.13973999]
[221.65171814 -312.41461182]
[226.25912476 -326.68945312]
[223.13473511 -342.19909668]
[234.40731812 -351.93450928]
[239.01472473 -366.20938110]
[243.62213135 -380.48425293]
[248.22953796 -394.75909424]
[236.71420288 -404.64205933]
[229.87834167 -418.14443970]
[228.73588562 -433.19464111]
[233.42985535 -447.49688721]
[243.21537781 -458.88143921]
[256.57766724 -465.63381958]
[271.46649170 -466.75280762]
[276.07391357 -481.02764893]
[280.68130493 -495.30252075]
[285.28872681 -509.57739258]
[289.89611816 -523.85223389]
[294.50354004 -538.12713623]
[299.11096191 -552.40197754]
[303.71835327 -566.67687988]
[294.46472168 -579.13275146]
[294.33343506 -594.64929199]
[303.37500000 -607.26000977]
[318.11273193 -612.11578369]
[332.87966919 -607.34954834]
[341.99765015 -594.79400635]
[341.96060181 -579.27697754]
[332.78277588 -566.76507568]
[317.99322510 -562.06945801]
[313.38580322 -547.79455566]
[308.77841187 -533.51971436]
[304.17098999 -519.24487305]
[299.56359863 -504.96997070]
[294.95617676 -490.69512939]
[290.34875488 -476.42025757]
[285.74136353 -462.14538574]
[297.16653442 -452.53320312]
[304.05984497 -439.24304199]
[305.34320068 -424.28585815]
[300.79000854 -409.93817139]
[291.06442261 -398.39578247]
[277.62466431 -391.43765259]
[262.50439453 -390.15170288]
[257.89700317 -375.87683105]
[253.28958130 -361.60195923]
[248.68217468 -347.32711792]
[252.13612366 -332.83850098]
[240.53399658 -322.08206177]
[235.92658997 -307.80718994]
[231.31916809 -293.53231812]
[226.71176147 -279.25744629]
[235.62472534 -267.35379028]
[235.82156372 -252.30636597]
[227.01725769 -239.88310242]
[212.41719055 -234.96942139]
[207.80978394 -220.69454956]
[203.20237732 -206.41969299]
[198.59497070 -192.14482117]
[193.98754883 -177.86994934]
[205.04185486 -164.14894104]
[205.69079590 -146.38421631]
[195.48895264 -131.63563538]
[178.34036255 -125.87667084]
[174.29341125 -111.43290710]
[170.24645996 -96.98915100]
[166.19950867 -82.54539490]
[162.15255737 -68.10163116]
[163.38229370 -60.77533722]
[157.88316345 -53.41699219]
[153.55516052 -39.05494690]
[149.22715759 -24.69289780]
[152.96315002 -10.27444935]
[141.57310486 0.70632720]
[137.24510193 15.06837368]
[132.91709900 29.43041992]
[136.65307617 43.84886932]
[125.26303101 54.82964706]
[120.93502808 69.19169617]
[116.60702515 83.55374146]
[112.27902222 97.91578674]
[112.71800232 112.90936279]
[117.87885284 126.99359131]
[123.03970337 141.07781982]
[128.20054626 155.16206360]
[133.36140442 169.24629211]
[138.52224731 183.33052063]
[149.64901733 196.12237549]
[140.43727112 210.35543823]
[124.21037292 205.44380188]
[124.43801880 188.49137878]
[119.27716827 174.40715027]
[114.11631775 160.32290649]
[108.95546722 146.23867798]
[103.79461670 132.15444946]
[98.63376617 118.07021332]
[91.16265869 117.41249084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[11 17]
[32 144]
[33 143]
[34 142]
[35 141]
[37 139]
[38 138]
[39 137]
[41 135]
[42 134]
[43 133]
[44 131]
[45 130]
[46 129]
[47 128]
[48 127]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[62 115]
[63 114]
[64 113]
[65 112]
[67 110]
[68 109]
[69 108]
[70 107]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[145 159]
[146 158]
[147 157]
[148 156]
[149 155]
[150 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
