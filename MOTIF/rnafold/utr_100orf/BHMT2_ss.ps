%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCUCCUAGACGGCCGCGCGCCCGGGAACCCGGCGCCCACAGAGCCGCGGCACCAUGGCACCUGCUGGACGCCCGGGGGCCAAGAAGGGGAUUUUGGAGCGCCUGGAGAGUGGGGAGGUUGUGAUUGGAGAUGGCAGCUUUCUCAUUACUCUGG\
) } def
/len { sequence length } bind def

/coor [
[97.93000031 117.14474487]
[89.84292603 129.77799988]
[81.75585175 142.41125488]
[73.66877747 155.04452515]
[65.58170319 167.67778015]
[64.65798950 183.47200012]
[51.27973938 190.01965332]
[43.19266510 202.65290833]
[42.79915619 221.03886414]
[26.95749664 228.53776550]
[19.12001801 241.32737732]
[21.45198059 257.20004272]
[10.39136887 268.82080078]
[-5.57706022 267.27523804]
[-14.20369530 253.74893188]
[-8.87092113 238.61813354]
[6.33041620 233.48989868]
[14.16789436 220.70028687]
[11.65203094 208.83506775]
[18.12056923 198.10324097]
[30.55940628 194.56582642]
[38.64648056 181.93257141]
[38.99175262 167.04197693]
[52.94844437 159.59069824]
[61.03551865 146.95744324]
[69.12259674 134.32418823]
[77.20967102 121.69092560]
[85.29674530 109.05767059]
[83.08549500 90.67327881]
[99.76861572 78.63952637]
[88.36252594 68.89780426]
[72.82138062 69.95169830]
[61.39276123 59.90972519]
[60.48380661 45.08712769]
[49.07771683 35.34540939]
[37.67162704 25.60368729]
[26.26553917 15.86196709]
[14.85944939 6.12024641]
[3.35827184 -3.50902772]
[-8.23688507 -13.02492714]
[-23.81305313 -15.79864979]
[-28.74287605 -29.85375977]
[-40.33803177 -39.36965942]
[-51.93318939 -48.88555908]
[-63.62120819 -58.28716660]
[-75.40096283 -67.57357788]
[-87.18071747 -76.85998535]
[-105.43956757 -79.05373383]
[-111.34960938 -95.55413818]
[-123.30942535 -104.60747528]
[-135.26922607 -113.66081238]
[-147.22903442 -122.71414948]
[-162.03829956 -118.08108521]
[-176.73171997 -123.06941223]
[-185.65934753 -135.76103210]
[-185.38835144 -151.27574158]
[-176.02293396 -163.64782715]
[-161.16427612 -168.11996460]
[-146.52584839 -162.97253418]
[-137.73641968 -150.18481445]
[-138.17570496 -134.67396545]
[-126.21589661 -125.62062073]
[-114.25608063 -116.56728363]
[-102.29627228 -107.51394653]
[-90.24158478 -108.85469818]
[-80.19545746 -101.36540222]
[-77.89431000 -88.63973999]
[-66.11455536 -79.35332489]
[-54.33480072 -70.06691742]
[-47.09745407 -68.38684082]
[-42.41728973 -60.48071671]
[-30.82213402 -50.96481705]
[-19.22697830 -41.44891739]
[-4.48017216 -39.35583496]
[1.27901423 -24.62008476]
[12.87417126 -15.10418415]
[20.07713509 -13.28233624]
[24.60116959 -5.28584337]
[36.00725937 4.45587730]
[47.41334915 14.19759846]
[58.81943893 23.93931961]
[70.22552490 33.68103790]
[85.00782776 32.26004028]
[96.71399689 41.97704315]
[98.10424805 57.49171448]
[109.51033783 67.23343658]
[100.82654572 55.00265884]
[95.68173218 40.91256332]
[94.44132233 25.96393776]
[97.19341278 11.21856499]
[103.74253845 -2.27621102]
[113.62351227 -13.56187820]
[126.13451385 -21.83683205]
[140.38690186 -26.51331520]
[155.36834717 -27.25916290]
[170.01473999 -24.02140045]
[183.28578186 -17.02999878]
[194.23883057 -6.78154850]
[202.09591675 5.99601793]
[206.29895020 20.39513016]
[206.54942322 35.39303970]
[202.82952881 49.92446518]
[195.40348816 62.95726395]
[184.79875183 73.56573486]
[171.76856995 80.99637604]
[157.23844910 84.72138977]
[142.24046326 84.47621155]
[127.84217834 80.27925873]
[140.78318787 87.86412048]
[153.72421265 95.44898224]
[166.66522217 103.03384399]
[179.60623169 110.61870575]
[192.54725647 118.20356750]
[205.56210327 125.66101074]
[218.64955139 132.99032593]
[231.73698425 140.31965637]
[244.82443237 147.64897156]
[257.91186523 154.97828674]
[270.99929810 162.30760193]
[284.08676147 169.63693237]
[297.17419434 176.96624756]
[310.26162720 184.29556274]
[323.34906006 191.62487793]
[336.43652344 198.95419312]
[349.52395630 206.28352356]
[362.61138916 213.61283875]
[375.69882202 220.94215393]
[391.52005005 220.93444824]
[398.84393311 233.90402222]
[411.93136597 241.23335266]
[425.01879883 248.56266785]
[441.79275513 251.02659607]
[444.06860352 267.82708740]
[428.55468750 274.66485596]
[417.68948364 261.65011597]
[404.60205078 254.32078552]
[391.51458740 246.99147034]
[376.62948608 247.52342224]
[368.36950684 234.02960205]
[355.28207397 226.70027161]
[342.19464111 219.37095642]
[329.10717773 212.04164124]
[316.01974487 204.71232605]
[302.93231201 197.38301086]
[289.84487915 190.05368042]
[276.75744629 182.72436523]
[263.66998291 175.39505005]
[250.58255005 168.06573486]
[237.49511719 160.73640442]
[224.40766907 153.40708923]
[211.32023621 146.07777405]
[198.23278809 138.74845886]
[190.82173157 138.22123718]
[184.96238708 131.14457703]
[172.02137756 123.55972290]
[159.08036804 115.97486115]
[146.13934326 108.38999939]
[133.19833374 100.80513763]
[120.25731659 93.22027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[7 22]
[8 21]
[10 18]
[11 17]
[30 86]
[31 85]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 76]
[40 75]
[42 73]
[43 72]
[44 71]
[45 69]
[46 68]
[47 67]
[49 64]
[50 63]
[51 62]
[52 61]
[108 159]
[109 158]
[110 157]
[111 156]
[112 155]
[113 154]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 146]
[121 145]
[122 144]
[123 143]
[124 142]
[125 141]
[126 140]
[127 139]
[129 137]
[130 136]
[131 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
