#                 point.padding = unit(0.2, 'lines'))+
scale_fill_manual(name = '',
values = c(label='blue'))+
guides(colour = F)+
###add gene labels for particular group from list_of_genes
geom_text_repel(data = subset(res_tableDE, ((log2FoldChange > 1 | log2FoldChange < -1) & -log10(padj) > 17)),
#data = subset(res_tableDE, SYMBOL %in% c('Htra2','Tomm7','Sqstm1')), #for rna autophagy
aes(label = SYMBOL), size = 3,
box.padding = unit(0.4, 'lines'),
point.padding = unit(0.4, 'lines'),
segment.size = 0.2, segment.colour = 'grey50')+
theme_bw() +
ggtitle(paste(type,day,sep = '')) +
xlab(bquote(~log[2]~ "FC")) +
ylab(bquote(~-log[10]~italic(p-adj)))+
theme(legend.position = c(0.15,0.9),
#legend.position = 'none',
legend.title = element_blank(),
legend.background = element_rect(color = 'black',size = 0.5,linetype= 'solid'),
legend.text = element_text(size = 12),
plot.title = element_text(size = rel(1.5),hjust = 0.5),
axis.title = element_text(size = rel(1.25)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size=14))
save_dir <- '/Users/Yue/Documents/HGLab/deseq_yue/combined_design/volc_plots/'
#filepath <- paste(save_dir,folder_label,'/',type,toString(day),'.png',sep = '')
filepath <- paste(save_dir,'/',type,'.png',sep = '')
ggsave(filepath,width = 9, height = 7)
}
plot_volcano(res_0_L24,'L24_0',10000,c(),'','',xlims=c(-5,5), ylims=c(0,10))
###function to compare different combinations of factors
filter_sig_res <- function(dds, factors) {
res_df <- results(dds, contrast = (factors),test = "Wald",alpha = alpha,cooksCutoff = FALSE,independentFiltering = FALSE)
summary(res_df)
res_df <- na.omit(res_df)
# #
# res_df$SYMBOL <- mapIds(org.Mm.eg.db,
#                         keys = as.character(rownames(res_df)),
#                         column = 'SYMBOL',
#                         keytype = 'ACCNUM',
#                         multiVals = 'first')
# ###remove statistically insignificant genes
# res_df <- res_df[res_df$padj<alpha,]
# res_df <- data.frame(ACCNUM=row.names(data.frame(res_df)), res_df,row.names = NULL)
# # #
# ###select columns Accnum and Log2FC
# res_df <- res_df[,c("ACCNUM","log2FoldChange")]
# res_df <- data.frame(res_df, row.names=NULL)
# #
# # ###select AccNum, log2FC and padj
# # res_df <- data.frame(ACCNUM = row.names(data.frame(res_df)), res_df, row.names = NULL)
# # res_df <- res_df[,c("ACCNUM","log2FoldChange","padj")]
###add symbol and select padj
# res_df <- data.frame(res_df)
# rownames(res_df) <- NULL
# res_df <- res_df[,c("SYMBOL","log2FoldChange")]
}
res_1_L24 <- filter_sig_res(dds,c("combined","L241","RPF1"))
library(DESeq2)
library(IHW)
#load read count table
#df_te <- read.table('/dir', sep = '\t',header = T) # dir = path where df_te is stored
df_te <- read.table('/Users/Yue/Documents/HGLab/deseq_yue/combined_design/Fil10_BioRep_ReadCounts.txt', sep = '\t',header = T)
rownames(df_te) <- df_te[,1]
df_te[,1]<-NULL
###call design matrix
colData = read.table('/Users/Yue/Documents/HGLab/deseq_yue/combined_design/combined_design.txt',sep='\t',header=TRUE) # dir = path where de_te_design is stored
###deseq analysis
###use a design formula that models the assay different at t0, the diff over time,
###and any assay-specific differences over time (the interaction term assay:time)
design = ~ combined
#colData$assay <- factor(colData$assay, levels = c("RPF0")) #"RNA"))
dds <- DESeqDataSetFromMatrix(countData = df_te, colData = colData,design = design)
#run DESeq
dds <- DESeq(dds)
alpha <- 0.05
res <- results(dds,alpha = alpha)
#res <- results(dds,alpha = alpha, filterFun = IHW)
resultsNames(dds)
test_design <- model.matrix(design, colData)
###function to compare different combinations of factors
filter_sig_res <- function(dds, factors) {
res_df <- results(dds, contrast = (factors),test = "Wald",alpha = alpha,cooksCutoff = FALSE,independentFiltering = FALSE)
summary(res_df)
res_df <- na.omit(res_df)
# #
# res_df$SYMBOL <- mapIds(org.Mm.eg.db,
#                         keys = as.character(rownames(res_df)),
#                         column = 'SYMBOL',
#                         keytype = 'ACCNUM',
#                         multiVals = 'first')
# ###remove statistically insignificant genes
# res_df <- res_df[res_df$padj<alpha,]
# res_df <- data.frame(ACCNUM=row.names(data.frame(res_df)), res_df,row.names = NULL)
# # #
# ###select columns Accnum and Log2FC
# res_df <- res_df[,c("ACCNUM","log2FoldChange")]
# res_df <- data.frame(res_df, row.names=NULL)
# #
# # ###select AccNum, log2FC and padj
# # res_df <- data.frame(ACCNUM = row.names(data.frame(res_df)), res_df, row.names = NULL)
# # res_df <- res_df[,c("ACCNUM","log2FoldChange","padj")]
###add symbol and select padj
# res_df <- data.frame(res_df)
# rownames(res_df) <- NULL
# res_df <- res_df[,c("SYMBOL","log2FoldChange")]
}
res_0_L24 <- filter_sig_res(dds,c("combined","L240","RPF0"))
View(res_0_L24)
res_0_S15 <- filter_sig_res(dds,c("combined","S150","RPF0"))
res_1_S15 <- filter_sig_res(dds,c("combined","S151","RPF1"))
res_2_S15 <- filter_sig_res(dds,c("combined","S152","RPF2"))
?results
View(test_design)
resultsNames(dds)
dds <- makeExampleDESeqDataSet(m=4)
dds <- DESeq(dds)
resultsNames(dds)
View(dds)
dds <- makeExampleDESeqDataSet(n=100,m=12)
dds$genotype <- factor(rep(rep(c("I","II"),each=3),2))
design(dds) <- ~ genotype + condition + genotype:condition
dds <- DESeq(dds)
resultsNames(dds)
View(dds.design)
names(dds.design)
names(dds)
levels(dds)
View(dds)
View(dds$condition)
View(dds$design)
View(dds$genotype)
test_design <- model.matrix(design)
test_design <- model.matrix(design)
test_design <- model.matrix(dds$design)
View(dds)
View(test_design)
log10(0,05)
log10(0.05)
log10(0.04)
log10(0.1)
assay
assay(dds)
assay(res)
res
View(df_te)
BiocManager::install("DiffLogo")
vinegge("DiffLogo")
vignett("DiffLogoBasics")
vignette("DiffLogoBasics")
BiocManager::install("seqLogo")
library(DiffLogo)
library(seqLogo)
library(MotifDb)
BiocManager::install("MotifDb")
> list = as.list(MotifDb[hitIndeces])
> ## import motifs
hitIndeces = grep ('CTCF', values (MotifDb)$geneSymbol, ignore.case=TRUE)
list = as.list(MotifDb[hitIndeces])
library(MotifDb)
> ## import motifs
hitIndeces = grep ('CTCF', values (MotifDb)$geneSymbol, ignore.case=TRUE)
> ## import motifs
hitIndeces = grep ('CTCF', values(MotifDb)$geneSymbol, ignore.case=TRUE)
list = as.list(MotifDb[hitIndeces])
sequenceCounts = as.numeric(values (MotifDb)$sequenceCount[hitIndeces])
names(sequenceCounts) = names(list)
pwm1 = reverseComplement(list$"Hsapien
library(DiffLogo)
library(seqLogo)
library(MotifDb)
> ## import motifs
hitIndeces = grep ('CTCF', values(MotifDb)$geneSymbol, ignore.case=TRUE)
list = as.list(MotifDb[hitIndeces])
sequenceCounts = as.numeric(values (MotifDb)$sequenceCount[hitIndeces])
names(sequenceCounts) = names(list)
pwm1 = reverseComplement(list$"Hsapien
> ## import motifs
hitIndeces = grep('CTCF', values(MotifDb)$geneSymbol, ignore.case=TRUE)
MotifDb$geneSymbol
library(MotifDb)
library(MotifDb)
--version
R --version
version
library(DiffLogo)
library(seqLogo)
library(MotifDb)
> ## import motifs
hitIndeces = grep ('CTCF', values (MotifDb)$geneSymbol, ignore.case=TRUE)
list = as.list(MotifDb[hitIndeces])
sequenceCounts = as.numeric(values (MotifDb)$sequenceCount[hitIndeces])
names(sequenceCounts) = names(list)
pwm1 = reverseComplement(list$"Hsapien
pwm1 = reverseComplement(list$"Hsapiens-JASPAR_CORE-CTCF-MA0139.1"[, 2:18]) ## > pwm2 = list$"Hsapiens-jolma2013-CTCF"
pwm1 = reverseComplement(list$"Hsapiens-JASPAR_CORE-CTCF-MA0139.1"[, 2:18]) ## > pwm2 = list$"Hsapiens-jolma2013-CTCF"
n1 = sequenceCounts["Hsapiens-JASPAR_CORE-CTCF-MA0139.1"]
n2 = sequenceCounts["Hsapiens-jolma2013-CTCF"]
## DiffLogo can also handle motifs of different length
pwm_long = reverseComplement(list$"Hsapiens-JASPAR_CORE-CTCF-MA0139.1") ## reverse > pwm_short = list$"Hsapiens-jolma2013-CTCF"
View(pwm1)
> ## plot custom sequence logo
par(mfrow=c(2,1), pin=c(3, 1), mar = c(2, 4, 1, 1))
DiffLogo::seqLogo(pwm = pwm1)
DiffLogo::seqLogo(pwm = pwm2, stackHeight = sumProbabilities)
par(mfrow=c(1,1), pin=c(1, 1), mar=c(5.1, 4.1, 4.1, 2.1))
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## diffLogoFromPwm is a convenience function for
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## import five DNA motifs from matrix
motif_folder = "extdata/pwm"
motif_names_dna = c("H1-hESC", "MCF7", "HeLa-S3", "HepG2", "HUVEC")
motifs_dna = list()
for (name in motif_names_dna) {
fileName = paste(motif_folder,"/",name,".pwm",sep="")
file = system.file(fileName, package = "DiffLogo")
motifs_dna[[name]] = getPwmFromPwmFile(file)
}
sampleSizes_dna = c("H1-hESC"=100, "MCF7"=100, "HeLa-S3"=100, "HepG2"=100, "HUVEC"=100)
> ## import three DNA motifs from table
motif_folder = "extdata/alignments"
motif_names_dna2 = c("Mad", "Max", "Myc")
motifs_dna2 = list()
> for (name in motif_names_dna2) {
fileName = paste(motif_folder,"/",name,".txt",sep="")
file = system.file(fileName, package = "DiffLogo")
motifs_dna2[[name]] = getPwmFromAlignmentFile(file)
}
for (name in motif_names_dna2) {
fileName = paste(motif_folder,"/",name,".txt",sep="")
file = system.file(fileName, package = "DiffLogo")
motifs_dna2[[name]] = getPwmFromAlignmentFile(file)
}
> ## plot custom sequence logo
par(mfrow=c(2,1), pin=c(3, 1), mar = c(2, 4, 1, 1))
DiffLogo::seqLogo(pwm = pwm1)
DiffLogo::seqLogo(pwm = pwm2, stackHeight = sumProbabilities)
par(mfrow=c(1,1), pin=c(1, 1), mar=c(5.1, 4.1, 4.1, 2.1))
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## diffLogoFromPwm is a convenience function for
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
diffLogo(diffLogoObj)
> ## mark symbol stacks with significant changes
diffLogoObj = enrichDiffLogoObjectWithPvalues(diffLogoObj, n1, n2)
diffLogo(diffLogoObj)
> ## plot DiffLogo for PWMs of different length
diffLogoFromPwm(pwm1 = pwm_long, pwm2 = pwm_short, align_pwms=TRUE)
DiffLogo::seqLogo(pwm = pwm1)
DiffLogo::seqLogo(pwm = pwm2, stackHeight = sumProbabilities)
pwm2 = list$"Hsapiens-jolma2013-CTCF"
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## diffLogoFromPwm is a convenience function for
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
diffLogo(diffLogoObj)
> ## mark symbol stacks with significant changes
diffLogoObj = enrichDiffLogoObjectWithPvalues(diffLogoObj, n1, n2)
View(pwm1)
View(pwm2)
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
> ## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
## plot DiffLogo
diffLogoFromPwm(pwm1 = pwm1, pwm2 = pwm2)
View(diffLogoObj)
View(diffLogoObj)
diffLogo(diffLogoObj)
diffLogo(diffLogoObj)
## mark symbol stacks with significant changes
diffLogoObj = enrichDiffLogoObjectWithPvalues(diffLogoObj, n1, n2)
diffLogo(diffLogoObj)
## diffLogoFromPwm is a convenience function for
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
diffLogo(diffLogoObj)
View(diffLogoObj)
library(DiffLogo)
library(seqLogo)
library(MotifDb)
pw1 = read.csv('deseq_wo_replace/pwms/ER_L24_t1/ER_L24_t1_enriched.csv',row.names=1)
setwd('Documents/HGLab_new/RBC/MOTIF/SeqLogo/')
pw1 = read.csv('deseq_wo_replace/pwms/ER_L24_t1/ER_L24_t1_enriched.csv',row.names=1)
pw2 = read.csv('deseq_wo_replace/pwms/ER_L24_t1/ER_L24_t1_depleted.csv',row.names=1)
diffLogoObj = createDiffLogoObject(pwm1 = pw1, pwm2 = pw2)
diffLogo(diffLogoObj)
fileName = "test.png"
png(filename = fileName)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2
resolution = 100
width = size * widthToHeightRatio
height = size
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
resolution = 300
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
resolution = 30
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
resolution = 3
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 10
resolution = 100
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 20
resolution = 100
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 5
resolution = 100
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 5
resolution = 40
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
pw1 = read.csv(paste(dir,batch,'/',batch,'_enriched.csv'),row.names=1)
dir <- 'deseq_wo_replace/pwms/'
batch <- 'ER_L24_t1'
pw1 = read.csv(paste(dir,batch,'/',batch,'_enriched.csv'),row.names=1)
pw1 = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',''),row.names=1)
pw1 = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',sep=''),row.names=1)
pw_de = read.csv(paste(dir,batch,'/',batch,'_depleted.csv',sep=''),row.names=1)
pw_bg = read.csv(paste(dir,batch,'/',batch,'bg.csv',sep=''),row.names=1)
pw_bg = read.csv(paste(dir,batch,'/bg.csv',sep=''),row.names=1)
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pw1, pwm2 = pw2)
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = "test.png"
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = paste(dir,batch,'/',compare,'.png',sep='')
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot(pwm1 = pwm_en,pwm2 = pwm_de,compare = 'enrich vs deplete')
pwm_en = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',sep=''),row.names=1)
pwm_de = read.csv(paste(dir,batch,'/',batch,'_depleted.csv',sep=''),row.names=1)
pwm_bg = read.csv(paste(dir,batch,'/bg.csv',sep=''),row.names=1)
pwm_left = read.csv(paste(dir,batch,'/',batch,'_leftstd_comb50',sep=''),row.names=1)
pwm_mid = read.csv(paste(dir,batch,'/',batch,'_median_comb50',sep=''),row.names=1)
pwm_left = read.csv(paste(dir,batch,'/',batch,'_leftstd_comb50.csv',sep=''),row.names=1)
pwm_mid = read.csv(paste(dir,batch,'/',batch,'_median_comb50.csv',sep=''),row.names=1)
pwm_right = read.csv(paste(dir,batch,'/',batch,'_rightstd_comb50.csv',sep=''),row.names=1)
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = paste(dir,batch,'/',compare,'.png',sep='')
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot(pwm1 = pwm_en,pwm2 = pwm_de,compare = 'enrich vs deplete')
createPlot(pwm1 = pwm_en,pwm2 = pwm_bg,compare = 'enrich vs background')
createPlot(pwm1 = pwm_en,pwm2 = pwm_left,compare = 'enrich vs left')
createPlot(pwm1 = pwm_en,pwm2 = pwm_mid,compare = 'enrich vs mode')
createPlot(pwm1 = pwm_en,pwm2 = pwm_right,compare = 'enrich vs right')
dir.create(file.path('difflogo/ER_L24_t1'), showWarnings = FALSE)
dir.create(file.path(getwd(),'difflogo/ER_L24_t1'), showWarnings = FALSE)
dir.create(file.path(getwd(),'difflogo/ER_L24_t1'))
dir.create(file.path(getwd(),'difflogo/ER_L24_t1'))
dir.create(file.path(getwd(),'difflogo/','ER_L24_t1'), showWarnings = FALSE)
dir.create(file.path(getwd(),'difflogo/','ER_L24_t1'), showWarnings = FALSE)
dir.create(file.path(getwd(),'difflogo/','ER_L24_t1'), showWarnings = FALSE)
dir.create(file.path(getwd(),'difflogo/',batch), showWarnings = FALSE)
pwm_en = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',sep=''),row.names=1)
pwm_de = read.csv(paste(dir,batch,'/',batch,'_depleted.csv',sep=''),row.names=1)
pwm_bg = read.csv(paste(dir,batch,'/bg.csv',sep=''),row.names=1)
pwm_left = read.csv(paste(dir,batch,'/',batch,'_leftstd_comb50.csv',sep=''),row.names=1)
pwm_mid = read.csv(paste(dir,batch,'/',batch,'_median_comb50.csv',sep=''),row.names=1)
pwm_right = read.csv(paste(dir,batch,'/',batch,'_rightstd_comb50.csv',sep=''),row.names=1)
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
#diffLogoObj$ylim.negMax=-0.005
#diffLogoObj$ylim.posMax=0.005
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = paste('difflogo/',batch,'/',compare,'.png',sep='')
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot(pwm1 = pwm_en,pwm2 = pwm_de,compare = 'enrich vs deplete')
createPlot(pwm1 = pwm_en,pwm2 = pwm_bg,compare = 'enrich vs background')
createPlot(pwm1 = pwm_en,pwm2 = pwm_left,compare = 'enrich vs left')
createPlot(pwm1 = pwm_en,pwm2 = pwm_mid,compare = 'enrich vs mode')
createPlot(pwm1 = pwm_en,pwm2 = pwm_right,compare = 'enrich vs right')
batches <- clist <- c("ER_L24_t1", "ER_S15_t0","ER_S15_t1","ER_S15_t2")
for (batch in batches) {
dir.create(file.path(getwd(),'difflogo/',batch), showWarnings = FALSE)
pwm_en = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',sep=''),row.names=1)
pwm_de = read.csv(paste(dir,batch,'/',batch,'_depleted.csv',sep=''),row.names=1)
pwm_bg = read.csv(paste(dir,batch,'/bg.csv',sep=''),row.names=1)
pwm_left = read.csv(paste(dir,batch,'/',batch,'_leftstd_comb50.csv',sep=''),row.names=1)
pwm_mid = read.csv(paste(dir,batch,'/',batch,'_median_comb50.csv',sep=''),row.names=1)
pwm_right = read.csv(paste(dir,batch,'/',batch,'_rightstd_comb50.csv',sep=''),row.names=1)
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
#diffLogoObj$ylim.negMax=-0.005
#diffLogoObj$ylim.posMax=0.005
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = paste('difflogo/',batch,'/',compare,'.png',sep='')
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot(pwm1 = pwm_en,pwm2 = pwm_de,compare = 'enrich vs deplete')
createPlot(pwm1 = pwm_en,pwm2 = pwm_bg,compare = 'enrich vs background')
createPlot(pwm1 = pwm_en,pwm2 = pwm_left,compare = 'enrich vs left')
createPlot(pwm1 = pwm_en,pwm2 = pwm_mid,compare = 'enrich vs mode')
createPlot(pwm1 = pwm_en,pwm2 = pwm_right,compare = 'enrich vs right')
}
for (batch in batches) {
dir.create(file.path(getwd(),'difflogo/',batch), showWarnings = FALSE)
pwm_en = read.csv(paste(dir,batch,'/',batch,'_enriched.csv',sep=''),row.names=1)
pwm_de = read.csv(paste(dir,batch,'/',batch,'_depleted.csv',sep=''),row.names=1)
pwm_bg = read.csv(paste(dir,batch,'/bg.csv',sep=''),row.names=1)
pwm_left = read.csv(paste(dir,batch,'/',batch,'_leftstd_comb50.csv',sep=''),row.names=1)
pwm_mid = read.csv(paste(dir,batch,'/',batch,'_median_comb50.csv',sep=''),row.names=1)
pwm_right = read.csv(paste(dir,batch,'/',batch,'_rightstd_comb50.csv',sep=''),row.names=1)
createPlot <- function(pwm1,pwm2,compare) {
diffLogoObj = createDiffLogoObject(pwm1 = pwm1, pwm2 = pwm2)
#diffLogoObj$ylim.negMax=-0.005
#diffLogoObj$ylim.posMax=0.005
widthToHeightRatio = 16/10
size = length(pw1) * 2 / 4
resolution = 200
width = size * widthToHeightRatio
height = size
fileName = paste('difflogo/',batch,'/',batch,'_',compare,'.png',sep='')
png(filename = fileName, res = resolution,width = width * resolution, height = height * resolution)
diffLogoFromPwm(pwm1 = pw1, pwm2 = pw2)
dev.off()
}
createPlot(pwm1 = pwm_en,pwm2 = pwm_de,compare = 'enrich vs deplete')
createPlot(pwm1 = pwm_en,pwm2 = pwm_bg,compare = 'enrich vs background')
createPlot(pwm1 = pwm_en,pwm2 = pwm_left,compare = 'enrich vs left')
createPlot(pwm1 = pwm_en,pwm2 = pwm_mid,compare = 'enrich vs mode')
createPlot(pwm1 = pwm_en,pwm2 = pwm_right,compare = 'enrich vs right')
}
